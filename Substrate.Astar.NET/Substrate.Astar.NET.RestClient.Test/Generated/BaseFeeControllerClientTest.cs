//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Astar.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Astar.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Astar.NET.RestClient.Generated.Clients;
   using Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.Astar.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things;
   
   public class BaseFeeControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.U256 GetTestValue2()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.U256 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.U256();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr4U64();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U64[] {
                  this.GetTestValueU64(),
                  this.GetTestValueU64(),
                  this.GetTestValueU64(),
                  this.GetTestValueU64()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBaseFeePerGas()
      {
         // Construct new Mockup client to test with.
         BaseFeeControllerMockupClient mockupClient = new BaseFeeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BaseFeeControllerClient rpcClient = new BaseFeeControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.U256 mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeBaseFeePerGas());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBaseFeePerGas(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.U256 rpcResult = await rpcClient.GetBaseFeePerGas();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill GetTestValue4()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestElasticity()
      {
         // Construct new Mockup client to test with.
         BaseFeeControllerMockupClient mockupClient = new BaseFeeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BaseFeeControllerClient rpcClient = new BaseFeeControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill mockupValue = this.GetTestValue4();


         Assert.IsTrue(await rpcClient.SubscribeElasticity());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetElasticity(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill rpcResult = await rpcClient.GetElasticity();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
