//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Astar.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Astar.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Astar.NET.RestClient.Generated.Clients;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking;
   using Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime;
   
   public class DappsStakingControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPalletDisabled()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();


         Assert.IsTrue(await rpcClient.SubscribePalletDisabled());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPalletDisabled(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetPalletDisabled();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger GetTestValue3()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger();
         result.Locked = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Locked.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         result.UnbondingInfo = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnbondingInfo();
         result.UnbondingInfo = this.GetTestValue4();
         result.RewardDestination = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumRewardDestination();
         result.RewardDestination.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardDestination>());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnbondingInfo GetTestValue4()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnbondingInfo result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnbondingInfo();
         result.UnlockingChunks = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnlockingChunk>();
         result.UnlockingChunks.Create(new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnlockingChunk[] {
                  this.GetTestValue5()});
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnlockingChunk GetTestValue5()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnlockingChunk result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.UnlockingChunk();
         result.Amount = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Amount.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         result.UnlockEra = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.UnlockEra.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU32().Value));
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue6()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLedger()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger mockupValue = this.GetTestValue3();
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 mockupKey = this.GetTestValue6();

         Assert.IsTrue(await rpcClient.SubscribeLedger(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLedger(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.AccountLedger rpcResult = await rpcClient.GetLedger(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCurrentEra()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeCurrentEra());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCurrentEra(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetCurrentEra();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo GetTestValue9()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo();
         result.Stakers = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Stakers.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         result.Dapps = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Dapps.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBlockRewardAccumulator()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo mockupValue = this.GetTestValue9();


         Assert.IsTrue(await rpcClient.SubscribeBlockRewardAccumulator());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBlockRewardAccumulator(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo rpcResult = await rpcClient.GetBlockRewardAccumulator();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing GetTestValue11()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing();
         result.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.Forcing>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestForceEra()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing mockupValue = this.GetTestValue11();


         Assert.IsTrue(await rpcClient.SubscribeForceEra());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetForceEra(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumForcing rpcResult = await rpcClient.GetForceEra();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNextEraStartingBlock()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeNextEraStartingBlock());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNextEraStartingBlock(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetNextEraStartingBlock();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract GetTestValue14()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract();
         result.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.SmartContract>(), this.GetTestValue15());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 GetTestValue15()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue16()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRegisteredDevelopers()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract mockupValue = this.GetTestValue14();
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 mockupKey = this.GetTestValue16();

         Assert.IsTrue(await rpcClient.SubscribeRegisteredDevelopers(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRegisteredDevelopers(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract rpcResult = await rpcClient.GetRegisteredDevelopers(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo GetTestValue18()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo();
         result.Developer = new Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Developer = this.GetTestValue19();
         result.State = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumDAppState();
         result.State.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppState>(), this.GetTestValueBaseVoid());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue19()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract GetTestValue20()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract();
         result.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.SmartContract>(), this.GetTestValue21());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 GetTestValue21()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRegisteredDapps()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo mockupValue = this.GetTestValue18();
         Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract mockupKey = this.GetTestValue20();

         Assert.IsTrue(await rpcClient.SubscribeRegisteredDapps(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRegisteredDapps(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.DAppInfo rpcResult = await rpcClient.GetRegisteredDapps(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo GetTestValue23()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo();
         result.Rewards = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo();
         result.Rewards = this.GetTestValue24();
         result.Staked = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Staked.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         result.Locked = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Locked.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo GetTestValue24()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.RewardInfo();
         result.Stakers = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Stakers.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         result.Dapps = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Dapps.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestGeneralEraInfo()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo mockupValue = this.GetTestValue23();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeGeneralEraInfo(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetGeneralEraInfo(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraInfo rpcResult = await rpcClient.GetGeneralEraInfo(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo GetTestValue26()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo();
         result.Total = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Total.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         result.NumberOfStakers = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.NumberOfStakers.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU32().Value));
         result.ContractRewardClaimed = this.GetTestValueBool();
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32> GetTestValue27()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValue28(), this.GetTestValueU32());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract GetTestValue28()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract();
         result.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.SmartContract>(), this.GetTestValue29());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 GetTestValue29()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestContractEraStake()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo mockupValue = this.GetTestValue26();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract, Substrate.NetApi.Model.Types.Primitive.U32> mockupKey = this.GetTestValue27();

         Assert.IsTrue(await rpcClient.SubscribeContractEraStake(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetContractEraStake(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.ContractStakeInfo rpcResult = await rpcClient.GetContractEraStake(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo GetTestValue31()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo();
         result.Stakes = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraStake>();
         result.Stakes.Create(new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraStake[] {
                  this.GetTestValue32()});
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraStake GetTestValue32()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraStake result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EraStake();
         result.Staked = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Staked.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU128().Value));
         result.Era = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Era.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU32().Value));
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract> GetTestValue33()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract>();
         result.Create(this.GetTestValue34(), this.GetTestValue35());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue34()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract GetTestValue35()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract();
         result.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.SmartContract>(), this.GetTestValue36());
         return result;
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 GetTestValue36()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160 result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.Value = new Substrate.Astar.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestGeneralStakerInfo()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo mockupValue = this.GetTestValue31();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime.EnumSmartContract> mockupKey = this.GetTestValue33();

         Assert.IsTrue(await rpcClient.SubscribeGeneralStakerInfo(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetGeneralStakerInfo(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.StakerInfo rpcResult = await rpcClient.GetGeneralStakerInfo(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion GetTestValue38()
      {
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion result;
         result = new Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion();
         result.Create(this.GetTestValueEnum<Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.Version>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestStorageVersion()
      {
         // Construct new Mockup client to test with.
         DappsStakingControllerMockupClient mockupClient = new DappsStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DappsStakingControllerClient rpcClient = new DappsStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion mockupValue = this.GetTestValue38();


         Assert.IsTrue(await rpcClient.SubscribeStorageVersion());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetStorageVersion(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking.EnumVersion rpcResult = await rpcClient.GetStorageVersion();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
