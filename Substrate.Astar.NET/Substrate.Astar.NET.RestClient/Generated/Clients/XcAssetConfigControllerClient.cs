//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Astar.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Astar.NET.NetApiExt.Generated.Model.xcm;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Astar.NET.RestClient.Generated.Interfaces;
   
   public sealed class XcAssetConfigControllerClient : BaseClient, IXcAssetConfigControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public XcAssetConfigControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<EnumVersionedMultiLocation> GetAssetIdToLocation(U128 key)
      {
         return await SendRequestAsync<EnumVersionedMultiLocation>(_httpClient, "xcassetconfig/assetidtolocation", Substrate.Astar.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage.AssetIdToLocationParams(key));
      }
      public async Task<bool> SubscribeAssetIdToLocation(U128 key)
      {
         return await _subscriptionClient.SubscribeAsync("XcAssetConfig.AssetIdToLocation", Substrate.Astar.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage.AssetIdToLocationParams(key));
      }
      public async Task<U128> GetAssetLocationToId(EnumVersionedMultiLocation key)
      {
         return await SendRequestAsync<U128>(_httpClient, "xcassetconfig/assetlocationtoid", Substrate.Astar.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage.AssetLocationToIdParams(key));
      }
      public async Task<bool> SubscribeAssetLocationToId(EnumVersionedMultiLocation key)
      {
         return await _subscriptionClient.SubscribeAsync("XcAssetConfig.AssetLocationToId", Substrate.Astar.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage.AssetLocationToIdParams(key));
      }
      public async Task<U128> GetAssetLocationUnitsPerSecond(EnumVersionedMultiLocation key)
      {
         return await SendRequestAsync<U128>(_httpClient, "xcassetconfig/assetlocationunitspersecond", Substrate.Astar.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage.AssetLocationUnitsPerSecondParams(key));
      }
      public async Task<bool> SubscribeAssetLocationUnitsPerSecond(EnumVersionedMultiLocation key)
      {
         return await _subscriptionClient.SubscribeAsync("XcAssetConfig.AssetLocationUnitsPerSecond", Substrate.Astar.NET.NetApiExt.Generated.Storage.XcAssetConfigStorage.AssetLocationUnitsPerSecondParams(key));
      }
   }
}
