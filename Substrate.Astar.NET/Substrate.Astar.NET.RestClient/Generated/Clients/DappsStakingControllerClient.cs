//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Astar.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Astar.NET.NetApiExt.Generated.Model.pallet_dapps_staking;
   using Substrate.Astar.NET.NetApiExt.Generated.Model.astar_runtime;
   using Substrate.Astar.NET.RestClient.Generated.Interfaces;
   
   public sealed class DappsStakingControllerClient : BaseClient, IDappsStakingControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public DappsStakingControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<Bool> GetPalletDisabled()
      {
         return await SendRequestAsync<Bool>(_httpClient, "dappsstaking/palletdisabled");
      }
      public async Task<bool> SubscribePalletDisabled()
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.PalletDisabled");
      }
      public async Task<AccountLedger> GetLedger(Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<AccountLedger>(_httpClient, "dappsstaking/ledger", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.LedgerParams(key));
      }
      public async Task<bool> SubscribeLedger(Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.Ledger", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.LedgerParams(key));
      }
      public async Task<U32> GetCurrentEra()
      {
         return await SendRequestAsync<U32>(_httpClient, "dappsstaking/currentera");
      }
      public async Task<bool> SubscribeCurrentEra()
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.CurrentEra");
      }
      public async Task<RewardInfo> GetBlockRewardAccumulator()
      {
         return await SendRequestAsync<RewardInfo>(_httpClient, "dappsstaking/blockrewardaccumulator");
      }
      public async Task<bool> SubscribeBlockRewardAccumulator()
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.BlockRewardAccumulator");
      }
      public async Task<EnumForcing> GetForceEra()
      {
         return await SendRequestAsync<EnumForcing>(_httpClient, "dappsstaking/forceera");
      }
      public async Task<bool> SubscribeForceEra()
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.ForceEra");
      }
      public async Task<U32> GetNextEraStartingBlock()
      {
         return await SendRequestAsync<U32>(_httpClient, "dappsstaking/nexterastartingblock");
      }
      public async Task<bool> SubscribeNextEraStartingBlock()
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.NextEraStartingBlock");
      }
      public async Task<EnumSmartContract> GetRegisteredDevelopers(Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<EnumSmartContract>(_httpClient, "dappsstaking/registereddevelopers", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.RegisteredDevelopersParams(key));
      }
      public async Task<bool> SubscribeRegisteredDevelopers(Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.RegisteredDevelopers", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.RegisteredDevelopersParams(key));
      }
      public async Task<DAppInfo> GetRegisteredDapps(EnumSmartContract key)
      {
         return await SendRequestAsync<DAppInfo>(_httpClient, "dappsstaking/registereddapps", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.RegisteredDappsParams(key));
      }
      public async Task<bool> SubscribeRegisteredDapps(EnumSmartContract key)
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.RegisteredDapps", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.RegisteredDappsParams(key));
      }
      public async Task<EraInfo> GetGeneralEraInfo(U32 key)
      {
         return await SendRequestAsync<EraInfo>(_httpClient, "dappsstaking/generalerainfo", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.GeneralEraInfoParams(key));
      }
      public async Task<bool> SubscribeGeneralEraInfo(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.GeneralEraInfo", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.GeneralEraInfoParams(key));
      }
      public async Task<ContractStakeInfo> GetContractEraStake(Substrate.NetApi.Model.Types.Base.BaseTuple<EnumSmartContract, U32> key)
      {
         return await SendRequestAsync<ContractStakeInfo>(_httpClient, "dappsstaking/contracterastake", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.ContractEraStakeParams(key));
      }
      public async Task<bool> SubscribeContractEraStake(Substrate.NetApi.Model.Types.Base.BaseTuple<EnumSmartContract, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.ContractEraStake", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.ContractEraStakeParams(key));
      }
      public async Task<StakerInfo> GetGeneralStakerInfo(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, EnumSmartContract> key)
      {
         return await SendRequestAsync<StakerInfo>(_httpClient, "dappsstaking/generalstakerinfo", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.GeneralStakerInfoParams(key));
      }
      public async Task<bool> SubscribeGeneralStakerInfo(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Astar.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, EnumSmartContract> key)
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.GeneralStakerInfo", Substrate.Astar.NET.NetApiExt.Generated.Storage.DappsStakingStorage.GeneralStakerInfoParams(key));
      }
      public async Task<EnumVersion> GetStorageVersion()
      {
         return await SendRequestAsync<EnumVersion>(_httpClient, "dappsstaking/storageversion");
      }
      public async Task<bool> SubscribeStorageVersion()
      {
         return await _subscriptionClient.SubscribeAsync("DappsStaking.StorageVersion");
      }
   }
}
