//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// INominationPoolsStorage interface definition.
    /// </summary>
    public interface INominationPoolsStorage : IStorage
    {
        
        /// <summary>
        /// >> MinJoinBond
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMinJoinBond();
        
        /// <summary>
        /// >> MinCreateBond
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the pool creator must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMinCreateBond();
        
        /// <summary>
        /// >> UnbondingMembers
        ///  Pool Members who are Unbonding.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember GetUnbondingMembers(string key);
        
        /// <summary>
        /// >> BondedPools
        ///  Storage for bonded pools.
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner GetBondedPools(string key);
        
        /// <summary>
        /// >> CounterForBondedPools
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForBondedPools();
        
        /// <summary>
        /// >> SubPoolsStorage
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,
        ///  hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools GetSubPoolsStorage(string key);
        
        /// <summary>
        /// >> CounterForSubPoolsStorage
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForSubPoolsStorage();
        
        /// <summary>
        /// >> NextPoolId
        ///  The next pool id that will be used in [`create`](Pallet::create). Increments by one with
        ///  each pool created.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNextPoolId();
        
        /// <summary>
        /// >> ReversePoolIdLookup
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing. In all other instances, the pool id is used, and the
        ///  accounts are deterministically derived from it.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetReversePoolIdLookup(string key);
        
        /// <summary>
        /// >> CounterForReversePoolIdLookup
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForReversePoolIdLookup();
        
        /// <summary>
        /// >> UsedPoolTokenIds
        ///  A reverse lookup from the token_id to pool_id.
        /// 
        ///  This is used for making sure the same token is not used to create multiple pools
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetUsedPoolTokenIds(string key);
        
        /// <summary>
        /// >> GlobalMaxCommission
        ///  The maximum commission that can be charged by a pool. Used on commission payouts to bound
        ///  pool commissions that are > `GlobalMaxCommission`, necessary if a future
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetGlobalMaxCommission();
        
        /// <summary>
        /// >> StakingInformation
        ///  The general staking parameters
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo GetStakingInformation();
        
        /// <summary>
        /// >> EarlyBirdBonusInfo
        ///  The queue of bonuses that should be distributed to the pools
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo GetEarlyBirdBonusInfo();
        
        /// <summary>
        /// >> EraPayoutInfo
        ///  Tracks payout information for an era
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout GetEraPayoutInfo();
        
        /// <summary>
        /// >> PoolBonusInfos
        ///  Storage for pool bonus info
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo GetPoolBonusInfos(string key);
        
        /// <summary>
        /// >> EarlyBirdShares
        ///  The percentage shares of pool users for early bird rewards
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetEarlyBirdShares(string key);
    }
    
    /// <summary>
    /// NominationPoolsStorage class definition.
    /// </summary>
    public sealed class NominationPoolsStorage : INominationPoolsStorage
    {
        
        /// <summary>
        /// _minJoinBondTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _minJoinBondTypedStorage;
        
        /// <summary>
        /// _minCreateBondTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _minCreateBondTypedStorage;
        
        /// <summary>
        /// _unbondingMembersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember> _unbondingMembersTypedStorage;
        
        /// <summary>
        /// _bondedPoolsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner> _bondedPoolsTypedStorage;
        
        /// <summary>
        /// _counterForBondedPoolsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForBondedPoolsTypedStorage;
        
        /// <summary>
        /// _subPoolsStorageTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools> _subPoolsStorageTypedStorage;
        
        /// <summary>
        /// _counterForSubPoolsStorageTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForSubPoolsStorageTypedStorage;
        
        /// <summary>
        /// _nextPoolIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nextPoolIdTypedStorage;
        
        /// <summary>
        /// _reversePoolIdLookupTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _reversePoolIdLookupTypedStorage;
        
        /// <summary>
        /// _counterForReversePoolIdLookupTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForReversePoolIdLookupTypedStorage;
        
        /// <summary>
        /// _usedPoolTokenIdsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _usedPoolTokenIdsTypedStorage;
        
        /// <summary>
        /// _globalMaxCommissionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> _globalMaxCommissionTypedStorage;
        
        /// <summary>
        /// _stakingInformationTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo> _stakingInformationTypedStorage;
        
        /// <summary>
        /// _earlyBirdBonusInfoTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo> _earlyBirdBonusInfoTypedStorage;
        
        /// <summary>
        /// _eraPayoutInfoTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout> _eraPayoutInfoTypedStorage;
        
        /// <summary>
        /// _poolBonusInfosTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo> _poolBonusInfosTypedStorage;
        
        /// <summary>
        /// _earlyBirdSharesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> _earlyBirdSharesTypedStorage;
        
        /// <summary>
        /// NominationPoolsStorage constructor.
        /// </summary>
        public NominationPoolsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.MinJoinBondTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("NominationPools.MinJoinBond", storageDataProvider, storageChangeDelegates);
            this.MinCreateBondTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("NominationPools.MinCreateBond", storageDataProvider, storageChangeDelegates);
            this.UnbondingMembersTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember>("NominationPools.UnbondingMembers", storageDataProvider, storageChangeDelegates);
            this.BondedPoolsTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner>("NominationPools.BondedPools", storageDataProvider, storageChangeDelegates);
            this.CounterForBondedPoolsTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForBondedPools", storageDataProvider, storageChangeDelegates);
            this.SubPoolsStorageTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools>("NominationPools.SubPoolsStorage", storageDataProvider, storageChangeDelegates);
            this.CounterForSubPoolsStorageTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForSubPoolsStorage", storageDataProvider, storageChangeDelegates);
            this.NextPoolIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("NominationPools.NextPoolId", storageDataProvider, storageChangeDelegates);
            this.ReversePoolIdLookupTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("NominationPools.ReversePoolIdLookup", storageDataProvider, storageChangeDelegates);
            this.CounterForReversePoolIdLookupTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForReversePoolIdLookup", storageDataProvider, storageChangeDelegates);
            this.UsedPoolTokenIdsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("NominationPools.UsedPoolTokenIds", storageDataProvider, storageChangeDelegates);
            this.GlobalMaxCommissionTypedStorage = new TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill>("NominationPools.GlobalMaxCommission", storageDataProvider, storageChangeDelegates);
            this.StakingInformationTypedStorage = new TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo>("NominationPools.StakingInformation", storageDataProvider, storageChangeDelegates);
            this.EarlyBirdBonusInfoTypedStorage = new TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo>("NominationPools.EarlyBirdBonusInfo", storageDataProvider, storageChangeDelegates);
            this.EraPayoutInfoTypedStorage = new TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout>("NominationPools.EraPayoutInfo", storageDataProvider, storageChangeDelegates);
            this.PoolBonusInfosTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo>("NominationPools.PoolBonusInfos", storageDataProvider, storageChangeDelegates);
            this.EarlyBirdSharesTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill>("NominationPools.EarlyBirdShares", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _minJoinBondTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> MinJoinBondTypedStorage
        {
            get
            {
                return _minJoinBondTypedStorage;
            }
            set
            {
                _minJoinBondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minCreateBondTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> MinCreateBondTypedStorage
        {
            get
            {
                return _minCreateBondTypedStorage;
            }
            set
            {
                _minCreateBondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _unbondingMembersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember> UnbondingMembersTypedStorage
        {
            get
            {
                return _unbondingMembersTypedStorage;
            }
            set
            {
                _unbondingMembersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bondedPoolsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner> BondedPoolsTypedStorage
        {
            get
            {
                return _bondedPoolsTypedStorage;
            }
            set
            {
                _bondedPoolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForBondedPoolsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForBondedPoolsTypedStorage
        {
            get
            {
                return _counterForBondedPoolsTypedStorage;
            }
            set
            {
                _counterForBondedPoolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _subPoolsStorageTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools> SubPoolsStorageTypedStorage
        {
            get
            {
                return _subPoolsStorageTypedStorage;
            }
            set
            {
                _subPoolsStorageTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForSubPoolsStorageTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForSubPoolsStorageTypedStorage
        {
            get
            {
                return _counterForSubPoolsStorageTypedStorage;
            }
            set
            {
                _counterForSubPoolsStorageTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextPoolIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> NextPoolIdTypedStorage
        {
            get
            {
                return _nextPoolIdTypedStorage;
            }
            set
            {
                _nextPoolIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _reversePoolIdLookupTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> ReversePoolIdLookupTypedStorage
        {
            get
            {
                return _reversePoolIdLookupTypedStorage;
            }
            set
            {
                _reversePoolIdLookupTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForReversePoolIdLookupTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForReversePoolIdLookupTypedStorage
        {
            get
            {
                return _counterForReversePoolIdLookupTypedStorage;
            }
            set
            {
                _counterForReversePoolIdLookupTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _usedPoolTokenIdsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> UsedPoolTokenIdsTypedStorage
        {
            get
            {
                return _usedPoolTokenIdsTypedStorage;
            }
            set
            {
                _usedPoolTokenIdsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _globalMaxCommissionTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> GlobalMaxCommissionTypedStorage
        {
            get
            {
                return _globalMaxCommissionTypedStorage;
            }
            set
            {
                _globalMaxCommissionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _stakingInformationTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo> StakingInformationTypedStorage
        {
            get
            {
                return _stakingInformationTypedStorage;
            }
            set
            {
                _stakingInformationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _earlyBirdBonusInfoTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo> EarlyBirdBonusInfoTypedStorage
        {
            get
            {
                return _earlyBirdBonusInfoTypedStorage;
            }
            set
            {
                _earlyBirdBonusInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _eraPayoutInfoTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout> EraPayoutInfoTypedStorage
        {
            get
            {
                return _eraPayoutInfoTypedStorage;
            }
            set
            {
                _eraPayoutInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _poolBonusInfosTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo> PoolBonusInfosTypedStorage
        {
            get
            {
                return _poolBonusInfosTypedStorage;
            }
            set
            {
                _poolBonusInfosTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _earlyBirdSharesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> EarlyBirdSharesTypedStorage
        {
            get
            {
                return _earlyBirdSharesTypedStorage;
            }
            set
            {
                _earlyBirdSharesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MinJoinBondTypedStorage.InitializeAsync("NominationPools", "MinJoinBond");
            await MinCreateBondTypedStorage.InitializeAsync("NominationPools", "MinCreateBond");
            await UnbondingMembersTypedStorage.InitializeAsync("NominationPools", "UnbondingMembers");
            await BondedPoolsTypedStorage.InitializeAsync("NominationPools", "BondedPools");
            await CounterForBondedPoolsTypedStorage.InitializeAsync("NominationPools", "CounterForBondedPools");
            await SubPoolsStorageTypedStorage.InitializeAsync("NominationPools", "SubPoolsStorage");
            await CounterForSubPoolsStorageTypedStorage.InitializeAsync("NominationPools", "CounterForSubPoolsStorage");
            await NextPoolIdTypedStorage.InitializeAsync("NominationPools", "NextPoolId");
            await ReversePoolIdLookupTypedStorage.InitializeAsync("NominationPools", "ReversePoolIdLookup");
            await CounterForReversePoolIdLookupTypedStorage.InitializeAsync("NominationPools", "CounterForReversePoolIdLookup");
            await UsedPoolTokenIdsTypedStorage.InitializeAsync("NominationPools", "UsedPoolTokenIds");
            await GlobalMaxCommissionTypedStorage.InitializeAsync("NominationPools", "GlobalMaxCommission");
            await StakingInformationTypedStorage.InitializeAsync("NominationPools", "StakingInformation");
            await EarlyBirdBonusInfoTypedStorage.InitializeAsync("NominationPools", "EarlyBirdBonusInfo");
            await EraPayoutInfoTypedStorage.InitializeAsync("NominationPools", "EraPayoutInfo");
            await PoolBonusInfosTypedStorage.InitializeAsync("NominationPools", "PoolBonusInfos");
            await EarlyBirdSharesTypedStorage.InitializeAsync("NominationPools", "EarlyBirdShares");
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.MinJoinBond
        /// </summary>
        [StorageChange("NominationPools", "MinJoinBond")]
        public void OnUpdateMinJoinBond(string data)
        {
            MinJoinBondTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinJoinBond
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMinJoinBond()
        {
            return MinJoinBondTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.MinCreateBond
        /// </summary>
        [StorageChange("NominationPools", "MinCreateBond")]
        public void OnUpdateMinCreateBond(string data)
        {
            MinCreateBondTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinCreateBond
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the pool creator must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMinCreateBond()
        {
            return MinCreateBondTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.UnbondingMembers
        /// </summary>
        [StorageChange("NominationPools", "UnbondingMembers")]
        public void OnUpdateUnbondingMembers(string key, string data)
        {
            UnbondingMembersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> UnbondingMembers
        ///  Pool Members who are Unbonding.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember GetUnbondingMembers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (UnbondingMembersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.BondedPools
        /// </summary>
        [StorageChange("NominationPools", "BondedPools")]
        public void OnUpdateBondedPools(string key, string data)
        {
            BondedPoolsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BondedPools
        ///  Storage for bonded pools.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner GetBondedPools(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BondedPoolsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForBondedPools
        /// </summary>
        [StorageChange("NominationPools", "CounterForBondedPools")]
        public void OnUpdateCounterForBondedPools(string data)
        {
            CounterForBondedPoolsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForBondedPools
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForBondedPools()
        {
            return CounterForBondedPoolsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.SubPoolsStorage
        /// </summary>
        [StorageChange("NominationPools", "SubPoolsStorage")]
        public void OnUpdateSubPoolsStorage(string key, string data)
        {
            SubPoolsStorageTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SubPoolsStorage
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,
        ///  hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools GetSubPoolsStorage(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SubPoolsStorageTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForSubPoolsStorage
        /// </summary>
        [StorageChange("NominationPools", "CounterForSubPoolsStorage")]
        public void OnUpdateCounterForSubPoolsStorage(string data)
        {
            CounterForSubPoolsStorageTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorage
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForSubPoolsStorage()
        {
            return CounterForSubPoolsStorageTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.NextPoolId
        /// </summary>
        [StorageChange("NominationPools", "NextPoolId")]
        public void OnUpdateNextPoolId(string data)
        {
            NextPoolIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextPoolId
        ///  The next pool id that will be used in [`create`](Pallet::create). Increments by one with
        ///  each pool created.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNextPoolId()
        {
            return NextPoolIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.ReversePoolIdLookup
        /// </summary>
        [StorageChange("NominationPools", "ReversePoolIdLookup")]
        public void OnUpdateReversePoolIdLookup(string key, string data)
        {
            ReversePoolIdLookupTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReversePoolIdLookup
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing. In all other instances, the pool id is used, and the
        ///  accounts are deterministically derived from it.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetReversePoolIdLookup(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReversePoolIdLookupTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForReversePoolIdLookup
        /// </summary>
        [StorageChange("NominationPools", "CounterForReversePoolIdLookup")]
        public void OnUpdateCounterForReversePoolIdLookup(string data)
        {
            CounterForReversePoolIdLookupTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookup
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForReversePoolIdLookup()
        {
            return CounterForReversePoolIdLookupTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.UsedPoolTokenIds
        /// </summary>
        [StorageChange("NominationPools", "UsedPoolTokenIds")]
        public void OnUpdateUsedPoolTokenIds(string key, string data)
        {
            UsedPoolTokenIdsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> UsedPoolTokenIds
        ///  A reverse lookup from the token_id to pool_id.
        /// 
        ///  This is used for making sure the same token is not used to create multiple pools
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetUsedPoolTokenIds(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (UsedPoolTokenIdsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.GlobalMaxCommission
        /// </summary>
        [StorageChange("NominationPools", "GlobalMaxCommission")]
        public void OnUpdateGlobalMaxCommission(string data)
        {
            GlobalMaxCommissionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> GlobalMaxCommission
        ///  The maximum commission that can be charged by a pool. Used on commission payouts to bound
        ///  pool commissions that are > `GlobalMaxCommission`, necessary if a future
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetGlobalMaxCommission()
        {
            return GlobalMaxCommissionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.StakingInformation
        /// </summary>
        [StorageChange("NominationPools", "StakingInformation")]
        public void OnUpdateStakingInformation(string data)
        {
            StakingInformationTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> StakingInformation
        ///  The general staking parameters
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo GetStakingInformation()
        {
            return StakingInformationTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.EarlyBirdBonusInfo
        /// </summary>
        [StorageChange("NominationPools", "EarlyBirdBonusInfo")]
        public void OnUpdateEarlyBirdBonusInfo(string data)
        {
            EarlyBirdBonusInfoTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EarlyBirdBonusInfo
        ///  The queue of bonuses that should be distributed to the pools
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo GetEarlyBirdBonusInfo()
        {
            return EarlyBirdBonusInfoTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.EraPayoutInfo
        /// </summary>
        [StorageChange("NominationPools", "EraPayoutInfo")]
        public void OnUpdateEraPayoutInfo(string data)
        {
            EraPayoutInfoTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EraPayoutInfo
        ///  Tracks payout information for an era
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout GetEraPayoutInfo()
        {
            return EraPayoutInfoTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.PoolBonusInfos
        /// </summary>
        [StorageChange("NominationPools", "PoolBonusInfos")]
        public void OnUpdatePoolBonusInfos(string key, string data)
        {
            PoolBonusInfosTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PoolBonusInfos
        ///  Storage for pool bonus info
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo GetPoolBonusInfos(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolBonusInfosTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.EarlyBirdShares
        /// </summary>
        [StorageChange("NominationPools", "EarlyBirdShares")]
        public void OnUpdateEarlyBirdShares(string key, string data)
        {
            EarlyBirdSharesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> EarlyBirdShares
        ///  The percentage shares of pool users for early bird rewards
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetEarlyBirdShares(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (EarlyBirdSharesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
