//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IParaSessionInfoStorage interface definition.
    /// </summary>
    public interface IParaSessionInfoStorage : IStorage
    {
        
        /// <summary>
        /// >> AssignmentKeysUnsafe
        ///  Assignment keys for the current session.
        ///  Note that this API is private due to it being prone to 'off-by-one' at session boundaries.
        ///  When in doubt, use `Sessions` API instead.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.assignment_app.Public> GetAssignmentKeysUnsafe();
        
        /// <summary>
        /// >> EarliestStoredSession
        ///  The earliest session for which previous session info is stored.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetEarliestStoredSession();
        
        /// <summary>
        /// >> Sessions
        ///  Session information in a rolling window.
        ///  Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.
        ///  Does not have any entries before the session index in the first session change notification.
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.SessionInfo GetSessions(string key);
        
        /// <summary>
        /// >> AccountKeys
        ///  The validator account keys of the validators actively participating in parachain consensus.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetAccountKeys(string key);
        
        /// <summary>
        /// >> SessionExecutorParams
        ///  Executor parameter set for a given session index
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.executor_params.ExecutorParams GetSessionExecutorParams(string key);
    }
    
    /// <summary>
    /// ParaSessionInfoStorage class definition.
    /// </summary>
    public sealed class ParaSessionInfoStorage : IParaSessionInfoStorage
    {
        
        /// <summary>
        /// _assignmentKeysUnsafeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.assignment_app.Public>> _assignmentKeysUnsafeTypedStorage;
        
        /// <summary>
        /// _earliestStoredSessionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _earliestStoredSessionTypedStorage;
        
        /// <summary>
        /// _sessionsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.SessionInfo> _sessionsTypedStorage;
        
        /// <summary>
        /// _accountKeysTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> _accountKeysTypedStorage;
        
        /// <summary>
        /// _sessionExecutorParamsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.executor_params.ExecutorParams> _sessionExecutorParamsTypedStorage;
        
        /// <summary>
        /// ParaSessionInfoStorage constructor.
        /// </summary>
        public ParaSessionInfoStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssignmentKeysUnsafeTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.assignment_app.Public>>("ParaSessionInfo.AssignmentKeysUnsafe", storageDataProvider, storageChangeDelegates);
            this.EarliestStoredSessionTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParaSessionInfo.EarliestStoredSession", storageDataProvider, storageChangeDelegates);
            this.SessionsTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.SessionInfo>("ParaSessionInfo.Sessions", storageDataProvider, storageChangeDelegates);
            this.AccountKeysTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>("ParaSessionInfo.AccountKeys", storageDataProvider, storageChangeDelegates);
            this.SessionExecutorParamsTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.executor_params.ExecutorParams>("ParaSessionInfo.SessionExecutorParams", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assignmentKeysUnsafeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.assignment_app.Public>> AssignmentKeysUnsafeTypedStorage
        {
            get
            {
                return _assignmentKeysUnsafeTypedStorage;
            }
            set
            {
                _assignmentKeysUnsafeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _earliestStoredSessionTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> EarliestStoredSessionTypedStorage
        {
            get
            {
                return _earliestStoredSessionTypedStorage;
            }
            set
            {
                _earliestStoredSessionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sessionsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.SessionInfo> SessionsTypedStorage
        {
            get
            {
                return _sessionsTypedStorage;
            }
            set
            {
                _sessionsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _accountKeysTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> AccountKeysTypedStorage
        {
            get
            {
                return _accountKeysTypedStorage;
            }
            set
            {
                _accountKeysTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sessionExecutorParamsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.executor_params.ExecutorParams> SessionExecutorParamsTypedStorage
        {
            get
            {
                return _sessionExecutorParamsTypedStorage;
            }
            set
            {
                _sessionExecutorParamsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssignmentKeysUnsafeTypedStorage.InitializeAsync("ParaSessionInfo", "AssignmentKeysUnsafe");
            await EarliestStoredSessionTypedStorage.InitializeAsync("ParaSessionInfo", "EarliestStoredSession");
            await SessionsTypedStorage.InitializeAsync("ParaSessionInfo", "Sessions");
            await AccountKeysTypedStorage.InitializeAsync("ParaSessionInfo", "AccountKeys");
            await SessionExecutorParamsTypedStorage.InitializeAsync("ParaSessionInfo", "SessionExecutorParams");
        }
        
        /// <summary>
        /// Implements any storage change for ParaSessionInfo.AssignmentKeysUnsafe
        /// </summary>
        [StorageChange("ParaSessionInfo", "AssignmentKeysUnsafe")]
        public void OnUpdateAssignmentKeysUnsafe(string data)
        {
            AssignmentKeysUnsafeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> AssignmentKeysUnsafe
        ///  Assignment keys for the current session.
        ///  Note that this API is private due to it being prone to 'off-by-one' at session boundaries.
        ///  When in doubt, use `Sessions` API instead.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.assignment_app.Public> GetAssignmentKeysUnsafe()
        {
            return AssignmentKeysUnsafeTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParaSessionInfo.EarliestStoredSession
        /// </summary>
        [StorageChange("ParaSessionInfo", "EarliestStoredSession")]
        public void OnUpdateEarliestStoredSession(string data)
        {
            EarliestStoredSessionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EarliestStoredSession
        ///  The earliest session for which previous session info is stored.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetEarliestStoredSession()
        {
            return EarliestStoredSessionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParaSessionInfo.Sessions
        /// </summary>
        [StorageChange("ParaSessionInfo", "Sessions")]
        public void OnUpdateSessions(string key, string data)
        {
            SessionsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Sessions
        ///  Session information in a rolling window.
        ///  Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.
        ///  Does not have any entries before the session index in the first session change notification.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.SessionInfo GetSessions(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SessionsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.SessionInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParaSessionInfo.AccountKeys
        /// </summary>
        [StorageChange("ParaSessionInfo", "AccountKeys")]
        public void OnUpdateAccountKeys(string key, string data)
        {
            AccountKeysTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AccountKeys
        ///  The validator account keys of the validators actively participating in parachain consensus.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetAccountKeys(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountKeysTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParaSessionInfo.SessionExecutorParams
        /// </summary>
        [StorageChange("ParaSessionInfo", "SessionExecutorParams")]
        public void OnUpdateSessionExecutorParams(string key, string data)
        {
            SessionExecutorParamsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SessionExecutorParams
        ///  Executor parameter set for a given session index
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.executor_params.ExecutorParams GetSessionExecutorParams(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SessionExecutorParamsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_primitives.v4.executor_params.ExecutorParams result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
