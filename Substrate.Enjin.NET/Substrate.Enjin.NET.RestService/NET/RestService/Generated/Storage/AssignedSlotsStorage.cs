//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAssignedSlotsStorage interface definition.
    /// </summary>
    public interface IAssignedSlotsStorage : IStorage
    {
        
        /// <summary>
        /// >> PermanentSlots
        ///  Assigned permanent slots, with their start lease period, and duration.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetPermanentSlots(string key);
        
        /// <summary>
        /// >> PermanentSlotCount
        ///  Number of assigned (and active) permanent slots.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetPermanentSlotCount();
        
        /// <summary>
        /// >> TemporarySlots
        ///  Assigned temporary slots.
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot GetTemporarySlots(string key);
        
        /// <summary>
        /// >> TemporarySlotCount
        ///  Number of assigned temporary slots.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetTemporarySlotCount();
        
        /// <summary>
        /// >> ActiveTemporarySlotCount
        ///  Number of active temporary slots in current slot lease period.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetActiveTemporarySlotCount();
    }
    
    /// <summary>
    /// AssignedSlotsStorage class definition.
    /// </summary>
    public sealed class AssignedSlotsStorage : IAssignedSlotsStorage
    {
        
        /// <summary>
        /// _permanentSlotsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> _permanentSlotsTypedStorage;
        
        /// <summary>
        /// _permanentSlotCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _permanentSlotCountTypedStorage;
        
        /// <summary>
        /// _temporarySlotsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot> _temporarySlotsTypedStorage;
        
        /// <summary>
        /// _temporarySlotCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _temporarySlotCountTypedStorage;
        
        /// <summary>
        /// _activeTemporarySlotCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _activeTemporarySlotCountTypedStorage;
        
        /// <summary>
        /// AssignedSlotsStorage constructor.
        /// </summary>
        public AssignedSlotsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PermanentSlotsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>("AssignedSlots.PermanentSlots", storageDataProvider, storageChangeDelegates);
            this.PermanentSlotCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AssignedSlots.PermanentSlotCount", storageDataProvider, storageChangeDelegates);
            this.TemporarySlotsTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot>("AssignedSlots.TemporarySlots", storageDataProvider, storageChangeDelegates);
            this.TemporarySlotCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AssignedSlots.TemporarySlotCount", storageDataProvider, storageChangeDelegates);
            this.ActiveTemporarySlotCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AssignedSlots.ActiveTemporarySlotCount", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _permanentSlotsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> PermanentSlotsTypedStorage
        {
            get
            {
                return _permanentSlotsTypedStorage;
            }
            set
            {
                _permanentSlotsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _permanentSlotCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> PermanentSlotCountTypedStorage
        {
            get
            {
                return _permanentSlotCountTypedStorage;
            }
            set
            {
                _permanentSlotCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _temporarySlotsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot> TemporarySlotsTypedStorage
        {
            get
            {
                return _temporarySlotsTypedStorage;
            }
            set
            {
                _temporarySlotsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _temporarySlotCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> TemporarySlotCountTypedStorage
        {
            get
            {
                return _temporarySlotCountTypedStorage;
            }
            set
            {
                _temporarySlotCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _activeTemporarySlotCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> ActiveTemporarySlotCountTypedStorage
        {
            get
            {
                return _activeTemporarySlotCountTypedStorage;
            }
            set
            {
                _activeTemporarySlotCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PermanentSlotsTypedStorage.InitializeAsync("AssignedSlots", "PermanentSlots");
            await PermanentSlotCountTypedStorage.InitializeAsync("AssignedSlots", "PermanentSlotCount");
            await TemporarySlotsTypedStorage.InitializeAsync("AssignedSlots", "TemporarySlots");
            await TemporarySlotCountTypedStorage.InitializeAsync("AssignedSlots", "TemporarySlotCount");
            await ActiveTemporarySlotCountTypedStorage.InitializeAsync("AssignedSlots", "ActiveTemporarySlotCount");
        }
        
        /// <summary>
        /// Implements any storage change for AssignedSlots.PermanentSlots
        /// </summary>
        [StorageChange("AssignedSlots", "PermanentSlots")]
        public void OnUpdatePermanentSlots(string key, string data)
        {
            PermanentSlotsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PermanentSlots
        ///  Assigned permanent slots, with their start lease period, and duration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetPermanentSlots(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PermanentSlotsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssignedSlots.PermanentSlotCount
        /// </summary>
        [StorageChange("AssignedSlots", "PermanentSlotCount")]
        public void OnUpdatePermanentSlotCount(string data)
        {
            PermanentSlotCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PermanentSlotCount
        ///  Number of assigned (and active) permanent slots.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetPermanentSlotCount()
        {
            return PermanentSlotCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for AssignedSlots.TemporarySlots
        /// </summary>
        [StorageChange("AssignedSlots", "TemporarySlots")]
        public void OnUpdateTemporarySlots(string key, string data)
        {
            TemporarySlotsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TemporarySlots
        ///  Assigned temporary slots.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot GetTemporarySlots(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TemporarySlotsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssignedSlots.TemporarySlotCount
        /// </summary>
        [StorageChange("AssignedSlots", "TemporarySlotCount")]
        public void OnUpdateTemporarySlotCount(string data)
        {
            TemporarySlotCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TemporarySlotCount
        ///  Number of assigned temporary slots.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetTemporarySlotCount()
        {
            return TemporarySlotCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for AssignedSlots.ActiveTemporarySlotCount
        /// </summary>
        [StorageChange("AssignedSlots", "ActiveTemporarySlotCount")]
        public void OnUpdateActiveTemporarySlotCount(string data)
        {
            ActiveTemporarySlotCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ActiveTemporarySlotCount
        ///  Number of active temporary slots in current slot lease period.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetActiveTemporarySlotCount()
        {
            return ActiveTemporarySlotCountTypedStorage.Get();
        }
    }
}
