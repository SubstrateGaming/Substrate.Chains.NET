//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IValidatorManagerStorage interface definition.
    /// </summary>
    public interface IValidatorManagerStorage : IStorage
    {
        
        /// <summary>
        /// >> ValidatorsToRetire
        ///  Validators that should be retired, because their Parachain was deregistered.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetValidatorsToRetire();
        
        /// <summary>
        /// >> ValidatorsToAdd
        ///  Validators that should be added.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetValidatorsToAdd();
    }
    
    /// <summary>
    /// ValidatorManagerStorage class definition.
    /// </summary>
    public sealed class ValidatorManagerStorage : IValidatorManagerStorage
    {
        
        /// <summary>
        /// _validatorsToRetireTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> _validatorsToRetireTypedStorage;
        
        /// <summary>
        /// _validatorsToAddTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> _validatorsToAddTypedStorage;
        
        /// <summary>
        /// ValidatorManagerStorage constructor.
        /// </summary>
        public ValidatorManagerStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ValidatorsToRetireTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>("ValidatorManager.ValidatorsToRetire", storageDataProvider, storageChangeDelegates);
            this.ValidatorsToAddTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>("ValidatorManager.ValidatorsToAdd", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _validatorsToRetireTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> ValidatorsToRetireTypedStorage
        {
            get
            {
                return _validatorsToRetireTypedStorage;
            }
            set
            {
                _validatorsToRetireTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _validatorsToAddTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> ValidatorsToAddTypedStorage
        {
            get
            {
                return _validatorsToAddTypedStorage;
            }
            set
            {
                _validatorsToAddTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ValidatorsToRetireTypedStorage.InitializeAsync("ValidatorManager", "ValidatorsToRetire");
            await ValidatorsToAddTypedStorage.InitializeAsync("ValidatorManager", "ValidatorsToAdd");
        }
        
        /// <summary>
        /// Implements any storage change for ValidatorManager.ValidatorsToRetire
        /// </summary>
        [StorageChange("ValidatorManager", "ValidatorsToRetire")]
        public void OnUpdateValidatorsToRetire(string data)
        {
            ValidatorsToRetireTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ValidatorsToRetire
        ///  Validators that should be retired, because their Parachain was deregistered.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetValidatorsToRetire()
        {
            return ValidatorsToRetireTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ValidatorManager.ValidatorsToAdd
        /// </summary>
        [StorageChange("ValidatorManager", "ValidatorsToAdd")]
        public void OnUpdateValidatorsToAdd(string data)
        {
            ValidatorsToAddTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ValidatorsToAdd
        ///  Validators that should be added.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetValidatorsToAdd()
        {
            return ValidatorsToAddTypedStorage.Get();
        }
    }
}
