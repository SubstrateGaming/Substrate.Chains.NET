//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IStakeExchangeStorage interface definition.
    /// </summary>
    public interface IStakeExchangeStorage : IStorage
    {
        
        /// <summary>
        /// >> LiquidityConfigs
        ///  Mapping of LP accounts to their configuration
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig GetLiquidityConfigs(string key);
        
        /// <summary>
        /// >> Offers
        ///  Mapping of LPAccountId to their active offer
        /// </summary>
        Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer GetOffers(string key);
        
        /// <summary>
        /// >> NextOfferId
        ///  Value to use for Next offer Id
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextOfferId();
    }
    
    /// <summary>
    /// StakeExchangeStorage class definition.
    /// </summary>
    public sealed class StakeExchangeStorage : IStakeExchangeStorage
    {
        
        /// <summary>
        /// _liquidityConfigsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig> _liquidityConfigsTypedStorage;
        
        /// <summary>
        /// _offersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer> _offersTypedStorage;
        
        /// <summary>
        /// _nextOfferIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextOfferIdTypedStorage;
        
        /// <summary>
        /// StakeExchangeStorage constructor.
        /// </summary>
        public StakeExchangeStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.LiquidityConfigsTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig>("StakeExchange.LiquidityConfigs", storageDataProvider, storageChangeDelegates);
            this.OffersTypedStorage = new TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer>("StakeExchange.Offers", storageDataProvider, storageChangeDelegates);
            this.NextOfferIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("StakeExchange.NextOfferId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _liquidityConfigsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig> LiquidityConfigsTypedStorage
        {
            get
            {
                return _liquidityConfigsTypedStorage;
            }
            set
            {
                _liquidityConfigsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _offersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer> OffersTypedStorage
        {
            get
            {
                return _offersTypedStorage;
            }
            set
            {
                _offersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextOfferIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextOfferIdTypedStorage
        {
            get
            {
                return _nextOfferIdTypedStorage;
            }
            set
            {
                _nextOfferIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await LiquidityConfigsTypedStorage.InitializeAsync("StakeExchange", "LiquidityConfigs");
            await OffersTypedStorage.InitializeAsync("StakeExchange", "Offers");
            await NextOfferIdTypedStorage.InitializeAsync("StakeExchange", "NextOfferId");
        }
        
        /// <summary>
        /// Implements any storage change for StakeExchange.LiquidityConfigs
        /// </summary>
        [StorageChange("StakeExchange", "LiquidityConfigs")]
        public void OnUpdateLiquidityConfigs(string key, string data)
        {
            LiquidityConfigsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LiquidityConfigs
        ///  Mapping of LP accounts to their configuration
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig GetLiquidityConfigs(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LiquidityConfigsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for StakeExchange.Offers
        /// </summary>
        [StorageChange("StakeExchange", "Offers")]
        public void OnUpdateOffers(string key, string data)
        {
            OffersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Offers
        ///  Mapping of LPAccountId to their active offer
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer GetOffers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OffersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for StakeExchange.NextOfferId
        /// </summary>
        [StorageChange("StakeExchange", "NextOfferId")]
        public void OnUpdateNextOfferId(string data)
        {
            NextOfferIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextOfferId
        ///  Value to use for Next offer Id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextOfferId()
        {
            return NextOfferIdTypedStorage.Get();
        }
    }
}
