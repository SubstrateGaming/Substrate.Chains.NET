//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Enjin.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// VoteManagerController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class VoteManagerController : ControllerBase
    {
        
        private IVoteManagerStorage _voteManagerStorage;
        
        /// <summary>
        /// VoteManagerController constructor.
        /// </summary>
        public VoteManagerController(IVoteManagerStorage voteManagerStorage)
        {
            _voteManagerStorage = voteManagerStorage;
        }
        
        /// <summary>
        /// >> VoteCurrencies
        ///  The currency used by `AccountId` to vote in Poll with
        ///  `PollIndex`
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        [HttpGet("VoteCurrencies")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_vote_manager.types.EnumVoteCurrency), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.VoteManagerStorage), "VoteCurrenciesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetVoteCurrencies(string key)
        {
            return this.Ok(_voteManagerStorage.GetVoteCurrencies(key));
        }
        
        /// <summary>
        /// >> VotesToUnlock
        ///  The currency used by `AccountId` to vote in referendum with
        ///  `ReferendumIndex`
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        [HttpGet("VotesToUnlock")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_vote_manager.types.BalanceToUnlock), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.VoteManagerStorage), "VotesToUnlockParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetVotesToUnlock(string key)
        {
            return this.Ok(_voteManagerStorage.GetVotesToUnlock(key));
        }
    }
}
