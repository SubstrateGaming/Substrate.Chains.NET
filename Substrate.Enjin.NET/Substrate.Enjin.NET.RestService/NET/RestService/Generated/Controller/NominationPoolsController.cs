//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Enjin.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// NominationPoolsController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class NominationPoolsController : ControllerBase
    {
        
        private INominationPoolsStorage _nominationPoolsStorage;
        
        /// <summary>
        /// NominationPoolsController constructor.
        /// </summary>
        public NominationPoolsController(INominationPoolsStorage nominationPoolsStorage)
        {
            _nominationPoolsStorage = nominationPoolsStorage;
        }
        
        /// <summary>
        /// >> MinJoinBond
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        [HttpGet("MinJoinBond")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "MinJoinBondParams")]
        public IActionResult GetMinJoinBond()
        {
            return this.Ok(_nominationPoolsStorage.GetMinJoinBond());
        }
        
        /// <summary>
        /// >> MinCreateBond
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the pool creator must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        [HttpGet("MinCreateBond")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "MinCreateBondParams")]
        public IActionResult GetMinCreateBond()
        {
            return this.Ok(_nominationPoolsStorage.GetMinCreateBond());
        }
        
        /// <summary>
        /// >> UnbondingMembers
        ///  Pool Members who are Unbonding.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        [HttpGet("UnbondingMembers")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "UnbondingMembersParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetUnbondingMembers(string key)
        {
            return this.Ok(_nominationPoolsStorage.GetUnbondingMembers(key));
        }
        
        /// <summary>
        /// >> BondedPools
        ///  Storage for bonded pools.
        /// </summary>
        [HttpGet("BondedPools")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "BondedPoolsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetBondedPools(string key)
        {
            return this.Ok(_nominationPoolsStorage.GetBondedPools(key));
        }
        
        /// <summary>
        /// >> CounterForBondedPools
        /// Counter for the related counted storage map
        /// </summary>
        [HttpGet("CounterForBondedPools")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "CounterForBondedPoolsParams")]
        public IActionResult GetCounterForBondedPools()
        {
            return this.Ok(_nominationPoolsStorage.GetCounterForBondedPools());
        }
        
        /// <summary>
        /// >> SubPoolsStorage
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,
        ///  hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        [HttpGet("SubPoolsStorage")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "SubPoolsStorageParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetSubPoolsStorage(string key)
        {
            return this.Ok(_nominationPoolsStorage.GetSubPoolsStorage(key));
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorage
        /// Counter for the related counted storage map
        /// </summary>
        [HttpGet("CounterForSubPoolsStorage")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "CounterForSubPoolsStorageParams")]
        public IActionResult GetCounterForSubPoolsStorage()
        {
            return this.Ok(_nominationPoolsStorage.GetCounterForSubPoolsStorage());
        }
        
        /// <summary>
        /// >> NextPoolId
        ///  The next pool id that will be used in [`create`](Pallet::create). Increments by one with
        ///  each pool created.
        /// </summary>
        [HttpGet("NextPoolId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "NextPoolIdParams")]
        public IActionResult GetNextPoolId()
        {
            return this.Ok(_nominationPoolsStorage.GetNextPoolId());
        }
        
        /// <summary>
        /// >> ReversePoolIdLookup
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing. In all other instances, the pool id is used, and the
        ///  accounts are deterministically derived from it.
        /// </summary>
        [HttpGet("ReversePoolIdLookup")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "ReversePoolIdLookupParams", typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetReversePoolIdLookup(string key)
        {
            return this.Ok(_nominationPoolsStorage.GetReversePoolIdLookup(key));
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookup
        /// Counter for the related counted storage map
        /// </summary>
        [HttpGet("CounterForReversePoolIdLookup")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "CounterForReversePoolIdLookupParams")]
        public IActionResult GetCounterForReversePoolIdLookup()
        {
            return this.Ok(_nominationPoolsStorage.GetCounterForReversePoolIdLookup());
        }
        
        /// <summary>
        /// >> UsedPoolTokenIds
        ///  A reverse lookup from the token_id to pool_id.
        /// 
        ///  This is used for making sure the same token is not used to create multiple pools
        /// </summary>
        [HttpGet("UsedPoolTokenIds")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "UsedPoolTokenIdsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetUsedPoolTokenIds(string key)
        {
            return this.Ok(_nominationPoolsStorage.GetUsedPoolTokenIds(key));
        }
        
        /// <summary>
        /// >> GlobalMaxCommission
        ///  The maximum commission that can be charged by a pool. Used on commission payouts to bound
        ///  pool commissions that are > `GlobalMaxCommission`, necessary if a future
        /// </summary>
        [HttpGet("GlobalMaxCommission")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "GlobalMaxCommissionParams")]
        public IActionResult GetGlobalMaxCommission()
        {
            return this.Ok(_nominationPoolsStorage.GetGlobalMaxCommission());
        }
        
        /// <summary>
        /// >> StakingInformation
        ///  The general staking parameters
        /// </summary>
        [HttpGet("StakingInformation")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "StakingInformationParams")]
        public IActionResult GetStakingInformation()
        {
            return this.Ok(_nominationPoolsStorage.GetStakingInformation());
        }
        
        /// <summary>
        /// >> EarlyBirdBonusInfo
        ///  The queue of bonuses that should be distributed to the pools
        /// </summary>
        [HttpGet("EarlyBirdBonusInfo")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "EarlyBirdBonusInfoParams")]
        public IActionResult GetEarlyBirdBonusInfo()
        {
            return this.Ok(_nominationPoolsStorage.GetEarlyBirdBonusInfo());
        }
        
        /// <summary>
        /// >> EraPayoutInfo
        ///  Tracks payout information for an era
        /// </summary>
        [HttpGet("EraPayoutInfo")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "EraPayoutInfoParams")]
        public IActionResult GetEraPayoutInfo()
        {
            return this.Ok(_nominationPoolsStorage.GetEraPayoutInfo());
        }
        
        /// <summary>
        /// >> PoolBonusInfos
        ///  Storage for pool bonus info
        /// </summary>
        [HttpGet("PoolBonusInfos")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "PoolBonusInfosParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetPoolBonusInfos(string key)
        {
            return this.Ok(_nominationPoolsStorage.GetPoolBonusInfos(key));
        }
        
        /// <summary>
        /// >> EarlyBirdShares
        ///  The percentage shares of pool users for early bird rewards
        /// </summary>
        [HttpGet("EarlyBirdShares")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.NominationPoolsStorage), "EarlyBirdSharesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetEarlyBirdShares(string key)
        {
            return this.Ok(_nominationPoolsStorage.GetEarlyBirdShares(key));
        }
    }
}
