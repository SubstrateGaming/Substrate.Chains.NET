//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Enjin.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// MultiTokensController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class MultiTokensController : ControllerBase
    {
        
        private IMultiTokensStorage _multiTokensStorage;
        
        /// <summary>
        /// MultiTokensController constructor.
        /// </summary>
        public MultiTokensController(IMultiTokensStorage multiTokensStorage)
        {
            _multiTokensStorage = multiTokensStorage;
        }
        
        /// <summary>
        /// >> TokenAccounts
        ///  Accounts per token
        /// </summary>
        [HttpGet("TokenAccounts")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_multi_tokens.features.token.types.TokenAccount), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "TokenAccountsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetTokenAccounts(string key)
        {
            return this.Ok(_multiTokensStorage.GetTokenAccounts(key));
        }
        
        /// <summary>
        /// >> Collections
        ///  The collections in existence and their ownership details.
        /// </summary>
        [HttpGet("Collections")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.collection.Collection), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "CollectionsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetCollections(string key)
        {
            return this.Ok(_multiTokensStorage.GetCollections(key));
        }
        
        /// <summary>
        /// >> Tokens
        ///  Tokens storage
        /// </summary>
        [HttpGet("Tokens")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.Token), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "TokensParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>))]
        public IActionResult GetTokens(string key)
        {
            return this.Ok(_multiTokensStorage.GetTokens(key));
        }
        
        /// <summary>
        /// >> NextCollectionId
        ///  Sequencer for collectionID generators.
        /// </summary>
        [HttpGet("NextCollectionId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "NextCollectionIdParams")]
        public IActionResult GetNextCollectionId()
        {
            return this.Ok(_multiTokensStorage.GetNextCollectionId());
        }
        
        /// <summary>
        /// >> CollectionAccounts
        ///  Stores information for an account per collection
        /// </summary>
        [HttpGet("CollectionAccounts")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_multi_tokens.features.collection.types.CollectionAccount), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "CollectionAccountsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetCollectionAccounts(string key)
        {
            return this.Ok(_multiTokensStorage.GetCollectionAccounts(key));
        }
        
        /// <summary>
        /// >> Attributes
        ///  Metadata of collections and tokens.
        /// </summary>
        [HttpGet("Attributes")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.attribute.Attribute), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "AttributesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8>))]
        public IActionResult GetAttributes(string key)
        {
            return this.Ok(_multiTokensStorage.GetAttributes(key));
        }
        
        /// <summary>
        /// >> AssetIdsByLocation
        ///  Map of Locations to AssetIds of Foreign Tokens
        /// </summary>
        [HttpGet("AssetIdsByLocation")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "AssetIdsByLocationParams", typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation))]
        public IActionResult GetAssetIdsByLocation(string key)
        {
            return this.Ok(_multiTokensStorage.GetAssetIdsByLocation(key));
        }
        
        /// <summary>
        /// >> Migrations
        ///  Stores last iterated keys for migrations. Used by multi block migrations
        ///  to resume from the last iterated key.
        /// 
        ///  Key is the storage prefix, value is the status of migration and last iterated key, if any.
        ///  i.e `["MultiTokens", "TokenAccounts"] -> (collection_id, token_id, account_id)`
        /// </summary>
        [HttpGet("Migrations")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_core.frame.migrations.Migration), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "MigrationsParams", typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT42))]
        public IActionResult GetMigrations(string key)
        {
            return this.Ok(_multiTokensStorage.GetMigrations(key));
        }
        
        /// <summary>
        /// >> MigrationStatus
        ///  Status of the current multi-block migration
        /// </summary>
        [HttpGet("MigrationStatus")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_core.frame.migrations.EnumMigrationStage), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "MigrationStatusParams")]
        public IActionResult GetMigrationStatus()
        {
            return this.Ok(_multiTokensStorage.GetMigrationStatus());
        }
        
        /// <summary>
        /// >> ClaimableCollectionIds
        ///  Stores data for an ethereum address
        /// </summary>
        [HttpGet("ClaimableCollectionIds")]
        [ProducesResponseType(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT19), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "ClaimableCollectionIdsParams", typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.primitive_types.H160))]
        public IActionResult GetClaimableCollectionIds(string key)
        {
            return this.Ok(_multiTokensStorage.GetClaimableCollectionIds(key));
        }
        
        /// <summary>
        /// >> UnmintableTokenIds
        ///  These token ids can only be minted by calling `force_mint`. The second key is an ethereum
        ///  base token id, and the value is the highest token index that cannot be minted. All token
        ///  indexes start from 1, so effectively it blocks token indexes from 1 to the value.
        /// </summary>
        [HttpGet("UnmintableTokenIds")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U64), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "UnmintableTokenIdsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U64>))]
        public IActionResult GetUnmintableTokenIds(string key)
        {
            return this.Ok(_multiTokensStorage.GetUnmintableTokenIds(key));
        }
        
        /// <summary>
        /// >> NativeCollectionIds
        ///  Map of ethereum collection id to the native collection id
        /// </summary>
        [HttpGet("NativeCollectionIds")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.MultiTokensStorage), "NativeCollectionIdsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetNativeCollectionIds(string key)
        {
            return this.Ok(_multiTokensStorage.GetNativeCollectionIds(key));
        }
    }
}
