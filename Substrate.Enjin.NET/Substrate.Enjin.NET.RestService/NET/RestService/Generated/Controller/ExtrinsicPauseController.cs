//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Enjin.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// ExtrinsicPauseController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class ExtrinsicPauseController : ControllerBase
    {
        
        private IExtrinsicPauseStorage _extrinsicPauseStorage;
        
        /// <summary>
        /// ExtrinsicPauseController constructor.
        /// </summary>
        public ExtrinsicPauseController(IExtrinsicPauseStorage extrinsicPauseStorage)
        {
            _extrinsicPauseStorage = extrinsicPauseStorage;
        }
        
        /// <summary>
        /// >> PausedExtrinsics
        ///  Paused extrinsics map
        /// 
        ///  The key is tuple with the name of the pallet and the extrinsic name and value is
        ///  an Option<()> which is None if the extrinsic is not paused and Some(()) if it is.
        /// </summary>
        [HttpGet("PausedExtrinsics")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple), 200)]
        [StorageKeyBuilder(typeof(Substrate.Enjin.NET.NetApiExt.Generated.Storage.ExtrinsicPauseStorage), "PausedExtrinsicsParams", typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_core.frame.types.ExtrinsicInfo))]
        public IActionResult GetPausedExtrinsics(string key)
        {
            return this.Ok(_extrinsicPauseStorage.GetPausedExtrinsics(key));
        }
    }
}
