//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types
{
    
    
    /// <summary>
    /// >> 72 - Composite[pallet_nomination_pools.types.PoolMutation]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class PoolMutation : BaseType
    {
        
        /// <summary>
        /// >> duration
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> Duration { get; set; }
        /// <summary>
        /// >> new_commission
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.types.EnumShouldMutate NewCommission { get; set; }
        /// <summary>
        /// >> max_commission
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> MaxCommission { get; set; }
        /// <summary>
        /// >> change_rate
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.CommissionChangeRate> ChangeRate { get; set; }
        /// <summary>
        /// >> capacity
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> Capacity { get; set; }
        /// <summary>
        /// >> name
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> Name { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "PoolMutation";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Duration.Encode());
            result.AddRange(NewCommission.Encode());
            result.AddRange(MaxCommission.Encode());
            result.AddRange(ChangeRate.Encode());
            result.AddRange(Capacity.Encode());
            result.AddRange(Name.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Duration = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
            Duration.Decode(byteArray, ref p);
            NewCommission = new Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.types.EnumShouldMutate();
            NewCommission.Decode(byteArray, ref p);
            MaxCommission = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill>();
            MaxCommission.Decode(byteArray, ref p);
            ChangeRate = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.CommissionChangeRate>();
            ChangeRate.Decode(byteArray, ref p);
            Capacity = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            Capacity.Decode(byteArray, ref p);
            Name = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>();
            Name.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
