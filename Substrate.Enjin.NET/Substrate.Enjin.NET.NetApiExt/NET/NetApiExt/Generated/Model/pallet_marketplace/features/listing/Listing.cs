//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.listing
{
    
    
    /// <summary>
    /// >> 277 - Composite[pallet_marketplace.features.listing.Listing]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class Listing : BaseType
    {
        
        /// <summary>
        /// >> seller
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 Seller { get; set; }
        /// <summary>
        /// >> make_asset_id
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId MakeAssetId { get; set; }
        /// <summary>
        /// >> take_asset_id
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId TakeAssetId { get; set; }
        /// <summary>
        /// >> amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> Amount { get; set; }
        /// <summary>
        /// >> price
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> Price { get; set; }
        /// <summary>
        /// >> min_take_value
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> MinTakeValue { get; set; }
        /// <summary>
        /// >> fee_side
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.listing.EnumFeeSide FeeSide { get; set; }
        /// <summary>
        /// >> creation_block
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> CreationBlock { get; set; }
        /// <summary>
        /// >> deposit
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> Deposit { get; set; }
        /// <summary>
        /// >> salt
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT13 Salt { get; set; }
        /// <summary>
        /// >> data
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.listing.EnumListingData Data { get; set; }
        /// <summary>
        /// >> state
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.listing.EnumListingState State { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "Listing";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Seller.Encode());
            result.AddRange(MakeAssetId.Encode());
            result.AddRange(TakeAssetId.Encode());
            result.AddRange(Amount.Encode());
            result.AddRange(Price.Encode());
            result.AddRange(MinTakeValue.Encode());
            result.AddRange(FeeSide.Encode());
            result.AddRange(CreationBlock.Encode());
            result.AddRange(Deposit.Encode());
            result.AddRange(Salt.Encode());
            result.AddRange(Data.Encode());
            result.AddRange(State.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Seller = new Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
            Seller.Decode(byteArray, ref p);
            MakeAssetId = new Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId();
            MakeAssetId.Decode(byteArray, ref p);
            TakeAssetId = new Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId();
            TakeAssetId.Decode(byteArray, ref p);
            Amount = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            Amount.Decode(byteArray, ref p);
            Price = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            Price.Decode(byteArray, ref p);
            MinTakeValue = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            MinTakeValue.Decode(byteArray, ref p);
            FeeSide = new Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.listing.EnumFeeSide();
            FeeSide.Decode(byteArray, ref p);
            CreationBlock = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>();
            CreationBlock.Decode(byteArray, ref p);
            Deposit = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            Deposit.Decode(byteArray, ref p);
            Salt = new Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT13();
            Salt.Decode(byteArray, ref p);
            Data = new Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.listing.EnumListingData();
            Data.Decode(byteArray, ref p);
            State = new Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.listing.EnumListingState();
            State.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
