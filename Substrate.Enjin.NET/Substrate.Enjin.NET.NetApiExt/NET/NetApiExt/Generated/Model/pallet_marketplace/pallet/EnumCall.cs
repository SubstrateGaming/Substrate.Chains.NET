//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_listing
        /// Places a sell order. Requires `make_asset_id` or `take_asset_id` to be a currency.
        /// The id for the listing is generated by hashing the encoded bytes of the listing.
        /// 
        /// # Parameters
        /// 
        /// - `make_asset_id`: The id of the asset being sold
        /// - `take_asset_id`: The id of the asset being requested
        /// - `amount`: The number of units being sold
        /// - `price`: The requested price for each unit. If it's an auction, this is the minimum
        ///   bid
        /// - `salt`: Can be used to differentiate listings
        /// - `auction_data`: Including this makes the listing an auction
        /// 
        /// # Errors
        /// 
        /// - [`Error::InvalidAuctionStart`] if the start is less than the current block +
        ///   `T::ListingActiveDelay`
        /// - [`Error::NoCurrency`] Neither the make or take side is considered a currency
        /// - [`Error::ListingForbidden`] if make or take side tokens are not allowed to be listed
        /// - [`Error::CurrencyNotAllowedAsRoyalty`] if currency cannot be used as a royalty
        /// - [`Error::LowBaseCurrencyBalance`] if base currency balance is too low
        /// - [`Error::LowTokenBalance`] token balance is too low for reserve
        /// - [`Error::ListingAlreadyExists`] if a listing with the same ID already exists
        /// </summary>
        create_listing = 0,
        
        /// <summary>
        /// >> cancel_listing
        /// Cancels the listing with `listing_id`. Only callable by the seller.
        /// 
        /// # Parameters
        /// 
        /// - `listing_id`: The ID of the listing to cancel
        /// 
        /// # Errors
        /// 
        /// - [`Error::ListingNotFound`] if the listing under `listing_id` does not exist
        /// - [`Error::NoPermission`] if the listing seller is not the caller, `origin`
        /// </summary>
        cancel_listing = 1,
        
        /// <summary>
        /// >> fill_listing
        /// Fills a fixed price listing. This will execute immediately.
        /// # Parameters
        /// 
        /// - `listing_id`: The id for the listing to buy from
        /// - `amount`: The number of units purchased
        /// 
        /// # Errors
        /// 
        /// - [`Error::ListingNotFound`] if the listing under `listing_id` does not exist
        /// - [`Error::BuyerIsSeller`] if the buyer is the seller of the listing
        /// - [`Error::ListingIsWrongType`] if the listing is not under auction
        /// - [`Error::InvalidAmount`] if the amount that still needs to be filled is greater than
        ///   `amount`
        /// - [`Error::ListingNotActive`] if the listing has not passed the `ListingActiveDelay` yet
        /// - [`Error::TakeValueUnderMinimum`] if the listings `take` value is under the minimum
        ///   required
        /// - [`Error::LowTokenBalance`] if the buyer does not have enough tokens for reserve
        /// </summary>
        fill_listing = 2,
        
        /// <summary>
        /// >> place_bid
        /// Places a bid on a listing. The listing must be an auction, and it must be currently
        /// active.
        /// 
        /// # Parameters
        /// 
        /// - `listing_id`: The id for the listing to buy from
        /// - `price`: The price for a single unit
        /// 
        /// # Errors
        /// 
        /// - [`Error::ListingNotFound`] if listing under `listing_id` does not exist
        /// - [`Error::BuyerIsSeller`] if the bidder is the seller of the listing
        /// - [`Error::InactiveAuction`] if listing operates outside of specified start and end
        ///   block
        /// - [`Error::InvalidPrice`] if price is less than minimum_price for a bid
        /// </summary>
        place_bid = 3,
        
        /// <summary>
        /// >> finalize_auction
        /// Finalize the auction with id: `listing_id`. This will end the auction and transfer
        /// funds. It fails if the auction is not over.
        /// 
        /// # Parameters
        /// 
        /// - `listing_id`: The ID for the listing to finalize
        /// 
        /// # Errors
        /// 
        /// - [`Error::ListingNotFound`] if listing under `listing_id` does not exist
        /// - [`Error::ListingIsWrongType`] if listing is not an auction
        /// - [`Error::AuctionNotOver`] if the auction has not finished yet
        /// - [`Error::TakeValueUnderMinimum`] if the take value is less than the minimum required
        /// </summary>
        finalize_auction = 4,
        
        /// <summary>
        /// >> set_protocol_fee
        /// Change the protocol fee to `protocol_fee`. Fails if `origin` is invalid.
        /// 
        /// #Parameters
        /// 
        /// - `protocol_fee`: Percentage of fee to set
        /// </summary>
        set_protocol_fee = 5,
        
        /// <summary>
        /// >> force_create_listing
        /// Force create a listing. This is only callable by the [`Config::ForceOrigin`].
        /// 
        /// # Parameters
        /// 
        /// Mostly the same as [`Self::create_listing`], but `deposit_backer` can be included to pay
        /// a deposit if `seller` does not have enough.
        /// 
        /// # Errors
        /// 
        /// Same as [`Self::create_listing`], except `BadOrigin` if the origin is not
        /// [`Config::ForceOrigin`]
        /// </summary>
        force_create_listing = 6,
        
        /// <summary>
        /// >> force_place_bid
        /// Same as [create_listing](Self::place_bid), but allows specifying the `bidder` and can
        /// place a bid in an inactive auction. Only callable by [`Config::ForceOrigin`]. If
        /// `funds_backer` is `Some`, it will transfer balance if `bidder` does not have enough.
        /// </summary>
        force_place_bid = 7,
    }
    
    /// <summary>
    /// >> 573 - Variant[pallet_marketplace.pallet.Call]
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class EnumCall : BaseEnumExt<Call, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId, Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT13, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.auction.AuctionData>>, Substrate.Enjin.NET.NetApiExt.Generated.Model.primitive_types.H256, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, Substrate.Enjin.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId, Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_multi_tokens.token.AssetId, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT13, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_marketplace.features.auction.AuctionData>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>>>
    {
    }
}
