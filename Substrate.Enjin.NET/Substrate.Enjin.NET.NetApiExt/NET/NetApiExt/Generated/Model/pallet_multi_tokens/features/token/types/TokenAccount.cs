//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_multi_tokens.features.token.types
{
    
    
    /// <summary>
    /// >> 234 - Composite[pallet_multi_tokens.features.token.types.TokenAccount]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class TokenAccount : BaseType
    {
        
        /// <summary>
        /// >> balance
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> Balance { get; set; }
        /// <summary>
        /// >> reserved_balance
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> ReservedBalance { get; set; }
        /// <summary>
        /// >> locked_balance
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> LockedBalance { get; set; }
        /// <summary>
        /// >> named_reserves
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3 NamedReserves { get; set; }
        /// <summary>
        /// >> locks
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4 Locks { get; set; }
        /// <summary>
        /// >> approvals
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT5 Approvals { get; set; }
        /// <summary>
        /// >> is_frozen
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool IsFrozen { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "TokenAccount";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Balance.Encode());
            result.AddRange(ReservedBalance.Encode());
            result.AddRange(LockedBalance.Encode());
            result.AddRange(NamedReserves.Encode());
            result.AddRange(Locks.Encode());
            result.AddRange(Approvals.Encode());
            result.AddRange(IsFrozen.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Balance = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            Balance.Decode(byteArray, ref p);
            ReservedBalance = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            ReservedBalance.Decode(byteArray, ref p);
            LockedBalance = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>();
            LockedBalance.Decode(byteArray, ref p);
            NamedReserves = new Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT3();
            NamedReserves.Decode(byteArray, ref p);
            Locks = new Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4();
            Locks.Decode(byteArray, ref p);
            Approvals = new Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT5();
            Approvals.Decode(byteArray, ref p);
            IsFrozen = new Substrate.NetApi.Model.Types.Primitive.Bool();
            IsFrozen.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
