//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_fuel_tank
        /// Creates a fuel tank, given a descriptor
        /// 
        /// # Errors
        /// 
        /// - [`Error::FuelTankAlreadyExists`] if `tank_id` already exists
        /// - [`Error::DuplicateRuleKinds`] if a rule set has multiple rules of the same kind
        /// </summary>
        create_fuel_tank = 0,
        
        /// <summary>
        /// >> mutate_fuel_tank
        /// Apply `mutation` to fuel tank with `tank_id`.
        /// 
        /// # Errors
        /// 
        /// - [`Error::FuelTankNotFound`] if `tank_id` does not exist.
        /// - [`Error::NoPermission`] if `origin` is not the fuel tank owner
        /// </summary>
        mutate_fuel_tank = 1,
        
        /// <summary>
        /// >> add_account
        /// Adds new account for `user_id` to fuel tank at `tank_id`. An account is
        /// required to dispatch calls. A deposit is required, and may be paid by
        /// the user or the fuel tank, depending on the settings.
        /// 
        /// ### Errors
        /// 
        /// - [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist
        /// - [`Error::NoPermission`] if `origin` does not have permission to add an account
        /// - [`Error::AccountAlreadyExists`] if account at `user_id` already exists
        /// </summary>
        add_account = 2,
        
        /// <summary>
        /// >> remove_account
        /// Removes account for `user_id` from fuel tank at `tank_id`. Any deposits
        /// are returned.
        /// 
        /// ### Errors
        /// 
        /// - [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist
        /// - [`Error::NoPermission`] if `origin` does not have permission to add an account
        /// - [`Error::AccountNotFound`] if account at `user_id` does not exist
        /// </summary>
        remove_account = 3,
        
        /// <summary>
        /// >> remove_account_rule_data
        /// Remove account rule data if it exists. Only callable by the fuel tank's owner. Requires
        /// the fuel tank or the rule set to be frozen.
        /// 
        /// ### Errors
        /// 
        /// - [`Error::FuelTankNotFound`] if fuel tank for `tank_id` doesn't exist
        /// - [`Error::NoPermission`] if called by non-owner
        /// - [`Error::AccountNotFound`] if account does not exist for `user_id`
        /// - [`Error::RuleSetNotFound`] if rule set does not exist for `rule_set_id`
        /// - [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen
        /// - [`Error::RuleNotFound`] if rule does not exist for `rule_kind`
        /// </summary>
        remove_account_rule_data = 4,
        
        /// <summary>
        /// >> dispatch
        /// Dispatch a call using the `tank_id` subject to the rules of `rule_set_id`
        /// 
        /// # Errors
        /// - [`Error::FuelTankNotFound`] if `tank_id` does not exist.
        /// - [`Error::UsageRestricted`] if caller is not part of ruleset whitelist
        /// - [`Error::CallerDoesNotHaveRuleSetTokenBalance`] if caller does not own the tokens to
        ///   use the ruleset for remaining_fee when `pays_remaining_fee` is true
        /// - [`Error::FuelTankOutOfFunds`] if the fuel tank account cannot pay fees
        /// </summary>
        dispatch = 5,
        
        /// <summary>
        /// >> dispatch_and_touch
        /// Same as [dispatch](Self::dispatch), but creates an account for `origin` if it does not
        /// exist and is allowed by the fuel tank's `user_account_management` settings.
        /// 
        /// # Errors
        /// 
        /// Returns the same errors as [dispatch](Self::dispatch) and
        /// [add_account](Self::add_account)
        /// </summary>
        dispatch_and_touch = 6,
        
        /// <summary>
        /// >> mutate_freeze_state
        /// Mutate `is_frozen` state that determines if fuel tank or rule set can be used
        /// 
        /// # Errors
        /// - [`Error::FuelTankNotFound`] if `tank_id` does not exist.
        /// - [`Error::NoPermission`] if caller is not a fuel tank owner
        /// </summary>
        mutate_freeze_state = 7,
        
        /// <summary>
        /// >> insert_rule_set
        /// Insert a new rule set for `tank_id` and `rule_set_id`. It can be a new rule set
        /// or it can replace an existing one. If it is replacing a rule set, a rule that is storing
        /// data on any accounts cannot be removed. Use [Self::remove_account_rule_data] to remove
        /// the data first. If a rule is being replaced, it will be mutated with the new parameters,
        /// and it will maintain any persistent data it already has.
        /// 
        /// This is only callable by the fuel tank's owner.
        /// ### Errors
        /// - [`Error::FuelTankNotFound`] if `tank_id` does not exist.
        /// - [`Error::NoPermission`] if caller is not the fuel tank owner
        /// - [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen
        /// - [`Error::CannotRemoveRuleThatIsStoringAccountData`] if removing a rule that is storing
        ///   account data
        /// - [`Error::MaxRuleSetsExceeded`] if max number of rule sets was exceeded
        /// - [`Error::DuplicateRuleKinds`] if adding a rule set with multiple rules of the same
        ///   kind
        /// </summary>
        insert_rule_set = 8,
        
        /// <summary>
        /// >> remove_rule_set
        /// Remove rule set for `tank_id` and `rule_set_id`. A rule that is storing data on
        /// any accounts cannot be removed. Use [Self::remove_account_rule_data] to remove the
        /// data first. This is only callable by the fuel tank's owner.
        /// # Errors
        /// 
        /// - [`Error::FuelTankNotFound`] if `tank_id` does not exist.
        /// - [`Error::NoPermission`] if caller is not the fuel tank owner
        /// - [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen
        /// - [`Error::CannotRemoveRuleThatIsStoringAccountData`] if removing a rule that is storing
        ///   account data
        /// </summary>
        remove_rule_set = 9,
        
        /// <summary>
        /// >> batch_add_account
        /// Similar to add_account but takes a list of
        /// [`AccountId`](frame_system::Config::AccountId)s to insert into a fuel tank.
        /// ### Errors
        /// - [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist
        /// - [`Error::NoPermission`] if `origin` does not have permission to add an account
        /// - [`Error::AccountAlreadyExists`] if account at `user_id` already exists
        /// </summary>
        batch_add_account = 10,
        
        /// <summary>
        /// >> batch_remove_account
        /// Similar to remove_account but takes a list of
        /// [`AccountId`](frame_system::Config::AccountId)s to remove from a fuel tank.
        /// ### Errors
        /// - [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist
        /// - [`Error::NoPermission`] if `origin` does not have permission to add an account
        /// - [`Error::AccountNotFound`] if account at `user_id` does not exist
        /// </summary>
        batch_remove_account = 11,
        
        /// <summary>
        /// >> force_set_consumption
        /// Force set the fuel tank consumption
        /// If `user_id` is [`Some`], it sets the consumption for that account.
        /// If it is [`None`], it sets the consumption on the fuel tank directly.
        /// 
        /// # Errors
        /// 
        /// - [`Error::AccountNotFound`] if `user_id` is `Some` and account does not exist
        /// - [`Error::FuelTankNotFound`] if tank_id does not exist
        /// - [`Error::NoPermission`] if caller is not ForceOrigin or fuel tank owner
        /// - [`Error::InvalidRuleSet`] if `rule_set_id` does not exist
        /// - [`Error::MissingRequiredRule`] if `rule_set_id` does not have the required role
        /// </summary>
        force_set_consumption = 12,
        
        /// <summary>
        /// >> destroy_fuel_tank
        /// Destroy the fuel tank by scheduling the deletion for `on_finalize` to execute
        /// Only callable by owner
        /// The fuel tank must be frozen
        /// Can only be destroyed if all accounts are removed
        /// 
        /// # Errors
        /// 
        /// - [`Error::FuelTankNotFound`] if tank_id does not exist
        /// - [`Error::NoPermission`] if caller is not owner
        /// - [`Error::DestroyUnfrozenTank`] if tank is not frozen
        /// - [`Error::DestroyWithExistingAccounts`] if there are still accounts on the tank
        /// </summary>
        destroy_fuel_tank = 13,
        
        /// <summary>
        /// >> force_create_fuel_tank
        /// Force creates a fuel tank
        /// 
        /// # Errors
        /// 
        /// - [`Error::FuelTankAlreadyExists`] if `tank_id` already exists
        /// </summary>
        force_create_fuel_tank = 14,
        
        /// <summary>
        /// >> force_batch_add_account
        /// Sets the account storage for give tank_id and account
        /// </summary>
        force_batch_add_account = 15,
    }
    
    /// <summary>
    /// >> 541 - Variant[pallet_fuel_tanks.pallet.Call]
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class EnumCall : BaseEnumExt<Call, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.types.FuelTankDescriptor, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.impls.DefaultTankMutation>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.rules.EnumDispatchRuleKind>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.enjin_runtime.EnumRuntimeCall, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.types.DispatchSettings>>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.enjin_runtime.EnumRuntimeCall, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.types.DispatchSettings>>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.Bool>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.types.Consumption>, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_fuel_tanks.types.FuelTankDescriptor>, BaseTuple<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23>>
    {
    }
}
