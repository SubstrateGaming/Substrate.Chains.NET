//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> StakeExchangeStorage
    /// </summary>
    public sealed class StakeExchangeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> StakeExchangeStorage Constructor
        /// </summary>
        public StakeExchangeStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("StakeExchange", "LiquidityConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("StakeExchange", "Offers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("StakeExchange", "NextOfferId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> LiquidityConfigsParams
        ///  Mapping of LP accounts to their configuration
        /// </summary>
        public static string LiquidityConfigsParams(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("StakeExchange", "LiquidityConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LiquidityConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string LiquidityConfigsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LiquidityConfigs
        ///  Mapping of LP accounts to their configuration
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig> LiquidityConfigs(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = StakeExchangeStorage.LiquidityConfigsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OffersParams
        ///  Mapping of LPAccountId to their active offer
        /// </summary>
        public static string OffersParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("StakeExchange", "Offers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OffersDefault
        /// Default value as hex string
        /// </summary>
        public static string OffersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Offers
        ///  Mapping of LPAccountId to their active offer
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer> Offers(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = StakeExchangeStorage.OffersParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.Offer>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextOfferIdParams
        ///  Value to use for Next offer Id
        /// </summary>
        public static string NextOfferIdParams()
        {
            return RequestGenerator.GetStorage("StakeExchange", "NextOfferId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextOfferIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextOfferIdDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> NextOfferId
        ///  Value to use for Next offer Id
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NextOfferId(string blockhash, CancellationToken token)
        {
            string parameters = StakeExchangeStorage.NextOfferIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> StakeExchangeCalls
    /// </summary>
    public sealed class StakeExchangeCalls
    {
        
        /// <summary>
        /// >> create_offer
        /// The pallet's extrinsics.
        /// </summary>
        public static Method CreateOffer(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.CreateOffer offer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offer.Encode());
            return new Method(19, "StakeExchange", 0, "create_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_offer
        /// The pallet's extrinsics.
        /// </summary>
        public static Method CancelOffer(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> offer_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offer_id.Encode());
            return new Method(19, "StakeExchange", 1, "cancel_offer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> configure_liquidity_account
        /// The pallet's extrinsics.
        /// </summary>
        public static Method ConfigureLiquidityAccount(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_stake_exchange.types.LiquidityAccountConfig config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(config.Encode());
            return new Method(19, "StakeExchange", 2, "configure_liquidity_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_liquidity
        /// The pallet's extrinsics.
        /// </summary>
        public static Method WithdrawLiquidity(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> offer_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offer_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(19, "StakeExchange", 3, "withdraw_liquidity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_liquidity
        /// The pallet's extrinsics.
        /// </summary>
        public static Method AddLiquidity(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> offer_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offer_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(19, "StakeExchange", 4, "add_liquidity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy
        /// The pallet's extrinsics.
        /// </summary>
        public static Method Buy(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> offer_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> token_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offer_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(token_id.Encode());
            return new Method(19, "StakeExchange", 5, "buy", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> StakeExchangeConstants
    /// </summary>
    public sealed class StakeExchangeConstants
    {
        
        /// <summary>
        /// >> ReserveIdentifier
        ///  The id used for making reservations with this pallet
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Types.Base.Arr8U8 ReserveIdentifier()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Types.Base.Arr8U8();
            result.Create("0x7374616B65657867");
            return result;
        }
        
        /// <summary>
        /// >> MaxFilteredTokenCount
        ///  The maximum number of tokens that can be whitelisted/blacklisted
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFilteredTokenCount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> OfferDeposit
        ///  The deposit for creating an offer
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 OfferDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00602ADCB86A14070000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> StakeExchangeErrors
    /// </summary>
    public enum StakeExchangeErrors
    {
        
        /// <summary>
        /// >> CallerNotOfferCreator
        /// Caller is not the account of
        /// </summary>
        CallerNotOfferCreator,
        
        /// <summary>
        /// >> ZeroOffer
        /// Cannot create a offer with zero amount
        /// </summary>
        ZeroOffer,
        
        /// <summary>
        /// >> ZeroRate
        /// Cannot create a offer with zero rate
        /// </summary>
        ZeroRate,
        
        /// <summary>
        /// >> Overflow
        /// Arithmetic overflow
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> OfferNotFound
        /// A offer was not found
        /// </summary>
        OfferNotFound,
        
        /// <summary>
        /// >> NotEnoughLiquidity
        /// The offer does not have liquidity to perform the operation
        /// </summary>
        NotEnoughLiquidity,
        
        /// <summary>
        /// >> TransferParamCreationFailed
        /// Cannot perform multi tokens transfer
        /// </summary>
        TransferParamCreationFailed,
        
        /// <summary>
        /// >> TokenRestriction
        /// LP does not support this tokenId
        /// </summary>
        TokenRestriction,
        
        /// <summary>
        /// >> ZeroAmount
        /// Zero amount buy not supported
        /// </summary>
        ZeroAmount,
        
        /// <summary>
        /// >> RewardRateOutOfRange
        /// Pool rewards outside acceptable range
        /// </summary>
        RewardRateOutOfRange,
    }
}
