//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> VoterListStorage
    /// </summary>
    public sealed class VoterListStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> VoterListStorage Constructor
        /// </summary>
        public VoterListStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VoterList", "ListNodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_bags_list.list.Node)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VoterList", "CounterForListNodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("VoterList", "ListBags"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_bags_list.list.Bag)));
        }
        
        /// <summary>
        /// >> ListNodesParams
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public static string ListNodesParams(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("VoterList", "ListNodes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string ListNodesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ListNodes
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_bags_list.list.Node> ListNodes(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = VoterListStorage.ListNodesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_bags_list.list.Node>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForListNodesParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForListNodesParams()
        {
            return RequestGenerator.GetStorage("VoterList", "CounterForListNodes", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForListNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForListNodesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForListNodes
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForListNodes(string blockhash, CancellationToken token)
        {
            string parameters = VoterListStorage.CounterForListNodesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ListBagsParams
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public static string ListBagsParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("VoterList", "ListBags", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListBagsDefault
        /// Default value as hex string
        /// </summary>
        public static string ListBagsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ListBags
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_bags_list.list.Bag> ListBags(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = VoterListStorage.ListBagsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_bags_list.list.Bag>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> VoterListCalls
    /// </summary>
    public sealed class VoterListCalls
    {
        
        /// <summary>
        /// >> rebag
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Rebag(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress dislocated)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dislocated.Encode());
            return new Method(17, "VoterList", 0, "rebag", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> put_in_front_of
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PutInFrontOf(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress lighter)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(lighter.Encode());
            return new Method(17, "VoterList", 1, "put_in_front_of", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> VoterListConstants
    /// </summary>
    public sealed class VoterListConstants
    {
        
        /// <summary>
        /// >> BagThresholds
        ///  The list of thresholds separating the various bags.
        /// 
        ///  Ids are separated into unsorted bags according to their score. This specifies the
        ///  thresholds separating the bags. An id's bag is the largest bag for which the id's score
        ///  is less than or equal to its upper threshold.
        /// 
        ///  When ids are iterated, higher bags are iterated completely before lower bags. This means
        ///  that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower
        ///  score, but peer ids within a particular bag are sorted in insertion order.
        /// 
        ///  # Expressing the constant
        /// 
        ///  This constant must be sorted in strictly increasing order. Duplicate items are not
        ///  permitted.
        /// 
        ///  There is an implied upper limit of `Score::MAX`; that value does not need to be
        ///  specified within the bag. For any two threshold lists, if one ends with
        ///  `Score::MAX`, the other one does not, and they are otherwise equal, the two
        ///  lists will behave identically.
        /// 
        ///  # Calculation
        /// 
        ///  It is recommended to generate the set of thresholds in a geometric series, such that
        ///  there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *
        ///  constant_ratio).max(threshold[k] + 1)` for all `k`.
        /// 
        ///  The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.
        /// 
        ///  # Examples
        /// 
        ///  - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and
        ///    iteration is strictly in insertion order.
        ///  - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to
        ///    the procedure given above, then the constant ratio is equal to 2.
        ///  - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to
        ///    the procedure given above, then the constant ratio is approximately equal to 1.248.
        ///  - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall
        ///    into bag 0, an id with score 2 will fall into bag 1, etc.
        /// 
        ///  # Migration
        /// 
        ///  In the event that this list ever changes, a copy of the old bags list must be retained.
        ///  With that `List::migrate` can be called, which will perform the appropriate migration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U64> BagThresholds()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U64>();
            result.Create("0x2103AB2FB84400000000D5E1544D0000000043E00557000000004CCBED61000000002E9A336E000" +
                    "000004626037C00000000BCC78D8B00000000CE050B9D00000000395DB9B0000000007A1FDFC6000" +
                    "000000B6ECBDF000000001D55D7FB00000000C109671B01000000F14FEB3E01000000750DE366010" +
                    "00000460FDD9301000000C8077AC601000000EECC6EFF0100000057DE863F02000000633CA787020" +
                    "00000649AD1D8020000005EF727340300000024AAF09A0300000055EF9A0E040000007309C490040" +
                    "000006F053D23050000003B3811C8050000009B8C8D810600000048BB485207000000C78A2C3D080" +
                    "00000FE37804509000000B72CF46E0A000000EB2DAFBD0B000000ED305D360D000000730C40DE0E0" +
                    "00000234142BB10000000BD1C0CD41200000069831B301500000025B4DED717000000F967D2D41A0" +
                    "0000089B7A3311E0000002B4056FA21000000C3106F3C26000000C6F724072B000000FBDE966B300" +
                    "000002DF7087D36000000678E29513D000000A0865E0045000000A5811CA64D000000AFF94861570" +
                    "0000029A5A8546200000009B05BA76E000000948669857C00000009255E208C0000003A1EFBAF9D0" +
                    "0000094D1FE72B10000005F9804B0C7000000240B81B6E000000090E4DDDFFC0000002B78B9901C0" +
                    "100003A324E3A400100005525075C680100000C4B4785950100003CD26957C801000074A10288010" +
                    "20000411967E3410200004F24884F8A020000D3C527CFDB020000959D758537030000CA481FBA9E0" +
                    "30000EC24E3DD1204000093CBB58F9504000089AA8CA2280500004469E223CE050000CA640C63880" +
                    "6000009767BF959070000677F05D44508000044F0583D4F090000C995BFE9790A00005CBE5A04CA0" +
                    "B00002FF9073E440D000080A823DEED0E00004E4865D5CC10000075CC18D3E712000015EB005D461" +
                    "50000F8A837EAF0170000872F6D01F11A0000A2FCF05A511E0000B507FF061E220000D9B4D998642" +
                    "600002C954A57342B00002F4037739E300000C2490D45B6360000DAC8E091913D0000B76334D9484" +
                    "5000053C980ACF74D0000B553B411BD57000011C00AF2BB6200004604C9961B6F0000FEEA9A35087" +
                    "D00008FF9878EB38C00009CFCB39D559E00009B5266632DB20000C2A222C581C80000A43FF78AA2E" +
                    "10000163F8A7CE9FD0000E5BCDFA1BB1D0100986053AC8A4101002EE0CE8CD669010074DBE83C2F9" +
                    "70100CF4E4DC136CA01000A8B9D6CA303020021F5DB6A4244020017047B9EFA8C0200CDA14AD9CFD" +
                    "E0200A150C77CE63A030023D7BF8E87A2030023DDE55025170400DEA6B16B609A04005D7B0FBF0D2" +
                    "E0500EE9A9DED3CD40500443EDCB93F8F060001349F4FB261070013D15C97844E0800A4D0ABB4045" +
                    "90900FFB36ED5EA840A00361DDE7B66D60B00554AED722D520D00062777A28CFD0E0073A254FF7AD" +
                    "E1000800306DBAEFB1200B1C213DFB55C1500F54AD609100A18008B01110D4E0D1B00D076E27A337" +
                    "11E000CD3243BDD4122002009A7D2EC8C2600DEC1DF16B9612B0004D51BFC84D1300078BCF841BDE" +
                    "F360010A685DA3DD23D00504D0304A0914500F4434E2C92494E00C0CDF7D73A19580090E46BEEA72" +
                    "36300F0F7CBF84B906F0020C1FB128B8B7D000820728659478D0010C67B45EEFB9E0078F3A1C48BE" +
                    "8B2006878D2FF6154C900480ED5D28C8FE2008849CE3132F4FE0040707340C4E71E017056BBC66BD" +
                    "C4201F0E31012A0526B01F06257F4F1DA98012007B3481018CC0180CA8D330DC105020019983AECA" +
                    "346020020C85582A88F02A0DE3B3FB2D3E10220AC7791104B3E03606F5EB6FC58A60380549F4A3D7" +
                    "11B04C0A2016F30369F0440928091A27E330500FCEE8A605CDA05809D2A8B9C239606C0BB173F407" +
                    "36907805533EB493E5708001F58EF55D662090007A9597AF78F0A00F36DE69ED5E20B8048E819812" +
                    "B600D8008B51A9A4B0D0F00C292AC2233F0100042583C799F0F13004B9E713626731500827E4F465" +
                    "02318004710B666B8291B00377F38782D911E000011E31BD9652200E0F9E9276BB52600C05E848E4" +
                    "A8F2B00CA20AC65CC043100288E60D471293700FC11AEC22D133E00AC847745B3DA450064DF31DEC" +
                    "D9B4E00284FE0C9C4755800806A22C2CA8B630050CF9DBF7B057000048D167F6A0F7E002043D9C2B" +
                    "FDB8D0060F67789EDA29F0090B729BA78A4B300A8155C17DC27CA0048AF52A2877DE3FFFFFFFFFFF" +
                    "FFFFF");
            return result;
        }
    }
    
    /// <summary>
    /// >> VoterListErrors
    /// </summary>
    public enum VoterListErrors
    {
        
        /// <summary>
        /// >> List
        /// A error in the list interface implementation.
        /// </summary>
        List,
    }
}
