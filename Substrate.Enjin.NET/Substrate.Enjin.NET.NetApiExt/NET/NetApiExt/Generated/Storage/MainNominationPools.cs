//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> NominationPoolsStorage
    /// </summary>
    public sealed class NominationPoolsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> NominationPoolsStorage Constructor
        /// </summary>
        public NominationPoolsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "MinJoinBond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "MinCreateBond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "UnbondingMembers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "BondedPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForBondedPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "SubPoolsStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForSubPoolsStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "NextPoolId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "ReversePoolIdLookup"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForReversePoolIdLookup"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "UsedPoolTokenIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "GlobalMaxCommission"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "StakingInformation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "EarlyBirdBonusInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "EraPayoutInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "PoolBonusInfos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "EarlyBirdShares"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill)));
        }
        
        /// <summary>
        /// >> MinJoinBondParams
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        public static string MinJoinBondParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "MinJoinBond", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinJoinBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MinJoinBondDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinJoinBond
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinJoinBond(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MinJoinBondParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinCreateBondParams
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the pool creator must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        public static string MinCreateBondParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "MinCreateBond", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinCreateBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MinCreateBondDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinCreateBond
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the pool creator must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinCreateBond(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MinCreateBondParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnbondingMembersParams
        ///  Pool Members who are Unbonding.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public static string UnbondingMembersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("NominationPools", "UnbondingMembers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> UnbondingMembersDefault
        /// Default value as hex string
        /// </summary>
        public static string UnbondingMembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UnbondingMembers
        ///  Pool Members who are Unbonding.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember> UnbondingMembers(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.UnbondingMembersParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMember>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BondedPoolsParams
        ///  Storage for bonded pools.
        /// </summary>
        public static string BondedPoolsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "BondedPools", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BondedPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string BondedPoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BondedPools
        ///  Storage for bonded pools.
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner> BondedPools(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.BondedPoolsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.BondedPoolInner>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForBondedPoolsParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForBondedPoolsParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForBondedPools", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForBondedPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForBondedPoolsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForBondedPools
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForBondedPools(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForBondedPoolsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SubPoolsStorageParams
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,
        ///  hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        public static string SubPoolsStorageParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "SubPoolsStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SubPoolsStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string SubPoolsStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SubPoolsStorage
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,
        ///  hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools> SubPoolsStorage(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.SubPoolsStorageParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.SubPools>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorageParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForSubPoolsStorageParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForSubPoolsStorage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForSubPoolsStorageDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorage
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForSubPoolsStorage(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForSubPoolsStorageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextPoolIdParams
        ///  The next pool id that will be used in [`create`](Pallet::create). Increments by one with
        ///  each pool created.
        /// </summary>
        public static string NextPoolIdParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "NextPoolId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextPoolIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextPoolIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextPoolId
        ///  The next pool id that will be used in [`create`](Pallet::create). Increments by one with
        ///  each pool created.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextPoolId(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.NextPoolIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReversePoolIdLookupParams
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing. In all other instances, the pool id is used, and the
        ///  accounts are deterministically derived from it.
        /// </summary>
        public static string ReversePoolIdLookupParams(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "ReversePoolIdLookup", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReversePoolIdLookupDefault
        /// Default value as hex string
        /// </summary>
        public static string ReversePoolIdLookupDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReversePoolIdLookup
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing. In all other instances, the pool id is used, and the
        ///  accounts are deterministically derived from it.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ReversePoolIdLookup(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.ReversePoolIdLookupParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookupParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForReversePoolIdLookupParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForReversePoolIdLookup", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookupDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForReversePoolIdLookupDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookup
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForReversePoolIdLookup(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForReversePoolIdLookupParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UsedPoolTokenIdsParams
        ///  A reverse lookup from the token_id to pool_id.
        /// 
        ///  This is used for making sure the same token is not used to create multiple pools
        /// </summary>
        public static string UsedPoolTokenIdsParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "UsedPoolTokenIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UsedPoolTokenIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string UsedPoolTokenIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UsedPoolTokenIds
        ///  A reverse lookup from the token_id to pool_id.
        /// 
        ///  This is used for making sure the same token is not used to create multiple pools
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> UsedPoolTokenIds(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.UsedPoolTokenIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GlobalMaxCommissionParams
        ///  The maximum commission that can be charged by a pool. Used on commission payouts to bound
        ///  pool commissions that are > `GlobalMaxCommission`, necessary if a future
        /// </summary>
        public static string GlobalMaxCommissionParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "GlobalMaxCommission", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GlobalMaxCommissionDefault
        /// Default value as hex string
        /// </summary>
        public static string GlobalMaxCommissionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GlobalMaxCommission
        ///  The maximum commission that can be charged by a pool. Used on commission payouts to bound
        ///  pool commissions that are > `GlobalMaxCommission`, necessary if a future
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> GlobalMaxCommission(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.GlobalMaxCommissionParams();
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> StakingInformationParams
        ///  The general staking parameters
        /// </summary>
        public static string StakingInformationParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "StakingInformation", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StakingInformationDefault
        /// Default value as hex string
        /// </summary>
        public static string StakingInformationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> StakingInformation
        ///  The general staking parameters
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo> StakingInformation(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.StakingInformationParams();
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EarlyBirdBonusInfoParams
        ///  The queue of bonuses that should be distributed to the pools
        /// </summary>
        public static string EarlyBirdBonusInfoParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "EarlyBirdBonusInfo", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EarlyBirdBonusInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string EarlyBirdBonusInfoDefault()
        {
            return "0x00000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> EarlyBirdBonusInfo
        ///  The queue of bonuses that should be distributed to the pools
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo> EarlyBirdBonusInfo(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.EarlyBirdBonusInfoParams();
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EarlyBirdInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EraPayoutInfoParams
        ///  Tracks payout information for an era
        /// </summary>
        public static string EraPayoutInfoParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "EraPayoutInfo", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EraPayoutInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string EraPayoutInfoDefault()
        {
            return "0x00000000CA9A3B";
        }
        
        /// <summary>
        /// >> EraPayoutInfo
        ///  Tracks payout information for an era
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout> EraPayoutInfo(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.EraPayoutInfoParams();
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EraPayout>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PoolBonusInfosParams
        ///  Storage for pool bonus info
        /// </summary>
        public static string PoolBonusInfosParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "PoolBonusInfos", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolBonusInfosDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolBonusInfosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PoolBonusInfos
        ///  Storage for pool bonus info
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo> PoolBonusInfos(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.PoolBonusInfosParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolBonusInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EarlyBirdSharesParams
        ///  The percentage shares of pool users for early bird rewards
        /// </summary>
        public static string EarlyBirdSharesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("NominationPools", "EarlyBirdShares", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> EarlyBirdSharesDefault
        /// Default value as hex string
        /// </summary>
        public static string EarlyBirdSharesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> EarlyBirdShares
        ///  The percentage shares of pool users for early bird rewards
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> EarlyBirdShares(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.EarlyBirdSharesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> NominationPoolsCalls
    /// </summary>
    public sealed class NominationPoolsCalls
    {
        
        /// <summary>
        /// >> bond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Bond(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EnumBondValue amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(18, "NominationPools", 0, "bond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Unbond(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress member_account, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> unbonding_points)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(member_account.Encode());
            byteArray.AddRange(unbonding_points.Encode());
            return new Method(18, "NominationPools", 3, "unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool_withdraw_unbonded
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PoolWithdrawUnbonded(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 num_slashing_spans)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(num_slashing_spans.Encode());
            return new Method(18, "NominationPools", 4, "pool_withdraw_unbonded", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_unbonded
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method WithdrawUnbonded(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress member_account, Substrate.NetApi.Model.Types.Primitive.U32 num_slashing_spans)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(member_account.Encode());
            byteArray.AddRange(num_slashing_spans.Encode());
            return new Method(18, "NominationPools", 5, "withdraw_unbonded", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Create(Substrate.NetApi.Model.Types.Primitive.U128 token_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> deposit, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> capacity, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> duration, Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(deposit.Encode());
            byteArray.AddRange(capacity.Encode());
            byteArray.AddRange(duration.Encode());
            byteArray.AddRange(name.Encode());
            return new Method(18, "NominationPools", 6, "create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> nominate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Nominate(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> validators)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(validators.Encode());
            return new Method(18, "NominationPools", 8, "nominate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_configs
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetConfigs(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EnumConfigOp min_join_bond, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EnumConfigOp min_create_bond, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EnumConfigOp global_max_commission, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.EnumConfigOp required_payout_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(min_join_bond.Encode());
            byteArray.AddRange(min_create_bond.Encode());
            byteArray.AddRange(global_max_commission.Encode());
            byteArray.AddRange(required_payout_count.Encode());
            return new Method(18, "NominationPools", 11, "set_configs", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> chill
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Chill(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(18, "NominationPools", 13, "chill", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> destroy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Destroy(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(18, "NominationPools", 14, "destroy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout_rewards
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PayoutRewards(Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 validator_stash, Substrate.NetApi.Model.Types.Primitive.U32 era)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(validator_stash.Encode());
            byteArray.AddRange(era.Encode());
            return new Method(18, "NominationPools", 18, "payout_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> process_payouts
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ProcessPayouts(Substrate.NetApi.Model.Types.Primitive.U32 pool_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_count.Encode());
            return new Method(18, "NominationPools", 25, "process_payouts", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mutate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Mutate(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.PoolMutation mutation)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(mutation.Encode());
            return new Method(18, "NominationPools", 19, "mutate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbond_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UnbondDeposit(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(18, "NominationPools", 20, "unbond_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method WithdrawDeposit(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(18, "NominationPools", 21, "withdraw_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_free_balance
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method WithdrawFreeBalance(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress destination, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(destination.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(18, "NominationPools", 26, "withdraw_free_balance", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_staking_info
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetStakingInfo(Substrate.Enjin.NET.NetApiExt.Generated.Model.pallet_nomination_pools.types.StakingInfo info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(info.Encode());
            return new Method(18, "NominationPools", 22, "set_staking_info", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> calculate_early_bird_bonus
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CalculateEarlyBirdBonus(Substrate.NetApi.Model.Types.Primitive.U32 pool_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_count.Encode());
            return new Method(18, "NominationPools", 23, "calculate_early_bird_bonus", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_early_bird_bonus
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UnlockEarlyBirdBonus()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(18, "NominationPools", 28, "unlock_early_bird_bonus", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> capture_early_bird_bonus_shares
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CaptureEarlyBirdBonusShares(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 account_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(account_count.Encode());
            return new Method(18, "NominationPools", 27, "capture_early_bird_bonus_shares", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pay_early_bird_bonus
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PayEarlyBirdBonus(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 payment_id, Substrate.NetApi.Model.Types.Primitive.U32 account_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(payment_id.Encode());
            byteArray.AddRange(account_count.Encode());
            return new Method(18, "NominationPools", 24, "pay_early_bird_bonus", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NominationPoolsConstants
    /// </summary>
    public sealed class NominationPoolsConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The nomination pool's pallet id.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6E6F706C73");
            return result;
        }
        
        /// <summary>
        /// >> CollatorRewardPool
        ///  The pool ID for system account holding the collator rewards.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.frame_support.PalletId CollatorRewardPool()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F636F6C7270");
            return result;
        }
        
        /// <summary>
        /// >> MaxPointsToBalance
        ///  The maximum pool points-to-balance ratio that an `open` pool can have.
        /// 
        ///  This is important in the event slashing takes place and the pool's points-to-balance
        ///  ratio becomes disproportional.
        /// 
        ///  Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations
        ///  are a function of number of points, and by setting this value to e.g. 10, you ensure
        ///  that the total number of points in the system are at most 10 times the total_issuance of
        ///  the chain, in the absolute worse case.
        /// 
        ///  For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.
        ///  Such a scenario would also be the equivalent of the pool being 90% slashed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 MaxPointsToBalance()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0A");
            return result;
        }
        
        /// <summary>
        /// >> PostUnbondingPoolsWindow
        ///  The amount of eras a `SubPools::with_era` pool can exist before it gets merged into the
        ///  `SubPools::no_era` pool. In other words, this is the amount of eras a member will be
        ///  able to withdraw from an unbonding pool which is guaranteed to have the correct ratio of
        ///  points to balance; once the `with_era` pool is merged into the `no_era` pool, the ratio
        ///  can become skewed due to some slashed ratio getting merged in at some point.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PostUnbondingPoolsWindow()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x04000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxUnbonding
        ///  The maximum number of simultaneous unbonding chunks that can exist per member.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUnbonding()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x08000000");
            return result;
        }
        
        /// <summary>
        /// >> MinDuration
        ///  Min duration of a pool's bonus cycle in eras
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x1E000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDuration
        ///  Max duration of a pool's bonus cycle in eras
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
        
        /// <summary>
        /// >> PoolCollectionId
        ///  The collection id that is used for pool NFTs
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 PoolCollectionId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x02000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> StakedEnjCollectionId
        ///  The collection id that is used for sENJ tokens
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 StakedEnjCollectionId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x01000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> StakedEnjCollectionOwner
        ///  The owner of the sENJ collection
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 StakedEnjCollectionOwner()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C70792F6E6F706C730000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> BonusPercentage
        ///  The percentage of each pool's rewards that goes to the bonus
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill BonusPercentage()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
            result.Create("0x00C2EB0B");
            return result;
        }
        
        /// <summary>
        /// >> BaseBonusRewardPercentage
        ///  Share of bonus reward that is distributed to everyone regardless of their weight
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill BaseBonusRewardPercentage()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
            result.Create("0x80B2E60E");
            return result;
        }
        
        /// <summary>
        /// >> UnclaimedBalanceReceiver
        ///  The account that will receive the deposit and commission if the pool's token is burned.
        ///  It also receives the leftover bonus if a pool is destroyed.
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 UnclaimedBalanceReceiver()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C70792F74727372790000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> CapacityMutationPeriod
        ///  The number of eras its allowed to mutate the pools capacity
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CapacityMutationPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0E000000");
            return result;
        }
        
        /// <summary>
        /// >> EarlyBirdBonusDistributionBlock
        ///  The block number after which the early bird bonus can be distributed
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EarlyBirdBonusDistributionBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x988B3100");
            return result;
        }
        
        /// <summary>
        /// >> EarlyBirdBonusAccount
        ///  The account id that holds early bird bonus
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 EarlyBirdBonusAccount()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C6561726C626972640000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> GlobalMaxCapacity
        ///  The global maximum pool capacity
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GlobalMaxCapacity()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x000000949002282C2A8B100000000000");
            return result;
        }
        
        /// <summary>
        /// >> DefaultMaxCapacity
        ///  The default maximum pool capacity
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DefaultMaxCapacity()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x000080D07666E70DE169000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AttributeKeyMaxLength
        ///  The max attribute key length
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 AttributeKeyMaxLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00010000");
            return result;
        }
        
        /// <summary>
        /// >> AttributeValueMaxLength
        ///  The max attribute value length
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 AttributeValueMaxLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00040000");
            return result;
        }
        
        /// <summary>
        /// >> MaxCapacityAttributeKey
        ///  Max pool capacity attribute key
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8 MaxCapacityAttributeKey()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8();
            result.Create("0x446D61785F706F6F6C5F6361706163697479");
            return result;
        }
        
        /// <summary>
        /// >> EarlyBirdPaymentPeriod
        ///  The number of blocks between early bird payment unlocks
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EarlyBirdPaymentPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80970600");
            return result;
        }
        
        /// <summary>
        /// >> EarlyBirdPaymentCount
        ///  The max payments from early bird bonus
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EarlyBirdPaymentCount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxPoolNameLength
        ///  The maximum length of a pool name
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPoolNameLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
        
        /// <summary>
        /// >> EarlyBirdReimbursementAccountId
        ///  The account that the early bird ENJ reimbursement is sent from
        /// </summary>
        public Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 EarlyBirdReimbursementAccountId()
        {
            var result = new Substrate.Enjin.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x248D6D902429D7741084DEA31A25876165888CB11E61B0208BE1048A58264943");
            return result;
        }
    }
    
    /// <summary>
    /// >> NominationPoolsErrors
    /// </summary>
    public enum NominationPoolsErrors
    {
        
        /// <summary>
        /// >> PoolNotFound
        /// A (bonded) pool id does not exist.
        /// </summary>
        PoolNotFound,
        
        /// <summary>
        /// >> PoolTokenAlreadyInUse
        /// Pool already exists for the given token_id
        /// </summary>
        PoolTokenAlreadyInUse,
        
        /// <summary>
        /// >> PoolMemberNotFound
        /// An account is not a member.
        /// </summary>
        PoolMemberNotFound,
        
        /// <summary>
        /// >> RewardPoolNotFound
        /// A reward pool does not exist. In all cases this is a system logic error.
        /// </summary>
        RewardPoolNotFound,
        
        /// <summary>
        /// >> SubPoolsNotFound
        /// A sub pool does not exist.
        /// </summary>
        SubPoolsNotFound,
        
        /// <summary>
        /// >> AccountBelongsToOtherPool
        /// An account is already delegating in another pool. An account may only belong to one
        /// pool at a time.
        /// </summary>
        AccountBelongsToOtherPool,
        
        /// <summary>
        /// >> FullyUnbonding
        /// The member is fully unbonded (and thus cannot access the bonded and reward pool
        /// anymore to, for example, collect rewards).
        /// </summary>
        FullyUnbonding,
        
        /// <summary>
        /// >> MaxUnbondingLimit
        /// The member cannot unbond further chunks due to reaching the limit.
        /// </summary>
        MaxUnbondingLimit,
        
        /// <summary>
        /// >> CannotWithdrawAny
        /// None of the funds can be withdrawn yet because the bonding duration has not passed.
        /// </summary>
        CannotWithdrawAny,
        
        /// <summary>
        /// >> MinimumBondNotMet
        /// The amount does not meet the minimum bond to either join or create a pool.
        /// 
        /// If the chain is not being destroyed no member can unbond to a value less than
        /// `Pallet::depositor_min_bond`. The caller does not have nominating
        /// permissions for the pool. Members can never unbond to a value below `MinJoinBond`.
        /// </summary>
        MinimumBondNotMet,
        
        /// <summary>
        /// >> OverflowRisk
        /// The transaction could not be executed due to overflow risk for the pool.
        /// </summary>
        OverflowRisk,
        
        /// <summary>
        /// >> NotDestroying
        /// A pool must be in [`PoolState::Destroying`] in order for
        /// other members to be permissionlessly unbonded.
        /// </summary>
        NotDestroying,
        
        /// <summary>
        /// >> NotNominator
        /// The caller does not have nominating permissions for the pool.
        /// </summary>
        NotNominator,
        
        /// <summary>
        /// >> NotKickerOrDestroying
        /// Either a) the caller cannot make a valid kick or b) the pool is not destroying.
        /// </summary>
        NotKickerOrDestroying,
        
        /// <summary>
        /// >> NotOpen
        /// The pool is not open to join
        /// </summary>
        NotOpen,
        
        /// <summary>
        /// >> CanNotChangeState
        /// The pools state cannot be changed.
        /// </summary>
        CanNotChangeState,
        
        /// <summary>
        /// >> DoesNotHavePermission
        /// The caller does not have adequate permissions.
        /// </summary>
        DoesNotHavePermission,
        
        /// <summary>
        /// >> Defensive
        /// Some error occurred that should never happen. This should be reported to the
        /// maintainers.
        /// </summary>
        Defensive,
        
        /// <summary>
        /// >> PartialUnbondNotAllowedPermissionlessly
        /// Partial unbonding now allowed permissionlessly.
        /// </summary>
        PartialUnbondNotAllowedPermissionlessly,
        
        /// <summary>
        /// >> PoolIdInUse
        /// Pool id currently in use.
        /// </summary>
        PoolIdInUse,
        
        /// <summary>
        /// >> InvalidPoolId
        /// Pool id provided is not correct/usable.
        /// </summary>
        InvalidPoolId,
        
        /// <summary>
        /// >> MintParamsCreationFailed
        /// Mint parameters are invalid.
        /// </summary>
        MintParamsCreationFailed,
        
        /// <summary>
        /// >> BurnParamsCreationFailed
        /// Burn parameters are invalid.
        /// </summary>
        BurnParamsCreationFailed,
        
        /// <summary>
        /// >> TransferParamsCreationFailed
        /// Transfer parameters are invalid.
        /// </summary>
        TransferParamsCreationFailed,
        
        /// <summary>
        /// >> CapacityExceeded
        /// The capacity of the pool is exceeded by the amount
        /// </summary>
        CapacityExceeded,
        
        /// <summary>
        /// >> CapacityMutationRestricted
        /// The capacity can only be mutated for the first 14 eras of a cycle
        /// </summary>
        CapacityMutationRestricted,
        
        /// <summary>
        /// >> DurationOutOfBounds
        /// The duration is out of bounds
        /// </summary>
        DurationOutOfBounds,
        
        /// <summary>
        /// >> TokenRequired
        /// The required token is not owned by the caller
        /// </summary>
        TokenRequired,
        
        /// <summary>
        /// >> DepositNotReadyForUnbonding
        /// Deposit should be the last supply of pool's sENJ token to be unbonded
        /// </summary>
        DepositNotReadyForUnbonding,
        
        /// <summary>
        /// >> MaxCommissionRestricted
        /// The pool's max commission cannot be set higher than the existing value.
        /// </summary>
        MaxCommissionRestricted,
        
        /// <summary>
        /// >> CommissionExceedsMaximum
        /// The supplied commission exceeds the max allowed commission.
        /// </summary>
        CommissionExceedsMaximum,
        
        /// <summary>
        /// >> CommissionChangeThrottled
        /// Not enough blocks have surpassed since the last commission update.
        /// </summary>
        CommissionChangeThrottled,
        
        /// <summary>
        /// >> CommissionChangeRateNotAllowed
        /// The submitted changes to commission change rate are not allowed.
        /// </summary>
        CommissionChangeRateNotAllowed,
        
        /// <summary>
        /// >> NoPendingCommission
        /// There is no pending commission to claim.
        /// </summary>
        NoPendingCommission,
        
        /// <summary>
        /// >> NoCommissionCurrentSet
        /// No commission current has been set.
        /// </summary>
        NoCommissionCurrentSet,
        
        /// <summary>
        /// >> NoopMutation
        /// The mutation does not change anything
        /// </summary>
        NoopMutation,
        
        /// <summary>
        /// >> PoolMembersRemaining
        /// The pool is not empty
        /// </summary>
        PoolMembersRemaining,
        
        /// <summary>
        /// >> EarlyBirdBonusNotReady
        /// The early bird bonus is not yet ready to claim
        /// </summary>
        EarlyBirdBonusNotReady,
        
        /// <summary>
        /// >> EarlyBirdTotalRewardsIsZero
        /// Total Weighted Rewards is 0
        /// </summary>
        EarlyBirdTotalRewardsIsZero,
        
        /// <summary>
        /// >> EarlyBirdBonusAlreadyCalculated
        /// EarlyBirdReward has already been queued.
        /// </summary>
        EarlyBirdBonusAlreadyCalculated,
        
        /// <summary>
        /// >> MissingPayouts
        /// Not all payouts have been made
        /// </summary>
        MissingPayouts,
        
        /// <summary>
        /// >> WrongPoolCount
        /// The pool count does not match the number of pools
        /// </summary>
        WrongPoolCount,
        
        /// <summary>
        /// >> PayoutsAlreadyProcessed
        /// Payouts were already processed for this era
        /// </summary>
        PayoutsAlreadyProcessed,
        
        /// <summary>
        /// >> AttributeKeyExceedsLength
        /// Attribute key exceeds max length
        /// </summary>
        AttributeKeyExceedsLength,
        
        /// <summary>
        /// >> AttributeValueDecodeFailed
        /// Unable to decode the attribute value
        /// </summary>
        AttributeValueDecodeFailed,
        
        /// <summary>
        /// >> AttributeCapacityExceedsGlobalCapacity
        /// Attribute capacity exceeds the global max capacity
        /// </summary>
        AttributeCapacityExceedsGlobalCapacity,
        
        /// <summary>
        /// >> EarlyBirdBonusDistributionBlockNotPassed
        /// Cannot unlock early bird bonus before the dist block has passed
        /// </summary>
        EarlyBirdBonusDistributionBlockNotPassed,
        
        /// <summary>
        /// >> EarlyBirdPaymentPeriodNotPassed
        /// Early bird payment period not passed
        /// </summary>
        EarlyBirdPaymentPeriodNotPassed,
        
        /// <summary>
        /// >> NoEarlyBirdReward
        /// No early bird reward for this pool
        /// </summary>
        NoEarlyBirdReward,
        
        /// <summary>
        /// >> EarlyBirdShareAlreadyCaptured
        /// Early bird share has already been captured for this pool and account
        /// </summary>
        EarlyBirdShareAlreadyCaptured,
        
        /// <summary>
        /// >> EarlyBirdBonusPaymentIdMismatch
        /// Mismatch in expected bonus payout value
        /// </summary>
        EarlyBirdBonusPaymentIdMismatch,
        
        /// <summary>
        /// >> EarlyBirdBonusNotCalculated
        /// Early bird bonus not yet calculated
        /// </summary>
        EarlyBirdBonusNotCalculated,
        
        /// <summary>
        /// >> BoundExceeded
        /// A bounded value was exceeded
        /// </summary>
        BoundExceeded,
        
        /// <summary>
        /// >> WrongAccountCount
        /// Wrong account count
        /// </summary>
        WrongAccountCount,
    }
}
