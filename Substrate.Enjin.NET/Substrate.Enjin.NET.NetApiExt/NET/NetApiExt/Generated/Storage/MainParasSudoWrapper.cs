//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> ParasSudoWrapperStorage
    /// </summary>
    public sealed class ParasSudoWrapperStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ParasSudoWrapperStorage Constructor
        /// </summary>
        public ParasSudoWrapperStorage(SubstrateClientExt client)
        {
            this._client = client;
        }
    }
    
    /// <summary>
    /// >> ParasSudoWrapperCalls
    /// </summary>
    public sealed class ParasSudoWrapperCalls
    {
        
        /// <summary>
        /// >> sudo_schedule_para_initialize
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SudoScheduleParaInitialize(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id, Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.paras.ParaGenesisArgs genesis)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(genesis.Encode());
            return new Method(250, "ParasSudoWrapper", 0, "sudo_schedule_para_initialize", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sudo_schedule_para_cleanup
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SudoScheduleParaCleanup(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            return new Method(250, "ParasSudoWrapper", 1, "sudo_schedule_para_cleanup", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sudo_schedule_parathread_upgrade
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SudoScheduleParathreadUpgrade(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            return new Method(250, "ParasSudoWrapper", 2, "sudo_schedule_parathread_upgrade", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sudo_schedule_parachain_downgrade
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SudoScheduleParachainDowngrade(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            return new Method(250, "ParasSudoWrapper", 3, "sudo_schedule_parachain_downgrade", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sudo_queue_downward_xcm
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SudoQueueDownwardXcm(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id, Substrate.Enjin.NET.NetApiExt.Generated.Model.xcm.EnumVersionedXcm xcm)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(xcm.Encode());
            return new Method(250, "ParasSudoWrapper", 4, "sudo_queue_downward_xcm", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sudo_establish_hrmp_channel
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SudoEstablishHrmpChannel(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id sender, Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id recipient, Substrate.NetApi.Model.Types.Primitive.U32 max_capacity, Substrate.NetApi.Model.Types.Primitive.U32 max_message_size)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(sender.Encode());
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(max_capacity.Encode());
            byteArray.AddRange(max_message_size.Encode());
            return new Method(250, "ParasSudoWrapper", 5, "sudo_establish_hrmp_channel", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ParasSudoWrapperConstants
    /// </summary>
    public sealed class ParasSudoWrapperConstants
    {
    }
    
    /// <summary>
    /// >> ParasSudoWrapperErrors
    /// </summary>
    public enum ParasSudoWrapperErrors
    {
        
        /// <summary>
        /// >> ParaDoesntExist
        /// The specified parachain or parathread is not registered.
        /// </summary>
        ParaDoesntExist,
        
        /// <summary>
        /// >> ParaAlreadyExists
        /// The specified parachain or parathread is already registered.
        /// </summary>
        ParaAlreadyExists,
        
        /// <summary>
        /// >> ExceedsMaxMessageSize
        /// A DMP message couldn't be sent because it exceeds the maximum size allowed for a downward
        /// message.
        /// </summary>
        ExceedsMaxMessageSize,
        
        /// <summary>
        /// >> CouldntCleanup
        /// Could not schedule para cleanup.
        /// </summary>
        CouldntCleanup,
        
        /// <summary>
        /// >> NotParathread
        /// Not a parathread.
        /// </summary>
        NotParathread,
        
        /// <summary>
        /// >> NotParachain
        /// Not a parachain.
        /// </summary>
        NotParachain,
        
        /// <summary>
        /// >> CannotUpgrade
        /// Cannot upgrade parathread.
        /// </summary>
        CannotUpgrade,
        
        /// <summary>
        /// >> CannotDowngrade
        /// Cannot downgrade parachain.
        /// </summary>
        CannotDowngrade,
    }
}
