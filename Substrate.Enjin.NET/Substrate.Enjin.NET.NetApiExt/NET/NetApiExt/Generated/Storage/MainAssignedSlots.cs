//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> AssignedSlotsStorage
    /// </summary>
    public sealed class AssignedSlotsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AssignedSlotsStorage Constructor
        /// </summary>
        public AssignedSlotsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssignedSlots", "PermanentSlots"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssignedSlots", "PermanentSlotCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssignedSlots", "TemporarySlots"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id), typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssignedSlots", "TemporarySlotCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AssignedSlots", "ActiveTemporarySlotCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> PermanentSlotsParams
        ///  Assigned permanent slots, with their start lease period, and duration.
        /// </summary>
        public static string PermanentSlotsParams(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id key)
        {
            return RequestGenerator.GetStorage("AssignedSlots", "PermanentSlots", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PermanentSlotsDefault
        /// Default value as hex string
        /// </summary>
        public static string PermanentSlotsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PermanentSlots
        ///  Assigned permanent slots, with their start lease period, and duration.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> PermanentSlots(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = AssignedSlotsStorage.PermanentSlotsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PermanentSlotCountParams
        ///  Number of assigned (and active) permanent slots.
        /// </summary>
        public static string PermanentSlotCountParams()
        {
            return RequestGenerator.GetStorage("AssignedSlots", "PermanentSlotCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PermanentSlotCountDefault
        /// Default value as hex string
        /// </summary>
        public static string PermanentSlotCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> PermanentSlotCount
        ///  Number of assigned (and active) permanent slots.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> PermanentSlotCount(string blockhash, CancellationToken token)
        {
            string parameters = AssignedSlotsStorage.PermanentSlotCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TemporarySlotsParams
        ///  Assigned temporary slots.
        /// </summary>
        public static string TemporarySlotsParams(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id key)
        {
            return RequestGenerator.GetStorage("AssignedSlots", "TemporarySlots", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TemporarySlotsDefault
        /// Default value as hex string
        /// </summary>
        public static string TemporarySlotsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TemporarySlots
        ///  Assigned temporary slots.
        /// </summary>
        public async Task<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot> TemporarySlots(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id key, string blockhash, CancellationToken token)
        {
            string parameters = AssignedSlotsStorage.TemporarySlotsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.ParachainTemporarySlot>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TemporarySlotCountParams
        ///  Number of assigned temporary slots.
        /// </summary>
        public static string TemporarySlotCountParams()
        {
            return RequestGenerator.GetStorage("AssignedSlots", "TemporarySlotCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TemporarySlotCountDefault
        /// Default value as hex string
        /// </summary>
        public static string TemporarySlotCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> TemporarySlotCount
        ///  Number of assigned temporary slots.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> TemporarySlotCount(string blockhash, CancellationToken token)
        {
            string parameters = AssignedSlotsStorage.TemporarySlotCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ActiveTemporarySlotCountParams
        ///  Number of active temporary slots in current slot lease period.
        /// </summary>
        public static string ActiveTemporarySlotCountParams()
        {
            return RequestGenerator.GetStorage("AssignedSlots", "ActiveTemporarySlotCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ActiveTemporarySlotCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ActiveTemporarySlotCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ActiveTemporarySlotCount
        ///  Number of active temporary slots in current slot lease period.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ActiveTemporarySlotCount(string blockhash, CancellationToken token)
        {
            string parameters = AssignedSlotsStorage.ActiveTemporarySlotCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AssignedSlotsCalls
    /// </summary>
    public sealed class AssignedSlotsCalls
    {
        
        /// <summary>
        /// >> assign_perm_parachain_slot
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AssignPermParachainSlot(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            return new Method(251, "AssignedSlots", 0, "assign_perm_parachain_slot", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> assign_temp_parachain_slot
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AssignTempParachainSlot(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id, Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_runtime_common.assigned_slots.EnumSlotLeasePeriodStart lease_period_start)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(lease_period_start.Encode());
            return new Method(251, "AssignedSlots", 1, "assign_temp_parachain_slot", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unassign_parachain_slot
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UnassignParachainSlot(Substrate.Enjin.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            return new Method(251, "AssignedSlots", 2, "unassign_parachain_slot", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AssignedSlotsConstants
    /// </summary>
    public sealed class AssignedSlotsConstants
    {
        
        /// <summary>
        /// >> PermanentSlotLeasePeriodLength
        ///  The number of lease periods a permanent parachain slot lasts.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PermanentSlotLeasePeriodLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x6D010000");
            return result;
        }
        
        /// <summary>
        /// >> TemporarySlotLeasePeriodLength
        ///  The number of lease periods a temporary parachain slot lasts.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 TemporarySlotLeasePeriodLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x03000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxPermanentSlots
        ///  The max number of permanent slots that can be assigned.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPermanentSlots()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x28000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTemporarySlots
        ///  The max number of temporary slots that can be assigned.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTemporarySlots()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x28000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTemporarySlotPerLeasePeriod
        ///  The max number of temporary slots to be scheduled per lease periods.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTemporarySlotPerLeasePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> AssignedSlotsErrors
    /// </summary>
    public enum AssignedSlotsErrors
    {
        
        /// <summary>
        /// >> ParaDoesntExist
        /// The specified parachain or parathread is not registered.
        /// </summary>
        ParaDoesntExist,
        
        /// <summary>
        /// >> NotParathread
        /// Not a parathread.
        /// </summary>
        NotParathread,
        
        /// <summary>
        /// >> CannotUpgrade
        /// Cannot upgrade parathread.
        /// </summary>
        CannotUpgrade,
        
        /// <summary>
        /// >> CannotDowngrade
        /// Cannot downgrade parachain.
        /// </summary>
        CannotDowngrade,
        
        /// <summary>
        /// >> SlotAlreadyAssigned
        /// Permanent or Temporary slot already assigned.
        /// </summary>
        SlotAlreadyAssigned,
        
        /// <summary>
        /// >> SlotNotAssigned
        /// Permanent or Temporary slot has not been assigned.
        /// </summary>
        SlotNotAssigned,
        
        /// <summary>
        /// >> OngoingLeaseExists
        /// An ongoing lease already exists.
        /// </summary>
        OngoingLeaseExists,
        
        /// <summary>
        /// >> MaxPermanentSlotsExceeded
        /// </summary>
        MaxPermanentSlotsExceeded,
        
        /// <summary>
        /// >> MaxTemporarySlotsExceeded
        /// </summary>
        MaxTemporarySlotsExceeded,
    }
}
