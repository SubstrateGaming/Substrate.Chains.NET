//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Enjin.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> ExtrinsicPauseStorage
    /// </summary>
    public sealed class ExtrinsicPauseStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ExtrinsicPauseStorage Constructor
        /// </summary>
        public ExtrinsicPauseStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ExtrinsicPause", "PausedExtrinsics"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_core.frame.types.ExtrinsicInfo), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> PausedExtrinsicsParams
        ///  Paused extrinsics map
        /// 
        ///  The key is tuple with the name of the pallet and the extrinsic name and value is
        ///  an Option<()> which is None if the extrinsic is not paused and Some(()) if it is.
        /// </summary>
        public static string PausedExtrinsicsParams(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_core.frame.types.ExtrinsicInfo key)
        {
            return RequestGenerator.GetStorage("ExtrinsicPause", "PausedExtrinsics", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PausedExtrinsicsDefault
        /// Default value as hex string
        /// </summary>
        public static string PausedExtrinsicsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PausedExtrinsics
        ///  Paused extrinsics map
        /// 
        ///  The key is tuple with the name of the pallet and the extrinsic name and value is
        ///  an Option<()> which is None if the extrinsic is not paused and Some(()) if it is.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> PausedExtrinsics(Substrate.Enjin.NET.NetApiExt.Generated.Model.ep_core.frame.types.ExtrinsicInfo key, string blockhash, CancellationToken token)
        {
            string parameters = ExtrinsicPauseStorage.PausedExtrinsicsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ExtrinsicPauseCalls
    /// </summary>
    public sealed class ExtrinsicPauseCalls
    {
        
        /// <summary>
        /// >> pause_extrinsic
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PauseExtrinsic(Substrate.Enjin.NET.NetApiExt.Generated.Model.enjin_runtime.EnumRuntimeCall call, Substrate.NetApi.Model.Types.Primitive.Bool pause_only_extrinsic)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(pause_only_extrinsic.Encode());
            return new Method(255, "ExtrinsicPause", 0, "pause_extrinsic", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> resume_extrinsic
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ResumeExtrinsic(Substrate.Enjin.NET.NetApiExt.Generated.Model.enjin_runtime.EnumRuntimeCall call, Substrate.NetApi.Model.Types.Primitive.Bool resume_only_extrinsic)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(resume_only_extrinsic.Encode());
            return new Method(255, "ExtrinsicPause", 1, "resume_extrinsic", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ExtrinsicPauseConstants
    /// </summary>
    public sealed class ExtrinsicPauseConstants
    {
        
        /// <summary>
        /// >> MaxNameLength
        ///  Max number of characters in pallet or extrinsic name.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNameLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> ExtrinsicPauseErrors
    /// </summary>
    public enum ExtrinsicPauseErrors
    {
        
        /// <summary>
        /// >> CannotPauseSelf
        /// Cannot pause this pallet or it's extrinsic
        /// </summary>
        CannotPauseSelf,
        
        /// <summary>
        /// >> CannotProcessInput
        /// Cannot read the pallet or extrinsic name
        /// </summary>
        CannotProcessInput,
    }
}
