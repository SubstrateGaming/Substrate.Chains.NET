{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Index",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Index",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 9
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeId": 11,
        "TypeDef": "Compact"
      },
      "11": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "12": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "13": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "14": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 15
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "15": {
        "TypeId": 16,
        "TypeDef": "Sequence"
      },
      "16": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "17": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "18": {
        "TypeId": 19,
        "TypeDef": "Sequence"
      },
      "19": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 653
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 20
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 654
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 20
          },
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "20": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 21
              }
            ],
            "Index": 0
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 30
              }
            ],
            "Index": 6
          },
          {
            "Name": "Offences",
            "TypeFields": [
              {
                "TypeName": "pallet_offences::Event",
                "TypeId": 32
              }
            ],
            "Index": 7
          },
          {
            "Name": "ElectionProviderMultiPhase",
            "TypeFields": [
              {
                "TypeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                "TypeId": 34
              }
            ],
            "Index": 8
          },
          {
            "Name": "Staking",
            "TypeFields": [
              {
                "TypeName": "pallet_staking::Event<Runtime>",
                "TypeId": 41
              }
            ],
            "Index": 9
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 46
              }
            ],
            "Index": 10
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "pallet_grandpa::Event",
                "TypeId": 47
              }
            ],
            "Index": 11
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 52
              }
            ],
            "Index": 12
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 53
              }
            ],
            "Index": 13
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 54
              }
            ],
            "Index": 14
          },
          {
            "Name": "ImOnline",
            "TypeFields": [
              {
                "TypeName": "pallet_im_online::Event<Runtime>",
                "TypeId": 57
              }
            ],
            "Index": 15
          },
          {
            "Name": "VoterList",
            "TypeFields": [
              {
                "TypeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>",
                "TypeId": 66
              }
            ],
            "Index": 17
          },
          {
            "Name": "NominationPools",
            "TypeFields": [
              {
                "TypeName": "pallet_nomination_pools::Event<Runtime>",
                "TypeId": 67
              }
            ],
            "Index": 18
          },
          {
            "Name": "StakeExchange",
            "TypeFields": [
              {
                "TypeName": "pallet_stake_exchange::Event<Runtime>",
                "TypeId": 81
              }
            ],
            "Index": 19
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 91
              }
            ],
            "Index": 20
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 92
              }
            ],
            "Index": 21
          },
          {
            "Name": "ParaInclusion",
            "TypeFields": [
              {
                "TypeName": "parachains_inclusion::Event<Runtime>",
                "TypeId": 94
              }
            ],
            "Index": 53
          },
          {
            "Name": "Paras",
            "TypeFields": [
              {
                "TypeName": "parachains_paras::Event",
                "TypeId": 106
              }
            ],
            "Index": 56
          },
          {
            "Name": "Hrmp",
            "TypeFields": [
              {
                "TypeName": "parachains_hrmp::Event<Runtime>",
                "TypeId": 107
              }
            ],
            "Index": 60
          },
          {
            "Name": "ParasDisputes",
            "TypeFields": [
              {
                "TypeName": "parachains_disputes::Event<Runtime>",
                "TypeId": 109
              }
            ],
            "Index": 62
          },
          {
            "Name": "Registrar",
            "TypeFields": [
              {
                "TypeName": "paras_registrar::Event<Runtime>",
                "TypeId": 113
              }
            ],
            "Index": 70
          },
          {
            "Name": "Slots",
            "TypeFields": [
              {
                "TypeName": "slots::Event<Runtime>",
                "TypeId": 114
              }
            ],
            "Index": 71
          },
          {
            "Name": "Auctions",
            "TypeFields": [
              {
                "TypeName": "auctions::Event<Runtime>",
                "TypeId": 115
              }
            ],
            "Index": 72
          },
          {
            "Name": "Crowdloan",
            "TypeFields": [
              {
                "TypeName": "crowdloan::Event<Runtime>",
                "TypeId": 116
              }
            ],
            "Index": 73
          },
          {
            "Name": "XcmPallet",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 117
              }
            ],
            "Index": 99
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "pallet_message_queue::Event<Runtime>",
                "TypeId": 171
              }
            ],
            "Index": 110
          },
          {
            "Name": "AssignedSlots",
            "TypeFields": [
              {
                "TypeName": "assigned_slots::Event<Runtime>",
                "TypeId": 175
              }
            ],
            "Index": 251
          },
          {
            "Name": "ValidatorManager",
            "TypeFields": [
              {
                "TypeName": "pallet_validator_manager::Event<Runtime>",
                "TypeId": 176
              }
            ],
            "Index": 252
          },
          {
            "Name": "MultiTokens",
            "TypeFields": [
              {
                "TypeName": "pallet_multi_tokens::Event<Runtime>",
                "TypeId": 177
              }
            ],
            "Index": 253
          },
          {
            "Name": "FuelTanks",
            "TypeFields": [
              {
                "TypeName": "pallet_fuel_tanks::Event<Runtime>",
                "TypeId": 251
              }
            ],
            "Index": 254
          },
          {
            "Name": "ExtrinsicPause",
            "TypeFields": [
              {
                "TypeName": "pallet_extrinsic_pause::Event<Runtime>",
                "TypeId": 272
              }
            ],
            "Index": 255
          },
          {
            "Name": "Marketplace",
            "TypeFields": [
              {
                "TypeName": "pallet_marketplace::Event<Runtime>",
                "TypeId": 276
              }
            ],
            "Index": 249
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 286
              }
            ],
            "Index": 100
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 289
              }
            ],
            "Index": 101
          },
          {
            "Name": "ConvictionVoting",
            "TypeFields": [
              {
                "TypeName": "pallet_conviction_voting::Event<Runtime>",
                "TypeId": 290
              }
            ],
            "Index": 102
          },
          {
            "Name": "Referenda",
            "TypeFields": [
              {
                "TypeName": "pallet_referenda::Event<Runtime>",
                "TypeId": 291
              }
            ],
            "Index": 103
          },
          {
            "Name": "Whitelist",
            "TypeFields": [
              {
                "TypeName": "pallet_whitelist::Event<Runtime>",
                "TypeId": 642
              }
            ],
            "Index": 105
          },
          {
            "Name": "FellowshipCollective",
            "TypeFields": [
              {
                "TypeName": "pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::\nInstance1>",
                "TypeId": 647
              }
            ],
            "Index": 106
          },
          {
            "Name": "FellowshipReferenda",
            "TypeFields": [
              {
                "TypeName": "pallet_referenda::Event<Runtime, pallet_referenda::Instance2>",
                "TypeId": 650
              }
            ],
            "Index": 107
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 651
              }
            ],
            "Index": 108
          },
          {
            "Name": "VoteManager",
            "TypeFields": [
              {
                "TypeName": "pallet_vote_manager::Event<Runtime>",
                "TypeId": 652
              }
            ],
            "Index": 109
          }
        ],
        "Path": [
          "enjin_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "21": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 25
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "22": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 23
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 24
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "23": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 26
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 27
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 28
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 29
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "27": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 31
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "31": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "32": {
        "Variants": [
          {
            "Name": "Offence",
            "TypeFields": [
              {
                "Name": "kind",
                "TypeName": "Kind",
                "TypeId": 33
              },
              {
                "Name": "timeslot",
                "TypeName": "OpaqueTimeSlot",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "There is an offence reported of the given `kind` happened at the `session_index` and",
              "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
              "\\[kind, timeslot\\]."
            ]
          }
        ],
        "Path": [
          "pallet_offences",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "33": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "34": {
        "Variants": [
          {
            "Name": "SolutionStored",
            "TypeFields": [
              {
                "Name": "compute",
                "TypeName": "ElectionCompute",
                "TypeId": 35
              },
              {
                "Name": "origin",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 36
              },
              {
                "Name": "prev_ejected",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 0,
            "Docs": [
              "A solution was stored with the given compute.",
              "",
              "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
              "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
              "Otherwise, the solution was stored either during the unsigned phase or by",
              "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
              "room for this one."
            ]
          },
          {
            "Name": "ElectionFinalized",
            "TypeFields": [
              {
                "Name": "compute",
                "TypeName": "ElectionCompute",
                "TypeId": 35
              },
              {
                "Name": "score",
                "TypeName": "ElectionScore",
                "TypeId": 38
              }
            ],
            "Index": 1,
            "Docs": [
              "The election has been finalized, with the given computation and score."
            ]
          },
          {
            "Name": "ElectionFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An election failed.",
              "",
              "Not much can be said about which computes failed in the process."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "An account has been rewarded for their signed submission being finalized."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "An account has been slashed for submitting an invalid signed submission."
            ]
          },
          {
            "Name": "PhaseTransitioned",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "Phase<T::BlockNumber>",
                "TypeId": 39
              },
              {
                "Name": "to",
                "TypeName": "Phase<T::BlockNumber>",
                "TypeId": 39
              },
              {
                "Name": "round",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "There was a phase transition in a given round."
            ]
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "35": {
        "Variants": [
          {
            "Name": "OnChain",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsigned",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Fallback",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Emergency",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "ElectionCompute"
        ],
        "TypeDef": "Variant"
      },
      "36": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "37": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "38": {
        "TypeFields": [
          {
            "Name": "minimal_stake",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          },
          {
            "Name": "sum_stake",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          },
          {
            "Name": "sum_stake_squared",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_npos_elections",
          "ElectionScore"
        ],
        "TypeDef": "Composite"
      },
      "39": {
        "Variants": [
          {
            "Name": "Off",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsigned",
            "TypeFields": [
              {
                "TypeName": "(bool, Bn)",
                "TypeId": 40
              }
            ],
            "Index": 2
          },
          {
            "Name": "Emergency",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "Phase"
        ],
        "TypeParams": [
          {
            "Name": "Bn",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "40": {
        "TypeIds": [
          37,
          4
        ],
        "TypeDef": "Tuple"
      },
      "41": {
        "Variants": [
          {
            "Name": "EraPaid",
            "TypeFields": [
              {
                "Name": "era_index",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "validator_payout",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "remainder",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The era payout has been set; the first balance is the validator-payout; the second is",
              "the remainder from the maximum amount of reward."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "The nominator has been rewarded by this amount."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "staker",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A staker (validator or nominator) has been slashed by the given amount."
            ]
          },
          {
            "Name": "SlashReported",
            "TypeFields": [
              {
                "Name": "validator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "fraction",
                "TypeName": "Perbill",
                "TypeId": 42
              },
              {
                "Name": "slash_era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A slash for the given validator, for the given percentage of their stake, at the given",
              "era as been reported."
            ]
          },
          {
            "Name": "OldSlashingReportDiscarded",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "An old slashing report from a prior era was discarded because it could",
              "not be processed."
            ]
          },
          {
            "Name": "StakersElected",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A new set of stakers was elected."
            ]
          },
          {
            "Name": "Bonded",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "An account has bonded this amount. \\[stash, amount\\]",
              "",
              "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
              "it will not be emitted for staking rewards when they are added to stake."
            ]
          },
          {
            "Name": "Unbonded",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has unbonded this amount."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
              "from the unlocking queue."
            ]
          },
          {
            "Name": "Kicked",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "A nominator has been kicked from a validator."
            ]
          },
          {
            "Name": "StakingElectionFailed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The election failed. No new era is planned."
            ]
          },
          {
            "Name": "Chilled",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has stopped participating as either a validator or nominator."
            ]
          },
          {
            "Name": "PayoutStarted",
            "TypeFields": [
              {
                "Name": "era_index",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "The stakers' rewards are getting paid."
            ]
          },
          {
            "Name": "ValidatorPrefsSet",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prefs",
                "TypeName": "ValidatorPrefs",
                "TypeId": 43
              }
            ],
            "Index": 13,
            "Docs": [
              "A validator has set their preferences."
            ]
          },
          {
            "Name": "ForceEra",
            "TypeFields": [
              {
                "Name": "mode",
                "TypeName": "Forcing",
                "TypeId": 45
              }
            ],
            "Index": 14,
            "Docs": [
              "A new force era mode was set."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "42": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "43": {
        "TypeFields": [
          {
            "Name": "commission",
            "TypeName": "Perbill",
            "TypeId": 44
          },
          {
            "Name": "blocked",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_staking",
          "ValidatorPrefs"
        ],
        "TypeDef": "Composite"
      },
      "44": {
        "TypeId": 42,
        "TypeDef": "Compact"
      },
      "45": {
        "Variants": [
          {
            "Name": "NotForcing",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ForceNew",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ForceNone",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ForceAlways",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_staking",
          "Forcing"
        ],
        "TypeDef": "Variant"
      },
      "46": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "47": {
        "Variants": [
          {
            "Name": "NewAuthorities",
            "TypeFields": [
              {
                "Name": "authority_set",
                "TypeName": "AuthorityList",
                "TypeId": 48
              }
            ],
            "Index": 0,
            "Docs": [
              "New authority set has been applied."
            ]
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Current authority set has been paused."
            ]
          },
          {
            "Name": "Resumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Current authority set has been resumed."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "48": {
        "TypeId": 49,
        "TypeDef": "Sequence"
      },
      "49": {
        "TypeIds": [
          50,
          11
        ],
        "TypeDef": "Tuple"
      },
      "50": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Public",
            "TypeId": 51
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "51": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "52": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "53": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "54": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 55
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old_sudoer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 36
              }
            ],
            "Index": 1,
            "Docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 55
              }
            ],
            "Index": 2,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "55": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 56
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 25
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 56
          },
          {
            "Name": "E",
            "TypeId": 25
          }
        ],
        "TypeDef": "Variant"
      },
      "56": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "57": {
        "Variants": [
          {
            "Name": "HeartbeatReceived",
            "TypeFields": [
              {
                "Name": "authority_id",
                "TypeName": "T::AuthorityId",
                "TypeId": 58
              }
            ],
            "Index": 0,
            "Docs": [
              "A new heartbeat was received from `AuthorityId`."
            ]
          },
          {
            "Name": "AllGood",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "At the end of the session, no offence was committed."
            ]
          },
          {
            "Name": "SomeOffline",
            "TypeFields": [
              {
                "Name": "offline",
                "TypeName": "Vec<IdentificationTuple<T>>",
                "TypeId": 60
              }
            ],
            "Index": 2,
            "Docs": [
              "At the end of the session, at least one validator was found to be offline."
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "58": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 59
          }
        ],
        "Path": [
          "pallet_im_online",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "59": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "60": {
        "TypeId": 61,
        "TypeDef": "Sequence"
      },
      "61": {
        "TypeIds": [
          0,
          62
        ],
        "TypeDef": "Tuple"
      },
      "62": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "own",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "others",
            "TypeName": "Vec<IndividualExposure<AccountId, Balance>>",
            "TypeId": 64
          }
        ],
        "Path": [
          "pallet_staking",
          "Exposure"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "63": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "64": {
        "TypeId": 65,
        "TypeDef": "Sequence"
      },
      "65": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 63
          }
        ],
        "Path": [
          "pallet_staking",
          "IndividualExposure"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "66": {
        "Variants": [
          {
            "Name": "Rebagged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "from",
                "TypeName": "T::Score",
                "TypeId": 11
              },
              {
                "Name": "to",
                "TypeName": "T::Score",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "Moved an account from one bag to another."
            ]
          },
          {
            "Name": "ScoreUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new_score",
                "TypeName": "T::Score",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Updated the score of some account to the given amount."
            ]
          }
        ],
        "Path": [
          "pallet_bags_list",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "67": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "capacity",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A pool has been created."
            ]
          },
          {
            "Name": "Bonded",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "bonded",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A member has became bonded in a pool."
            ]
          },
          {
            "Name": "Unbonded",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The member that unbonded"
                ]
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The id of the pool unbonded from"
                ]
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "the corresponding balance of the number of points that has been requested to be",
                  "unbonded (the argument of the `unbond` transaction) from the bonded pool."
                ]
              },
              {
                "Name": "points",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "the number of points that are issued as a result of `balance` being dissolved into",
                  "the corresponding unbonding pool."
                ]
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4,
                "Docs": [
                  "the era in which the balance will be unbonded. In the absence of slashing,",
                  "these values will match. In the presence of slashing, the number of points that are",
                  "issued in the unbonding pool will be less than the amount requested to be unbonded."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "A member has unbonded from their pool."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "points",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A member has withdrawn from their pool.",
              "",
              "The given number of `points` have been dissolved in return of `balance`.",
              "",
              "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
              "will be 1."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A pool has been destroyed."
            ]
          },
          {
            "Name": "StateChanged",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "new_state",
                "TypeName": "PoolState",
                "TypeId": 68
              }
            ],
            "Index": 5,
            "Docs": [
              "The state of a pool has changed"
            ]
          },
          {
            "Name": "PoolSlashed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "The active balance of pool `pool_id` has been slashed to `balance`."
            ]
          },
          {
            "Name": "UnbondingPoolSlashed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
            ]
          },
          {
            "Name": "CommissionUpdated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "current",
                "TypeName": "Option<Perbill>",
                "TypeId": 69
              }
            ],
            "Index": 8,
            "Docs": [
              "A pool's commission rate has been changed."
            ]
          },
          {
            "Name": "EraRewardsProcessed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The id of the pool"
                ]
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4,
                "Docs": [
                  "The era that was processed."
                ]
              },
              {
                "Name": "commission",
                "TypeName": "Option<CommissionPaymentOf<T>>",
                "TypeId": 70,
                "Docs": [
                  "The commission that was paid"
                ]
              },
              {
                "Name": "bonus",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount of bonus that was unlocked"
                ]
              },
              {
                "Name": "reinvested",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount that was bonded"
                ]
              },
              {
                "Name": "bonus_cycle_ended",
                "TypeName": "bool",
                "TypeId": 37,
                "Docs": [
                  "The current bonus cycle ended"
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "This event happens once per era on the previous era that rewards are paid out for. It",
              "pays commission, distributes bonus, and reinvests rewards."
            ]
          },
          {
            "Name": "RewardPaid",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The id of the pool"
                ]
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4,
                "Docs": [
                  "The era that was processed."
                ]
              },
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The validator that the payment was received from"
                ]
              },
              {
                "Name": "reward",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount added to the pool's reward account"
                ]
              },
              {
                "Name": "bonus",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount that was added to the pool's bonus account"
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "Rewards were paid to a pool"
            ]
          },
          {
            "Name": "PoolMutated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "mutation",
                "TypeName": "PoolMutationOf<T>",
                "TypeId": 72
              }
            ],
            "Index": 11,
            "Docs": [
              "Pool has been mutated."
            ]
          },
          {
            "Name": "Nominated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The id of the pool"
                ]
              },
              {
                "Name": "validators",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80,
                "Docs": [
                  "The validators that were nominated"
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "A nomination took place"
            ]
          },
          {
            "Name": "EarlyBirdBonusCalculated",
            "TypeFields": [
              {
                "Name": "total_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The total amount to be distributed"
                ]
              }
            ],
            "Index": 13
          },
          {
            "Name": "EarlyBirdBonusDistributed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The id of the pool"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount distributed"
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "The early bird bonus has been distributed"
            ]
          },
          {
            "Name": "EarlyBirdSharesCaptured",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The id of the pool"
                ]
              },
              {
                "Name": "total_accounts",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The total number of accounts captured"
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "The shares of pool users have been captured for early bird rewards"
            ]
          },
          {
            "Name": "EarlyBirdBonusPaid",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4,
                "Docs": [
                  "The id of the pool"
                ]
              },
              {
                "Name": "payment_id",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The payment ID"
                ]
              },
              {
                "Name": "total_accounts",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The total accounts that were paid"
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "The early bird bonus has been paid to the pool"
            ]
          },
          {
            "Name": "EarlyBirdBonusPaymentUnlocked",
            "TypeFields": [
              {
                "Name": "payment_id",
                "TypeName": "PaymentId",
                "TypeId": 4,
                "Docs": [
                  "The payment-id of the unlocked bonus"
                ]
              },
              {
                "Name": "next_payment_block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4,
                "Docs": [
                  "The next payment block"
                ]
              }
            ],
            "Index": 17,
            "Docs": [
              "A new share of early bird bonus has been unlocked"
            ]
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events of this pallet."
        ]
      },
      "68": {
        "Variants": [
          {
            "Name": "Open",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Destroying",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "PoolState"
        ],
        "TypeDef": "Variant"
      },
      "69": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 42
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 42
          }
        ],
        "TypeDef": "Variant"
      },
      "70": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 71
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 71
          }
        ],
        "TypeDef": "Variant"
      },
      "71": {
        "TypeFields": [
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "CommissionPayment"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "72": {
        "TypeFields": [
          {
            "Name": "duration",
            "TypeName": "Option<EraIndex>",
            "TypeId": 74
          },
          {
            "Name": "new_commission",
            "TypeName": "ShouldMutate<Option<Perbill>>",
            "TypeId": 75
          },
          {
            "Name": "max_commission",
            "TypeName": "Option<Perbill>",
            "TypeId": 69
          },
          {
            "Name": "change_rate",
            "TypeName": "Option<CommissionChangeRate<BlockNumber>>",
            "TypeId": 76
          },
          {
            "Name": "capacity",
            "TypeName": "Option<Balance>",
            "TypeId": 78
          },
          {
            "Name": "name",
            "TypeName": "Option<PoolName>",
            "TypeId": 79
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "PoolMutation"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "PoolName",
            "TypeId": 73
          }
        ],
        "TypeDef": "Composite"
      },
      "73": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "74": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "75": {
        "Variants": [
          {
            "Name": "NoMutation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SomeMutation",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 69
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "ShouldMutate"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 69
          }
        ],
        "TypeDef": "Variant"
      },
      "76": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 77
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 77
          }
        ],
        "TypeDef": "Variant"
      },
      "77": {
        "TypeFields": [
          {
            "Name": "max_delta",
            "TypeName": "Perbill",
            "TypeId": 42
          },
          {
            "Name": "min_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "CommissionChangeRate"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "78": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "79": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 73
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 73
          }
        ],
        "TypeDef": "Variant"
      },
      "80": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "81": {
        "Variants": [
          {
            "Name": "OfferCreated",
            "TypeFields": [
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 6,
                "Docs": [
                  "ID of the offer"
                ]
              },
              {
                "Name": "offer",
                "TypeName": "OfferOf<T>",
                "TypeId": 82,
                "Docs": [
                  "The offer that was placed"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A offer was placed"
            ]
          },
          {
            "Name": "OfferCancelled",
            "TypeFields": [
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 6,
                "Docs": [
                  "ID of the offer"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A offer was cancelled"
            ]
          },
          {
            "Name": "LiquidityConfigUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "ID of the offer"
                ]
              },
              {
                "Name": "config",
                "TypeName": "LiquidityAccountConfigOf<T>",
                "TypeId": 90,
                "Docs": [
                  "The offer that was placed"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Liquidity config was set for account"
            ]
          },
          {
            "Name": "LiquidityWithdrawn",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "ID of the account"
                ]
              },
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 6,
                "Docs": [
                  "ID of the offer"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Liquidity was withdrawn from a offer"
            ]
          },
          {
            "Name": "LiquidityAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "ID of the account"
                ]
              },
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 6,
                "Docs": [
                  "ID of the offer"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Liquidity was added to a offer"
            ]
          },
          {
            "Name": "BuyOrderCompleted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "AccountId of the buyer"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "TokenIdOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The tokenId that was exchanged"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount of tokens transferred"
                ]
              },
              {
                "Name": "rate",
                "TypeName": "Rate",
                "TypeId": 42,
                "Docs": [
                  "The rate at which the order was completed"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Buy order was completed"
            ]
          },
          {
            "Name": "OfferCompleted",
            "TypeFields": [
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 6,
                "Docs": [
                  "ID of the offer"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A offer was completed and removed"
            ]
          }
        ],
        "Path": [
          "pallet_stake_exchange",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The pallet's event type."
        ]
      },
      "82": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "rate",
            "TypeName": "Rate",
            "TypeId": 44
          },
          {
            "Name": "min_average_reward_rate",
            "TypeName": "FixedU128",
            "TypeId": 84
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "token_filter",
            "TypeName": "TokenFilter<TokenId, MaxFilteredTokenCount>",
            "TypeId": 86
          }
        ],
        "Path": [
          "pallet_stake_exchange",
          "types",
          "Offer"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "MaxFilteredTokenCount",
            "TypeId": 83
          }
        ],
        "TypeDef": "Composite"
      },
      "83": {
        "Path": [
          "enjin_runtime",
          "MaxFilteredTokenCount"
        ],
        "TypeDef": "Composite"
      },
      "84": {
        "TypeId": 85,
        "TypeDef": "Compact"
      },
      "85": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "86": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Whitelist",
            "TypeFields": [
              {
                "TypeName": "BoundedBTreeSet<TokenId, MaxFilteredTokenCount>",
                "TypeId": 87
              }
            ],
            "Index": 1
          },
          {
            "Name": "BlockList",
            "TypeFields": [
              {
                "TypeName": "BoundedBTreeSet<TokenId, MaxFilteredTokenCount>",
                "TypeId": 87
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_stake_exchange",
          "types",
          "TokenFilter"
        ],
        "TypeParams": [
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "MaxFilteredTokenCount",
            "TypeId": 83
          }
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 88
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "88": {
        "TypeFields": [
          {
            "TypeId": 89
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "89": {
        "TypeId": 6,
        "TypeDef": "Sequence"
      },
      "90": {
        "TypeFields": [
          {
            "Name": "token_filter",
            "TypeName": "TokenFilter<TokenId, MaxFilteredTokenCount>",
            "TypeId": 86
          }
        ],
        "Path": [
          "pallet_stake_exchange",
          "types",
          "LiquidityAccountConfig"
        ],
        "TypeParams": [
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "MaxFilteredTokenCount",
            "TypeId": 83
          }
        ],
        "TypeDef": "Composite"
      },
      "91": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 55
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "92": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 93
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 93
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 55
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 93
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "93": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "94": {
        "Variants": [
          {
            "Name": "CandidateBacked",
            "TypeFields": [
              {
                "TypeName": "CandidateReceipt<T::Hash>",
                "TypeId": 95
              },
              {
                "TypeName": "HeadData",
                "TypeId": 103
              },
              {
                "TypeName": "CoreIndex",
                "TypeId": 104
              },
              {
                "TypeName": "GroupIndex",
                "TypeId": 105
              }
            ],
            "Index": 0,
            "Docs": [
              "A candidate was backed. `[candidate, head_data]`"
            ]
          },
          {
            "Name": "CandidateIncluded",
            "TypeFields": [
              {
                "TypeName": "CandidateReceipt<T::Hash>",
                "TypeId": 95
              },
              {
                "TypeName": "HeadData",
                "TypeId": 103
              },
              {
                "TypeName": "CoreIndex",
                "TypeId": 104
              },
              {
                "TypeName": "GroupIndex",
                "TypeId": 105
              }
            ],
            "Index": 1,
            "Docs": [
              "A candidate was included. `[candidate, head_data]`"
            ]
          },
          {
            "Name": "CandidateTimedOut",
            "TypeFields": [
              {
                "TypeName": "CandidateReceipt<T::Hash>",
                "TypeId": 95
              },
              {
                "TypeName": "HeadData",
                "TypeId": 103
              },
              {
                "TypeName": "CoreIndex",
                "TypeId": 104
              }
            ],
            "Index": 2,
            "Docs": [
              "A candidate timed out. `[candidate, head_data]`"
            ]
          },
          {
            "Name": "UpwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Some upward messages have been received and will be processed."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "inclusion",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "95": {
        "TypeFields": [
          {
            "Name": "descriptor",
            "TypeName": "CandidateDescriptor<H>",
            "TypeId": 96
          },
          {
            "Name": "commitments_hash",
            "TypeName": "Hash",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "CandidateReceipt"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "96": {
        "TypeFields": [
          {
            "Name": "para_id",
            "TypeName": "Id",
            "TypeId": 97
          },
          {
            "Name": "relay_parent",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "collator",
            "TypeName": "CollatorId",
            "TypeId": 98
          },
          {
            "Name": "persisted_validation_data_hash",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "pov_hash",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "erasure_root",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "signature",
            "TypeName": "CollatorSignature",
            "TypeId": 99
          },
          {
            "Name": "para_head",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "validation_code_hash",
            "TypeName": "ValidationCodeHash",
            "TypeId": 102
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "CandidateDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "97": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "98": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 59
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "collator_app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Signature",
            "TypeId": 100
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "collator_app",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "100": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 101
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "101": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "102": {
        "TypeFields": [
          {
            "TypeName": "Hash",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "ValidationCodeHash"
        ],
        "TypeDef": "Composite"
      },
      "103": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "104": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "CoreIndex"
        ],
        "TypeDef": "Composite"
      },
      "105": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "GroupIndex"
        ],
        "TypeDef": "Composite"
      },
      "106": {
        "Variants": [
          {
            "Name": "CurrentCodeUpdated",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 0,
            "Docs": [
              "Current code has been updated for a Para. `para_id`"
            ]
          },
          {
            "Name": "CurrentHeadUpdated",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 1,
            "Docs": [
              "Current head has been updated for a Para. `para_id`"
            ]
          },
          {
            "Name": "CodeUpgradeScheduled",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 2,
            "Docs": [
              "A code upgrade has been scheduled for a Para. `para_id`"
            ]
          },
          {
            "Name": "NewHeadNoted",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 3,
            "Docs": [
              "A new head has been noted for a Para. `para_id`"
            ]
          },
          {
            "Name": "ActionQueued",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A para has been queued to execute pending actions. `para_id`"
            ]
          },
          {
            "Name": "PvfCheckStarted",
            "TypeFields": [
              {
                "TypeName": "ValidationCodeHash",
                "TypeId": 102
              },
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 5,
            "Docs": [
              "The given para either initiated or subscribed to a PVF check for the given validation",
              "code. `code_hash` `para_id`"
            ]
          },
          {
            "Name": "PvfCheckAccepted",
            "TypeFields": [
              {
                "TypeName": "ValidationCodeHash",
                "TypeId": 102
              },
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 6,
            "Docs": [
              "The given validation code was accepted by the PVF pre-checking vote.",
              "`code_hash` `para_id`"
            ]
          },
          {
            "Name": "PvfCheckRejected",
            "TypeFields": [
              {
                "TypeName": "ValidationCodeHash",
                "TypeId": 102
              },
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 7,
            "Docs": [
              "The given validation code was rejected by the PVF pre-checking vote.",
              "`code_hash` `para_id`"
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "107": {
        "Variants": [
          {
            "Name": "OpenChannelRequested",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Open HRMP channel requested.",
              "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
            ]
          },
          {
            "Name": "OpenChannelCanceled",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "HrmpChannelId",
                "TypeId": 108
              }
            ],
            "Index": 1,
            "Docs": [
              "An HRMP channel request sent by the receiver was canceled by either party.",
              "`[by_parachain, channel_id]`"
            ]
          },
          {
            "Name": "OpenChannelAccepted",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 2,
            "Docs": [
              "Open HRMP channel accepted. `[sender, recipient]`"
            ]
          },
          {
            "Name": "ChannelClosed",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "HrmpChannelId",
                "TypeId": 108
              }
            ],
            "Index": 3,
            "Docs": [
              "HRMP channel closed. `[by_parachain, channel_id]`"
            ]
          },
          {
            "Name": "HrmpChannelForceOpened",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "An HRMP channel was opened via Root origin.",
              "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "hrmp",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "108": {
        "TypeFields": [
          {
            "Name": "sender",
            "TypeName": "Id",
            "TypeId": 97
          },
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 97
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "HrmpChannelId"
        ],
        "TypeDef": "Composite"
      },
      "109": {
        "Variants": [
          {
            "Name": "DisputeInitiated",
            "TypeFields": [
              {
                "TypeName": "CandidateHash",
                "TypeId": 110
              },
              {
                "TypeName": "DisputeLocation",
                "TypeId": 111
              }
            ],
            "Index": 0,
            "Docs": [
              "A dispute has been initiated. \\[candidate hash, dispute location\\]"
            ]
          },
          {
            "Name": "DisputeConcluded",
            "TypeFields": [
              {
                "TypeName": "CandidateHash",
                "TypeId": 110
              },
              {
                "TypeName": "DisputeResult",
                "TypeId": 112
              }
            ],
            "Index": 1,
            "Docs": [
              "A dispute has concluded for or against a candidate.",
              "`\\[para id, candidate hash, dispute result\\]`"
            ]
          },
          {
            "Name": "Revert",
            "TypeFields": [
              {
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "A dispute has concluded with supermajority against a candidate.",
              "Block authors should no longer build on top of this head and should",
              "instead revert the block at the given height. This should be the",
              "number of the child of the last known valid block in the chain."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "110": {
        "TypeFields": [
          {
            "TypeName": "Hash",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "CandidateHash"
        ],
        "TypeDef": "Composite"
      },
      "111": {
        "Variants": [
          {
            "Name": "Local",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Remote",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "DisputeLocation"
        ],
        "TypeDef": "Variant"
      },
      "112": {
        "Variants": [
          {
            "Name": "Valid",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Invalid",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "DisputeResult"
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "Variants": [
          {
            "Name": "Registered",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "manager",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Deregistered",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "Swapped",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "other_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "paras_registrar",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "114": {
        "Variants": [
          {
            "Name": "NewLeasePeriod",
            "TypeFields": [
              {
                "Name": "lease_period",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A new `[lease_period]` is beginning."
            ]
          },
          {
            "Name": "Leased",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "leaser",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "period_begin",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "period_count",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "extra_reserved",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "total_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A para has won the right to a continuous set of lease periods as a parachain.",
              "First balance is any extra amount reserved on top of the para's existing deposit.",
              "Second balance is the total amount reserved."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "slots",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "115": {
        "Variants": [
          {
            "Name": "AuctionStarted",
            "TypeFields": [
              {
                "Name": "auction_index",
                "TypeName": "AuctionIndex",
                "TypeId": 4
              },
              {
                "Name": "lease_period",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "ending",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "An auction started. Provides its index and the block number where it will begin to",
              "close and the first lease period of the quadruplet that is auctioned."
            ]
          },
          {
            "Name": "AuctionClosed",
            "TypeFields": [
              {
                "Name": "auction_index",
                "TypeName": "AuctionIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "An auction ended. All funds become unreserved."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "bidder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "extra_reserved",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "total_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
              "Second is the total."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "bidder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
            ]
          },
          {
            "Name": "ReserveConfiscated",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "leaser",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve",
              "but no parachain slot has been leased."
            ]
          },
          {
            "Name": "BidAccepted",
            "TypeFields": [
              {
                "Name": "bidder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "first_slot",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "last_slot",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A new bid has been accepted as the current winner."
            ]
          },
          {
            "Name": "WinningOffset",
            "TypeFields": [
              {
                "Name": "auction_index",
                "TypeName": "AuctionIndex",
                "TypeId": 4
              },
              {
                "Name": "block_number",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "The winning offset was chosen for an auction. This will map into the `Winning` storage map."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "auctions",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "116": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a new crowdloaning campaign."
            ]
          },
          {
            "Name": "Contributed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "fund_index",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Contributed to a crowd sale."
            ]
          },
          {
            "Name": "Withdrew",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "fund_index",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Withdrew full balance of a contributor."
            ]
          },
          {
            "Name": "PartiallyRefunded",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 3,
            "Docs": [
              "The loans in a fund have been partially dissolved, i.e. there are some left",
              "over child keys that still need to be killed."
            ]
          },
          {
            "Name": "AllRefunded",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 4,
            "Docs": [
              "All loans in a fund have been refunded."
            ]
          },
          {
            "Name": "Dissolved",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 5,
            "Docs": [
              "Fund is dissolved."
            ]
          },
          {
            "Name": "HandleBidResult",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 55
              }
            ],
            "Index": 6,
            "Docs": [
              "The result of trying to submit a new bid to the Slots pallet."
            ]
          },
          {
            "Name": "Edited",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 7,
            "Docs": [
              "The configuration to a crowdloan has been edited."
            ]
          },
          {
            "Name": "MemoUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "memo",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "A memo has been updated."
            ]
          },
          {
            "Name": "AddedToNewRaise",
            "TypeFields": [
              {
                "Name": "para_id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 9,
            "Docs": [
              "A parachain has been moved to `NewRaise`"
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "crowdloan",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "117": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 118
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted.",
              "",
              "\\[ outcome \\]"
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent.",
              "",
              "\\[ origin, destination, message \\]"
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "Response",
                "TypeId": 139
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call.",
              "",
              "\\[ id, response \\]"
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification could",
              "not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result.",
              "",
              "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected location \\]"
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed.",
              "",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 156
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap.",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included.",
              "",
              "\\[ destination, result, cost \\]"
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention.",
              "",
              "\\[ location, XCM version \\]"
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "XcmError",
                "TypeId": 119
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it.",
              "",
              "\\[ location, query ID, error \\]"
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "TypeName": "VersionedMultiLocation",
                "TypeId": 170
              },
              {
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format.",
              "",
              "\\[ location, query ID \\]"
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected querier, maybe actual querier \\]"
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain sends us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`).",
              "",
              "\\[ paying location, fees \\]"
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 156
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "118": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "TypeName": "Error",
                "TypeId": 119
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Error",
                "TypeId": 119
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "119": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "120": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 121
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "121": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              },
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "122": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 124
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 124
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 124
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 126
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 63
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 127
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 128
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 125
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "123": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "124": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 125
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 125
          }
        ],
        "TypeDef": "Variant"
      },
      "125": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "126": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "127": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 17
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "129": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 130
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "130": {
        "TypeId": 131,
        "TypeDef": "Sequence"
      },
      "131": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 139
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 149
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 150
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 121
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 155
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 129
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 129
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 140
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 146
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 125
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 121
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 155
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "132": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 133
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "133": {
        "TypeId": 134,
        "TypeDef": "Sequence"
      },
      "134": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 135
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 136
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "135": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "136": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 137
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "137": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 17
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 138
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 33
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "138": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "139": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 140
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 142
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 146
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "140": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 141
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 141
          }
        ],
        "TypeDef": "Variant"
      },
      "141": {
        "TypeIds": [
          4,
          119
        ],
        "TypeDef": "Tuple"
      },
      "142": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 145
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 143
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "143": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 144
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 144
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 123
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "144": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "145": {
        "TypeId": 143,
        "TypeDef": "Sequence"
      },
      "146": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 147
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 147
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "147": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "148": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 120
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 120
          }
        ],
        "TypeDef": "Variant"
      },
      "149": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 120
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 10
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "152": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 153
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "153": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 135
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 154
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 135
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 154
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "154": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "155": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "156": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAssets"
        ],
        "TypeDef": "Variant"
      },
      "157": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 158
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "158": {
        "TypeId": 159,
        "TypeDef": "Sequence"
      },
      "159": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 160
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 168
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "160": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "161": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 162
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              },
              {
                "TypeName": "Junction",
                "TypeId": 163
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "163": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 164
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 164
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 164
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 126
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 63
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 165
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 166
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 167
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "164": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 165
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "165": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "166": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 165
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "167": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "168": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 169
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "169": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 17
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 138
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 33
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "170": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "171": {
        "Variants": [
          {
            "Name": "ProcessingFailed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 172
              },
              {
                "Name": "error",
                "TypeName": "ProcessMessageError",
                "TypeId": 174
              }
            ],
            "Index": 0,
            "Docs": [
              "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
            ]
          },
          {
            "Name": "Processed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 172
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "success",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 1,
            "Docs": [
              "Message is processed."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 172
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4
              },
              {
                "Name": "message_index",
                "TypeName": "T::Size",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Message placed in overweight queue."
            ]
          },
          {
            "Name": "PageReaped",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 172
              },
              {
                "Name": "index",
                "TypeName": "PageIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "This page was reaped."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "172": {
        "Variants": [
          {
            "Name": "Ump",
            "TypeFields": [
              {
                "TypeName": "UmpQueueId",
                "TypeId": 173
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "inclusion",
          "AggregateMessageOrigin"
        ],
        "TypeDef": "Variant"
      },
      "173": {
        "Variants": [
          {
            "Name": "Para",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "inclusion",
          "UmpQueueId"
        ],
        "TypeDef": "Variant"
      },
      "174": {
        "Variants": [
          {
            "Name": "BadFormat",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Corrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Overweight",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "Yield",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "messages",
          "ProcessMessageError"
        ],
        "TypeDef": "Variant"
      },
      "175": {
        "Variants": [
          {
            "Name": "PermanentSlotAssigned",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 0,
            "Docs": [
              "A para was assigned a permanent parachain slot"
            ]
          },
          {
            "Name": "TemporarySlotAssigned",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 1,
            "Docs": [
              "A para was assigned a temporary parachain slot"
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "assigned_slots",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "176": {
        "Variants": [
          {
            "Name": "ValidatorsRegistered",
            "TypeFields": [
              {
                "TypeName": "Vec<T::ValidatorId>",
                "TypeId": 80
              }
            ],
            "Index": 0,
            "Docs": [
              "New validators were added to the set."
            ]
          },
          {
            "Name": "ValidatorsDeregistered",
            "TypeFields": [
              {
                "TypeName": "Vec<T::ValidatorId>",
                "TypeId": 80
              }
            ],
            "Index": 1,
            "Docs": [
              "Validators were removed from the set."
            ]
          }
        ],
        "Path": [
          "pallet_validator_manager",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "177": {
        "Variants": [
          {
            "Name": "CollectionCreated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The id of the [`Collection`](ep_multi_tokens::Collection)"
                ]
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The owner of the [`Collection`](ep_multi_tokens::Collection)"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A new collection was created"
            ]
          },
          {
            "Name": "CollectionDestroyed",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "id of collection destroyed"
                ]
              },
              {
                "Name": "caller",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that destroyed the collection"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A collection was destroyed."
            ]
          },
          {
            "Name": "CollectionMutated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "[`CollectionId`](Config::CollectionId) of the",
                  "[`Collection`](ep_multi_tokens::Collection)"
                ]
              },
              {
                "Name": "mutation",
                "TypeName": "T::CollectionMutation",
                "TypeId": 178,
                "Docs": [
                  "The mutation that was applied to the collection"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "A collection was mutated"
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "[`CollectionId`](Config::CollectionId) of minted token"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) minted"
                ]
              },
              {
                "Name": "issuer",
                "TypeName": "RootOrSigned<T::AccountId>",
                "TypeId": 186,
                "Docs": [
                  "issuer of minted token"
                ]
              },
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The receiver of the token"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "the amount of units minted"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Units of a token were minted"
            ]
          },
          {
            "Name": "TokenCreated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) minted"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) minted"
                ]
              },
              {
                "Name": "issuer",
                "TypeName": "RootOrSigned<T::AccountId>",
                "TypeId": 186,
                "Docs": [
                  "issuer of minted [`Token`](ep_multi_tokens::Token)"
                ]
              },
              {
                "Name": "initial_supply",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "the initial supply of the [`Token`](ep_multi_tokens::Token)"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A token was created"
            ]
          },
          {
            "Name": "TokenMutated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) [`Token`](ep_multi_tokens::Token)",
                  "belongs to"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "Id of the [`Token`](ep_multi_tokens::Token) mutated"
                ]
              },
              {
                "Name": "mutation",
                "TypeName": "T::TokenMutation",
                "TypeId": 187,
                "Docs": [
                  "mutation that was applied to the [`Token`](ep_multi_tokens::Token)"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "A token was mutated"
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "collection id of tokens burned"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "the token id that was burned"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "the account the tokens were burned from"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount that was burned for each token_id"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Units of a token were burned"
            ]
          },
          {
            "Name": "TokenDestroyed",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) destroyed"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) destroyed"
                ]
              },
              {
                "Name": "caller",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "the [`AccountId`](frame_system::Config::AccountId) that destroyed the",
                  "[`Token`](ep_multi_tokens::Token)"
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A token was destroyed"
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "collection_id of transferred collection"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "[`TokenId`](Config::TokenId) transferred"
                ]
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that performed the transfer"
                ]
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "transaction sender"
                ]
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "transaction recipient"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "number of units transferred"
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "Units of a token were transferred"
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "TypeName": "FreezeOf<T>",
                "TypeId": 201
              }
            ],
            "Index": 9,
            "Docs": [
              "Collection, token or account was frozen"
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "TypeName": "FreezeOf<T>",
                "TypeId": 201
              }
            ],
            "Index": 10,
            "Docs": [
              "Collection, token or account was unfrozen"
            ]
          },
          {
            "Name": "AttributeSet",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "collectionId of collection modified"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78,
                "Docs": [
                  "[`TokenId`](Config::TokenId) of [`Token`](ep_multi_tokens::Token) modified"
                ]
              },
              {
                "Name": "key",
                "TypeName": "T::AttributeKey",
                "TypeId": 205,
                "Docs": [
                  "key of attribute set"
                ]
              },
              {
                "Name": "value",
                "TypeName": "T::AttributeValue",
                "TypeId": 206,
                "Docs": [
                  "value of attribute set"
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "New attribute has been set"
            ]
          },
          {
            "Name": "AttributeRemoved",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "collectionId of collection modified"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78,
                "Docs": [
                  "tokenid of token modified"
                ]
              },
              {
                "Name": "key",
                "TypeName": "T::AttributeKey",
                "TypeId": 205,
                "Docs": [
                  "key of attribute cleared"
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "An attribute has been removed"
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The collection that was approved"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78,
                "Docs": [
                  "The token that was approved"
                ]
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that made the approval"
                ]
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that was approved to operate"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "Option<T::TokenBalance>",
                "TypeId": 78,
                "Docs": [
                  "The amount approved for"
                ]
              },
              {
                "Name": "expiration",
                "TypeName": "T::Expiration",
                "TypeId": 74,
                "Docs": [
                  "The expiration of the approval"
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "An approval took place. If `token_id` is `None`, it applies to the whole collection."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The collection that was unapproved"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78,
                "Docs": [
                  "The token that was unapproved"
                ]
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that `operator` was unapproved for"
                ]
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that was unapproved to operate"
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "An unapproval took place. If `token_id` is `None`, it applies to the collection."
            ]
          },
          {
            "Name": "CollectionAccountCreated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which the account is created"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the account"
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "A new collection account was created"
            ]
          },
          {
            "Name": "TokenAccountCreated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which the account is created"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) for which the account is created"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the account"
                ]
              },
              {
                "Name": "balance",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The balance that this account holds"
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "A new token account was created"
            ]
          },
          {
            "Name": "CollectionAccountDestroyed",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) of the destroyed account"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the destroyed account"
                ]
              }
            ],
            "Index": 17,
            "Docs": [
              "A collection account was destroyed"
            ]
          },
          {
            "Name": "TokenAccountDestroyed",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which the account is created"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) fof the destroyed account"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the destroyed account"
                ]
              }
            ],
            "Index": 18,
            "Docs": [
              "A token account was destroyed"
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The collection in which token was reserved"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The token that was reserved"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that reserved the tokens"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount that was reserved"
                ]
              },
              {
                "Name": "reserve_id",
                "TypeName": "Option<T::ReserveIdentifierType>",
                "TypeId": 207,
                "Docs": [
                  "The identifier of the reserves"
                ]
              }
            ],
            "Index": 19,
            "Docs": [
              "Token units were reserved"
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) in which token was unreserved"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) that was unreserved"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that unreserved the tokens"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount that was unreserved"
                ]
              },
              {
                "Name": "reserve_id",
                "TypeName": "Option<T::ReserveIdentifierType>",
                "TypeId": 207,
                "Docs": [
                  "The identifier of the unreserved tokens"
                ]
              }
            ],
            "Index": 20,
            "Docs": [
              "Token units were unreserved"
            ]
          },
          {
            "Name": "MovedReserves",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) in which token was moved"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) that was moved"
                ]
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that reserves were moved from"
                ]
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that received the moved reserves"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount that was moved"
                ]
              },
              {
                "Name": "reserve_id",
                "TypeName": "Option<T::ReserveIdentifierType>",
                "TypeId": 207,
                "Docs": [
                  "The identifier of the moved reserves"
                ]
              }
            ],
            "Index": 21,
            "Docs": [
              "Reserved token units were moved"
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) in which token was moved"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) that was moved"
                ]
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that reserves were moved from"
                ]
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that received the moved reserves"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount that was moved"
                ]
              },
              {
                "Name": "reserve_id",
                "TypeName": "Option<T::ReserveIdentifierType>",
                "TypeId": 207,
                "Docs": [
                  "The identifier of the moved reserves"
                ]
              }
            ],
            "Index": 22,
            "Docs": [
              "Reserved token units were transferred"
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which balance was set"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) for which balance was set"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that balance was set for"
                ]
              },
              {
                "Name": "balance",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The balance of the account"
                ]
              },
              {
                "Name": "reserved_balance",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The reserved balance of the account"
                ]
              }
            ],
            "Index": 23,
            "Docs": [
              "The balance of an account was set"
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) of the tokens withdrawn"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) of the tokens withdrawn"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) withdrawn from"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount of tokens withdrawn"
                ]
              }
            ],
            "Index": 24,
            "Docs": [
              "Token units were withdrawn"
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) of the tokens deposited"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) of the tokens deposited"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) deposited to"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount of tokens deposited"
                ]
              }
            ],
            "Index": 25,
            "Docs": [
              "Token units were deposited"
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) of the tokens slashed"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) of the tokens slashed"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) slashed"
                ]
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6,
                "Docs": [
                  "The amount of tokens slashed"
                ]
              }
            ],
            "Index": 26,
            "Docs": [
              "An amount of tokens were slashed from account"
            ]
          },
          {
            "Name": "CollectionUpdated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which the value is set"
                ]
              },
              {
                "Name": "value",
                "TypeName": "Option<CollectionOf<T>>",
                "TypeId": 208,
                "Docs": [
                  "new value of Collection storage"
                ]
              }
            ],
            "Index": 27,
            "Docs": [
              "Collection storage was set to `value`"
            ]
          },
          {
            "Name": "TokenUpdated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which the value is set"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) for which the value is set"
                ]
              },
              {
                "Name": "value",
                "TypeName": "Option<TokenOf<T>>",
                "TypeId": 221,
                "Docs": [
                  "new value of Token storage"
                ]
              }
            ],
            "Index": 28,
            "Docs": [
              "Token storage was set to `value`"
            ]
          },
          {
            "Name": "NextCollectionIdUpdated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 29,
            "Docs": [
              "NextCollectionId storage was set to `collection_id`"
            ]
          },
          {
            "Name": "CollectionAccountUpdated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which the value is set"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that owned the token account"
                ]
              },
              {
                "Name": "value",
                "TypeName": "Option<CollectionAccountOf<T>>",
                "TypeId": 226,
                "Docs": [
                  "new value of TokenAccount storage"
                ]
              }
            ],
            "Index": 30,
            "Docs": [
              "TokenAccount storage was set to `value`"
            ]
          },
          {
            "Name": "TokenAccountUpdated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 6,
                "Docs": [
                  "The [`CollectionId`](Config::CollectionId) for which the value is set"
                ]
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 6,
                "Docs": [
                  "The [`TokenId`](Config::TokenId) of the destroyed account"
                ]
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that owned the token account"
                ]
              },
              {
                "Name": "value",
                "TypeName": "Option<TokenAccountOf<T>>",
                "TypeId": 233,
                "Docs": [
                  "new value of TokenAccount storage"
                ]
              }
            ],
            "Index": 31,
            "Docs": [
              "TokenAccount storage was set to `value`"
            ]
          },
          {
            "Name": "MigrationStatusUpdated",
            "TypeFields": [
              {
                "Name": "stage",
                "TypeName": "MigrationStage",
                "TypeId": 247
              }
            ],
            "Index": 32,
            "Docs": [
              "Migration stage updated"
            ]
          },
          {
            "Name": "ClaimedCollections",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that received the claim"
                ]
              },
              {
                "Name": "ethereum_address",
                "TypeName": "EthereumAddress",
                "TypeId": 248,
                "Docs": [
                  "The ethereum address"
                ]
              },
              {
                "Name": "collection_ids",
                "TypeName": "Vec<T::CollectionId>",
                "TypeId": 89,
                "Docs": [
                  "The collection ids that were claimed"
                ]
              }
            ],
            "Index": 33,
            "Docs": [
              "Collections were claimed"
            ]
          },
          {
            "Name": "ClaimedTokens",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that received the tokens"
                ]
              },
              {
                "Name": "ethereum_address",
                "TypeName": "EthereumAddress",
                "TypeId": 248,
                "Docs": [
                  "The ethereum address"
                ]
              },
              {
                "Name": "asset_ids",
                "TypeName": "Vec<AssetIdWithEthOf<T>>",
                "TypeId": 249,
                "Docs": [
                  "The asset ids that were claimed"
                ]
              },
              {
                "Name": "more_tokens_remain",
                "TypeName": "bool",
                "TypeId": 37,
                "Docs": [
                  "This is true if there are still more tokens to claim"
                ]
              }
            ],
            "Index": 34,
            "Docs": [
              "Tokens were claimed"
            ]
          },
          {
            "Name": "ClaimTokensInitiated",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that will receive the tokens"
                ]
              },
              {
                "Name": "ethereum_address",
                "TypeName": "EthereumAddress",
                "TypeId": 248,
                "Docs": [
                  "The ethereum address"
                ]
              }
            ],
            "Index": 35,
            "Docs": [
              "Claims tokens initiated"
            ]
          },
          {
            "Name": "ClaimTokensCompleted",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that received the tokens"
                ]
              },
              {
                "Name": "ethereum_address",
                "TypeName": "EthereumAddress",
                "TypeId": 248,
                "Docs": [
                  "The ethereum address that initiated the claim"
                ]
              }
            ],
            "Index": 36,
            "Docs": [
              "Finished claiming the tokens"
            ]
          }
        ],
        "Path": [
          "pallet_multi_tokens",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "178": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "Option<AccountId>",
            "TypeId": 36
          },
          {
            "Name": "royalty",
            "TypeName": "ShouldMutate<Option<Royalty>>",
            "TypeId": 183
          },
          {
            "Name": "explicit_royalty_currencies",
            "TypeName": "Option<ExplicitRoyaltyCurrencies>",
            "TypeId": 185
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "collection",
          "DefaultCollectionMutation"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Royalty",
            "TypeId": 179
          },
          {
            "Name": "ExplicitRoyaltyCurrencies",
            "TypeId": 180
          }
        ],
        "TypeDef": "Composite"
      },
      "179": {
        "TypeFields": [
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "percentage",
            "TypeName": "Perbill",
            "TypeId": 44
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "market",
          "DefaultRoyalty"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "180": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 182
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 181
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "181": {
        "TypeFields": [
          {
            "Name": "collection_id",
            "TypeName": "CollectionId",
            "TypeId": 63
          },
          {
            "Name": "token_id",
            "TypeName": "TokenId",
            "TypeId": 63
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "token",
          "AssetId"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "182": {
        "TypeId": 181,
        "TypeDef": "Sequence"
      },
      "183": {
        "Variants": [
          {
            "Name": "NoMutation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SomeMutation",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 184
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "ShouldMutate"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 184
          }
        ],
        "TypeDef": "Variant"
      },
      "184": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 179
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 179
          }
        ],
        "TypeDef": "Variant"
      },
      "185": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 180
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 180
          }
        ],
        "TypeDef": "Variant"
      },
      "186": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "RootOrSigned"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "187": {
        "TypeFields": [
          {
            "Name": "behavior",
            "TypeName": "ShouldMutate<Option<TokenMarketBehavior<Royalty>>>",
            "TypeId": 196
          },
          {
            "Name": "listing_forbidden",
            "TypeName": "ShouldMutate<bool>",
            "TypeId": 199
          },
          {
            "Name": "metadata",
            "TypeName": "ShouldMutate<TokenMetadata>",
            "TypeId": 200
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "token",
          "DefaultTokenMutation"
        ],
        "TypeParams": [
          {
            "Name": "Royalty",
            "TypeId": 179
          },
          {
            "Name": "TokenMetadata",
            "TypeId": 188
          }
        ],
        "TypeDef": "Composite"
      },
      "188": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Foreign",
            "TypeFields": [
              {
                "TypeName": "ForeignTokenMetadata",
                "TypeId": 189
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "frame",
          "DefaultTokenMetadata"
        ],
        "TypeParams": [
          {
            "Name": "ForeignTokenMetadata",
            "TypeId": 189
          }
        ],
        "TypeDef": "Variant"
      },
      "189": {
        "TypeFields": [
          {
            "Name": "decimal_count",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "name",
            "TypeName": "Name",
            "TypeId": 190
          },
          {
            "Name": "symbol",
            "TypeName": "Symbol",
            "TypeId": 193
          },
          {
            "Name": "location",
            "TypeName": "Option<Location>",
            "TypeId": 148
          },
          {
            "Name": "units_per_second",
            "TypeName": "Option<u128>",
            "TypeId": 78
          },
          {
            "Name": "preminted_supply",
            "TypeName": "TokenBalance",
            "TypeId": 63
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "frame",
          "DefaultForeignTokenMetadata"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Name",
            "TypeId": 190
          },
          {
            "Name": "Symbol",
            "TypeId": 193
          },
          {
            "Name": "Location",
            "TypeId": 120
          }
        ],
        "TypeDef": "Composite"
      },
      "190": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, MaxLength>",
            "TypeId": 192
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "types",
          "BoundedString"
        ],
        "TypeParams": [
          {
            "Name": "MaxLength",
            "TypeId": 191
          }
        ],
        "TypeDef": "Composite"
      },
      "191": {
        "Path": [
          "enjin_runtime",
          "ForeignTokenNameLength"
        ],
        "TypeDef": "Composite"
      },
      "192": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "193": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, MaxLength>",
            "TypeId": 195
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "types",
          "BoundedString"
        ],
        "TypeParams": [
          {
            "Name": "MaxLength",
            "TypeId": 194
          }
        ],
        "TypeDef": "Composite"
      },
      "194": {
        "Path": [
          "enjin_runtime",
          "ForeignTokenSymbolLength"
        ],
        "TypeDef": "Composite"
      },
      "195": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "196": {
        "Variants": [
          {
            "Name": "NoMutation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SomeMutation",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 197
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "ShouldMutate"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 197
          }
        ],
        "TypeDef": "Variant"
      },
      "197": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 198
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 198
          }
        ],
        "TypeDef": "Variant"
      },
      "198": {
        "Variants": [
          {
            "Name": "HasRoyalty",
            "TypeFields": [
              {
                "TypeName": "Royalty",
                "TypeId": 179
              }
            ],
            "Index": 0
          },
          {
            "Name": "IsCurrency",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "token",
          "TokenMarketBehavior"
        ],
        "TypeParams": [
          {
            "Name": "Royalty",
            "TypeId": 179
          }
        ],
        "TypeDef": "Variant"
      },
      "199": {
        "Variants": [
          {
            "Name": "NoMutation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SomeMutation",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 37
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "ShouldMutate"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 37
          }
        ],
        "TypeDef": "Variant"
      },
      "200": {
        "Variants": [
          {
            "Name": "NoMutation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SomeMutation",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 188
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "ShouldMutate"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 188
          }
        ],
        "TypeDef": "Variant"
      },
      "201": {
        "TypeFields": [
          {
            "Name": "collection_id",
            "TypeName": "CollectionId",
            "TypeId": 63
          },
          {
            "Name": "freeze_type",
            "TypeName": "FreezeType<AccountId, TokenId>",
            "TypeId": 202
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "Freeze"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "202": {
        "Variants": [
          {
            "Name": "Collection",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 6
              },
              {
                "Name": "freeze_state",
                "TypeName": "Option<FreezeState>",
                "TypeId": 203
              }
            ],
            "Index": 1
          },
          {
            "Name": "CollectionAccount",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "TokenAccount",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "account_id",
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "FreezeType"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "203": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 204
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 204
          }
        ],
        "TypeDef": "Variant"
      },
      "204": {
        "Variants": [
          {
            "Name": "Permanent",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Temporary",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Never",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "token",
          "FreezeState"
        ],
        "TypeDef": "Variant"
      },
      "205": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "206": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "207": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 138
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 138
          }
        ],
        "TypeDef": "Variant"
      },
      "208": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 209
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 209
          }
        ],
        "TypeDef": "Variant"
      },
      "209": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "policy",
            "TypeName": "Policy",
            "TypeId": 210
          },
          {
            "Name": "token_count",
            "TypeName": "TokenCount",
            "TypeId": 10
          },
          {
            "Name": "attribute_count",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "total_deposit",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "explicit_royalty_currencies",
            "TypeName": "ExplicitRoyaltyCurrencies",
            "TypeId": 217
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "collection",
          "Collection"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Policy",
            "TypeId": 210
          },
          {
            "Name": "ExplicitRoyaltyCurrencies",
            "TypeId": 217
          }
        ],
        "TypeDef": "Composite"
      },
      "210": {
        "TypeFields": [
          {
            "Name": "mint",
            "TypeName": "DefaultMintPolicy<TokenBalance>",
            "TypeId": 211
          },
          {
            "Name": "burn",
            "TypeName": "DefaultBurnPolicy",
            "TypeId": 213
          },
          {
            "Name": "transfer",
            "TypeName": "DefaultTransferPolicy",
            "TypeId": 214
          },
          {
            "Name": "attribute",
            "TypeName": "DefaultAttributePolicy",
            "TypeId": 215
          },
          {
            "Name": "market",
            "TypeName": "DefaultMarketPolicy<Royalty>",
            "TypeId": 216
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "DefaultCollectionPolicy"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Royalty",
            "TypeId": 179
          }
        ],
        "TypeDef": "Composite"
      },
      "211": {
        "TypeFields": [
          {
            "Name": "max_token_count",
            "TypeName": "Option<TokenCount>",
            "TypeId": 212
          },
          {
            "Name": "max_token_supply",
            "TypeName": "Option<TokenBalance>",
            "TypeId": 78
          },
          {
            "Name": "force_single_mint",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "mint",
          "DefaultMintPolicy"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "212": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "213": {
        "Path": [
          "ep_multi_tokens",
          "policy",
          "burn",
          "DefaultBurnPolicy"
        ],
        "TypeDef": "Composite"
      },
      "214": {
        "TypeFields": [
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "transfer",
          "DefaultTransferPolicy"
        ],
        "TypeDef": "Composite"
      },
      "215": {
        "Path": [
          "ep_multi_tokens",
          "policy",
          "attribute",
          "DefaultAttributePolicy"
        ],
        "TypeDef": "Composite"
      },
      "216": {
        "TypeFields": [
          {
            "Name": "royalty",
            "TypeName": "Option<Royalty>",
            "TypeId": 184
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "market",
          "DefaultMarketPolicy"
        ],
        "TypeParams": [
          {
            "Name": "Royalty",
            "TypeId": 179
          }
        ],
        "TypeDef": "Composite"
      },
      "217": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 218
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 181
          },
          {
            "Name": "V",
            "TypeId": 56
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "TypeFields": [
          {
            "TypeId": 219
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 181
          },
          {
            "Name": "V",
            "TypeId": 56
          }
        ],
        "TypeDef": "Composite"
      },
      "219": {
        "TypeId": 220,
        "TypeDef": "Sequence"
      },
      "220": {
        "TypeIds": [
          181,
          56
        ],
        "TypeDef": "Tuple"
      },
      "221": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 222
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 222
          }
        ],
        "TypeDef": "Variant"
      },
      "222": {
        "TypeFields": [
          {
            "Name": "supply",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "cap",
            "TypeName": "Option<TokenCap<TokenBalance>>",
            "TypeId": 223
          },
          {
            "Name": "freeze_state",
            "TypeName": "Option<FreezeState>",
            "TypeId": 203
          },
          {
            "Name": "minimum_balance",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "sufficiency",
            "TypeName": "Sufficiency<Balance>",
            "TypeId": 225
          },
          {
            "Name": "mint_deposit",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "attribute_count",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "market_behavior",
            "TypeName": "Option<TokenMarketBehavior<Royalty>>",
            "TypeId": 197
          },
          {
            "Name": "listing_forbidden",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "metadata",
            "TypeName": "TokenMetadata",
            "TypeId": 188
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "token",
          "Token"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Royalty",
            "TypeId": 179
          },
          {
            "Name": "TokenMetadata",
            "TypeId": 188
          }
        ],
        "TypeDef": "Composite"
      },
      "223": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 224
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 224
          }
        ],
        "TypeDef": "Variant"
      },
      "224": {
        "Variants": [
          {
            "Name": "SingleMint",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Supply",
            "TypeFields": [
              {
                "TypeName": "TokenBalance",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "CollapsingSupply",
            "TypeFields": [
              {
                "TypeName": "TokenBalance",
                "TypeId": 63
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "token",
          "TokenCap"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "225": {
        "Variants": [
          {
            "Name": "Sufficient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Insufficient",
            "TypeFields": [
              {
                "Name": "unit_price",
                "TypeName": "Balance",
                "TypeId": 63
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "token",
          "Sufficiency"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "226": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 227
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 227
          }
        ],
        "TypeDef": "Variant"
      },
      "227": {
        "TypeFields": [
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedBTreeMap<AccountId, Expiration, MaxApprovalCount>",
            "TypeId": 229
          },
          {
            "Name": "account_count",
            "TypeName": "u32",
            "TypeId": 123
          }
        ],
        "Path": [
          "pallet_multi_tokens",
          "features",
          "collection",
          "types",
          "CollectionAccount"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Expiration",
            "TypeId": 74
          },
          {
            "Name": "MaxApprovalCount",
            "TypeId": 228
          }
        ],
        "TypeDef": "Composite"
      },
      "228": {
        "Path": [
          "enjin_runtime",
          "MaxOperatorsPerAccount"
        ],
        "TypeDef": "Composite"
      },
      "229": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 230
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 74
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "230": {
        "TypeFields": [
          {
            "TypeId": 231
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 74
          }
        ],
        "TypeDef": "Composite"
      },
      "231": {
        "TypeId": 232,
        "TypeDef": "Sequence"
      },
      "232": {
        "TypeIds": [
          0,
          74
        ],
        "TypeDef": "Tuple"
      },
      "233": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 234
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 234
          }
        ],
        "TypeDef": "Variant"
      },
      "234": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "reserved_balance",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "locked_balance",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "named_reserves",
            "TypeName": "BoundedBTreeMap<ReserveIdentifier, TokenBalance, MaxReserves>",
            "TypeId": 238
          },
          {
            "Name": "locks",
            "TypeName": "BoundedBTreeMap<LockId, TokenBalance, MaxLocks>",
            "TypeId": 242
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedBTreeMap<AccountId, Approval, ApprovalCount>",
            "TypeId": 243
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_multi_tokens",
          "features",
          "token",
          "types",
          "TokenAccount"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Approval",
            "TypeId": 235
          },
          {
            "Name": "ApprovalCount",
            "TypeId": 228
          },
          {
            "Name": "ReserveIdentifier",
            "TypeId": 138
          },
          {
            "Name": "LockId",
            "TypeId": 138
          },
          {
            "Name": "MaxReserves",
            "TypeId": 236
          },
          {
            "Name": "MaxLocks",
            "TypeId": 237
          }
        ],
        "TypeDef": "Composite"
      },
      "235": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "expiration",
            "TypeName": "Expiration",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_multi_tokens",
          "features",
          "operator",
          "types",
          "Approval"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Expiration",
            "TypeId": 74
          }
        ],
        "TypeDef": "Composite"
      },
      "236": {
        "Path": [
          "enjin_runtime",
          "MaxMultiTokensReserves"
        ],
        "TypeDef": "Composite"
      },
      "237": {
        "Path": [
          "enjin_runtime",
          "MaxMultiTokensLocks"
        ],
        "TypeDef": "Composite"
      },
      "238": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 239
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 138
          },
          {
            "Name": "V",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "239": {
        "TypeFields": [
          {
            "TypeId": 240
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 138
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "240": {
        "TypeId": 241,
        "TypeDef": "Sequence"
      },
      "241": {
        "TypeIds": [
          138,
          6
        ],
        "TypeDef": "Tuple"
      },
      "242": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 239
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 138
          },
          {
            "Name": "V",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "243": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 244
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 235
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "244": {
        "TypeFields": [
          {
            "TypeId": 245
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 235
          }
        ],
        "TypeDef": "Composite"
      },
      "245": {
        "TypeId": 246,
        "TypeDef": "Sequence"
      },
      "246": {
        "TypeIds": [
          0,
          235
        ],
        "TypeDef": "Tuple"
      },
      "247": {
        "Variants": [
          {
            "Name": "NotStarted",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "InProgress",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Completed",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "migrations",
          "MigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "248": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 126
          }
        ],
        "Path": [
          "primitive_types",
          "H160"
        ],
        "TypeDef": "Composite"
      },
      "249": {
        "TypeId": 250,
        "TypeDef": "Sequence"
      },
      "250": {
        "TypeFields": [
          {
            "Name": "ethereum_collection_id",
            "TypeName": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "collection_id",
            "TypeName": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "token_id",
            "TypeName": "TokenId",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_multi_tokens",
          "features",
          "claim",
          "AssetIdWithEth"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "251": {
        "Variants": [
          {
            "Name": "FuelTankCreated",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that owns the [`FuelTank`]"
                ]
              },
              {
                "Name": "name",
                "TypeName": "FuelTankNameOf<T>",
                "TypeId": 252,
                "Docs": [
                  "The name of the [`FuelTank`]"
                ]
              },
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account id of the [`FuelTank`]"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A new [`FuelTank`] was created."
            ]
          },
          {
            "Name": "FuelTankMutated",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "mutation",
                "TypeName": "T::TankMutation",
                "TypeId": 255,
                "Docs": [
                  "The mutation that was applied"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A [`FuelTank`] was mutated"
            ]
          },
          {
            "Name": "FuelTankDestroyed",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "A [`FuelTank`] was destroyed"
            ]
          },
          {
            "Name": "CallDispatched",
            "TypeFields": [
              {
                "Name": "caller",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that dispatched the call"
                ]
              },
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A call was dispatched through a [`FuelTank`]."
            ]
          },
          {
            "Name": "AccountAdded",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "user_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that was added"
                ]
              },
              {
                "Name": "tank_deposit",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The deposit reserved by the [`FuelTank`] for this account"
                ]
              },
              {
                "Name": "user_deposit",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The deposit reserved by the user for this account"
                ]
              },
              {
                "Name": "total_received",
                "TypeName": "T::Balance",
                "TypeId": 6,
                "Docs": [
                  "The amount the fuel tank has transferred to this account"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was added to a [`FuelTank`]"
            ]
          },
          {
            "Name": "AccountRemoved",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "user_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that was removed"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "An account was removed from a [`FuelTank`]"
            ]
          },
          {
            "Name": "AccountRuleDataRemoved",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "user_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that was removed"
                ]
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4,
                "Docs": [
                  "The id of the rule set that was removed"
                ]
              },
              {
                "Name": "rule_kind",
                "TypeName": "DispatchRuleKind",
                "TypeId": 270,
                "Docs": [
                  "The [`DispatchRuleKind`] that was removed"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Account data of [`AccountId`](frame_system::Config::AccountId) was removed from",
              "[`RuleSetId`](Config::RuleSetId)"
            ]
          },
          {
            "Name": "RuleSetInserted",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4,
                "Docs": [
                  "The id of the rule set that was added"
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A new rule set was added to [`FuelTank`]"
            ]
          },
          {
            "Name": "RuleSetRemoved",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4,
                "Docs": [
                  "The id of the rule set that was removed"
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "A rule set was removed from [`FuelTank`]"
            ]
          },
          {
            "Name": "FreezeStateMutated",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "rule_set_id",
                "TypeName": "Option<T::RuleSetId>",
                "TypeId": 74,
                "Docs": [
                  "The possible [`RuleSetId`](Config::RuleSetId)"
                ]
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 37,
                "Docs": [
                  "The new `is_frozen` state"
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "The freeze state change for fuel tank or its rule set was executed in `on_finalize`"
            ]
          },
          {
            "Name": "DispatchFailed",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "caller",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) that dispatched the call"
                ]
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25,
                "Docs": [
                  "The error"
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "The dispatch of a call has failed"
            ]
          },
          {
            "Name": "ConsumptionSet",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                ]
              },
              {
                "Name": "user_id",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 36,
                "Docs": [
                  "The possible user [`AccountId`](frame_system::Config::AccountId) whose consumption",
                  "was set"
                ]
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4,
                "Docs": [
                  "The [`RuleSetId`](Config::RuleSetId)"
                ]
              },
              {
                "Name": "consumption",
                "TypeName": "ConsumptionOf<T>",
                "TypeId": 271,
                "Docs": [
                  "The new [`Consumption`](crate::Consumption)"
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "The consumption for an account was set for a rule set on a [`FuelTank`]"
            ]
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "252": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, MaxLength>",
            "TypeId": 254
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "types",
          "BoundedString"
        ],
        "TypeParams": [
          {
            "Name": "MaxLength",
            "TypeId": 253
          }
        ],
        "TypeDef": "Composite"
      },
      "253": {
        "Path": [
          "enjin_runtime",
          "MaxFuelTankNameLength"
        ],
        "TypeDef": "Composite"
      },
      "254": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "255": {
        "TypeFields": [
          {
            "Name": "user_account_management",
            "TypeName": "ShouldMutate<Option<UserAccountManagement>>",
            "TypeId": 257
          },
          {
            "Name": "provides_deposit",
            "TypeName": "Option<bool>",
            "TypeId": 260
          },
          {
            "Name": "account_rules",
            "TypeName": "Option<AccountRuleSetDescriptorsOf<T>>",
            "TypeId": 261
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "impls",
          "DefaultTankMutation"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 256
          }
        ],
        "TypeDef": "Composite"
      },
      "256": {
        "Path": [
          "enjin_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      },
      "257": {
        "Variants": [
          {
            "Name": "NoMutation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SomeMutation",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 258
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "ShouldMutate"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 258
          }
        ],
        "TypeDef": "Variant"
      },
      "258": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 259
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 259
          }
        ],
        "TypeDef": "Variant"
      },
      "259": {
        "TypeFields": [
          {
            "Name": "tank_reserves_existential_deposit",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "tank_reserves_account_creation_deposit",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "UserAccountManagement"
        ],
        "TypeDef": "Composite"
      },
      "260": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 37
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 37
          }
        ],
        "TypeDef": "Variant"
      },
      "261": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 262
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 262
          }
        ],
        "TypeDef": "Variant"
      },
      "262": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 269
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 263
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "263": {
        "Variants": [
          {
            "Name": "WhitelistedCallers",
            "TypeFields": [
              {
                "TypeName": "WhitelistedCallersRuleOf<T>",
                "TypeId": 264
              }
            ],
            "Index": 0
          },
          {
            "Name": "RequireToken",
            "TypeFields": [
              {
                "TypeName": "RequireTokenRuleOf<T>",
                "TypeId": 268
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "AccountRuleDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant"
      },
      "264": {
        "TypeFields": [
          {
            "TypeName": "BoundedBTreeSet<AccountId, Max>",
            "TypeId": 266
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "whitelisted_callers",
          "WhitelistedCallersRule"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Max",
            "TypeId": 265
          }
        ],
        "TypeDef": "Composite"
      },
      "265": {
        "Path": [
          "enjin_runtime",
          "MaxWhitelistedCallers"
        ],
        "TypeDef": "Composite"
      },
      "266": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 267
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "267": {
        "TypeFields": [
          {
            "TypeId": 80
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "268": {
        "TypeFields": [
          {
            "Name": "collection_id",
            "TypeName": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "token_id",
            "TypeName": "TokenId",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "require_token",
          "RequireTokenRule"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "269": {
        "TypeId": 263,
        "TypeDef": "Sequence"
      },
      "270": {
        "Variants": [
          {
            "Name": "WhitelistedCallers",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WhitelistedCollections",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "MaxFuelBurnPerTransaction",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UserFuelBudget",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "TankFuelBudget",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "RequireToken",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "PermittedCalls",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "PermittedExtrinsics",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "WhitelistedPallets",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "DispatchRuleKind"
        ],
        "TypeDef": "Variant"
      },
      "271": {
        "TypeFields": [
          {
            "Name": "total_consumed",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "last_reset_block",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "Consumption"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "272": {
        "Variants": [
          {
            "Name": "PalletPaused",
            "TypeFields": [
              {
                "Name": "pallet_name",
                "TypeName": "BoundedStringOf<T>",
                "TypeId": 273
              }
            ],
            "Index": 0,
            "Docs": [
              "All pallet extrinsics are paused."
            ]
          },
          {
            "Name": "PalletResumed",
            "TypeFields": [
              {
                "Name": "pallet_name",
                "TypeName": "BoundedStringOf<T>",
                "TypeId": 273
              }
            ],
            "Index": 1,
            "Docs": [
              "All pallet extrinsics are resumed."
            ]
          },
          {
            "Name": "ExtrinsicPaused",
            "TypeFields": [
              {
                "Name": "pallet_name",
                "TypeName": "BoundedStringOf<T>",
                "TypeId": 273
              },
              {
                "Name": "extrinsic_name",
                "TypeName": "BoundedStringOf<T>",
                "TypeId": 273
              }
            ],
            "Index": 2,
            "Docs": [
              "Extrinsic is paused."
            ]
          },
          {
            "Name": "ExtrinsicResumed",
            "TypeFields": [
              {
                "Name": "pallet_name",
                "TypeName": "BoundedStringOf<T>",
                "TypeId": 273
              },
              {
                "Name": "extrinsic_name",
                "TypeName": "BoundedStringOf<T>",
                "TypeId": 273
              }
            ],
            "Index": 3,
            "Docs": [
              "Extrinsic is resumed"
            ]
          }
        ],
        "Path": [
          "pallet_extrinsic_pause",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The pallet's event type."
        ]
      },
      "273": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, MaxLength>",
            "TypeId": 275
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "types",
          "BoundedString"
        ],
        "TypeParams": [
          {
            "Name": "MaxLength",
            "TypeId": 274
          }
        ],
        "TypeDef": "Composite"
      },
      "274": {
        "Path": [
          "enjin_runtime",
          "MaxNameLength"
        ],
        "TypeDef": "Composite"
      },
      "275": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "276": {
        "Variants": [
          {
            "Name": "ListingCreated",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12,
                "Docs": [
                  "Id for the listing"
                ]
              },
              {
                "Name": "listing",
                "TypeName": "ListingOf<T>",
                "TypeId": 277,
                "Docs": [
                  "The listing"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A listing was created"
            ]
          },
          {
            "Name": "ListingCancelled",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12,
                "Docs": [
                  "Id for the listing"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A listing was cancelled"
            ]
          },
          {
            "Name": "ListingFilled",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12,
                "Docs": [
                  "ID of the listing"
                ]
              },
              {
                "Name": "buyer",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "account that filled the listing"
                ]
              },
              {
                "Name": "amount_filled",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "The amount that was filled"
                ]
              },
              {
                "Name": "amount_remaining",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount remaining to be filled"
                ]
              },
              {
                "Name": "protocol_fee",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount paid as protocol fee"
                ]
              },
              {
                "Name": "royalty",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount that went to royalties"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "A listing was filled or partially filled"
            ]
          },
          {
            "Name": "BidPlaced",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12,
                "Docs": [
                  "ID of the listing"
                ]
              },
              {
                "Name": "bid",
                "TypeName": "BidOf<T>",
                "TypeId": 285,
                "Docs": [
                  "The bid that was placed"
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A bid was placed"
            ]
          },
          {
            "Name": "AuctionFinalized",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12,
                "Docs": [
                  "The listing id"
                ]
              },
              {
                "Name": "winning_bid",
                "TypeName": "Option<BidOf<T>>",
                "TypeId": 284,
                "Docs": [
                  "The bid that won"
                ]
              },
              {
                "Name": "protocol_fee",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount paid as protocol fee"
                ]
              },
              {
                "Name": "royalty",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount that went to royalties"
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "An auction was finalized"
            ]
          },
          {
            "Name": "ProtocolFeeSet",
            "TypeFields": [
              {
                "Name": "protocol_fee",
                "TypeName": "Perbill",
                "TypeId": 42,
                "Docs": [
                  "The new protocol fee"
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Protocol fee was set"
            ]
          }
        ],
        "Path": [
          "pallet_marketplace",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The Event for this pallet"
        ]
      },
      "277": {
        "TypeFields": [
          {
            "Name": "seller",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "make_asset_id",
            "TypeName": "AssetId<CollectionId, TokenId>",
            "TypeId": 181
          },
          {
            "Name": "take_asset_id",
            "TypeName": "AssetId<CollectionId, TokenId>",
            "TypeId": 181
          },
          {
            "Name": "amount",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "price",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "min_take_value",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "fee_side",
            "TypeName": "FeeSide",
            "TypeId": 279
          },
          {
            "Name": "creation_block",
            "TypeName": "BlockNumber",
            "TypeId": 123
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "salt",
            "TypeName": "Salt",
            "TypeId": 278
          },
          {
            "Name": "data",
            "TypeName": "ListingData<BlockNumber>",
            "TypeId": 280
          },
          {
            "Name": "state",
            "TypeName": "ListingState<AccountId, TokenBalance>",
            "TypeId": 282
          }
        ],
        "Path": [
          "pallet_marketplace",
          "features",
          "listing",
          "Listing"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Salt",
            "TypeId": 278
          }
        ],
        "TypeDef": "Composite"
      },
      "278": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "279": {
        "Variants": [
          {
            "Name": "NoFee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Make",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Take",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_marketplace",
          "features",
          "listing",
          "FeeSide"
        ],
        "TypeDef": "Variant"
      },
      "280": {
        "Variants": [
          {
            "Name": "FixedPrice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Auction",
            "TypeFields": [
              {
                "TypeName": "AuctionData<BlockNumber>",
                "TypeId": 281
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_marketplace",
          "features",
          "listing",
          "ListingData"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "281": {
        "TypeFields": [
          {
            "Name": "start_block",
            "TypeName": "BlockNumber",
            "TypeId": 123
          },
          {
            "Name": "end_block",
            "TypeName": "BlockNumber",
            "TypeId": 123
          }
        ],
        "Path": [
          "pallet_marketplace",
          "features",
          "auction",
          "AuctionData"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "282": {
        "Variants": [
          {
            "Name": "FixedPrice",
            "TypeFields": [
              {
                "Name": "amount_filled",
                "TypeName": "TokenBalance",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "Auction",
            "TypeFields": [
              {
                "TypeName": "AuctionState<AccountId, TokenBalance>",
                "TypeId": 283
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_marketplace",
          "features",
          "listing",
          "ListingState"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "283": {
        "TypeFields": [
          {
            "Name": "high_bid",
            "TypeName": "Option<Bid<AccountId, TokenBalance>>",
            "TypeId": 284
          }
        ],
        "Path": [
          "pallet_marketplace",
          "features",
          "auction",
          "AuctionState"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "284": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 285
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 285
          }
        ],
        "TypeDef": "Variant"
      },
      "285": {
        "TypeFields": [
          {
            "Name": "bidder",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "price",
            "TypeName": "TokenBalance",
            "TypeId": 63
          }
        ],
        "Path": [
          "pallet_marketplace",
          "features",
          "auction",
          "Bid"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "286": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 287
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 288
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 55
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 287
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 288
              }
            ],
            "Index": 3,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 287
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 288
              }
            ],
            "Index": 4,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 287
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 288
              }
            ],
            "Index": 5,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "287": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "288": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "289": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "290": {
        "Variants": [
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "An account has delegated their vote to another account. \\[who, target\\]"
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has cancelled a previous delegation operation."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "291": {
        "Variants": [
          {
            "Name": "Submitted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 292,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 293,
                "Docs": [
                  "The proposal for the referendum."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A referendum has been submitted."
            ]
          },
          {
            "Name": "DecisionDepositPlaced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The decision deposit has been placed."
            ]
          },
          {
            "Name": "DecisionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "The decision deposit has been refunded."
            ]
          },
          {
            "Name": "DepositSlashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A deposit has been slashaed."
            ]
          },
          {
            "Name": "DecisionStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 292,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 293,
                "Docs": [
                  "The proposal for the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 641,
                "Docs": [
                  "The current tally of votes in this referendum."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A referendum has moved into the deciding phase."
            ]
          },
          {
            "Name": "ConfirmStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 5
          },
          {
            "Name": "ConfirmAborted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 6
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 641,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 641,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 641,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "A referendum has been timed out without being decided."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 641,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 641,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "A referendum has been killed."
            ]
          },
          {
            "Name": "SubmissionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "The submission deposit has been refunded."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a referendum has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "292": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "293": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 640
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 12
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 294
          }
        ],
        "TypeDef": "Variant"
      },
      "294": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 295
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 299
              }
            ],
            "Index": 2
          },
          {
            "Name": "Babe",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                "TypeId": 300
              }
            ],
            "Index": 3
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 310
              }
            ],
            "Index": 6
          },
          {
            "Name": "ElectionProviderMultiPhase",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                "TypeId": 313
              }
            ],
            "Index": 8
          },
          {
            "Name": "Staking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                "TypeId": 373
              }
            ],
            "Index": 9
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 382
              }
            ],
            "Index": 10
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                "TypeId": 387
              }
            ],
            "Index": 11
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 398
              }
            ],
            "Index": 12
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 399
              }
            ],
            "Index": 14
          },
          {
            "Name": "ImOnline",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                "TypeId": 400
              }
            ],
            "Index": 15
          },
          {
            "Name": "VoterList",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>",
                "TypeId": 407
              }
            ],
            "Index": 17
          },
          {
            "Name": "NominationPools",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>",
                "TypeId": 408
              }
            ],
            "Index": 18
          },
          {
            "Name": "StakeExchange",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StakeExchange, Runtime>",
                "TypeId": 413
              }
            ],
            "Index": 19
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 415
              }
            ],
            "Index": 20
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 423
              }
            ],
            "Index": 21
          },
          {
            "Name": "Configuration",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>",
                "TypeId": 425
              }
            ],
            "Index": 51
          },
          {
            "Name": "ParasShared",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>",
                "TypeId": 432
              }
            ],
            "Index": 52
          },
          {
            "Name": "ParaInclusion",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>",
                "TypeId": 433
              }
            ],
            "Index": 53
          },
          {
            "Name": "ParaInherent",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>",
                "TypeId": 434
              }
            ],
            "Index": 54
          },
          {
            "Name": "Paras",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>",
                "TypeId": 462
              }
            ],
            "Index": 56
          },
          {
            "Name": "Initializer",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>",
                "TypeId": 464
              }
            ],
            "Index": 57
          },
          {
            "Name": "Hrmp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>",
                "TypeId": 465
              }
            ],
            "Index": 60
          },
          {
            "Name": "ParasDisputes",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>",
                "TypeId": 466
              }
            ],
            "Index": 62
          },
          {
            "Name": "ParasSlashing",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>",
                "TypeId": 467
              }
            ],
            "Index": 63
          },
          {
            "Name": "Registrar",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>",
                "TypeId": 471
              }
            ],
            "Index": 70
          },
          {
            "Name": "Slots",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>",
                "TypeId": 472
              }
            ],
            "Index": 71
          },
          {
            "Name": "Auctions",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>",
                "TypeId": 473
              }
            ],
            "Index": 72
          },
          {
            "Name": "Crowdloan",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>",
                "TypeId": 475
              }
            ],
            "Index": 73
          },
          {
            "Name": "XcmPallet",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>",
                "TypeId": 484
              }
            ],
            "Index": 99
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                "TypeId": 505
              }
            ],
            "Index": 110
          },
          {
            "Name": "ParasSudoWrapper",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSudoWrapper, Runtime>",
                "TypeId": 506
              }
            ],
            "Index": 250
          },
          {
            "Name": "AssignedSlots",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssignedSlots, Runtime>",
                "TypeId": 508
              }
            ],
            "Index": 251
          },
          {
            "Name": "ValidatorManager",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ValidatorManager, Runtime>",
                "TypeId": 510
              }
            ],
            "Index": 252
          },
          {
            "Name": "MultiTokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MultiTokens, Runtime>",
                "TypeId": 511
              }
            ],
            "Index": 253
          },
          {
            "Name": "FuelTanks",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FuelTanks, Runtime>",
                "TypeId": 541
              }
            ],
            "Index": 254
          },
          {
            "Name": "ExtrinsicPause",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ExtrinsicPause, Runtime>",
                "TypeId": 572
              }
            ],
            "Index": 255
          },
          {
            "Name": "Marketplace",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Marketplace, Runtime>",
                "TypeId": 573
              }
            ],
            "Index": 249
          },
          {
            "Name": "Beefy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Beefy, Runtime>",
                "TypeId": 575
              }
            ],
            "Index": 240
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 585
              }
            ],
            "Index": 100
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 587
              }
            ],
            "Index": 101
          },
          {
            "Name": "ConvictionVoting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                "TypeId": 588
              }
            ],
            "Index": 102
          },
          {
            "Name": "Referenda",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                "TypeId": 593
              }
            ],
            "Index": 103
          },
          {
            "Name": "Whitelist",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                "TypeId": 596
              }
            ],
            "Index": 105
          },
          {
            "Name": "FellowshipCollective",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipCollective, Runtime>",
                "TypeId": 597
              }
            ],
            "Index": 106
          },
          {
            "Name": "FellowshipReferenda",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipReferenda, Runtime>",
                "TypeId": 598
              }
            ],
            "Index": 107
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 599
              }
            ],
            "Index": 108
          },
          {
            "Name": "VoteManager",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoteManager, Runtime>",
                "TypeId": 638
              }
            ],
            "Index": 109
          }
        ],
        "Path": [
          "enjin_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "295": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "- `O(1)`"
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`."
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 296
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 298
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 13
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "296": {
        "TypeId": 297,
        "TypeDef": "Sequence"
      },
      "297": {
        "TypeIds": [
          13,
          13
        ],
        "TypeDef": "Tuple"
      },
      "298": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "299": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "300": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Header>>",
                "TypeId": 301
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 306
              }
            ],
            "Index": 0,
            "Docs": [
              "Report authority equivocation/misbehavior. This method will verify",
              "the equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence will",
              "be reported."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Header>>",
                "TypeId": 301
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 306
              }
            ],
            "Index": 1,
            "Docs": [
              "Report authority equivocation/misbehavior. This method will verify",
              "the equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence will",
              "be reported.",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ]
          },
          {
            "Name": "plan_config_change",
            "TypeFields": [
              {
                "Name": "config",
                "TypeName": "NextConfigDescriptor",
                "TypeId": 307
              }
            ],
            "Index": 2,
            "Docs": [
              "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
              "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
              "Multiple calls to this method will replace any existing planned config change that had",
              "not been enacted yet."
            ]
          }
        ],
        "Path": [
          "pallet_babe",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "301": {
        "TypeFields": [
          {
            "Name": "offender",
            "TypeName": "Id",
            "TypeId": 304
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 305
          },
          {
            "Name": "first_header",
            "TypeName": "Header",
            "TypeId": 302
          },
          {
            "Name": "second_header",
            "TypeName": "Header",
            "TypeId": 302
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "Header",
            "TypeId": 302
          },
          {
            "Name": "Id",
            "TypeId": 304
          }
        ],
        "TypeDef": "Composite"
      },
      "302": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "Hash::Output",
            "TypeId": 12
          },
          {
            "Name": "number",
            "TypeName": "Number",
            "TypeId": 123
          },
          {
            "Name": "state_root",
            "TypeName": "Hash::Output",
            "TypeId": 12
          },
          {
            "Name": "extrinsics_root",
            "TypeName": "Hash::Output",
            "TypeId": 12
          },
          {
            "Name": "digest",
            "TypeName": "Digest",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "header",
          "Header"
        ],
        "TypeParams": [
          {
            "Name": "Number",
            "TypeId": 4
          },
          {
            "Name": "Hash",
            "TypeId": 303
          }
        ],
        "TypeDef": "Composite"
      },
      "303": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "304": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 59
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "305": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "306": {
        "TypeFields": [
          {
            "Name": "session",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "trie_nodes",
            "TypeName": "Vec<Vec<u8>>",
            "TypeId": 298
          },
          {
            "Name": "validator_count",
            "TypeName": "ValidatorCount",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_session",
          "MembershipProof"
        ],
        "TypeDef": "Composite"
      },
      "307": {
        "Variants": [
          {
            "Name": "V1",
            "TypeFields": [
              {
                "Name": "c",
                "TypeName": "(u64, u64)",
                "TypeId": 308
              },
              {
                "Name": "allowed_slots",
                "TypeName": "AllowedSlots",
                "TypeId": 309
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "NextConfigDescriptor"
        ],
        "TypeDef": "Variant"
      },
      "308": {
        "TypeIds": [
          11,
          11
        ],
        "TypeDef": "Tuple"
      },
      "309": {
        "Variants": [
          {
            "Name": "PrimarySlots",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PrimaryAndSecondaryPlainSlots",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "PrimaryAndSecondaryVRFSlots",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "AllowedSlots"
        ],
        "TypeDef": "Variant"
      },
      "310": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 63
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor."
            ]
          },
          {
            "Name": "set_balance_deprecated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 63
              },
              {
                "Name": "old_reserved",
                "TypeName": "T::Balance",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the regular balance of a given account; it also takes a reserved balance but this",
              "must be the same as the account's current reserved balance.",
              "",
              "The dispatch origin for this call is `root`.",
              "",
              "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
              "may be specified."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 63
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
              "kill the origin account.",
              "",
              "99% of the time you want [`transfer_allow_death`] instead.",
              "",
              "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80
              }
            ],
            "Index": 6,
            "Docs": [
              "Upgrade a specified account.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `who`: The account to be upgraded.",
              "",
              "This will waive the transaction fee if at least all but 10% of the accounts needed to",
              "be upgraded. (We let some not have to be upgraded just in order to allow for the",
              "possibililty of churn)."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 63
              }
            ],
            "Index": 7,
            "Docs": [
              "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
              "",
              "WARNING: DEPRECATED! Will be released in approximately 3 months."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 63
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the regular balance of a given account.",
              "",
              "The dispatch origin for this call is `root`."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "311": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 312
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 126
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 56
          }
        ],
        "TypeDef": "Variant"
      },
      "312": {
        "TypeId": 56,
        "TypeDef": "Compact"
      },
      "313": {
        "Variants": [
          {
            "Name": "submit_unsigned",
            "TypeFields": [
              {
                "Name": "raw_solution",
                "TypeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                "TypeId": 314
              },
              {
                "Name": "witness",
                "TypeName": "SolutionOrSnapshotSize",
                "TypeId": 366
              }
            ],
            "Index": 0,
            "Docs": [
              "Submit a solution for the unsigned phase.",
              "",
              "The dispatch origin fo this call must be __none__.",
              "",
              "This submission is checked on the fly. Moreover, this unsigned solution is only",
              "validated when submitted to the pool from the **local** node. Effectively, this means",
              "that only active validators can submit this transaction when authoring a block (similar",
              "to an inherent).",
              "",
              "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
              "panic if the solution submitted by the validator is invalid in any way, effectively",
              "putting their authoring reward at risk.",
              "",
              "No deposit or reward is associated with this submission."
            ]
          },
          {
            "Name": "set_minimum_untrusted_score",
            "TypeFields": [
              {
                "Name": "maybe_next_score",
                "TypeName": "Option<ElectionScore>",
                "TypeId": 367
              }
            ],
            "Index": 1,
            "Docs": [
              "Set a new value for `MinimumUntrustedScore`.",
              "",
              "Dispatch origin must be aligned with `T::ForceOrigin`.",
              "",
              "This check can be turned off by setting the value to `None`."
            ]
          },
          {
            "Name": "set_emergency_election_result",
            "TypeFields": [
              {
                "Name": "supports",
                "TypeName": "Supports<T::AccountId>",
                "TypeId": 368
              }
            ],
            "Index": 2,
            "Docs": [
              "Set a solution in the queue, to be handed out to the client of this pallet in the next",
              "call to `ElectionProvider::elect`.",
              "",
              "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
              "",
              "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
              "feasibility check itself can in principle cause the election process to fail (due to",
              "memory/weight constrains)."
            ]
          },
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "raw_solution",
                "TypeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                "TypeId": 314
              }
            ],
            "Index": 3,
            "Docs": [
              "Submit a solution for the signed phase.",
              "",
              "The dispatch origin fo this call must be __signed__.",
              "",
              "The solution is potentially queued, based on the claimed score and processed at the end",
              "of the signed phase.",
              "",
              "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
              "might be rewarded, slashed, or get all or a part of the deposit back."
            ]
          },
          {
            "Name": "governance_fallback",
            "TypeFields": [
              {
                "Name": "maybe_max_voters",
                "TypeName": "Option<u32>",
                "TypeId": 74
              },
              {
                "Name": "maybe_max_targets",
                "TypeName": "Option<u32>",
                "TypeId": 74
              }
            ],
            "Index": 4,
            "Docs": [
              "Trigger the governance fallback.",
              "",
              "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
              "calling [`Call::set_emergency_election_result`]."
            ]
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "314": {
        "TypeFields": [
          {
            "Name": "solution",
            "TypeName": "S",
            "TypeId": 315
          },
          {
            "Name": "score",
            "TypeName": "ElectionScore",
            "TypeId": 38
          },
          {
            "Name": "round",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "RawSolution"
        ],
        "TypeParams": [
          {
            "Name": "S",
            "TypeId": 315
          }
        ],
        "TypeDef": "Composite"
      },
      "315": {
        "TypeFields": [
          {
            "Name": "votes1",
            "TypeId": 316
          },
          {
            "Name": "votes2",
            "TypeId": 319
          },
          {
            "Name": "votes3",
            "TypeId": 324
          },
          {
            "Name": "votes4",
            "TypeId": 327
          },
          {
            "Name": "votes5",
            "TypeId": 330
          },
          {
            "Name": "votes6",
            "TypeId": 333
          },
          {
            "Name": "votes7",
            "TypeId": 336
          },
          {
            "Name": "votes8",
            "TypeId": 339
          },
          {
            "Name": "votes9",
            "TypeId": 342
          },
          {
            "Name": "votes10",
            "TypeId": 345
          },
          {
            "Name": "votes11",
            "TypeId": 348
          },
          {
            "Name": "votes12",
            "TypeId": 351
          },
          {
            "Name": "votes13",
            "TypeId": 354
          },
          {
            "Name": "votes14",
            "TypeId": 357
          },
          {
            "Name": "votes15",
            "TypeId": 360
          },
          {
            "Name": "votes16",
            "TypeId": 363
          }
        ],
        "Path": [
          "enjin_runtime",
          "NposSolution16"
        ],
        "TypeDef": "Composite"
      },
      "316": {
        "TypeId": 317,
        "TypeDef": "Sequence"
      },
      "317": {
        "TypeIds": [
          123,
          318
        ],
        "TypeDef": "Tuple"
      },
      "318": {
        "TypeId": 292,
        "TypeDef": "Compact"
      },
      "319": {
        "TypeId": 320,
        "TypeDef": "Sequence"
      },
      "320": {
        "TypeIds": [
          123,
          321,
          318
        ],
        "TypeDef": "Tuple"
      },
      "321": {
        "TypeIds": [
          318,
          322
        ],
        "TypeDef": "Tuple"
      },
      "322": {
        "TypeId": 323,
        "TypeDef": "Compact"
      },
      "323": {
        "TypeFields": [
          {
            "TypeName": "u16",
            "TypeId": 292
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "PerU16"
        ],
        "TypeDef": "Composite"
      },
      "324": {
        "TypeId": 325,
        "TypeDef": "Sequence"
      },
      "325": {
        "TypeIds": [
          123,
          326,
          318
        ],
        "TypeDef": "Tuple"
      },
      "326": {
        "Length": 2,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "327": {
        "TypeId": 328,
        "TypeDef": "Sequence"
      },
      "328": {
        "TypeIds": [
          123,
          329,
          318
        ],
        "TypeDef": "Tuple"
      },
      "329": {
        "Length": 3,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "330": {
        "TypeId": 331,
        "TypeDef": "Sequence"
      },
      "331": {
        "TypeIds": [
          123,
          332,
          318
        ],
        "TypeDef": "Tuple"
      },
      "332": {
        "Length": 4,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "333": {
        "TypeId": 334,
        "TypeDef": "Sequence"
      },
      "334": {
        "TypeIds": [
          123,
          335,
          318
        ],
        "TypeDef": "Tuple"
      },
      "335": {
        "Length": 5,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "336": {
        "TypeId": 337,
        "TypeDef": "Sequence"
      },
      "337": {
        "TypeIds": [
          123,
          338,
          318
        ],
        "TypeDef": "Tuple"
      },
      "338": {
        "Length": 6,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "339": {
        "TypeId": 340,
        "TypeDef": "Sequence"
      },
      "340": {
        "TypeIds": [
          123,
          341,
          318
        ],
        "TypeDef": "Tuple"
      },
      "341": {
        "Length": 7,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "342": {
        "TypeId": 343,
        "TypeDef": "Sequence"
      },
      "343": {
        "TypeIds": [
          123,
          344,
          318
        ],
        "TypeDef": "Tuple"
      },
      "344": {
        "Length": 8,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "345": {
        "TypeId": 346,
        "TypeDef": "Sequence"
      },
      "346": {
        "TypeIds": [
          123,
          347,
          318
        ],
        "TypeDef": "Tuple"
      },
      "347": {
        "Length": 9,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "348": {
        "TypeId": 349,
        "TypeDef": "Sequence"
      },
      "349": {
        "TypeIds": [
          123,
          350,
          318
        ],
        "TypeDef": "Tuple"
      },
      "350": {
        "Length": 10,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "351": {
        "TypeId": 352,
        "TypeDef": "Sequence"
      },
      "352": {
        "TypeIds": [
          123,
          353,
          318
        ],
        "TypeDef": "Tuple"
      },
      "353": {
        "Length": 11,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "354": {
        "TypeId": 355,
        "TypeDef": "Sequence"
      },
      "355": {
        "TypeIds": [
          123,
          356,
          318
        ],
        "TypeDef": "Tuple"
      },
      "356": {
        "Length": 12,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "357": {
        "TypeId": 358,
        "TypeDef": "Sequence"
      },
      "358": {
        "TypeIds": [
          123,
          359,
          318
        ],
        "TypeDef": "Tuple"
      },
      "359": {
        "Length": 13,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "360": {
        "TypeId": 361,
        "TypeDef": "Sequence"
      },
      "361": {
        "TypeIds": [
          123,
          362,
          318
        ],
        "TypeDef": "Tuple"
      },
      "362": {
        "Length": 14,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "363": {
        "TypeId": 364,
        "TypeDef": "Sequence"
      },
      "364": {
        "TypeIds": [
          123,
          365,
          318
        ],
        "TypeDef": "Tuple"
      },
      "365": {
        "Length": 15,
        "TypeId": 321,
        "TypeDef": "Array"
      },
      "366": {
        "TypeFields": [
          {
            "Name": "voters",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "targets",
            "TypeName": "u32",
            "TypeId": 123
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "SolutionOrSnapshotSize"
        ],
        "TypeDef": "Composite"
      },
      "367": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 38
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 38
          }
        ],
        "TypeDef": "Variant"
      },
      "368": {
        "TypeId": 369,
        "TypeDef": "Sequence"
      },
      "369": {
        "TypeIds": [
          0,
          370
        ],
        "TypeDef": "Tuple"
      },
      "370": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          },
          {
            "Name": "voters",
            "TypeName": "Vec<(AccountId, ExtendedBalance)>",
            "TypeId": 371
          }
        ],
        "Path": [
          "sp_npos_elections",
          "Support"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "TypeId": 372,
        "TypeDef": "Sequence"
      },
      "372": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "373": {
        "Variants": [
          {
            "Name": "bond",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "payee",
                "TypeName": "RewardDestination<T::AccountId>",
                "TypeId": 374
              }
            ],
            "Index": 0,
            "Docs": [
              "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
              "be the account that controls it.",
              "",
              "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
              "",
              "The dispatch origin for this call must be _Signed_ by the stash account.",
              "",
              "Emits `Bonded`.",
              "## Complexity",
              "- Independent of the arguments. Moderate complexity.",
              "- O(1).",
              "- Three extra DB entries.",
              "",
              "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
              "unless the `origin` falls below _existential deposit_ and gets removed as dust."
            ]
          },
          {
            "Name": "bond_extra",
            "TypeFields": [
              {
                "Name": "max_additional",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
              "for staking.",
              "",
              "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
              "",
              "Use this if there are additional funds in your stash account that you wish to bond.",
              "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
              "any limitation on the amount that can be added.",
              "",
              "Emits `Bonded`.",
              "",
              "## Complexity",
              "- Independent of the arguments. Insignificant complexity.",
              "- O(1)."
            ]
          },
          {
            "Name": "unbond",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
              "period ends. If this leaves an amount actively bonded less than",
              "T::Currency::minimum_balance(), then it is increased to the full amount.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
              "the funds out of management ready for transfer.",
              "",
              "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
              "can co-exists at the same time. If there are no unlocking chunks slots available",
              "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
              "",
              "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
              "they should call `chill` first in order to free up their bonded funds.",
              "",
              "Emits `Unbonded`.",
              "",
              "See also [`Call::withdraw_unbonded`]."
            ]
          },
          {
            "Name": "withdraw_unbonded",
            "TypeFields": [
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove any unlocked chunks from the `unlocking` queue from our management.",
              "",
              "This essentially frees up that balance to be used by the stash account to do",
              "whatever it wants.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller.",
              "",
              "Emits `Withdrawn`.",
              "",
              "See also [`Call::unbond`].",
              "",
              "## Complexity",
              "O(S) where S is the number of slashing spans to remove",
              "NOTE: Weight annotation is the kill scenario, we refund otherwise."
            ]
          },
          {
            "Name": "validate",
            "TypeFields": [
              {
                "Name": "prefs",
                "TypeName": "ValidatorPrefs",
                "TypeId": 43
              }
            ],
            "Index": 4,
            "Docs": [
              "Declare the desire to validate for the origin controller.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
            ]
          },
          {
            "Name": "nominate",
            "TypeFields": [
              {
                "Name": "targets",
                "TypeName": "Vec<AccountIdLookupOf<T>>",
                "TypeId": 375
              }
            ],
            "Index": 5,
            "Docs": [
              "Declare the desire to nominate `targets` for the origin controller.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "## Complexity",
              "- The transaction's complexity is proportional to the size of `targets` (N)",
              "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
              "- Both the reads and writes follow a similar pattern."
            ]
          },
          {
            "Name": "chill",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Declare no desire to either validate or nominate.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "## Complexity",
              "- Independent of the arguments. Insignificant complexity.",
              "- Contains one read.",
              "- Writes are limited to the `origin` account key."
            ]
          },
          {
            "Name": "set_payee",
            "TypeFields": [
              {
                "Name": "payee",
                "TypeName": "RewardDestination<T::AccountId>",
                "TypeId": 374
              }
            ],
            "Index": 7,
            "Docs": [
              "(Re-)set the payment target for a controller.",
              "",
              "Effects will be felt instantly (as soon as this function is completed successfully).",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "## Complexity",
              "- O(1)",
              "- Independent of the arguments. Insignificant complexity.",
              "- Contains a limited number of reads.",
              "- Writes are limited to the `origin` account key.",
              "---------"
            ]
          },
          {
            "Name": "set_controller",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "(Re-)sets the controller of a stash to the stash itself. This function previously",
              "accepted a `controller` argument to set the controller to an account other than the",
              "stash itself. This functionality has now been removed, now only setting the controller",
              "to the stash, if it is not already.",
              "",
              "Effects will be felt instantly (as soon as this function is completed successfully).",
              "",
              "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
              "",
              "## Complexity",
              "O(1)",
              "- Independent of the arguments. Insignificant complexity.",
              "- Contains a limited number of reads.",
              "- Writes are limited to the `origin` account key."
            ]
          },
          {
            "Name": "set_validator_count",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 9,
            "Docs": [
              "Sets the ideal number of validators.",
              "",
              "The dispatch origin must be Root.",
              "",
              "## Complexity",
              "O(1)"
            ]
          },
          {
            "Name": "increase_validator_count",
            "TypeFields": [
              {
                "Name": "additional",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 10,
            "Docs": [
              "Increments the ideal number of validators upto maximum of",
              "`ElectionProviderBase::MaxWinners`.",
              "",
              "The dispatch origin must be Root.",
              "",
              "## Complexity",
              "Same as [`Self::set_validator_count`]."
            ]
          },
          {
            "Name": "scale_validator_count",
            "TypeFields": [
              {
                "Name": "factor",
                "TypeName": "Percent",
                "TypeId": 376
              }
            ],
            "Index": 11,
            "Docs": [
              "Scale up the ideal number of validators by a factor upto maximum of",
              "`ElectionProviderBase::MaxWinners`.",
              "",
              "The dispatch origin must be Root.",
              "",
              "## Complexity",
              "Same as [`Self::set_validator_count`]."
            ]
          },
          {
            "Name": "force_no_eras",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Force there to be no new eras indefinitely.",
              "",
              "The dispatch origin must be Root.",
              "",
              "# Warning",
              "",
              "The election process starts multiple blocks before the end of the era.",
              "Thus the election process may be ongoing when this is called. In this case the",
              "election will continue until the next era is triggered.",
              "",
              "## Complexity",
              "- No arguments.",
              "- Weight: O(1)"
            ]
          },
          {
            "Name": "force_new_era",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Force there to be a new era at the end of the next session. After this, it will be",
              "reset to normal (non-forced) behaviour.",
              "",
              "The dispatch origin must be Root.",
              "",
              "# Warning",
              "",
              "The election process starts multiple blocks before the end of the era.",
              "If this is called just before a new era is triggered, the election process may not",
              "have enough blocks to get a result.",
              "",
              "## Complexity",
              "- No arguments.",
              "- Weight: O(1)"
            ]
          },
          {
            "Name": "set_invulnerables",
            "TypeFields": [
              {
                "Name": "invulnerables",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80
              }
            ],
            "Index": 14,
            "Docs": [
              "Set the validators who cannot be slashed (if any).",
              "",
              "The dispatch origin must be Root."
            ]
          },
          {
            "Name": "force_unstake",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Force a current staker to become completely unstaked, immediately.",
              "",
              "The dispatch origin must be Root."
            ]
          },
          {
            "Name": "force_new_era_always",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Force there to be a new era at the end of sessions indefinitely.",
              "",
              "The dispatch origin must be Root.",
              "",
              "# Warning",
              "",
              "The election process starts multiple blocks before the end of the era.",
              "If this is called just before a new era is triggered, the election process may not",
              "have enough blocks to get a result."
            ]
          },
          {
            "Name": "cancel_deferred_slash",
            "TypeFields": [
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "slash_indices",
                "TypeName": "Vec<u32>",
                "TypeId": 377
              }
            ],
            "Index": 17,
            "Docs": [
              "Cancel enactment of a deferred slash.",
              "",
              "Can be called by the `T::AdminOrigin`.",
              "",
              "Parameters: era and indices of the slashes for that era to kill."
            ]
          },
          {
            "Name": "payout_stakers",
            "TypeFields": [
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 18,
            "Docs": [
              "Pay out all the stakers behind a single validator for a single era.",
              "",
              "- `validator_stash` is the stash account of the validator. Their nominators, up to",
              "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
              "- `era` may be any era between `[current_era - history_depth; current_era]`.",
              "",
              "The origin of this call must be _Signed_. Any account can call this function, even if",
              "it is not one of the stakers.",
              "",
              "## Complexity",
              "- At most O(MaxNominatorRewardedPerValidator)."
            ]
          },
          {
            "Name": "rebond",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 19,
            "Docs": [
              "Rebond a portion of the stash scheduled to be unlocked.",
              "",
              "The dispatch origin must be signed by the controller.",
              "",
              "## Complexity",
              "- Time complexity: O(L), where L is unlocking chunks",
              "- Bounded by `MaxUnlockingChunks`."
            ]
          },
          {
            "Name": "reap_stash",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "Remove all data structures concerning a staker/stash once it is at a state where it can",
              "be considered `dust` in the staking system. The requirements are:",
              "",
              "1. the `total_balance` of the stash is below existential deposit.",
              "2. or, the `ledger.total` of the stash is below existential deposit.",
              "",
              "The former can happen in cases like a slash; the latter when a fully unbonded account",
              "is still receiving staking rewards in `RewardDestination::Staked`.",
              "",
              "It can be called by anyone, as long as `stash` meets the above requirements.",
              "",
              "Refunds the transaction fees upon successful execution."
            ]
          },
          {
            "Name": "kick",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<AccountIdLookupOf<T>>",
                "TypeId": 375
              }
            ],
            "Index": 21,
            "Docs": [
              "Remove the given nominations from the calling validator.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "- `who`: A list of nominator stash accounts who are nominating this validator which",
              "  should no longer be nominating this validator.",
              "",
              "Note: Making this call only makes sense if you first set the validator preferences to",
              "block any further nominations."
            ]
          },
          {
            "Name": "set_staking_configs",
            "TypeFields": [
              {
                "Name": "min_nominator_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 378
              },
              {
                "Name": "min_validator_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 378
              },
              {
                "Name": "max_nominator_count",
                "TypeName": "ConfigOp<u32>",
                "TypeId": 379
              },
              {
                "Name": "max_validator_count",
                "TypeName": "ConfigOp<u32>",
                "TypeId": 379
              },
              {
                "Name": "chill_threshold",
                "TypeName": "ConfigOp<Percent>",
                "TypeId": 380
              },
              {
                "Name": "min_commission",
                "TypeName": "ConfigOp<Perbill>",
                "TypeId": 381
              }
            ],
            "Index": 22,
            "Docs": [
              "Update the various staking configurations .",
              "",
              "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
              "* `min_validator_bond`: The minimum active bond needed to be a validator.",
              "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
              "  set to `None`, no limit is enforced.",
              "* `max_validator_count`: The max number of users who can be a validator at once. When",
              "  set to `None`, no limit is enforced.",
              "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
              "  should be filled in order for the `chill_other` transaction to work.",
              "* `min_commission`: The minimum amount of commission that each validators must maintain.",
              "  This is checked only upon calling `validate`. Existing validators are not affected.",
              "",
              "RuntimeOrigin must be Root to call this function.",
              "",
              "NOTE: Existing nominators and validators will not be affected by this update.",
              "to kick people under the new limits, `chill_other` should be called."
            ]
          },
          {
            "Name": "chill_other",
            "TypeFields": [
              {
                "Name": "controller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "Declare a `controller` to stop participating as either a validator or nominator.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
              "",
              "If the caller is the same as the controller being targeted, then no further checks are",
              "enforced, and this function behaves just like `chill`.",
              "",
              "If the caller is different than the controller being targeted, the following conditions",
              "must be met:",
              "",
              "* `controller` must belong to a nominator who has become non-decodable,",
              "",
              "Or:",
              "",
              "* A `ChillThreshold` must be set and checked which defines how close to the max",
              "  nominators or validators we must reach before users can start chilling one-another.",
              "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
              "  how close we are to the threshold.",
              "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
              "  if this is a person that should be chilled because they have not met the threshold",
              "  bond required.",
              "",
              "This can be helpful if bond requirements are updated, and we need to remove old users",
              "who do not satisfy these requirements."
            ]
          },
          {
            "Name": "force_apply_min_commission",
            "TypeFields": [
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 24,
            "Docs": [
              "Force a validator to have at least the minimum commission. This will not affect a",
              "validator who already has a commission greater than or equal to the minimum. Any account",
              "can call this."
            ]
          },
          {
            "Name": "set_min_commission",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Perbill",
                "TypeId": 42
              }
            ],
            "Index": 25,
            "Docs": [
              "Sets the minimum amount of commission that each validators must maintain.",
              "",
              "This call has lower privilege requirements than `set_staking_config` and can be called",
              "by the `T::AdminOrigin`. Root can always call this."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "374": {
        "Variants": [
          {
            "Name": "Staked",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Stash",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Controller",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Account",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_staking",
          "RewardDestination"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "375": {
        "TypeId": 311,
        "TypeDef": "Sequence"
      },
      "376": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "378": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "379": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "380": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 376
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 376
          }
        ],
        "TypeDef": "Variant"
      },
      "381": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 42
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 42
          }
        ],
        "TypeDef": "Variant"
      },
      "382": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 383
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "383": {
        "TypeFields": [
          {
            "Name": "grandpa",
            "TypeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 50
          },
          {
            "Name": "babe",
            "TypeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 304
          },
          {
            "Name": "im_online",
            "TypeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 58
          },
          {
            "Name": "para_validator",
            "TypeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 384
          },
          {
            "Name": "para_assignment",
            "TypeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 385
          },
          {
            "Name": "authority_discovery",
            "TypeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 386
          }
        ],
        "Path": [
          "enjin_runtime",
          "opaque",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "384": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 59
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "validator_app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "385": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 59
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "assignment_app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "386": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 59
          }
        ],
        "Path": [
          "sp_authority_discovery",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "387": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                "TypeId": 388
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 306
              }
            ],
            "Index": 0,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                "TypeId": 388
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 306
              }
            ],
            "Index": 1,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported.",
              "",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ]
          },
          {
            "Name": "note_stalled",
            "TypeFields": [
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "best_finalized_block_number",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Note that the current authority set of the GRANDPA finality gadget has stalled.",
              "",
              "This will trigger a forced authority set change at the beginning of the next session, to",
              "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
              "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
              "The block production rate (which may be slowed down because of finality lagging) should",
              "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
              "authority will start voting on top of `best_finalized_block_number` for new finalized",
              "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
              "block of all validators of the new authority set.",
              "",
              "Only callable by root."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "388": {
        "TypeFields": [
          {
            "Name": "set_id",
            "TypeName": "SetId",
            "TypeId": 11
          },
          {
            "Name": "equivocation",
            "TypeName": "Equivocation<H, N>",
            "TypeId": 389
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "389": {
        "Variants": [
          {
            "Name": "Prevote",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                "TypeId": 390
              }
            ],
            "Index": 0
          },
          {
            "Name": "Precommit",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                "TypeId": 395
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "390": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 50
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 394
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 394
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 50
          },
          {
            "Name": "V",
            "TypeId": 391
          },
          {
            "Name": "S",
            "TypeId": 392
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Prevote"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "392": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Signature",
            "TypeId": 393
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "393": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 101
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "394": {
        "TypeIds": [
          391,
          392
        ],
        "TypeDef": "Tuple"
      },
      "395": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 50
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 397
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 397
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 50
          },
          {
            "Name": "V",
            "TypeId": 396
          },
          {
            "Name": "S",
            "TypeId": 392
          }
        ],
        "TypeDef": "Composite"
      },
      "396": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Precommit"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "397": {
        "TypeIds": [
          396,
          392
        ],
        "TypeDef": "Tuple"
      },
      "398": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 63
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 0,
            "Docs": [
              "Put forward a suggestion for spending. A deposit proportional to the value",
              "is reserved and slashed if the proposal is rejected. It is returned once the",
              "proposal is awarded.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 123
              }
            ],
            "Index": 1,
            "Docs": [
              "Reject a proposed spend. The original deposit will be slashed.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 123
              }
            ],
            "Index": 2,
            "Docs": [
              "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::ApproveOrigin`.",
              "",
              "## Complexity",
              " - O(1)."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 63
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 123
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "The original deposit will no longer be returned.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "- `proposal_id`: The index of a proposal",
              "",
              "## Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "Errors:",
              "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
              "i.e., the proposal has not been approved. This could also mean the proposal does not",
              "exist altogether, thus there is no way it would have been approved in the first place."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "399": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 0,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 2,
            "Docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 3,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "400": {
        "Variants": [
          {
            "Name": "heartbeat",
            "TypeFields": [
              {
                "Name": "heartbeat",
                "TypeName": "Heartbeat<T::BlockNumber>",
                "TypeId": 401
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 406
              }
            ],
            "Index": 0,
            "Docs": [
              "## Complexity:",
              "- `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of",
              "  `heartbeat.network_state.external_address`",
              "  - `O(K)`: decoding of length `K`",
              "  - `O(E)`: decoding/encoding of length `E`"
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "401": {
        "TypeFields": [
          {
            "Name": "block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "network_state",
            "TypeName": "OpaqueNetworkState",
            "TypeId": 402
          },
          {
            "Name": "session_index",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "authority_index",
            "TypeName": "AuthIndex",
            "TypeId": 4
          },
          {
            "Name": "validators_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_im_online",
          "Heartbeat"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "402": {
        "TypeFields": [
          {
            "Name": "peer_id",
            "TypeName": "OpaquePeerId",
            "TypeId": 403
          },
          {
            "Name": "external_addresses",
            "TypeName": "Vec<OpaqueMultiaddr>",
            "TypeId": 404
          }
        ],
        "Path": [
          "sp_core",
          "offchain",
          "OpaqueNetworkState"
        ],
        "TypeDef": "Composite"
      },
      "403": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_core",
          "OpaquePeerId"
        ],
        "TypeDef": "Composite"
      },
      "404": {
        "TypeId": 405,
        "TypeDef": "Sequence"
      },
      "405": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_core",
          "offchain",
          "OpaqueMultiaddr"
        ],
        "TypeDef": "Composite"
      },
      "406": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Signature",
            "TypeId": 100
          }
        ],
        "Path": [
          "pallet_im_online",
          "sr25519",
          "app_sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "407": {
        "Variants": [
          {
            "Name": "rebag",
            "TypeFields": [
              {
                "Name": "dislocated",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 0,
            "Docs": [
              "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
              "changed its score that it should properly fall into a different bag than its current",
              "one.",
              "",
              "Anyone can call this function about any potentially dislocated account.",
              "",
              "Will always update the stored score of `dislocated` to the correct score, based on",
              "`ScoreProvider`.",
              "",
              "If `dislocated` does not exists, it returns an error."
            ]
          },
          {
            "Name": "put_in_front_of",
            "TypeFields": [
              {
                "Name": "lighter",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 1,
            "Docs": [
              "Move the caller's Id directly in front of `lighter`.",
              "",
              "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
              "the account going in front of `lighter`.",
              "",
              "Only works if",
              "- both nodes are within the same bag,",
              "- and `origin` has a greater `Score` than `lighter`."
            ]
          }
        ],
        "Path": [
          "pallet_bags_list",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "408": {
        "Variants": [
          {
            "Name": "bond",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BondValueOf<T>",
                "TypeId": 409
              }
            ],
            "Index": 0,
            "Docs": [
              "Stake funds with a pool. The amount to bond is transferred from the member to the",
              "pools account and immediately increases the pools bond. The sENJ token will be minted",
              "and transferred to `origin`.",
              "",
              "# Parameters",
              "- `origin`: the caller",
              "- `pool_id`: the pool id to bond",
              "- `amount`: the amount of tokens deposited into the pool",
              "",
              "# Note",
              "",
              "* An account can only be a member of a single pool.",
              "* An account cannot join the same pool multiple times.",
              "* This call will *not* dust the member account, so the member must have at least",
              "  `existential deposit + amount` in their account.",
              "* Only a pool with [`PoolState::Open`] can be joined"
            ]
          },
          {
            "Name": "unbond",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "member_account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "unbonding_points",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 3,
            "Docs": [
              "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool by burning",
              "sENJ.",
              "",
              "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
              "account).",
              "",
              "# Conditions for a permissionless dispatch.",
              "",
              "* The pool is blocked and the caller is holding the pool's token. This is refereed to as",
              "  a kick.",
              "* The pool is destroying.",
              "* The pool is destroying and no other members are in the pool.",
              "",
              "## Conditions for permissioned dispatch (i.e. the caller is also the",
              "`member_account`):",
              "",
              "* The caller is not the last member.",
              "* The caller is the last member and the pool is destroying.",
              "",
              "# Note",
              "",
              "If there are too many unlocking chunks to unbond with the pool account,",
              "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
              "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
              "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
              "are available). However, it may not be possible to release the current unlocking chunks,",
              "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
              "staking system."
            ]
          },
          {
            "Name": "pool_withdraw_unbonded",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
              "",
              "This is useful if their are too many unlocking chunks to call `unbond`, and some",
              "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
              "would probably see an error like `NoMoreChunks` emitted from the staking system when",
              "they attempt to unbond."
            ]
          },
          {
            "Name": "withdraw_unbonded",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "member_account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
              "error is returned.",
              "",
              "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
              "account).",
              "",
              "# Conditions for a permissionless dispatch",
              "",
              "* The pool is in destroy mode.",
              "* The target is the only member in the sub pools.",
              "* The pool is blocked and the caller is either the admin or state-toggler.",
              "",
              "# Conditions for permissioned dispatch",
              "",
              "* The caller is the target and they are not the last member.",
              "",
              "# Note",
              "",
              "If the target is the last member, the pool will be destroyed."
            ]
          },
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "capacity",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "duration",
                "TypeName": "EraIndex",
                "TypeId": 123
              },
              {
                "Name": "name",
                "TypeName": "PoolNameOf<T>",
                "TypeId": 73
              }
            ],
            "Index": 6,
            "Docs": [
              "Create a new nomination pool.",
              "",
              "# Arguments",
              "",
              "* `token_id` - Token that that will control the pool. This token must be from the",
              "  [`Config::PoolCollectionId`] collection and it must be held by the caller.",
              "* `deposit` - The amount of funds to delegate to the pool. This also acts as a deposit",
              "  because the pool's creator cannot fully unbond funds until the pool is destroyed.",
              "* `capacity` - The maximum total balance allowed in the pool. This is measured in sENJ.",
              "  It must be below the pool's capacity. See `Capacity` section in crate level docs.",
              "* `duration` - The duration in blocks of the pool's bonus cycle",
              "",
              "# Note",
              "",
              "In addition to `deposit`, the caller will transfer the existential deposit for the",
              "pool's accounts; so the caller needs at have at least `deposit + existential_deposit *",
              "2` transferable."
            ]
          },
          {
            "Name": "nominate",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "validators",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80
              }
            ],
            "Index": 8,
            "Docs": [
              "Nominate on behalf of the pool.",
              "",
              "The dispatch origin of this call must be signed by the holder of the pool token.",
              "",
              "This directly forward the call to the staking pallet, on behalf of the pool bonded",
              "account."
            ]
          },
          {
            "Name": "set_configs",
            "TypeFields": [
              {
                "Name": "min_join_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 410
              },
              {
                "Name": "min_create_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 410
              },
              {
                "Name": "global_max_commission",
                "TypeName": "ConfigOp<Perbill>",
                "TypeId": 411
              },
              {
                "Name": "required_payout_count",
                "TypeName": "ConfigOp<Perbill>",
                "TypeId": 411
              }
            ],
            "Index": 11,
            "Docs": [
              "Update configurations for the nomination pools. Callable only by",
              "[`Config::ForceOrigin`].",
              "",
              "# Arguments",
              "",
              "* `min_join_bond` - Set [`MinJoinBond`].",
              "* `min_create_bond` - Set [`MinCreateBond`].",
              "* `global_max_commission` - Set [`GlobalMaxCommission`]."
            ]
          },
          {
            "Name": "chill",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "Chill on behalf of the pool.",
              "",
              "The dispatch origin of this call must be signed by the pool token holder, same as",
              "[`Pallet::nominate`].",
              "",
              "This directly forward the call to the staking pallet, on behalf of the pool bonded",
              "account."
            ]
          },
          {
            "Name": "destroy",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Destroy the pool.",
              "",
              "The dispatch origin of this call must be signed by the account holding the pool token",
              "of the given pool_id."
            ]
          },
          {
            "Name": "payout_rewards",
            "TypeFields": [
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 18,
            "Docs": [
              "Pays rewards to `validator_stash` and also distributes rewards to the reward accounts of",
              "the pools nominating it. The appropriate bonus is also calculated and stored in the",
              "bonus account.",
              "",
              "This should be called once per era per validator. It is a permissionless call. It also",
              "processes rewards for the previous era if [`Self::process_payouts`] was not called.",
              "",
              "## Bonus Calculation",
              "",
              "1. Minimum duration and max duration are found for all pools nominating",
              "   `validator_stash`",
              "2. [`Config::BonusPercentage`] is set aside from rewards for bonus",
              "3. Normalized weight is calculated and then scaled according to the total bonus. See",
              "   `functions::calculate_real_weight`.",
              "4. The scaled weight is offset according to [`Config::BaseBonusRewardPercentage`] so",
              "   that all pools at least get the minimum weight",
              "5. Final calculation is done in [`traits::Bonus::calculate_bonus`] and then transferred",
              "   to the bonus account"
            ]
          },
          {
            "Name": "process_payouts",
            "TypeFields": [
              {
                "Name": "pool_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 25,
            "Docs": [
              "Processes the rewards for all pools that were distributed in [`Self::payout_rewards`].",
              "It will only succeed if it is called on the same era that payouts were made. It uses the",
              "[`EraPayoutInfo`] storage to verify this. This extrinsic is permissionless.",
              "",
              "The following is done for each pool:",
              "1. If the pool has reached the end of its cycle, it cycles the pool.",
              "2. Sends bonus for the current era from the bonus account to the rewards account.",
              "3. Sends reward commission to the depositor.",
              "4. It bonds the pool's reward balance.",
              "",
              "It is not required to call this extrinsic. If it is not called, the rewards will be",
              "processed when `payout_rewards` is called in the next era."
            ]
          },
          {
            "Name": "mutate",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "mutation",
                "TypeName": "PoolMutationOf<T>",
                "TypeId": 72
              }
            ],
            "Index": 19,
            "Docs": [
              "Mutate the nomination pool data.",
              "",
              "The dispatch origin of this call must be signed by the account holding the pool token",
              "of the given pool_id."
            ]
          },
          {
            "Name": "unbond_deposit",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "Unbonds the deposit",
              "",
              "This call is permissionless but certain conditions must be met before the deposit can",
              "be unbonded:",
              "",
              "- Pool must be in [`PoolState::Destroying`] mode",
              "- Deposit points must be the only points in the pool",
              "- [`UnbondingMembers`] must be empty",
              "",
              "This will unbond the deposit from the pool."
            ]
          },
          {
            "Name": "withdraw_deposit",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 21,
            "Docs": [
              "Withdraws the deposit",
              "",
              "This call is permissionless and should be called after the deposit has been unbonded."
            ]
          },
          {
            "Name": "withdraw_free_balance",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "destination",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 26,
            "Docs": [
              "Transfers `amount` from the pool's free balance to `destination`. Only callable by",
              "[`Config::ForceOrigin`]."
            ]
          },
          {
            "Name": "set_staking_info",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "StakingInfo",
                "TypeId": 412
              }
            ],
            "Index": 22,
            "Docs": [
              "Set the annual inflation rate and collator payout cut",
              "",
              "Callable only by [`Config::ForceOrigin`]"
            ]
          },
          {
            "Name": "calculate_early_bird_bonus",
            "TypeFields": [
              {
                "Name": "pool_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 23,
            "Docs": [
              "Calculate and prepare early bird bonus if it is ready to be queued.",
              "",
              "Callable by any signed origin after [`Config::EarlyBirdBonusDistributionBlock`].",
              "",
              "## Details",
              "",
              "1. Calculates the normalized weights for each pool by calling",
              "   [`Pallet::early_bird_normalized_weight`]. Factors for the weight are each pool's",
              "   total points and the creation date.",
              "2. Each pool's weight is multiplied by the total reward to determine each pool's reward.",
              "3. The rewards are stored in [`PoolBonusInfos`] and can be distributed by calling",
              "   [`Self::pay_early_bird_bonus`]."
            ]
          },
          {
            "Name": "unlock_early_bird_bonus",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Unlock early bird bonus to pools. This extrinsic will ensure the",
              "EarlyBirdBonusDistributionBlock has passed before the bonus is unlocked.",
              "Callable by any signed origin after the bonus has been queued."
            ]
          },
          {
            "Name": "capture_early_bird_bonus_shares",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "account_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 27,
            "Docs": [
              "Stores the share of sENJ balance for each account staked in `pool_id`."
            ]
          },
          {
            "Name": "pay_early_bird_bonus",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "account_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 24,
            "Docs": [
              "Pay early bird bonus to pools. The `account_count` parameter is the max number",
              "of pool user accounts to be paid in this call.",
              "",
              "Callable by any signed origin after the bonus has been unlocked"
            ]
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "409": {
        "Variants": [
          {
            "Name": "Amount",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "Fill",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "BondValue"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "410": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "411": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 42
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 42
          }
        ],
        "TypeDef": "Variant"
      },
      "412": {
        "TypeFields": [
          {
            "Name": "annual_inflation_rate",
            "TypeName": "Perbill",
            "TypeId": 42
          },
          {
            "Name": "collator_payout_cut",
            "TypeName": "Perbill",
            "TypeId": 42
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "StakingInfo"
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "Variants": [
          {
            "Name": "create_offer",
            "TypeFields": [
              {
                "Name": "offer",
                "TypeName": "CreateOfferOf<T>",
                "TypeId": 414
              }
            ],
            "Index": 0,
            "Docs": [
              "Place a new offer with the given parameters",
              "",
              "# Errors",
              "- [`Error::CallerNotOfferCreator`] if the caller account does not match offer account.",
              "- [`Error::ZeroOffer`] if offer amount is zero.",
              "- [`Error::ZeroRate`] if rate amount is zero.",
              "- [`Error::Overflow`] if arithmetic overflow occurs"
            ]
          },
          {
            "Name": "cancel_offer",
            "TypeFields": [
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an existing offer with `offer_id`",
              "",
              "# Errors",
              "- [`Error::CallerNotOfferCreator`] if the caller account does not match offer account.",
              "- [`Error::OfferNotFound`] if the `offer_id` does not exist"
            ]
          },
          {
            "Name": "configure_liquidity_account",
            "TypeFields": [
              {
                "Name": "config",
                "TypeName": "LiquidityAccountConfigOf<T>",
                "TypeId": 90
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the liquidity config for the caller account"
            ]
          },
          {
            "Name": "withdraw_liquidity",
            "TypeFields": [
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 3,
            "Docs": [
              "Withdraw liquidity from a current active offer",
              "",
              "# Errors",
              "- [`Error::CallerNotOfferCreator`] if the caller account does not match offer account.",
              "- [`Error::OfferNotFound`] if the offerId does not exist"
            ]
          },
          {
            "Name": "add_liquidity",
            "TypeFields": [
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "Add liquidity to a current active offer",
              "",
              "# Errors",
              "- [`Error::CallerNotOfferCreator`] if the caller account does not match bidding account.",
              "- [`Error::OfferNotFound`] if the offerId does not exist"
            ]
          },
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "offer_id",
                "TypeName": "T::OfferId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "TokenIdOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 5,
            "Docs": [
              "Buy from a current active offer, returning the native currency by exchanging the staked",
              "tokens",
              "",
              "# Errors",
              "- [`Error::CallerNotOfferCreator`] if the caller account does not match bidding account.",
              "- [`Error::TokenRestriction`] if the tokenId is restricted by the LP",
              "- [`Error::NotEnoughLiquidity`] if the offer cannot cover the amount requested",
              "- [`Error::TransferParamCreationFailed`] if the multitokens transfer failed"
            ]
          }
        ],
        "Path": [
          "pallet_stake_exchange",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The pallet's extrinsics."
        ]
      },
      "414": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "rate",
            "TypeName": "Rate",
            "TypeId": 44
          },
          {
            "Name": "min_average_reward_rate",
            "TypeName": "FixedU128",
            "TypeId": 84
          },
          {
            "Name": "token_filter",
            "TypeName": "TokenFilter<TokenId, MaxFilteredTokenCount>",
            "TypeId": 86
          }
        ],
        "Path": [
          "pallet_stake_exchange",
          "types",
          "CreateOffer"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "MaxFilteredTokenCount",
            "TypeId": 83
          }
        ],
        "TypeDef": "Composite"
      },
      "415": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 416
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 292
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 416
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 417
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 416
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "416": {
        "TypeId": 294,
        "TypeDef": "Sequence"
      },
      "417": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 418
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainsOrigin",
            "TypeFields": [
              {
                "TypeName": "parachains_origin::Origin",
                "TypeId": 419
              }
            ],
            "Index": 50
          },
          {
            "Name": "XcmPallet",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 420
              }
            ],
            "Index": 99
          },
          {
            "Name": "Origins",
            "TypeFields": [
              {
                "TypeName": "pallet_custom_origins::Origin",
                "TypeId": 421
              }
            ],
            "Index": 104
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                "TypeId": 422
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "enjin_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "418": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "419": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "origin",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "420": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "421": {
        "Variants": [
          {
            "Name": "StakingAdmin",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "TreasuryAdmin",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "FellowshipAdmin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "GeneralAdmin",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "AuctionAdmin",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LeaseAdmin",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "MultiTokensAdmin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "FuelTanksAdmin",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "ClaimsAdmin",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "ExtrinsicPauseAdmin",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "PreimageAdmin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "WhitelistAdmin",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ParachainsAdmin",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "ReferendumCanceller",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "ReferendumKiller",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "SmallTipper",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "BigTipper",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "SmallSpender",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MediumSpender",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "BigSpender",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "WhitelistedCaller",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "FellowshipInitiates",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "Fellows",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "FellowshipExperts",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "FellowshipMasters",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "Fellowship1Dan",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "Fellowship2Dan",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "Fellowship3Dan",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "Fellowship4Dan",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "Fellowship5Dan",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "Fellowship6Dan",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "Fellowship7Dan",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "Fellowship8Dan",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Fellowship9Dan",
            "TypeFields": null,
            "Index": 33
          }
        ],
        "Path": [
          "enjin_runtime_common",
          "governance",
          "origins",
          "pallet_custom_origins",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "422": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "423": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 292
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 424
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 292
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 424
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 292
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 80
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 93
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "424": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 93
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 93
          }
        ],
        "TypeDef": "Variant"
      },
      "425": {
        "Variants": [
          {
            "Name": "set_validation_upgrade_cooldown",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the validation upgrade cooldown."
            ]
          },
          {
            "Name": "set_validation_upgrade_delay",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the validation upgrade delay."
            ]
          },
          {
            "Name": "set_code_retention_period",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the acceptance period for an included candidate."
            ]
          },
          {
            "Name": "set_max_code_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the max validation code size for incoming upgrades."
            ]
          },
          {
            "Name": "set_max_pov_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the max POV block size for incoming upgrades."
            ]
          },
          {
            "Name": "set_max_head_data_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the max head data size for paras."
            ]
          },
          {
            "Name": "set_parathread_cores",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the number of parathread execution cores."
            ]
          },
          {
            "Name": "set_parathread_retries",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Set the number of retries for a particular parathread."
            ]
          },
          {
            "Name": "set_group_rotation_frequency",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the parachain validator-group rotation frequency"
            ]
          },
          {
            "Name": "set_chain_availability_period",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Set the availability period for parachains."
            ]
          },
          {
            "Name": "set_thread_availability_period",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Set the availability period for parathreads."
            ]
          },
          {
            "Name": "set_scheduling_lookahead",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Set the scheduling lookahead, in expected number of blocks at peak throughput."
            ]
          },
          {
            "Name": "set_max_validators_per_core",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Option<u32>",
                "TypeId": 74
              }
            ],
            "Index": 12,
            "Docs": [
              "Set the maximum number of validators to assign to any core."
            ]
          },
          {
            "Name": "set_max_validators",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Option<u32>",
                "TypeId": 74
              }
            ],
            "Index": 13,
            "Docs": [
              "Set the maximum number of validators to use in parachain consensus."
            ]
          },
          {
            "Name": "set_dispute_period",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Set the dispute period, in number of sessions to keep for disputes."
            ]
          },
          {
            "Name": "set_dispute_post_conclusion_acceptance_period",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Set the dispute post conclusion acceptance period."
            ]
          },
          {
            "Name": "set_no_show_slots",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 18,
            "Docs": [
              "Set the no show slots, in number of number of consensus slots.",
              "Must be at least 1."
            ]
          },
          {
            "Name": "set_n_delay_tranches",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 19,
            "Docs": [
              "Set the total number of delay tranches."
            ]
          },
          {
            "Name": "set_zeroth_delay_tranche_width",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "Set the zeroth delay tranche width."
            ]
          },
          {
            "Name": "set_needed_approvals",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 21,
            "Docs": [
              "Set the number of validators needed to approve a block."
            ]
          },
          {
            "Name": "set_relay_vrf_modulo_samples",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 22,
            "Docs": [
              "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
            ]
          },
          {
            "Name": "set_max_upward_queue_count",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 23,
            "Docs": [
              "Sets the maximum items that can present in a upward dispatch queue at once."
            ]
          },
          {
            "Name": "set_max_upward_queue_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 24,
            "Docs": [
              "Sets the maximum total size of items that can present in a upward dispatch queue at once."
            ]
          },
          {
            "Name": "set_max_downward_message_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 25,
            "Docs": [
              "Set the critical downward message size."
            ]
          },
          {
            "Name": "set_max_upward_message_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 27,
            "Docs": [
              "Sets the maximum size of an upward message that can be sent by a candidate."
            ]
          },
          {
            "Name": "set_max_upward_message_num_per_candidate",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 28,
            "Docs": [
              "Sets the maximum number of messages that a candidate can contain."
            ]
          },
          {
            "Name": "set_hrmp_open_request_ttl",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 29,
            "Docs": [
              "Sets the number of sessions after which an HRMP open channel request expires."
            ]
          },
          {
            "Name": "set_hrmp_sender_deposit",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 30,
            "Docs": [
              "Sets the amount of funds that the sender should provide for opening an HRMP channel."
            ]
          },
          {
            "Name": "set_hrmp_recipient_deposit",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 31,
            "Docs": [
              "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
              "channel."
            ]
          },
          {
            "Name": "set_hrmp_channel_max_capacity",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 32,
            "Docs": [
              "Sets the maximum number of messages allowed in an HRMP channel at once."
            ]
          },
          {
            "Name": "set_hrmp_channel_max_total_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 33,
            "Docs": [
              "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
            ]
          },
          {
            "Name": "set_hrmp_max_parachain_inbound_channels",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 34,
            "Docs": [
              "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
            ]
          },
          {
            "Name": "set_hrmp_max_parathread_inbound_channels",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 35,
            "Docs": [
              "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."
            ]
          },
          {
            "Name": "set_hrmp_channel_max_message_size",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 36,
            "Docs": [
              "Sets the maximum size of a message that could ever be put into an HRMP channel."
            ]
          },
          {
            "Name": "set_hrmp_max_parachain_outbound_channels",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 37,
            "Docs": [
              "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
            ]
          },
          {
            "Name": "set_hrmp_max_parathread_outbound_channels",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 38,
            "Docs": [
              "Sets the maximum number of outbound HRMP channels a parathread is allowed to open."
            ]
          },
          {
            "Name": "set_hrmp_max_message_num_per_candidate",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 39,
            "Docs": [
              "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
            ]
          },
          {
            "Name": "set_pvf_checking_enabled",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 41,
            "Docs": [
              "Enable or disable PVF pre-checking. Consult the field documentation prior executing."
            ]
          },
          {
            "Name": "set_pvf_voting_ttl",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 42,
            "Docs": [
              "Set the number of session changes after which a PVF pre-checking voting is rejected."
            ]
          },
          {
            "Name": "set_minimum_validation_upgrade_delay",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 43,
            "Docs": [
              "Sets the minimum delay between announcing the upgrade block for a parachain until the",
              "upgrade taking place.",
              "",
              "See the field documentation for information and constraints for the new value."
            ]
          },
          {
            "Name": "set_bypass_consistency_check",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 44,
            "Docs": [
              "Setting this to true will disable consistency checks for the configuration setters.",
              "Use with caution."
            ]
          },
          {
            "Name": "set_async_backing_params",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AsyncBackingParams",
                "TypeId": 426
              }
            ],
            "Index": 45,
            "Docs": [
              "Set the asynchronous backing parameters."
            ]
          },
          {
            "Name": "set_executor_params",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "ExecutorParams",
                "TypeId": 427
              }
            ],
            "Index": 46,
            "Docs": [
              "Set PVF executor parameters."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "configuration",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "426": {
        "TypeFields": [
          {
            "Name": "max_candidate_depth",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "allowed_ancestry_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "vstaging",
          "AsyncBackingParams"
        ],
        "TypeDef": "Composite"
      },
      "427": {
        "TypeFields": [
          {
            "TypeName": "Vec<ExecutorParam>",
            "TypeId": 428
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "executor_params",
          "ExecutorParams"
        ],
        "TypeDef": "Composite"
      },
      "428": {
        "TypeId": 429,
        "TypeDef": "Sequence"
      },
      "429": {
        "Variants": [
          {
            "Name": "MaxMemoryPages",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "StackLogicalMax",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          },
          {
            "Name": "StackNativeMax",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PrecheckingMaxMemory",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 4
          },
          {
            "Name": "PvfPrepTimeout",
            "TypeFields": [
              {
                "TypeName": "PvfPrepTimeoutKind",
                "TypeId": 430
              },
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 5
          },
          {
            "Name": "PvfExecTimeout",
            "TypeFields": [
              {
                "TypeName": "PvfExecTimeoutKind",
                "TypeId": 431
              },
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 6
          },
          {
            "Name": "WasmExtBulkMemory",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "executor_params",
          "ExecutorParam"
        ],
        "TypeDef": "Variant"
      },
      "430": {
        "Variants": [
          {
            "Name": "Precheck",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Lenient",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "PvfPrepTimeoutKind"
        ],
        "TypeDef": "Variant"
      },
      "431": {
        "Variants": [
          {
            "Name": "Backing",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Approval",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "PvfExecTimeoutKind"
        ],
        "TypeDef": "Variant"
      },
      "432": {
        "Variants": null,
        "Path": [
          "polkadot_runtime_parachains",
          "shared",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "433": {
        "Variants": null,
        "Path": [
          "polkadot_runtime_parachains",
          "inclusion",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "434": {
        "Variants": [
          {
            "Name": "enter",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainsInherentData<T::Header>",
                "TypeId": 435
              }
            ],
            "Index": 0,
            "Docs": [
              "Enter the paras inherent. This will process bitfields and backed candidates."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras_inherent",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "435": {
        "TypeFields": [
          {
            "Name": "bitfields",
            "TypeName": "UncheckedSignedAvailabilityBitfields",
            "TypeId": 436
          },
          {
            "Name": "backed_candidates",
            "TypeName": "Vec<BackedCandidate<HDR::Hash>>",
            "TypeId": 443
          },
          {
            "Name": "disputes",
            "TypeName": "MultiDisputeStatementSet",
            "TypeId": 455
          },
          {
            "Name": "parent_header",
            "TypeName": "HDR",
            "TypeId": 302
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "InherentData"
        ],
        "TypeParams": [
          {
            "Name": "HDR",
            "TypeId": 302
          }
        ],
        "TypeDef": "Composite"
      },
      "436": {
        "TypeId": 437,
        "TypeDef": "Sequence"
      },
      "437": {
        "TypeFields": [
          {
            "Name": "payload",
            "TypeName": "Payload",
            "TypeId": 438
          },
          {
            "Name": "validator_index",
            "TypeName": "ValidatorIndex",
            "TypeId": 441
          },
          {
            "Name": "signature",
            "TypeName": "ValidatorSignature",
            "TypeId": 442
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "signed",
          "UncheckedSigned"
        ],
        "TypeParams": [
          {
            "Name": "Payload",
            "TypeId": 438
          },
          {
            "Name": "RealPayload",
            "TypeId": 438
          }
        ],
        "TypeDef": "Composite"
      },
      "438": {
        "TypeFields": [
          {
            "TypeName": "BitVec<u8, bitvec::order::Lsb0>",
            "TypeId": 439
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "AvailabilityBitfield"
        ],
        "TypeDef": "Composite"
      },
      "439": {
        "TypeIdStore": 2,
        "TypeIdOrder": 440,
        "TypeDef": "BitSequence"
      },
      "440": {
        "Path": [
          "bitvec",
          "order",
          "Lsb0"
        ],
        "TypeDef": "Composite"
      },
      "441": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "ValidatorIndex"
        ],
        "TypeDef": "Composite"
      },
      "442": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Signature",
            "TypeId": 100
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "validator_app",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "443": {
        "TypeId": 444,
        "TypeDef": "Sequence"
      },
      "444": {
        "TypeFields": [
          {
            "Name": "candidate",
            "TypeName": "CommittedCandidateReceipt<H>",
            "TypeId": 445
          },
          {
            "Name": "validity_votes",
            "TypeName": "Vec<ValidityAttestation>",
            "TypeId": 453
          },
          {
            "Name": "validator_indices",
            "TypeName": "BitVec<u8, bitvec::order::Lsb0>",
            "TypeId": 439
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "BackedCandidate"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "445": {
        "TypeFields": [
          {
            "Name": "descriptor",
            "TypeName": "CandidateDescriptor<H>",
            "TypeId": 96
          },
          {
            "Name": "commitments",
            "TypeName": "CandidateCommitments",
            "TypeId": 446
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "CommittedCandidateReceipt"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "446": {
        "TypeFields": [
          {
            "Name": "upward_messages",
            "TypeName": "UpwardMessages",
            "TypeId": 447
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "HorizontalMessages",
            "TypeId": 448
          },
          {
            "Name": "new_validation_code",
            "TypeName": "Option<ValidationCode>",
            "TypeId": 451
          },
          {
            "Name": "head_data",
            "TypeName": "HeadData",
            "TypeId": 103
          },
          {
            "Name": "processed_downward_messages",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_watermark",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "CandidateCommitments"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "447": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 298
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "448": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 450
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 449
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "449": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 97
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 97
          }
        ],
        "TypeDef": "Composite"
      },
      "450": {
        "TypeId": 449,
        "TypeDef": "Sequence"
      },
      "451": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 452
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 452
          }
        ],
        "TypeDef": "Variant"
      },
      "452": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "ValidationCode"
        ],
        "TypeDef": "Composite"
      },
      "453": {
        "TypeId": 454,
        "TypeDef": "Sequence"
      },
      "454": {
        "Variants": [
          {
            "Name": "Implicit",
            "TypeFields": [
              {
                "TypeName": "ValidatorSignature",
                "TypeId": 442
              }
            ],
            "Index": 1
          },
          {
            "Name": "Explicit",
            "TypeFields": [
              {
                "TypeName": "ValidatorSignature",
                "TypeId": 442
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "ValidityAttestation"
        ],
        "TypeDef": "Variant"
      },
      "455": {
        "TypeId": 456,
        "TypeDef": "Sequence"
      },
      "456": {
        "TypeFields": [
          {
            "Name": "candidate_hash",
            "TypeName": "CandidateHash",
            "TypeId": 110
          },
          {
            "Name": "session",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "statements",
            "TypeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>",
            "TypeId": 457
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "DisputeStatementSet"
        ],
        "TypeDef": "Composite"
      },
      "457": {
        "TypeId": 458,
        "TypeDef": "Sequence"
      },
      "458": {
        "TypeIds": [
          459,
          441,
          442
        ],
        "TypeDef": "Tuple"
      },
      "459": {
        "Variants": [
          {
            "Name": "Valid",
            "TypeFields": [
              {
                "TypeName": "ValidDisputeStatementKind",
                "TypeId": 460
              }
            ],
            "Index": 0
          },
          {
            "Name": "Invalid",
            "TypeFields": [
              {
                "TypeName": "InvalidDisputeStatementKind",
                "TypeId": 461
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "DisputeStatement"
        ],
        "TypeDef": "Variant"
      },
      "460": {
        "Variants": [
          {
            "Name": "Explicit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "BackingSeconded",
            "TypeFields": [
              {
                "TypeName": "Hash",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "BackingValid",
            "TypeFields": [
              {
                "TypeName": "Hash",
                "TypeId": 12
              }
            ],
            "Index": 2
          },
          {
            "Name": "ApprovalChecking",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "ValidDisputeStatementKind"
        ],
        "TypeDef": "Variant"
      },
      "461": {
        "Variants": [
          {
            "Name": "Explicit",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "InvalidDisputeStatementKind"
        ],
        "TypeDef": "Variant"
      },
      "462": {
        "Variants": [
          {
            "Name": "force_set_current_code",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "new_code",
                "TypeName": "ValidationCode",
                "TypeId": 452
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the storage for the parachain validation code immediately."
            ]
          },
          {
            "Name": "force_set_current_head",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "new_head",
                "TypeName": "HeadData",
                "TypeId": 103
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the storage for the current parachain head data immediately."
            ]
          },
          {
            "Name": "force_schedule_code_upgrade",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "new_code",
                "TypeName": "ValidationCode",
                "TypeId": 452
              },
              {
                "Name": "relay_parent_number",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule an upgrade as if it was scheduled in the given relay parent block."
            ]
          },
          {
            "Name": "force_note_new_head",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "new_head",
                "TypeName": "HeadData",
                "TypeId": 103
              }
            ],
            "Index": 3,
            "Docs": [
              "Note a new block head for para within the context of the current block."
            ]
          },
          {
            "Name": "force_queue_action",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 4,
            "Docs": [
              "Put a parachain directly into the next session's action queue.",
              "We can't queue it any sooner than this without going into the",
              "initializer..."
            ]
          },
          {
            "Name": "add_trusted_validation_code",
            "TypeFields": [
              {
                "Name": "validation_code",
                "TypeName": "ValidationCode",
                "TypeId": 452
              }
            ],
            "Index": 5,
            "Docs": [
              "Adds the validation code to the storage.",
              "",
              "The code will not be added if it is already present. Additionally, if PVF pre-checking",
              "is running for that code, it will be instantly accepted.",
              "",
              "Otherwise, the code will be added into the storage. Note that the code will be added",
              "into storage with reference count 0. This is to account the fact that there are no users",
              "for this code yet. The caller will have to make sure that this code eventually gets",
              "used by some parachain or removed from the storage to avoid storage leaks. For the latter",
              "prefer to use the `poke_unused_validation_code` dispatchable to raw storage manipulation.",
              "",
              "This function is mainly meant to be used for upgrading parachains that do not follow",
              "the go-ahead signal while the PVF pre-checking feature is enabled."
            ]
          },
          {
            "Name": "poke_unused_validation_code",
            "TypeFields": [
              {
                "Name": "validation_code_hash",
                "TypeName": "ValidationCodeHash",
                "TypeId": 102
              }
            ],
            "Index": 6,
            "Docs": [
              "Remove the validation code from the storage iff the reference count is 0.",
              "",
              "This is better than removing the storage directly, because it will not remove the code",
              "that was suddenly got used by some parachain while this dispatchable was pending",
              "dispatching."
            ]
          },
          {
            "Name": "include_pvf_check_statement",
            "TypeFields": [
              {
                "Name": "stmt",
                "TypeName": "PvfCheckStatement",
                "TypeId": 463
              },
              {
                "Name": "signature",
                "TypeName": "ValidatorSignature",
                "TypeId": 442
              }
            ],
            "Index": 7,
            "Docs": [
              "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and",
              "enacts the results if that was the last vote before achieving the supermajority."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "463": {
        "TypeFields": [
          {
            "Name": "accept",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "subject",
            "TypeName": "ValidationCodeHash",
            "TypeId": 102
          },
          {
            "Name": "session_index",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "validator_index",
            "TypeName": "ValidatorIndex",
            "TypeId": 441
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "PvfCheckStatement"
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "Variants": [
          {
            "Name": "force_approve",
            "TypeFields": [
              {
                "Name": "up_to",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Issue a signal to the consensus engine to forcibly act as though all parachain",
              "blocks in all relay chain blocks up to and including the given number in the current",
              "chain are valid and should be finalized."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "initializer",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "465": {
        "Variants": [
          {
            "Name": "hrmp_init_open_channel",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "proposed_max_capacity",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "proposed_max_message_size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Initiate opening a channel from a parachain to a given recipient with given channel",
              "parameters.",
              "",
              "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
              "- `proposed_max_message_size` - specifies the maximum size of the messages.",
              "",
              "These numbers are a subject to the relay-chain configuration limits.",
              "",
              "The channel can be opened only after the recipient confirms it and only on a session",
              "change."
            ]
          },
          {
            "Name": "hrmp_accept_open_channel",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 1,
            "Docs": [
              "Accept a pending open channel request from the given sender.",
              "",
              "The channel will be opened only on the next session boundary."
            ]
          },
          {
            "Name": "hrmp_close_channel",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "HrmpChannelId",
                "TypeId": 108
              }
            ],
            "Index": 2,
            "Docs": [
              "Initiate unilateral closing of a channel. The origin must be either the sender or the",
              "recipient in the channel being closed.",
              "",
              "The closure can only happen on a session change."
            ]
          },
          {
            "Name": "force_clean_hrmp",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "inbound",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "outbound",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "This extrinsic triggers the cleanup of all the HRMP storage items that",
              "a para may have. Normally this happens once per session, but this allows",
              "you to trigger the cleanup immediately for a specific parachain.",
              "",
              "Origin must be Root.",
              "",
              "Number of inbound and outbound channels for `para` must be provided as witness data of weighing."
            ]
          },
          {
            "Name": "force_process_hrmp_open",
            "TypeFields": [
              {
                "Name": "channels",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Force process HRMP open channel requests.",
              "",
              "If there are pending HRMP open channel requests, you can use this",
              "function process all of those requests immediately.",
              "",
              "Total number of opening channels must be provided as witness data of weighing."
            ]
          },
          {
            "Name": "force_process_hrmp_close",
            "TypeFields": [
              {
                "Name": "channels",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Force process HRMP close channel requests.",
              "",
              "If there are pending HRMP close channel requests, you can use this",
              "function process all of those requests immediately.",
              "",
              "Total number of closing channels must be provided as witness data of weighing."
            ]
          },
          {
            "Name": "hrmp_cancel_open_request",
            "TypeFields": [
              {
                "Name": "channel_id",
                "TypeName": "HrmpChannelId",
                "TypeId": 108
              },
              {
                "Name": "open_requests",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "This cancels a pending open channel request. It can be canceled by either of the sender",
              "or the recipient for that request. The origin must be either of those.",
              "",
              "The cancellation happens immediately. It is not possible to cancel the request if it is",
              "already accepted.",
              "",
              "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as",
              "witness data."
            ]
          },
          {
            "Name": "force_open_hrmp_channel",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "recipient",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Open a channel from a `sender` to a `recipient` `ParaId` using the Root origin. Although",
              "opened by Root, the `max_capacity` and `max_message_size` are still subject to the Relay",
              "Chain's configured limits.",
              "",
              "Expected use is when one of the `ParaId`s involved in the channel is governed by the",
              "Relay Chain, e.g. a common good parachain."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "hrmp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "466": {
        "Variants": [
          {
            "Name": "force_unfreeze",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "467": {
        "Variants": [
          {
            "Name": "report_dispute_lost_unsigned",
            "TypeFields": [
              {
                "Name": "dispute_proof",
                "TypeName": "Box<DisputeProof>",
                "TypeId": 468
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 306
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "slashing",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "468": {
        "TypeFields": [
          {
            "Name": "time_slot",
            "TypeName": "DisputesTimeSlot",
            "TypeId": 469
          },
          {
            "Name": "kind",
            "TypeName": "SlashingOffenceKind",
            "TypeId": 470
          },
          {
            "Name": "validator_index",
            "TypeName": "ValidatorIndex",
            "TypeId": 441
          },
          {
            "Name": "validator_id",
            "TypeName": "ValidatorId",
            "TypeId": 384
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "slashing",
          "DisputeProof"
        ],
        "TypeDef": "Composite"
      },
      "469": {
        "TypeFields": [
          {
            "Name": "session_index",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "candidate_hash",
            "TypeName": "CandidateHash",
            "TypeId": 110
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "slashing",
          "DisputesTimeSlot"
        ],
        "TypeDef": "Composite"
      },
      "470": {
        "Variants": [
          {
            "Name": "ForInvalid",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AgainstValid",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "slashing",
          "SlashingOffenceKind"
        ],
        "TypeDef": "Variant"
      },
      "471": {
        "Variants": [
          {
            "Name": "register",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "genesis_head",
                "TypeName": "HeadData",
                "TypeId": 103
              },
              {
                "Name": "validation_code",
                "TypeName": "ValidationCode",
                "TypeId": 452
              }
            ],
            "Index": 0,
            "Docs": [
              "Register head data and validation code for a reserved Para Id.",
              "",
              "## Arguments",
              "- `origin`: Must be called by a `Signed` origin.",
              "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
              "- `genesis_head`: The genesis head data of the parachain/thread.",
              "- `validation_code`: The initial validation code of the parachain/thread.",
              "",
              "## Deposits/Fees",
              "The origin signed account must reserve a corresponding deposit for the registration. Anything already",
              "reserved previously for this para ID is accounted for.",
              "",
              "## Events",
              "The `Registered` event is emitted in case of success."
            ]
          },
          {
            "Name": "force_register",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "genesis_head",
                "TypeName": "HeadData",
                "TypeId": 103
              },
              {
                "Name": "validation_code",
                "TypeName": "ValidationCode",
                "TypeId": 452
              }
            ],
            "Index": 1,
            "Docs": [
              "Force the registration of a Para Id on the relay chain.",
              "",
              "This function must be called by a Root origin.",
              "",
              "The deposit taken can be specified for this registration. Any `ParaId`",
              "can be registered, including sub-1000 IDs which are System Parachains."
            ]
          },
          {
            "Name": "deregister",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 2,
            "Docs": [
              "Deregister a Para Id, freeing all data and returning any deposit.",
              "",
              "The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."
            ]
          },
          {
            "Name": "swap",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "other",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 3,
            "Docs": [
              "Swap a parachain with another parachain or parathread.",
              "",
              "The origin must be Root, the `para` owner, or the `para` itself.",
              "",
              "The swap will happen only if there is already an opposite swap pending. If there is not,",
              "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
              "",
              "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
              "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
              "scheduling info (i.e. whether they're a parathread or parachain), auction information",
              "and the auction deposit are switched."
            ]
          },
          {
            "Name": "remove_lock",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove a manager lock from a para. This will allow the manager of a",
              "previously locked para to deregister or swap a para without using governance.",
              "",
              "Can only be called by the Root origin or the parachain."
            ]
          },
          {
            "Name": "reserve",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Reserve a Para Id on the relay chain.",
              "",
              "This function will reserve a new Para Id to be owned/managed by the origin account.",
              "The origin account is able to register head data and validation code using `register` to create",
              "a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot.",
              "",
              "## Arguments",
              "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID.",
              "",
              "## Deposits/Fees",
              "The origin must reserve a deposit of `ParaDeposit` for the registration.",
              "",
              "## Events",
              "The `Reserved` event is emitted in case of success, which provides the ID reserved for use."
            ]
          },
          {
            "Name": "add_lock",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 6,
            "Docs": [
              "Add a manager lock from a para. This will prevent the manager of a",
              "para to deregister or swap a para.",
              "",
              "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
            ]
          },
          {
            "Name": "schedule_code_upgrade",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "new_code",
                "TypeName": "ValidationCode",
                "TypeId": 452
              }
            ],
            "Index": 7,
            "Docs": [
              "Schedule a parachain upgrade.",
              "",
              "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
            ]
          },
          {
            "Name": "set_current_head",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "new_head",
                "TypeName": "HeadData",
                "TypeId": 103
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the parachain's current head.",
              "",
              "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "paras_registrar",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "472": {
        "Variants": [
          {
            "Name": "force_lease",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "leaser",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "period_begin",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "period_count",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen",
              "independently of any other on-chain mechanism to use it.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`."
            ]
          },
          {
            "Name": "clear_all_leases",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`."
            ]
          },
          {
            "Name": "trigger_onboard",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 2,
            "Docs": [
              "Try to onboard a parachain that has a lease for the current lease period.",
              "",
              "This function can be useful if there was some state issue with a para that should",
              "have onboarded, but was unable to. As long as they have a lease period, we can",
              "let them onboard from here.",
              "",
              "Origin must be signed, but can be called by anyone."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "slots",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "473": {
        "Variants": [
          {
            "Name": "new_auction",
            "TypeFields": [
              {
                "Name": "duration",
                "TypeName": "T::BlockNumber",
                "TypeId": 123
              },
              {
                "Name": "lease_period_index",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 123
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a new auction.",
              "",
              "This can only happen when there isn't already an auction in progress and may only be",
              "called by the root origin. Accepts the `duration` of this auction and the",
              "`lease_period_index` of the initial lease period of the four that are to be auctioned."
            ]
          },
          {
            "Name": "bid",
            "TypeFields": [
              {
                "Name": "para",
                "TypeName": "ParaId",
                "TypeId": 474
              },
              {
                "Name": "auction_index",
                "TypeName": "AuctionIndex",
                "TypeId": 123
              },
              {
                "Name": "first_slot",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 123
              },
              {
                "Name": "last_slot",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 123
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Make a new bid from an account (including a parachain account) for deploying a new",
              "parachain.",
              "",
              "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
              "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
              "",
              "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
              "funded by) the same account.",
              "- `auction_index` is the index of the auction to bid on. Should just be the present",
              "value of `AuctionCounter`.",
              "- `first_slot` is the first lease period index of the range to bid on. This is the",
              "absolute lease period index value, not an auction-specific offset.",
              "- `last_slot` is the last lease period index of the range to bid on. This is the",
              "absolute lease period index value, not an auction-specific offset.",
              "- `amount` is the amount to bid to be held as deposit for the parachain should the",
              "bid win. This amount is held throughout the range."
            ]
          },
          {
            "Name": "cancel_auction",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cancel an in-progress auction.",
              "",
              "Can only be called by Root origin."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "auctions",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "474": {
        "TypeId": 97,
        "TypeDef": "Compact"
      },
      "475": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 474
              },
              {
                "Name": "cap",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "first_period",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 123
              },
              {
                "Name": "last_period",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 123
              },
              {
                "Name": "end",
                "TypeName": "T::BlockNumber",
                "TypeId": 123
              },
              {
                "Name": "verifier",
                "TypeName": "Option<MultiSigner>",
                "TypeId": 476
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a new crowdloaning campaign for a parachain slot with the given lease period range.",
              "",
              "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
              "by the parachain manager."
            ]
          },
          {
            "Name": "contribute",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 474
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "signature",
                "TypeName": "Option<MultiSignature>",
                "TypeId": 480
              }
            ],
            "Index": 1,
            "Docs": [
              "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
              "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
            ]
          },
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 474
              }
            ],
            "Index": 2,
            "Docs": [
              "Withdraw full balance of a specific contributor.",
              "",
              "Origin must be signed, but can come from anyone.",
              "",
              "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement",
              "flag must be set. For a fund to be ready for retirement, then:",
              "- it must not already be in retirement;",
              "- the amount of raised funds must be bigger than the _free_ balance of the account;",
              "- and either:",
              "  - the block number must be at least `end`; or",
              "  - the current lease period must be greater than the fund's `last_period`.",
              "",
              "In this case, the fund's retirement flag is set and its `end` is reset to the current block",
              "number.",
              "",
              "- `who`: The account whose contribution should be withdrawn.",
              "- `index`: The parachain to whose crowdloan the contribution was made."
            ]
          },
          {
            "Name": "refund",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 474
              }
            ],
            "Index": 3,
            "Docs": [
              "Automatically refund contributors of an ended crowdloan.",
              "Due to weight restrictions, this function may need to be called multiple",
              "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
              "",
              "Origin must be signed, but can come from anyone."
            ]
          },
          {
            "Name": "dissolve",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 474
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove a fund after the retirement period has ended and all funds have been returned."
            ]
          },
          {
            "Name": "edit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 474
              },
              {
                "Name": "cap",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "first_period",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 123
              },
              {
                "Name": "last_period",
                "TypeName": "LeasePeriodOf<T>",
                "TypeId": 123
              },
              {
                "Name": "end",
                "TypeName": "T::BlockNumber",
                "TypeId": 123
              },
              {
                "Name": "verifier",
                "TypeName": "Option<MultiSigner>",
                "TypeId": 476
              }
            ],
            "Index": 5,
            "Docs": [
              "Edit the configuration for an in-progress crowdloan.",
              "",
              "Can only be called by Root origin."
            ]
          },
          {
            "Name": "add_memo",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "memo",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 6,
            "Docs": [
              "Add an optional memo to an existing crowdloan contribution.",
              "",
              "Origin must be Signed, and the user must have contributed to the crowdloan."
            ]
          },
          {
            "Name": "poke",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 7,
            "Docs": [
              "Poke the fund into `NewRaise`",
              "",
              "Origin must be Signed, and the fund has non-zero raise."
            ]
          },
          {
            "Name": "contribute_all",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ParaId",
                "TypeId": 474
              },
              {
                "Name": "signature",
                "TypeName": "Option<MultiSignature>",
                "TypeId": 480
              }
            ],
            "Index": 8,
            "Docs": [
              "Contribute your entire balance to a crowd sale. This will transfer the entire balance of a user over to fund a parachain",
              "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "crowdloan",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "476": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 477
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 477
          }
        ],
        "TypeDef": "Variant"
      },
      "477": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Public",
                "TypeId": 51
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Public",
                "TypeId": 59
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Public",
                "TypeId": 478
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSigner"
        ],
        "TypeDef": "Variant"
      },
      "478": {
        "TypeFields": [
          {
            "TypeName": "[u8; 33]",
            "TypeId": 479
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "479": {
        "Length": 33,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "480": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 481
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 481
          }
        ],
        "TypeDef": "Variant"
      },
      "481": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 393
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 100
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 482
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "482": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 483
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "483": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "484": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 485
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 156
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 156
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                "TypeId": 497
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than the",
              "maximum amount of weight that the message could take to be executed, then no execution",
              "attempt will be made.",
              "",
              "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
              "to completion; only that *some* of it was executed."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 120
              },
              {
                "Name": "xcm_version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 74
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 156
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 155
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 170
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 156
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 155
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "force_suspension",
            "TypeFields": [
              {
                "Name": "suspended",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 10,
            "Docs": [
              "Set or unset the global suspension state of the XCM executor.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `suspended`: `true` to suspend, `false` to resume."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "485": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 486
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 129
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "486": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 487
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "487": {
        "TypeId": 488,
        "TypeDef": "Sequence"
      },
      "488": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 489
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 157
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 157
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 149
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 150
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 162
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 159
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 496
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 486
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 486
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 157
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "489": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 490
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "490": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 491
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 491
          }
        ],
        "TypeDef": "Variant"
      },
      "491": {
        "TypeIds": [
          4,
          492
        ],
        "TypeDef": "Tuple"
      },
      "492": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 11
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "493": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 494
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "494": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 160
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 495
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "495": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "496": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "497": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 498
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 502
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "498": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 499
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "499": {
        "TypeId": 500,
        "TypeDef": "Sequence"
      },
      "500": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 489
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 157
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 157
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 149
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 501
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 162
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 157
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 486
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 161
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 493
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 159
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 496
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 498
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 498
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 157
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 161
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "501": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "502": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 503
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "503": {
        "TypeId": 504,
        "TypeDef": "Sequence"
      },
      "504": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 139
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 149
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 501
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 121
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 120
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 152
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 155
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 502
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 502
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 132
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 132
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 140
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 146
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 123
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 151
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 122
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 125
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 121
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 129
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 134
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 120
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 155
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 148
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "505": {
        "Variants": [
          {
            "Name": "reap_page",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 172
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Remove a page which has no more messages remaining to be processed or is stale."
            ]
          },
          {
            "Name": "execute_overweight",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 172
              },
              {
                "Name": "page",
                "TypeName": "PageIndex",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "T::Size",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Execute an overweight message.",
              "",
              "Temporary processing errors will be propagated whereas permanent errors are treated",
              "as success condition.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `message_origin`: The origin from which the message to be executed arrived.",
              "- `page`: The page in the queue in which the message to be executed is sitting.",
              "- `index`: The index into the queue of the message to be executed.",
              "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
              "  of the message.",
              "",
              "Benchmark complexity considerations: O(index + weight_limit)."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "506": {
        "Variants": [
          {
            "Name": "sudo_schedule_para_initialize",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "genesis",
                "TypeName": "ParaGenesisArgs",
                "TypeId": 507
              }
            ],
            "Index": 0,
            "Docs": [
              "Schedule a para to be initialized at the start of the next session."
            ]
          },
          {
            "Name": "sudo_schedule_para_cleanup",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 1,
            "Docs": [
              "Schedule a para to be cleaned up at the start of the next session."
            ]
          },
          {
            "Name": "sudo_schedule_parathread_upgrade",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 2,
            "Docs": [
              "Upgrade a parathread to a parachain"
            ]
          },
          {
            "Name": "sudo_schedule_parachain_downgrade",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 3,
            "Docs": [
              "Downgrade a parachain to a parathread"
            ]
          },
          {
            "Name": "sudo_queue_downward_xcm",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "xcm",
                "TypeName": "Box<xcm::opaque::VersionedXcm>",
                "TypeId": 485
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a downward XCM to the given para.",
              "",
              "The given parachain should exist and the payload should not exceed the preconfigured size",
              "`config.max_downward_message_size`."
            ]
          },
          {
            "Name": "sudo_establish_hrmp_channel",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "recipient",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Forcefully establish a channel from the sender to the recipient.",
              "",
              "This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic followed by",
              "`Hrmp::hrmp_accept_open_channel`."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "paras_sudo_wrapper",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "507": {
        "TypeFields": [
          {
            "Name": "genesis_head",
            "TypeName": "HeadData",
            "TypeId": 103
          },
          {
            "Name": "validation_code",
            "TypeName": "ValidationCode",
            "TypeId": 452
          },
          {
            "Name": "para_kind",
            "TypeName": "ParaKind",
            "TypeId": 37
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "ParaGenesisArgs"
        ],
        "TypeDef": "Composite"
      },
      "508": {
        "Variants": [
          {
            "Name": "assign_perm_parachain_slot",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 0,
            "Docs": [
              "Assign a permanent parachain slot and immediately create a lease for it."
            ]
          },
          {
            "Name": "assign_temp_parachain_slot",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "lease_period_start",
                "TypeName": "SlotLeasePeriodStart",
                "TypeId": 509
              }
            ],
            "Index": 1,
            "Docs": [
              "Assign a temporary parachain slot. The function tries to create a lease for it",
              "immediately if `SlotLeasePeriodStart::Current` is specified, and if the number",
              "of currently active temporary slots is below `MaxTemporarySlotPerLeasePeriod`."
            ]
          },
          {
            "Name": "unassign_parachain_slot",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 2,
            "Docs": [
              "Unassign a permanent or temporary parachain slot"
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "assigned_slots",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "509": {
        "Variants": [
          {
            "Name": "Current",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Next",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "assigned_slots",
          "SlotLeasePeriodStart"
        ],
        "TypeDef": "Variant"
      },
      "510": {
        "Variants": [
          {
            "Name": "register_validators",
            "TypeFields": [
              {
                "Name": "validators",
                "TypeName": "Vec<T::ValidatorId>",
                "TypeId": 80
              }
            ],
            "Index": 0,
            "Docs": [
              "Add new validators to the set.",
              "",
              "The new validators will be active from current session + 2."
            ]
          },
          {
            "Name": "deregister_validators",
            "TypeFields": [
              {
                "Name": "validators",
                "TypeName": "Vec<T::ValidatorId>",
                "TypeId": 80
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove validators from the set.",
              "",
              "The removed validators will be deactivated from current session + 2."
            ]
          }
        ],
        "Path": [
          "pallet_validator_manager",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "511": {
        "Variants": [
          {
            "Name": "create_collection",
            "TypeFields": [
              {
                "Name": "descriptor",
                "TypeName": "Box<<T as Config>::CollectionDescriptor>",
                "TypeId": 512
              }
            ],
            "Index": 0,
            "Docs": [
              "Creates a new [`Collection`](ep_multi_tokens::Collection) from `descriptor`",
              "",
              "# Errors",
              "",
              "- [`Error::DepositReserveFailed`] if the deposit cannot be reserved"
            ]
          },
          {
            "Name": "destroy_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Destroys [`Collection`](ep_multi_tokens::Collection) with `id`. `origin` must be the",
              "owner of the [`Collection`](ep_multi_tokens::Collection).",
              "",
              "# Errors",
              "",
              "- [`Error::NoPermission`] if `origin` is not the owner of the collection.",
              "- [`Error::CollectionNotFound`] if `Collection` with `id` does not exist.",
              "- [`Error::DestroyForbiddenByCollectionEvent`] if another pallet is blocking the",
              "  collection's destruction",
              "- [`Error::DestroyForbiddenByRemainingTokens`] if collection still has tokens when",
              "  destroying",
              "- [`Error::DestroyForbiddenByAttributeCount`] if collection still has attributes when",
              "  destroying",
              "current number of collection attributes."
            ]
          },
          {
            "Name": "mutate_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "mutation",
                "TypeName": "Box<<T as Config>::CollectionMutation>",
                "TypeId": 178
              }
            ],
            "Index": 2,
            "Docs": [
              "Modify [`Collection`](ep_multi_tokens::Collection) with `id` by applying `mutation`",
              "",
              "# Errors",
              "",
              "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
              "- [`Error::NoPermission`] if `origin` is not the owner of `collection`."
            ]
          },
          {
            "Name": "mutate_token",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 63
              },
              {
                "Name": "mutation",
                "TypeName": "Box<<T as Config>::TokenMutation>",
                "TypeId": 187
              }
            ],
            "Index": 3,
            "Docs": [
              "Modify [`Token`](ep_multi_tokens::Token) with `token_id`  from",
              "[`Collection`](ep_multi_tokens::Collection) with `collection_id` by applying `mutation`",
              "",
              "# Errors",
              "",
              "- [`Error::CurrencyIncompatibleWithCollectionRoyalty`] if token has already been",
              "  assigned a royalty",
              "- [`Error::NoPermission`] if not the collection owner",
              "- [`Error::TokenNotFound`] if Token does not exist",
              "- [`Error::ConflictingLocation`] if the new location is already occupied"
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "params",
                "TypeName": "Box<MintParamsOf<T>>",
                "TypeId": 522
              }
            ],
            "Index": 4,
            "Docs": [
              "`origin` mints to `recipient` for `collection_id` with `params` using the pallet's",
              "[`MintPolicy`](traits::CollectionPolicy::Mint).",
              "",
              "# Errors",
              "",
              "- [`Error::AmountZero`] if `amount == 0`.",
              "- [`Error::CollectionNotFound`] if `Collection` does not exist.",
              "- [`Error::TokenNotFound`] if `Token` does not exist.",
              "- [`Error::TokenAlreadyExists`] if attempting to create a token that already exists",
              "- [`Error::NoPermission`] if `caller` is not allowed to mint the `collection`.",
              "- [`Error::TokenMintCapExceeded`] if the mint policy TokenCap does not allow minting",
              "- `MaxTokenCountExceeded` if the mint policy max_token_count is exceeded",
              "- [`Error::DepositReserveFailed`] if the issuer does not have sufficient balance for",
              "  token deposit",
              "- [`Error::ConflictingLocation`] if the token is foreign and the location is already",
              "  mapped to another asset in `AssetIdsByLocation`"
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "params",
                "TypeName": "BurnParamsOf<T>",
                "TypeId": 526
              }
            ],
            "Index": 5,
            "Docs": [
              "Reduces the balance of `owner` by `amount` of `token_id` from `collection_id`.",
              "It also updates the total supply of `collection_id`.",
              "",
              "# Errors",
              "- [`Error::CollectionNotFound`] if `collection` does not exist.",
              "- [`Error::BalanceLow`] if `owner` account does not has enough amount of any token in",
              "  `tokens` of `collection`.",
              "- [`Error::DepositUnreserveFailed`] if caller does not have enough reserved balance to",
              "  unreserve",
              "- [`Error::DestroyForbiddenByAttributeCount`] if removing token from storage but the",
              "  attribute count is greater than zero"
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "params",
                "TypeName": "TransferParamsOf<T>",
                "TypeId": 527
              }
            ],
            "Index": 6,
            "Docs": [
              "`operator` transfers to `recipient` for `collection_id` with `params`",
              "",
              "# Errors",
              "",
              "- [`Error::AmountZero`] if `amount == 0`.",
              "- [`Error::BalanceLow`] if `source` does not own enough amount of `collection`."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "FreezeOf<T>",
                "TypeId": 201
              }
            ],
            "Index": 7,
            "Docs": [
              "Freeze collection, token or account"
            ]
          },
          {
            "Name": "thaw",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "FreezeOf<T>",
                "TypeId": 201
              }
            ],
            "Index": 8,
            "Docs": [
              "Thaw collection, token or account"
            ]
          },
          {
            "Name": "set_attribute",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78
              },
              {
                "Name": "key",
                "TypeName": "T::AttributeKey",
                "TypeId": 205
              },
              {
                "Name": "value",
                "TypeName": "T::AttributeValue",
                "TypeId": 206
              }
            ],
            "Index": 9,
            "Docs": [
              "Sets the attribute `key` to `value` for `collection_id`.",
              "If `token_id` is [`None`], the attribute is added to the collection. If it is [`Some`],",
              "the attribute is added to the token.",
              "",
              "# Errors",
              "- [`Error::InvalidAttributeKey`] if `key.len() == 0`",
              "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
              "- [`Error::TokenNotFound`] if `token_id` is `Some` and does not exist.",
              "- [`Error::NoPermission`] if `source` account is not the owner of the collection.",
              "- [`Error::DepositReserveFailed`] if unable to reserve the deposit for the attribute",
              "  storage."
            ]
          },
          {
            "Name": "remove_attribute",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78
              },
              {
                "Name": "key",
                "TypeName": "T::AttributeKey",
                "TypeId": 205
              }
            ],
            "Index": 10,
            "Docs": [
              "Removes the `key` attribute from the given `collection_id` or `token_id`.",
              "",
              "# Errors",
              "- [`Error::InvalidAttributeKey`] if `key.len() == 0`",
              "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
              "- [`Error::TokenNotFound`] if `token_id` is `Some` and does not exist.",
              "- [`Error::NoPermission`] if `caller` is not the owner of the collection.",
              "- `Underflow` if an attribute counter underflows"
            ]
          },
          {
            "Name": "remove_all_attributes",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78
              },
              {
                "Name": "attribute_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Removes all attributes from the given `collection_id` or `token_id`.",
              "",
              "# Errors",
              "- `InvalidAttributeCount` if `attribute_count` doesn't match the number of attributes",
              "- [`Error::CollectionNotFound`] if Collection with `collection_id` does not exist.",
              "- [`Error::TokenNotFound`] if Token with `token_id` does not exist.",
              "- [`Error::NoPermission`] if `origin` account is not the owner of the Collection or",
              "  Token",
              "- other errors from `remove_attribute`"
            ]
          },
          {
            "Name": "batch_transfer",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "recipients",
                "TypeName": "TransferRecipientsOf<T>",
                "TypeId": 528
              }
            ],
            "Index": 12,
            "Docs": [
              "Transfers the specific amount of tokens of `collection` to `recipients` from `origin`",
              "account. A single failure will fail all transfers.",
              "",
              "# Errors",
              "",
              "- [`Error::AmountZero`] if `amount == 0`.",
              "- [`Error::BalanceLow`] if `source` does not own enough amount of `collection`."
            ]
          },
          {
            "Name": "batch_mint",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "recipients",
                "TypeName": "MintRecipientsOf<T>",
                "TypeId": 531
              }
            ],
            "Index": 13,
            "Docs": [
              "Collection owner mints tokens of `collection_id` to `recipients` consisting of an",
              "[`AccountId`](frame_system::Config::AccountId) and [`MintParams`]. A single mint failure",
              "will fail all of them in the batch.",
              "",
              "# Errors",
              "- [`Error::AmountZero`] if `amount == 0`.",
              "- [`Error::CollectionNotFound`] if `collection` does **not** exist.",
              "- [`Error::NoPermission`] if `caller` is not allowed to mint the `collection`.",
              "- [`Error::TokenMintCapExceeded`] if the mint policy TokenCap does not allow minting",
              "- [`Error::MaxTokenCountExceeded`] if the mint policy max_token_count is exceeded",
              "- [`Error::DepositReserveFailed`] if the issuer does not have sufficient balance for",
              "  token deposit"
            ]
          },
          {
            "Name": "batch_set_attribute",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78
              },
              {
                "Name": "attributes",
                "TypeName": "AttributesOf<T>",
                "TypeId": 513
              }
            ],
            "Index": 14,
            "Docs": [
              "Collection owner sets `attributes` to `collection_id`",
              "",
              "If `token_id` is [`None`], the attribute is added to the collection. If it is [`Some`],",
              "the attribute is added to the token.",
              "",
              "# Errors",
              "",
              "- [`Error::InvalidAttributeKey`] if `key.len() == 0`",
              "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
              "- [`Error::TokenNotFound`] if `token_id` is `Some` and does not exist.",
              "- [`Error::NoPermission`] if `source` account is not the owner of the collection.",
              "- [`Error::DepositReserveFailed`] if unable to reserve the deposit for the attribute",
              "  storage."
            ]
          },
          {
            "Name": "approve_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "expiration",
                "TypeName": "T::Expiration",
                "TypeId": 74
              }
            ],
            "Index": 15,
            "Docs": [
              "Approve the `operator` to manage all of `origin`'s tokens belonging to `collection_id`.",
              "If an `expiration` is provided, the approval will end when it expires.",
              "",
              "# Errors",
              "",
              "- [`Error::CannotApproveSelf`] if `origin == operator`",
              "- [`Error::AlreadyExpired`] if `expiration` is earlier than now",
              "- [`Error::CollectionAccountNotFound`] if the collection account does not exist",
              "- [`Error::MaxApprovalsExceeded`] if approval count has exceeded the maximum"
            ]
          },
          {
            "Name": "unapprove_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 16,
            "Docs": [
              "Unapprove the `operator` to manage all of `origin`'s tokens belonging to `collection`",
              "",
              "# Errors",
              "",
              "- [`Error::CollectionAccountNotFound`] if the collection account cannot be found"
            ]
          },
          {
            "Name": "approve_token",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 63
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "expiration",
                "TypeName": "T::Expiration",
                "TypeId": 74
              },
              {
                "Name": "current_amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 63
              }
            ],
            "Index": 17,
            "Docs": [
              "Approve `operator` to transfer up to `amount` of `caller`'s balance for `token_id` of",
              "`collection_id`. An `expiration` can be provided. `current_amount` must match the",
              "current approved amount.",
              "",
              "# Errors",
              "- [`Error::CannotApproveSelf`] if `origin == operator`",
              "- [`Error::CollectionAlreadyApproved`] if `collection_id` is already approved",
              "- [`Error::AlreadyExpired`] if `expiration` is earlier than now",
              "- [`Error::TokenAccountNotFound`] if the token account does not exist",
              "- [`Error::MaxApprovalsExceeded`] if approval count has exceeded the maximum",
              "- [`Error::WrongCurrentApprovedAmount`] if `current_amount` does not match the current",
              "  approval amount"
            ]
          },
          {
            "Name": "unapprove_token",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 63
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 18,
            "Docs": [
              "Unapprove `operator` to transfer `origin`'s `token_id` of `collection_id`",
              "",
              "# Errors",
              "",
              "- [`Error::TokenAccountNotFound`] if the token account does not exist"
            ]
          },
          {
            "Name": "claim_collections",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ethereum_signature",
                "TypeName": "Signature",
                "TypeId": 482
              },
              {
                "Name": "ethereum_address",
                "TypeName": "EthereumAddress",
                "TypeId": 248
              },
              {
                "Name": "collection_count",
                "TypeName": "u32",
                "TypeId": 123
              }
            ],
            "Index": 32,
            "Docs": [
              "Transfers ownership of collections to `destination` if the signature and",
              "`collection_count` matches.",
              "",
              "The dispatch origin for this call must be _None_.",
              "",
              "Unsigned Validation:",
              "A call to claim is deemed valid if the signature provided matches",
              "the expected signed message of:",
              "",
              "> Ethereum Signed Message:",
              "> (configured prefix string)(address)",
              "",
              "and `address` matches the `destination` account.",
              "",
              "This will always execute with weight of [`Config::MaxClaimableCollectionsPerAccount`]",
              "and it will reimburse weight for collections under that number.",
              "",
              "### Parameters:",
              "- `destination`: The account that will receive ownership of the collections",
              "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
              "  described above.",
              "- `ethereum_address`: The Ethereum address from which the message is signed.",
              "- `collection_count`: The number of collections that will be claimed. It can also be",
              "  higher than the actual number, but if it's lower it will fail."
            ]
          },
          {
            "Name": "claim_tokens",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ethereum_signature",
                "TypeName": "Signature",
                "TypeId": 482
              },
              {
                "Name": "ethereum_address",
                "TypeName": "EthereumAddress",
                "TypeId": 248
              }
            ],
            "Index": 33,
            "Docs": [
              "Sends [`Event::ClaimTokensInitiated`] event if validation of the params succeeds.",
              "",
              "The dispatch origin for this call must be _None_.",
              "",
              "Unsigned Validation:",
              "A call to claim is deemed valid if the signature provided matches",
              "the expected signed message of:",
              "",
              "> Ethereum Signed Message:",
              "> (configured prefix string)(address)",
              "",
              "and `address` matches the `destination` account.",
              "",
              "### Parameters:",
              "- `destination`: The account that will receive token balances",
              "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
              "  described above.",
              "- `ethereum_address` : The Ethereum address from which the message is signed."
            ]
          },
          {
            "Name": "finish_claim_tokens",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ethereum_address",
                "TypeName": "EthereumAddress",
                "TypeId": 248
              }
            ],
            "Index": 36,
            "Docs": [
              "Sends an event that signifies claiming the tokens was completed. Only callable by",
              "[`Config::EthereumMigrationOrigin`]."
            ]
          },
          {
            "Name": "force_mutate_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "mutation",
                "TypeName": "Box<<T as Config>::CollectionMutation>",
                "TypeId": 178
              }
            ],
            "Index": 19,
            "Docs": [
              "Exactly as [`mutate_collection`](Self::mutate_collection), except the origin must be",
              "root and the `caller` account should be specified.",
              "",
              "# Errors",
              "",
              "Same as [`mutate_collection`](Self::mutate_collection)"
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "destination",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "params",
                "TypeName": "TransferParamsOf<T>",
                "TypeId": 527
              }
            ],
            "Index": 20,
            "Docs": [
              "Exactly as [`transfer`](Self::transfer), except the origin must be root and the source",
              "account should be specified.",
              "",
              "# Errors",
              "",
              "Same as [`transfer`](Self::transfer)"
            ]
          },
          {
            "Name": "force_set_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "value",
                "TypeName": "Box<Option<CollectionOf<T>>>",
                "TypeId": 208
              }
            ],
            "Index": 21,
            "Docs": [
              "Set the Collections storage to the given `value`, origin must be root"
            ]
          },
          {
            "Name": "force_set_token",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 63
              },
              {
                "Name": "value",
                "TypeName": "Option<Box<TokenOf<T>>>",
                "TypeId": 534
              }
            ],
            "Index": 22,
            "Docs": [
              "Set the Tokens storage to the given `value`, origin must be root"
            ]
          },
          {
            "Name": "force_set_attribute",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "Option<T::TokenId>",
                "TypeId": 78
              },
              {
                "Name": "key",
                "TypeName": "T::AttributeKey",
                "TypeId": 205
              },
              {
                "Name": "value",
                "TypeName": "Option<AttributeOf<T>>",
                "TypeId": 535
              }
            ],
            "Index": 23,
            "Docs": [
              "Set the Tokens storage to the given `value`, origin must be root"
            ]
          },
          {
            "Name": "force_set_collection_account",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "account_id",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "value",
                "TypeName": "Option<CollectionAccountOf<T>>",
                "TypeId": 226
              }
            ],
            "Index": 24,
            "Docs": [
              "Set the CollectionAccounts storage to the given `value`, origin must be root"
            ]
          },
          {
            "Name": "force_set_token_account",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 63
              },
              {
                "Name": "account_id",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "value",
                "TypeName": "Option<TokenAccountOf<T>>",
                "TypeId": 233
              }
            ],
            "Index": 25,
            "Docs": [
              "Set the TokenAccounts storage to the given `value`, origin must be root"
            ]
          },
          {
            "Name": "force_create_collection",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "descriptor",
                "TypeName": "Box<<T as Config>::CollectionDescriptor>",
                "TypeId": 512
              }
            ],
            "Index": 26,
            "Docs": [
              "Creates a new collection from `descriptor` at `collection_id`, origin must be root",
              "",
              "# Errors",
              "- [`Error::DepositReserveFailed`] if the deposit cannot be reserved",
              "- [`Error::CollectionIdAlreadyInUse`] if the collection id is already in use"
            ]
          },
          {
            "Name": "force_mint",
            "TypeFields": [
              {
                "Name": "caller",
                "TypeName": "Option<<T::Lookup as StaticLookup>::Source>",
                "TypeId": 537
              },
              {
                "Name": "recipient",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "params",
                "TypeName": "Box<FlexibleMintParamsOf<T>>",
                "TypeId": 538
              },
              {
                "Name": "depositor",
                "TypeName": "Option<<T::Lookup as StaticLookup>::Source>",
                "TypeId": 537
              }
            ],
            "Index": 27,
            "Docs": [
              "Same as [`mint`](Self::mint), but it is callable by",
              "[`Config::EthereumMigrationOrigin`]. If `caller` is None, it will use the collection",
              "owner. If `depositor` is `Some`, they will pay the deposit for minting."
            ]
          },
          {
            "Name": "force_burn",
            "TypeFields": [
              {
                "Name": "caller",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "params",
                "TypeName": "BurnParamsOf<T>",
                "TypeId": 526
              }
            ],
            "Index": 28,
            "Docs": [
              "Same as [`burn`](Self::burn), but it is only callable by",
              "[`Config::ForceOrigin`]. Executes the burn by `caller`."
            ]
          },
          {
            "Name": "force_approve_collection",
            "TypeFields": [
              {
                "Name": "caller",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "operator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "expiration",
                "TypeName": "T::Expiration",
                "TypeId": 74
              }
            ],
            "Index": 29,
            "Docs": [
              "Same as [`approve_collection`](Self::approve_collection), but it is callable by",
              "[`Config::ForceOrigin`]."
            ]
          },
          {
            "Name": "force_freeze",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "FreezeOf<T>",
                "TypeId": 201
              }
            ],
            "Index": 30,
            "Docs": [
              "Same as [`freeze`](Self::freeze), but it is callable by [`Config::ForceOrigin`]"
            ]
          },
          {
            "Name": "force_set_next_collection_id",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              }
            ],
            "Index": 31,
            "Docs": [
              "Sets [`NextCollectionId`] to `value`. Only callable by [`Config::ForceOrigin`]."
            ]
          },
          {
            "Name": "force_set_ethereum_account",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "EthereumAddress",
                "TypeId": 248
              },
              {
                "Name": "value",
                "TypeName": "Option<CollectionIdsOf<T>>",
                "TypeId": 539
              }
            ],
            "Index": 34,
            "Docs": [
              "Sets [`ClaimableCollectionIds`] to `value`. Only callable by [`Config::ForceOrigin`]."
            ]
          },
          {
            "Name": "force_set_ethereum_collection_id",
            "TypeFields": [
              {
                "Name": "ethereum_collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "native_collection_id",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 78
              }
            ],
            "Index": 35,
            "Docs": [
              "Sets [`NativeCollectionIds`] to `native_collection_id`. Only callable by",
              "[`Config::ForceOrigin`]."
            ]
          },
          {
            "Name": "force_set_unmintable_token_ids",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "base_token_id",
                "TypeName": "BaseTokenId",
                "TypeId": 10
              },
              {
                "Name": "token_index",
                "TypeName": "TokenIndex",
                "TypeId": 10
              }
            ],
            "Index": 38,
            "Docs": [
              "Sets [`UnmintableTokenIds`] storage. Only callable by",
              "[`Config::ForceOrigin`]."
            ]
          },
          {
            "Name": "force_create_ethereum_collection",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "claimer",
                "TypeName": "EthereumAddress",
                "TypeId": 248
              },
              {
                "Name": "ethereum_collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "descriptor",
                "TypeName": "Box<<T as Config>::CollectionDescriptor>",
                "TypeId": 512
              }
            ],
            "Index": 39,
            "Docs": [
              "Creates a new collection from `descriptor` at `collection_id`, origin must be",
              "[`Config::EthereumMigrationOrigin`]. It differs from `force_create_collection`",
              "since it writes to `NativeCollectionIds` and `ClaimableCollectionIds`.",
              "",
              "# Params",
              "- `owner` - the account that will own the new collection",
              "- `claimer` - the ethereum address that will be able to claim the collection",
              "- `ethereum_collection_id` - the collection id on ethereum",
              "",
              "# Errors",
              "- [`Error::DepositReserveFailed`] if the deposit cannot be reserved",
              "- [`Error::CollectionIdAlreadyInUse`] if the collection id is already in use"
            ]
          },
          {
            "Name": "force_set_ethereum_unmintable_token_ids",
            "TypeFields": [
              {
                "Name": "ethereum_collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 63
              },
              {
                "Name": "base_token_id",
                "TypeName": "BaseTokenId",
                "TypeId": 10
              },
              {
                "Name": "token_index",
                "TypeName": "TokenIndex",
                "TypeId": 10
              }
            ],
            "Index": 40,
            "Docs": [
              "Sets [`UnmintableTokenIds`] using ethereum_collection_id, the function will fail if the",
              "ethereum_collection_id is invalid"
            ]
          }
        ],
        "Path": [
          "pallet_multi_tokens",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "512": {
        "TypeFields": [
          {
            "Name": "policy",
            "TypeName": "DefaultCollectionPolicyDescriptor<TokenBalance, Royalty>",
            "TypeId": 516
          },
          {
            "Name": "explicit_royalty_currencies",
            "TypeName": "ExplicitRoyaltyCurrenciesVec",
            "TypeId": 180
          },
          {
            "Name": "attributes",
            "TypeName": "Attributes",
            "TypeId": 513
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "collection",
          "DefaultCollectionDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Royalty",
            "TypeId": 179
          },
          {
            "Name": "ExplicitRoyaltyCurrenciesVec",
            "TypeId": 180
          },
          {
            "Name": "Attributes",
            "TypeId": 513
          }
        ],
        "TypeDef": "Composite"
      },
      "513": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 515
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 514
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "514": {
        "TypeFields": [
          {
            "Name": "key",
            "TypeName": "Key",
            "TypeId": 205
          },
          {
            "Name": "value",
            "TypeName": "Value",
            "TypeId": 206
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "batch",
          "AttributeKeyValuePair"
        ],
        "TypeParams": [
          {
            "Name": "Key",
            "TypeId": 205
          },
          {
            "Name": "Value",
            "TypeId": 206
          }
        ],
        "TypeDef": "Composite"
      },
      "515": {
        "TypeId": 514,
        "TypeDef": "Sequence"
      },
      "516": {
        "TypeFields": [
          {
            "Name": "mint",
            "TypeName": "DefaultMintPolicyDescriptor<TokenBalance>",
            "TypeId": 517
          },
          {
            "Name": "burn",
            "TypeName": "DefaultBurnPolicyDescriptor",
            "TypeId": 518
          },
          {
            "Name": "transfer",
            "TypeName": "DefaultTransferPolicyDescriptor",
            "TypeId": 519
          },
          {
            "Name": "attribute",
            "TypeName": "DefaultAttributePolicyDescriptor",
            "TypeId": 520
          },
          {
            "Name": "market",
            "TypeName": "DefaultMarketPolicyDescriptor<Royalty>",
            "TypeId": 521
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "DefaultCollectionPolicyDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Royalty",
            "TypeId": 179
          }
        ],
        "TypeDef": "Composite"
      },
      "517": {
        "TypeFields": [
          {
            "Name": "max_token_count",
            "TypeName": "Option<TokenCount>",
            "TypeId": 212
          },
          {
            "Name": "max_token_supply",
            "TypeName": "Option<TokenBalance>",
            "TypeId": 78
          },
          {
            "Name": "force_single_mint",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "mint",
          "DefaultMintPolicyDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "518": {
        "Path": [
          "ep_multi_tokens",
          "policy",
          "burn",
          "DefaultBurnPolicyDescriptor"
        ],
        "TypeDef": "Composite"
      },
      "519": {
        "Path": [
          "ep_multi_tokens",
          "policy",
          "transfer",
          "DefaultTransferPolicyDescriptor"
        ],
        "TypeDef": "Composite"
      },
      "520": {
        "Path": [
          "ep_multi_tokens",
          "policy",
          "attribute",
          "DefaultAttributePolicyDescriptor"
        ],
        "TypeDef": "Composite"
      },
      "521": {
        "TypeFields": [
          {
            "Name": "royalty",
            "TypeName": "Option<Royalty>",
            "TypeId": 184
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "market",
          "DefaultMarketPolicyDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "Royalty",
            "TypeId": 179
          }
        ],
        "TypeDef": "Composite"
      },
      "522": {
        "Variants": [
          {
            "Name": "CreateToken",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "initial_supply",
                "TypeName": "TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "sufficiency",
                "TypeName": "SufficiencyParam<Balance, TokenBalance>",
                "TypeId": 523
              },
              {
                "Name": "cap",
                "TypeName": "Option<TokenCap<TokenBalance>>",
                "TypeId": 223
              },
              {
                "Name": "behavior",
                "TypeName": "Option<TokenMarketBehavior<Royalty>>",
                "TypeId": 197
              },
              {
                "Name": "listing_forbidden",
                "TypeName": "bool",
                "TypeId": 37
              },
              {
                "Name": "freeze_state",
                "TypeName": "Option<FreezeState>",
                "TypeId": 203
              },
              {
                "Name": "attributes",
                "TypeName": "Attributes",
                "TypeId": 513
              },
              {
                "Name": "foreign_params",
                "TypeName": "Option<ForeignTokenCreationParams<ForeignName, ForeignSymbol, Location>>",
                "TypeId": 524
              }
            ],
            "Index": 0
          },
          {
            "Name": "Mint",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "unit_price",
                "TypeName": "Option<Balance>",
                "TypeId": 78
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "mint",
          "DefaultMintParams"
        ],
        "TypeParams": [
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Royalty",
            "TypeId": 179
          },
          {
            "Name": "Attributes",
            "TypeId": 513
          },
          {
            "Name": "ForeignName",
            "TypeId": 190
          },
          {
            "Name": "ForeignSymbol",
            "TypeId": 193
          },
          {
            "Name": "Location",
            "TypeId": 120
          }
        ],
        "TypeDef": "Variant"
      },
      "523": {
        "Variants": [
          {
            "Name": "Insufficient",
            "TypeFields": [
              {
                "Name": "unit_price",
                "TypeName": "Option<Balance>",
                "TypeId": 78
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sufficient",
            "TypeFields": [
              {
                "Name": "minimum_balance",
                "TypeName": "TokenBalance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "mint",
          "SufficiencyParam"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "524": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 525
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 525
          }
        ],
        "TypeDef": "Variant"
      },
      "525": {
        "TypeFields": [
          {
            "Name": "decimal_count",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "name",
            "TypeName": "Name",
            "TypeId": 190
          },
          {
            "Name": "symbol",
            "TypeName": "Symbol",
            "TypeId": 193
          },
          {
            "Name": "location",
            "TypeName": "Option<Location>",
            "TypeId": 148
          },
          {
            "Name": "units_per_second",
            "TypeName": "Option<u128>",
            "TypeId": 78
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "mint",
          "ForeignTokenCreationParams"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 190
          },
          {
            "Name": "Symbol",
            "TypeId": 193
          },
          {
            "Name": "Location",
            "TypeId": 120
          }
        ],
        "TypeDef": "Composite"
      },
      "526": {
        "TypeFields": [
          {
            "Name": "token_id",
            "TypeName": "TokenId",
            "TypeId": 63
          },
          {
            "Name": "amount",
            "TypeName": "TokenBalance",
            "TypeId": 63
          },
          {
            "Name": "keep_alive",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "remove_token_storage",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "burn",
          "DefaultBurnParams"
        ],
        "TypeParams": [
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "527": {
        "Variants": [
          {
            "Name": "Simple",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 0
          },
          {
            "Name": "Operator",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "source",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "transfer",
          "DefaultTransferParams"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "528": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 530
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 529
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "529": {
        "TypeFields": [
          {
            "Name": "account_id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "params",
            "TypeName": "Params",
            "TypeId": 527
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "batch",
          "Recipient"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Params",
            "TypeId": 527
          }
        ],
        "TypeDef": "Composite"
      },
      "530": {
        "TypeId": 529,
        "TypeDef": "Sequence"
      },
      "531": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 533
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 532
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "532": {
        "TypeFields": [
          {
            "Name": "account_id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "params",
            "TypeName": "Params",
            "TypeId": 522
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "batch",
          "Recipient"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Params",
            "TypeId": 522
          }
        ],
        "TypeDef": "Composite"
      },
      "533": {
        "TypeId": 532,
        "TypeDef": "Sequence"
      },
      "534": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 222
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 222
          }
        ],
        "TypeDef": "Variant"
      },
      "535": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 536
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 536
          }
        ],
        "TypeDef": "Variant"
      },
      "536": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "AttributeValue",
            "TypeId": 206
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 63
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "attribute",
          "Attribute"
        ],
        "TypeParams": [
          {
            "Name": "AttributeValue",
            "TypeId": 206
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "537": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 311
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 311
          }
        ],
        "TypeDef": "Variant"
      },
      "538": {
        "Variants": [
          {
            "Name": "CreateToken",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "initial_supply",
                "TypeName": "TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "sufficiency",
                "TypeName": "SufficiencyParam<Balance, TokenBalance>",
                "TypeId": 523
              },
              {
                "Name": "cap",
                "TypeName": "Option<TokenCap<TokenBalance>>",
                "TypeId": 223
              },
              {
                "Name": "behavior",
                "TypeName": "Option<TokenMarketBehavior<Royalty>>",
                "TypeId": 197
              },
              {
                "Name": "listing_forbidden",
                "TypeName": "bool",
                "TypeId": 37
              },
              {
                "Name": "freeze_state",
                "TypeName": "Option<FreezeState>",
                "TypeId": 203
              },
              {
                "Name": "attributes",
                "TypeName": "Attributes",
                "TypeId": 513
              },
              {
                "Name": "foreign_params",
                "TypeName": "Option<ForeignTokenCreationParams<ForeignName, ForeignSymbol, Location>>",
                "TypeId": 524
              }
            ],
            "Index": 0
          },
          {
            "Name": "Mint",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "unit_price",
                "TypeName": "Option<Balance>",
                "TypeId": 78
              }
            ],
            "Index": 1
          },
          {
            "Name": "CreateOrMint",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalance",
                "TypeId": 63
              },
              {
                "Name": "sufficiency",
                "TypeName": "SufficiencyParam<Balance, TokenBalance>",
                "TypeId": 523
              },
              {
                "Name": "cap",
                "TypeName": "Option<TokenCap<TokenBalance>>",
                "TypeId": 223
              },
              {
                "Name": "behavior",
                "TypeName": "Option<TokenMarketBehavior<Royalty>>",
                "TypeId": 197
              },
              {
                "Name": "listing_forbidden",
                "TypeName": "bool",
                "TypeId": 37
              },
              {
                "Name": "freeze_state",
                "TypeName": "Option<FreezeState>",
                "TypeId": 203
              },
              {
                "Name": "attributes",
                "TypeName": "Attributes",
                "TypeId": 513
              },
              {
                "Name": "foreign_params",
                "TypeName": "Option<ForeignTokenCreationParams<ForeignName, ForeignSymbol, Location>>",
                "TypeId": 524
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "policy",
          "mint",
          "FlexibleMintParams"
        ],
        "TypeParams": [
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "TokenBalance",
            "TypeId": 6
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Royalty",
            "TypeId": 179
          },
          {
            "Name": "Attributes",
            "TypeId": 513
          },
          {
            "Name": "ForeignName",
            "TypeId": 190
          },
          {
            "Name": "ForeignSymbol",
            "TypeId": 193
          },
          {
            "Name": "Location",
            "TypeId": 120
          }
        ],
        "TypeDef": "Variant"
      },
      "539": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 540
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 540
          }
        ],
        "TypeDef": "Variant"
      },
      "540": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 89
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "541": {
        "Variants": [
          {
            "Name": "create_fuel_tank",
            "TypeFields": [
              {
                "Name": "descriptor",
                "TypeName": "FuelTankDescriptorOf<T>",
                "TypeId": 542
              }
            ],
            "Index": 0,
            "Docs": [
              "Creates a fuel tank, given a descriptor",
              "",
              "# Errors",
              "",
              "- [`Error::FuelTankAlreadyExists`] if `tank_id` already exists",
              "- [`Error::DuplicateRuleKinds`] if a rule set has multiple rules of the same kind"
            ]
          },
          {
            "Name": "mutate_fuel_tank",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "mutation",
                "TypeName": "T::TankMutation",
                "TypeId": 255
              }
            ],
            "Index": 1,
            "Docs": [
              "Apply `mutation` to fuel tank with `tank_id`.",
              "",
              "# Errors",
              "",
              "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
              "- [`Error::NoPermission`] if `origin` is not the fuel tank owner"
            ]
          },
          {
            "Name": "add_account",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "user_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 2,
            "Docs": [
              "Adds new account for `user_id` to fuel tank at `tank_id`. An account is",
              "required to dispatch calls. A deposit is required, and may be paid by",
              "the user or the fuel tank, depending on the settings.",
              "",
              "### Errors",
              "",
              "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
              "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
              "- [`Error::AccountAlreadyExists`] if account at `user_id` already exists"
            ]
          },
          {
            "Name": "remove_account",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "user_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 3,
            "Docs": [
              "Removes account for `user_id` from fuel tank at `tank_id`. Any deposits",
              "are returned.",
              "",
              "### Errors",
              "",
              "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
              "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
              "- [`Error::AccountNotFound`] if account at `user_id` does not exist"
            ]
          },
          {
            "Name": "remove_account_rule_data",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "user_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4
              },
              {
                "Name": "rule_kind",
                "TypeName": "DispatchRuleKind",
                "TypeId": 270
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove account rule data if it exists. Only callable by the fuel tank's owner. Requires",
              "the fuel tank or the rule set to be frozen.",
              "",
              "### Errors",
              "",
              "- [`Error::FuelTankNotFound`] if fuel tank for `tank_id` doesn't exist",
              "- [`Error::NoPermission`] if called by non-owner",
              "- [`Error::AccountNotFound`] if account does not exist for `user_id`",
              "- [`Error::RuleSetNotFound`] if rule set does not exist for `rule_set_id`",
              "- [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen",
              "- [`Error::RuleNotFound`] if rule does not exist for `rule_kind`"
            ]
          },
          {
            "Name": "dispatch",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::Call>",
                "TypeId": 294
              },
              {
                "Name": "settings",
                "TypeName": "Option<DispatchSettings>",
                "TypeId": 569
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a call using the `tank_id` subject to the rules of `rule_set_id`",
              "",
              "# Errors",
              "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
              "- [`Error::UsageRestricted`] if caller is not part of ruleset whitelist",
              "- [`Error::CallerDoesNotHaveRuleSetTokenBalance`] if caller does not own the tokens to",
              "  use the ruleset for remaining_fee when `pays_remaining_fee` is true",
              "- [`Error::FuelTankOutOfFunds`] if the fuel tank account cannot pay fees"
            ]
          },
          {
            "Name": "dispatch_and_touch",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::Call>",
                "TypeId": 294
              },
              {
                "Name": "settings",
                "TypeName": "Option<DispatchSettings>",
                "TypeId": 569
              }
            ],
            "Index": 6,
            "Docs": [
              "Same as [dispatch](Self::dispatch), but creates an account for `origin` if it does not",
              "exist and is allowed by the fuel tank's `user_account_management` settings.",
              "",
              "# Errors",
              "",
              "Returns the same errors as [dispatch](Self::dispatch) and",
              "[add_account](Self::add_account)"
            ]
          },
          {
            "Name": "mutate_freeze_state",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "rule_set_id",
                "TypeName": "Option<T::RuleSetId>",
                "TypeId": 74
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 7,
            "Docs": [
              "Mutate `is_frozen` state that determines if fuel tank or rule set can be used",
              "",
              "# Errors",
              "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
              "- [`Error::NoPermission`] if caller is not a fuel tank owner"
            ]
          },
          {
            "Name": "insert_rule_set",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4
              },
              {
                "Name": "rules",
                "TypeName": "RuleDescriptorsOf<T>",
                "TypeId": 564
              }
            ],
            "Index": 8,
            "Docs": [
              "Insert a new rule set for `tank_id` and `rule_set_id`. It can be a new rule set",
              "or it can replace an existing one. If it is replacing a rule set, a rule that is storing",
              "data on any accounts cannot be removed. Use [Self::remove_account_rule_data] to remove",
              "the data first. If a rule is being replaced, it will be mutated with the new parameters,",
              "and it will maintain any persistent data it already has.",
              "",
              "This is only callable by the fuel tank's owner.",
              "### Errors",
              "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
              "- [`Error::NoPermission`] if caller is not the fuel tank owner",
              "- [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen",
              "- [`Error::CannotRemoveRuleThatIsStoringAccountData`] if removing a rule that is storing",
              "  account data",
              "- [`Error::MaxRuleSetsExceeded`] if max number of rule sets was exceeded",
              "- [`Error::DuplicateRuleKinds`] if adding a rule set with multiple rules of the same",
              "  kind"
            ]
          },
          {
            "Name": "remove_rule_set",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove rule set for `tank_id` and `rule_set_id`. A rule that is storing data on",
              "any accounts cannot be removed. Use [Self::remove_account_rule_data] to remove the",
              "data first. This is only callable by the fuel tank's owner.",
              "# Errors",
              "",
              "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
              "- [`Error::NoPermission`] if caller is not the fuel tank owner",
              "- [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen",
              "- [`Error::CannotRemoveRuleThatIsStoringAccountData`] if removing a rule that is storing",
              "  account data"
            ]
          },
          {
            "Name": "batch_add_account",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "user_ids",
                "TypeName": "BatchUserAccountsOf<T>",
                "TypeId": 571
              }
            ],
            "Index": 10,
            "Docs": [
              "Similar to add_account but takes a list of",
              "[`AccountId`](frame_system::Config::AccountId)s to insert into a fuel tank.",
              "### Errors",
              "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
              "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
              "- [`Error::AccountAlreadyExists`] if account at `user_id` already exists"
            ]
          },
          {
            "Name": "batch_remove_account",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "user_ids",
                "TypeName": "BatchUserAccountsOf<T>",
                "TypeId": 571
              }
            ],
            "Index": 11,
            "Docs": [
              "Similar to remove_account but takes a list of",
              "[`AccountId`](frame_system::Config::AccountId)s to remove from a fuel tank.",
              "### Errors",
              "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
              "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
              "- [`Error::AccountNotFound`] if account at `user_id` does not exist"
            ]
          },
          {
            "Name": "force_set_consumption",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "user_id",
                "TypeName": "Option<LookupSourceOf<T>>",
                "TypeId": 537
              },
              {
                "Name": "rule_set_id",
                "TypeName": "T::RuleSetId",
                "TypeId": 4
              },
              {
                "Name": "consumption",
                "TypeName": "ConsumptionOf<T>",
                "TypeId": 271
              }
            ],
            "Index": 12,
            "Docs": [
              "Force set the fuel tank consumption",
              "If `user_id` is [`Some`], it sets the consumption for that account.",
              "If it is [`None`], it sets the consumption on the fuel tank directly.",
              "",
              "# Errors",
              "",
              "- [`Error::AccountNotFound`] if `user_id` is `Some` and account does not exist",
              "- [`Error::FuelTankNotFound`] if tank_id does not exist",
              "- [`Error::NoPermission`] if caller is not ForceOrigin or fuel tank owner",
              "- [`Error::InvalidRuleSet`] if `rule_set_id` does not exist",
              "- [`Error::MissingRequiredRule`] if `rule_set_id` does not have the required role"
            ]
          },
          {
            "Name": "destroy_fuel_tank",
            "TypeFields": [
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 13,
            "Docs": [
              "Destroy the fuel tank by scheduling the deletion for `on_finalize` to execute",
              "Only callable by owner",
              "The fuel tank must be frozen",
              "Can only be destroyed if all accounts are removed",
              "",
              "# Errors",
              "",
              "- [`Error::FuelTankNotFound`] if tank_id does not exist",
              "- [`Error::NoPermission`] if caller is not owner",
              "- [`Error::DestroyUnfrozenTank`] if tank is not frozen",
              "- [`Error::DestroyWithExistingAccounts`] if there are still accounts on the tank"
            ]
          },
          {
            "Name": "force_create_fuel_tank",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "descriptor",
                "TypeName": "FuelTankDescriptorOf<T>",
                "TypeId": 542
              }
            ],
            "Index": 14,
            "Docs": [
              "Force creates a fuel tank",
              "",
              "# Errors",
              "",
              "- [`Error::FuelTankAlreadyExists`] if `tank_id` already exists"
            ]
          },
          {
            "Name": "force_batch_add_account",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "tank_id",
                "TypeName": "LookupSourceOf<T>",
                "TypeId": 311
              },
              {
                "Name": "user_ids",
                "TypeName": "BatchUserAccountsOf<T>",
                "TypeId": 571
              }
            ],
            "Index": 15,
            "Docs": [
              "Sets the account storage for give tank_id and account"
            ]
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "542": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "Name",
            "TypeId": 252
          },
          {
            "Name": "user_account_management",
            "TypeName": "Option<UserAccountManagement>",
            "TypeId": 258
          },
          {
            "Name": "rule_sets",
            "TypeName": "RuleSetDescriptors",
            "TypeId": 543
          },
          {
            "Name": "provides_deposit",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "account_rules",
            "TypeName": "AccountRuleSetDescriptors",
            "TypeId": 262
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "FuelTankDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 252
          },
          {
            "Name": "RuleSetDescriptors",
            "TypeId": 543
          },
          {
            "Name": "AccountRuleSetDescriptors",
            "TypeId": 262
          }
        ],
        "TypeDef": "Composite"
      },
      "543": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 566
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 544
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "544": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<DispatchRuleDescriptor, MaxRules>",
            "TypeId": 564
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "RuleSetDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "DispatchRuleDescriptor",
            "TypeId": 545
          },
          {
            "Name": "MaxRules",
            "TypeId": 563
          }
        ],
        "TypeDef": "Composite"
      },
      "545": {
        "Variants": [
          {
            "Name": "WhitelistedCallers",
            "TypeFields": [
              {
                "TypeName": "WhitelistedCallersRuleOf<T>",
                "TypeId": 264
              }
            ],
            "Index": 0
          },
          {
            "Name": "WhitelistedCollections",
            "TypeFields": [
              {
                "TypeName": "WhitelistedCollectionsRuleOf<T>",
                "TypeId": 546
              }
            ],
            "Index": 1
          },
          {
            "Name": "MaxFuelBurnPerTransaction",
            "TypeFields": [
              {
                "TypeName": "MaxFuelBurnPerTransactionRuleOf<T>",
                "TypeId": 549
              }
            ],
            "Index": 2
          },
          {
            "Name": "UserFuelBudget",
            "TypeFields": [
              {
                "TypeName": "UserFuelBudgetRuleDescriptorOf<T>",
                "TypeId": 550
              }
            ],
            "Index": 3
          },
          {
            "Name": "TankFuelBudget",
            "TypeFields": [
              {
                "TypeName": "TankFuelBudgetRuleDescriptorOf<T>",
                "TypeId": 552
              }
            ],
            "Index": 4
          },
          {
            "Name": "RequireToken",
            "TypeFields": [
              {
                "TypeName": "RequireTokenRuleOf<T>",
                "TypeId": 268
              }
            ],
            "Index": 5
          },
          {
            "Name": "PermittedCalls",
            "TypeFields": [
              {
                "TypeName": "PermittedCallsRuleOf<T>",
                "TypeId": 553
              }
            ],
            "Index": 6
          },
          {
            "Name": "PermittedExtrinsics",
            "TypeFields": [
              {
                "TypeName": "PermittedExtrinsicsDescriptorOf<T>",
                "TypeId": 559
              }
            ],
            "Index": 7
          },
          {
            "Name": "WhitelistedPallets",
            "TypeFields": [
              {
                "TypeName": "WhitelistedPalletsDescriptorOf<T>",
                "TypeId": 562
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "DispatchRuleDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant"
      },
      "546": {
        "TypeFields": [
          {
            "TypeName": "BoundedBTreeSet<CollectionId, Max>",
            "TypeId": 548
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "whitelisted_collections",
          "WhitelistedCollectionsRule"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 6
          },
          {
            "Name": "Max",
            "TypeId": 547
          }
        ],
        "TypeDef": "Composite"
      },
      "547": {
        "Path": [
          "enjin_runtime",
          "MaxCollectionIds"
        ],
        "TypeDef": "Composite"
      },
      "548": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 88
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "549": {
        "TypeFields": [
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "max_fuel_burn_per_tx",
          "MaxFuelBurnPerTransactionRule"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "550": {
        "TypeFields": [
          {
            "TypeName": "Budget",
            "TypeId": 551
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "user_fuel_budget",
          "UserFuelBudgetRuleDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "Budget",
            "TypeId": 551
          }
        ],
        "TypeDef": "Composite"
      },
      "551": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "reset_period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "Budget"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "552": {
        "TypeFields": [
          {
            "TypeName": "Budget",
            "TypeId": 551
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "tank_fuel_budget",
          "TankFuelBudgetRuleDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "Budget",
            "TypeId": 551
          }
        ],
        "TypeDef": "Composite"
      },
      "553": {
        "TypeFields": [
          {
            "TypeName": "BoundedBTreeSet<EncodedCall, Max>",
            "TypeId": 556
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "permitted_calls",
          "PermittedCallsRule"
        ],
        "TypeParams": [
          {
            "Name": "EncodedCall",
            "TypeId": 554
          },
          {
            "Name": "Max",
            "TypeId": 555
          }
        ],
        "TypeDef": "Composite"
      },
      "554": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "555": {
        "Path": [
          "enjin_runtime",
          "MaxCallFilters"
        ],
        "TypeDef": "Composite"
      },
      "556": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 557
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 554
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "557": {
        "TypeFields": [
          {
            "TypeId": 558
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 554
          }
        ],
        "TypeDef": "Composite"
      },
      "558": {
        "TypeId": 554,
        "TypeDef": "Sequence"
      },
      "559": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<Call, Max>",
            "TypeId": 561
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "permitted_extrinsics",
          "PermittedExtrinsicsDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "Call",
            "TypeId": 294
          },
          {
            "Name": "Max",
            "TypeId": 560
          }
        ],
        "TypeDef": "Composite"
      },
      "560": {
        "Path": [
          "enjin_runtime",
          "MaxPermittedExtrinsicLength"
        ],
        "TypeDef": "Composite"
      },
      "561": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 416
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 294
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "562": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<Call, Max>",
            "TypeId": 561
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "whitelisted_pallets",
          "WhitelistedPalletsDescriptor"
        ],
        "TypeParams": [
          {
            "Name": "Call",
            "TypeId": 294
          },
          {
            "Name": "Max",
            "TypeId": 560
          }
        ],
        "TypeDef": "Composite"
      },
      "563": {
        "Path": [
          "enjin_runtime",
          "MaxRulesPerSet"
        ],
        "TypeDef": "Composite"
      },
      "564": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 565
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 545
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "565": {
        "TypeId": 545,
        "TypeDef": "Sequence"
      },
      "566": {
        "TypeFields": [
          {
            "TypeId": 567
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 544
          }
        ],
        "TypeDef": "Composite"
      },
      "567": {
        "TypeId": 568,
        "TypeDef": "Sequence"
      },
      "568": {
        "TypeIds": [
          4,
          544
        ],
        "TypeDef": "Tuple"
      },
      "569": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 570
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 570
          }
        ],
        "TypeDef": "Variant"
      },
      "570": {
        "TypeFields": [
          {
            "Name": "use_none_origin",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "pays_remaining_fee",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "DispatchSettings"
        ],
        "TypeDef": "Composite"
      },
      "571": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 375
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 311
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "572": {
        "Variants": [
          {
            "Name": "pause_extrinsic",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::Call>",
                "TypeId": 294
              },
              {
                "Name": "pause_only_extrinsic",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 0,
            "Docs": [
              "Pause execution of extrinsic(s)",
              "",
              "The values of pallet_name and extrinsic_name are extracted from the `call` parameter.",
              "Ex : To pause the multi_tokens pallet, the `call` parameter should be of the type",
              "`pallet_multi_tokens::Call` If `pause_only_extrinsic` is true, then only the extrinsic",
              "is paused, else the entire pallet is paused.",
              "",
              "# Errors",
              "",
              "- [`Error::CannotProcessInput`] if the pallet name or extrinsic name is faulty.",
              "- [`Error::CannotPauseSelf`] if the pallet name is the same as the name of this pallet."
            ]
          },
          {
            "Name": "resume_extrinsic",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::Call>",
                "TypeId": 294
              },
              {
                "Name": "resume_only_extrinsic",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 1,
            "Docs": [
              "Resume execution of extrinsic(s)",
              "",
              "The values of pallet_name and extrinsic_name are extracted from the `call` parameter.",
              "Ex : To resume the multi_tokens pallet, the `call` parameter should be of the type",
              "`pallet_multi_tokens::Call` If `pause_only_extrinsic` is true, then only the extrinsic",
              "is resumed, else the entire pallet is resumed.",
              "",
              "# Errors",
              "",
              "- [`Error::CannotProcessInput`] if the pallet name or extrinsic name is faulty."
            ]
          }
        ],
        "Path": [
          "pallet_extrinsic_pause",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "573": {
        "Variants": [
          {
            "Name": "create_listing",
            "TypeFields": [
              {
                "Name": "make_asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 181
              },
              {
                "Name": "take_asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 181
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "price",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "salt",
                "TypeName": "Salt<T>",
                "TypeId": 278
              },
              {
                "Name": "auction_data",
                "TypeName": "Option<AuctionDataOf<T>>",
                "TypeId": 574
              }
            ],
            "Index": 0,
            "Docs": [
              "Places a sell order. Requires `make_asset_id` or `take_asset_id` to be a currency.",
              "The id for the listing is generated by hashing the encoded bytes of the listing.",
              "",
              "# Parameters",
              "",
              "- `make_asset_id`: The id of the asset being sold",
              "- `take_asset_id`: The id of the asset being requested",
              "- `amount`: The number of units being sold",
              "- `price`: The requested price for each unit. If it's an auction, this is the minimum",
              "  bid",
              "- `salt`: Can be used to differentiate listings",
              "- `auction_data`: Including this makes the listing an auction",
              "",
              "# Errors",
              "",
              "- [`Error::InvalidAuctionStart`] if the start is less than the current block +",
              "  `T::ListingActiveDelay`",
              "- [`Error::NoCurrency`] Neither the make or take side is considered a currency",
              "- [`Error::ListingForbidden`] if make or take side tokens are not allowed to be listed",
              "- [`Error::CurrencyNotAllowedAsRoyalty`] if currency cannot be used as a royalty",
              "- [`Error::LowBaseCurrencyBalance`] if base currency balance is too low",
              "- [`Error::LowTokenBalance`] token balance is too low for reserve",
              "- [`Error::ListingAlreadyExists`] if a listing with the same ID already exists"
            ]
          },
          {
            "Name": "cancel_listing",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancels the listing with `listing_id`. Only callable by the seller.",
              "",
              "# Parameters",
              "",
              "- `listing_id`: The ID of the listing to cancel",
              "",
              "# Errors",
              "",
              "- [`Error::ListingNotFound`] if the listing under `listing_id` does not exist",
              "- [`Error::NoPermission`] if the listing seller is not the caller, `origin`"
            ]
          },
          {
            "Name": "fill_listing",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Fills a fixed price listing. This will execute immediately.",
              "# Parameters",
              "",
              "- `listing_id`: The id for the listing to buy from",
              "- `amount`: The number of units purchased",
              "",
              "# Errors",
              "",
              "- [`Error::ListingNotFound`] if the listing under `listing_id` does not exist",
              "- [`Error::BuyerIsSeller`] if the buyer is the seller of the listing",
              "- [`Error::ListingIsWrongType`] if the listing is not under auction",
              "- [`Error::InvalidAmount`] if the amount that still needs to be filled is greater than",
              "  `amount`",
              "- [`Error::ListingNotActive`] if the listing has not passed the `ListingActiveDelay` yet",
              "- [`Error::TakeValueUnderMinimum`] if the listings `take` value is under the minimum",
              "  required",
              "- [`Error::LowTokenBalance`] if the buyer does not have enough tokens for reserve"
            ]
          },
          {
            "Name": "place_bid",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "price",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 3,
            "Docs": [
              "Places a bid on a listing. The listing must be an auction, and it must be currently",
              "active.",
              "",
              "# Parameters",
              "",
              "- `listing_id`: The id for the listing to buy from",
              "- `price`: The price for a single unit",
              "",
              "# Errors",
              "",
              "- [`Error::ListingNotFound`] if listing under `listing_id` does not exist",
              "- [`Error::BuyerIsSeller`] if the bidder is the seller of the listing",
              "- [`Error::InactiveAuction`] if listing operates outside of specified start and end",
              "  block",
              "- [`Error::InvalidPrice`] if price is less than minimum_price for a bid"
            ]
          },
          {
            "Name": "finalize_auction",
            "TypeFields": [
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "Finalize the auction with id: `listing_id`. This will end the auction and transfer",
              "funds. It fails if the auction is not over.",
              "",
              "# Parameters",
              "",
              "- `listing_id`: The ID for the listing to finalize",
              "",
              "# Errors",
              "",
              "- [`Error::ListingNotFound`] if listing under `listing_id` does not exist",
              "- [`Error::ListingIsWrongType`] if listing is not an auction",
              "- [`Error::AuctionNotOver`] if the auction has not finished yet",
              "- [`Error::TakeValueUnderMinimum`] if the take value is less than the minimum required"
            ]
          },
          {
            "Name": "set_protocol_fee",
            "TypeFields": [
              {
                "Name": "protocol_fee",
                "TypeName": "Perbill",
                "TypeId": 42
              }
            ],
            "Index": 5,
            "Docs": [
              "Change the protocol fee to `protocol_fee`. Fails if `origin` is invalid.",
              "",
              "#Parameters",
              "",
              "- `protocol_fee`: Percentage of fee to set"
            ]
          },
          {
            "Name": "force_create_listing",
            "TypeFields": [
              {
                "Name": "seller",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "make_asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 181
              },
              {
                "Name": "take_asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 181
              },
              {
                "Name": "amount",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "price",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "salt",
                "TypeName": "Salt<T>",
                "TypeId": 278
              },
              {
                "Name": "auction_data",
                "TypeName": "Option<AuctionDataOf<T>>",
                "TypeId": 574
              },
              {
                "Name": "deposit_backer",
                "TypeName": "Option<<T::Lookup as StaticLookup>::Source>",
                "TypeId": 537
              }
            ],
            "Index": 6,
            "Docs": [
              "Force create a listing. This is only callable by the [`Config::ForceOrigin`].",
              "",
              "# Parameters",
              "",
              "Mostly the same as [`Self::create_listing`], but `deposit_backer` can be included to pay",
              "a deposit if `seller` does not have enough.",
              "",
              "# Errors",
              "",
              "Same as [`Self::create_listing`], except `BadOrigin` if the origin is not",
              "[`Config::ForceOrigin`]"
            ]
          },
          {
            "Name": "force_place_bid",
            "TypeFields": [
              {
                "Name": "bidder",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 311
              },
              {
                "Name": "listing_id",
                "TypeName": "ListingIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "price",
                "TypeName": "TokenBalanceOf<T>",
                "TypeId": 63
              },
              {
                "Name": "funds_backer",
                "TypeName": "Option<<T::Lookup as StaticLookup>::Source>",
                "TypeId": 537
              }
            ],
            "Index": 7,
            "Docs": [
              "Same as [create_listing](Self::place_bid), but allows specifying the `bidder` and can",
              "place a bid in an inactive auction. Only callable by [`Config::ForceOrigin`]. If",
              "`funds_backer` is `Some`, it will transfer balance if `bidder` does not have enough."
            ]
          }
        ],
        "Path": [
          "pallet_marketplace",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "574": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 281
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 281
          }
        ],
        "TypeDef": "Variant"
      },
      "575": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>",
                "TypeId": 576
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 306
              }
            ],
            "Index": 0,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>",
                "TypeId": 576
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 306
              }
            ],
            "Index": 1,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported.",
              "",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ]
          }
        ],
        "Path": [
          "pallet_beefy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "576": {
        "TypeFields": [
          {
            "Name": "first",
            "TypeName": "VoteMessage<Number, Id, Signature>",
            "TypeId": 579
          },
          {
            "Name": "second",
            "TypeName": "VoteMessage<Number, Id, Signature>",
            "TypeId": 579
          }
        ],
        "Path": [
          "sp_consensus_beefy",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "Number",
            "TypeId": 4
          },
          {
            "Name": "Id",
            "TypeId": 577
          },
          {
            "Name": "Signature",
            "TypeId": 578
          }
        ],
        "TypeDef": "Composite"
      },
      "577": {
        "TypeFields": [
          {
            "TypeName": "ecdsa::Public",
            "TypeId": 478
          }
        ],
        "Path": [
          "sp_consensus_beefy",
          "crypto",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "578": {
        "TypeFields": [
          {
            "TypeName": "ecdsa::Signature",
            "TypeId": 482
          }
        ],
        "Path": [
          "sp_consensus_beefy",
          "crypto",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "579": {
        "TypeFields": [
          {
            "Name": "commitment",
            "TypeName": "Commitment<Number>",
            "TypeId": 580
          },
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 577
          },
          {
            "Name": "signature",
            "TypeName": "Signature",
            "TypeId": 578
          }
        ],
        "Path": [
          "sp_consensus_beefy",
          "VoteMessage"
        ],
        "TypeParams": [
          {
            "Name": "Number",
            "TypeId": 4
          },
          {
            "Name": "Id",
            "TypeId": 577
          },
          {
            "Name": "Signature",
            "TypeId": 578
          }
        ],
        "TypeDef": "Composite"
      },
      "580": {
        "TypeFields": [
          {
            "Name": "payload",
            "TypeName": "Payload",
            "TypeId": 581
          },
          {
            "Name": "block_number",
            "TypeName": "TBlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validator_set_id",
            "TypeName": "ValidatorSetId",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_consensus_beefy",
          "commitment",
          "Commitment"
        ],
        "TypeParams": [
          {
            "Name": "TBlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "581": {
        "TypeFields": [
          {
            "TypeName": "Vec<(BeefyPayloadId, Vec<u8>)>",
            "TypeId": 582
          }
        ],
        "Path": [
          "sp_consensus_beefy",
          "payload",
          "Payload"
        ],
        "TypeDef": "Composite"
      },
      "582": {
        "TypeId": 583,
        "TypeDef": "Sequence"
      },
      "583": {
        "TypeIds": [
          584,
          13
        ],
        "TypeDef": "Tuple"
      },
      "584": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "585": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 586
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 586
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 586
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 586
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "586": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 287
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 287
          }
        ],
        "TypeDef": "Variant"
      },
      "587": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "588": {
        "Variants": [
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 123
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T, I>>",
                "TypeId": 589
              }
            ],
            "Index": 0,
            "Docs": [
              "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `poll_index`: The index of the poll to vote for.",
              "- `vote`: The vote configuration.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter has voted on."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 292
              },
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 591
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account for a",
              "particular class of polls.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
              "  to this function are required.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter delegating to has",
              "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 292
              }
            ],
            "Index": 2,
            "Docs": [
              "Undelegate the voting power of the sending account for a particular class of polls.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued has passed.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "- `class`: The class of polls to remove the delegation from.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter delegating to has",
              "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 292
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove the lock caused by prior voting/delegating which has expired within a particular",
              "class.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `class`: The class of polls to unlock.",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "Option<ClassOf<T, I>>",
                "TypeId": 592
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove a vote for a poll.",
              "",
              "If:",
              "- the poll was cancelled, or",
              "- the poll is ongoing, or",
              "- the poll has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the poll has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for poll `index`.",
              "",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
              "  which have finished or are cancelled, this must be `Some`.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 292
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Remove a vote for a poll.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the poll was cancelled, because the voter lost the poll or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for poll",
              "  `index`.",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: The class of the poll.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "589": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 590
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "SplitAbstain",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "abstain",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "590": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "591": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "592": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 292
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 292
          }
        ],
        "TypeDef": "Variant"
      },
      "593": {
        "Variants": [
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "proposal_origin",
                "TypeName": "Box<PalletsOriginOf<T>>",
                "TypeId": 417
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 293
              },
              {
                "Name": "enactment_moment",
                "TypeName": "DispatchTime<T::BlockNumber>",
                "TypeId": 594
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a referendum on a privileged action.",
              "",
              "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
              "  available.",
              "- `proposal_origin`: The origin from which the proposal should be executed.",
              "- `proposal`: The proposal.",
              "- `enactment_moment`: The moment that the proposal should be enacted.",
              "",
              "Emits `Submitted`."
            ]
          },
          {
            "Name": "place_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Post the Decision Deposit for a referendum.",
              "",
              "- `origin`: must be `Signed` and the account must have funds available for the",
              "  referendum's track's Decision Deposit.",
              "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
              "  posted.",
              "",
              "Emits `DecisionDepositPlaced`."
            ]
          },
          {
            "Name": "refund_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Refund the Decision Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `DecisionDepositRefunded`."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel an ongoing referendum.",
              "",
              "- `origin`: must be the `CancelOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Cancelled`."
            ]
          },
          {
            "Name": "kill",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel an ongoing referendum and slash the deposits.",
              "",
              "- `origin`: must be the `KillOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Killed` and `DepositSlashed`."
            ]
          },
          {
            "Name": "nudge_referendum",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Advance a referendum onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `index`: the referendum to be advanced."
            ]
          },
          {
            "Name": "one_fewer_deciding",
            "TypeFields": [
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 292
              }
            ],
            "Index": 6,
            "Docs": [
              "Advance a track onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `track`: the track to be advanced.",
              "",
              "Action item for when there is now one fewer referendum in the deciding phase and the",
              "`DecidingCount` is not yet updated. This means that we should either:",
              "- begin deciding another referendum (and leave `DecidingCount` alone); or",
              "- decrement `DecidingCount`."
            ]
          },
          {
            "Name": "refund_submission_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Refund the Submission Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `SubmissionDepositRefunded`."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<PreimageHash>",
                "TypeId": 595
              }
            ],
            "Index": 8,
            "Docs": [
              "Set or clear metadata of a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
              "  metadata of a finished referendum.",
              "- `index`:  The index of a referendum to set or clear metadata for.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "594": {
        "Variants": [
          {
            "Name": "At",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "After",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "schedule",
          "DispatchTime"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "595": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "596": {
        "Variants": [
          {
            "Name": "whitelist_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "PreimageHash",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "remove_whitelisted_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "PreimageHash",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "dispatch_whitelisted_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "PreimageHash",
                "TypeId": 12
              },
              {
                "Name": "call_encoded_len",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "call_weight_witness",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2
          },
          {
            "Name": "dispatch_whitelisted_call_with_preimage",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 294
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "597": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 0,
            "Docs": [
              "Introduce a new member.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of non-member which will become a member.",
              "- `rank`: The rank to give the new member.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "promote_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 1,
            "Docs": [
              "Increment the rank of an existing member by one.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of existing member.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "demote_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 2,
            "Docs": [
              "Decrement the rank of an existing member by one. If the member is already at rank zero,",
              "then they are removed entirely.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of existing member of rank greater than zero.",
              "",
              "Weight: `O(1)`, less if the member's index is highest in its rank."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "min_rank",
                "TypeName": "Rank",
                "TypeId": 292
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove the member entirely.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of existing member of rank greater than zero.",
              "- `min_rank`: The rank of the member or greater.",
              "",
              "Weight: `O(min_rank)`."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "poll",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "aye",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 4,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "- `origin`: Must be `Signed` by a member account.",
              "- `poll`: Index of a poll which is ongoing.",
              "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.",
              "",
              "Transaction fees are be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "",
              "Weight: `O(1)`, less if there was no previous vote on the poll by the member."
            ]
          },
          {
            "Name": "cleanup_poll",
            "TypeFields": [
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "max",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Remove votes from the given poll. It must have ended.",
              "",
              "- `origin`: Must be `Signed` by any account.",
              "- `poll_index`: Index of a poll which is completed and for which votes continue to",
              "  exist.",
              "- `max`: Maximum number of vote items from remove in this call.",
              "",
              "Transaction fees are waived if the operation is successful.",
              "",
              "Weight `O(max)` (less if there are fewer items to remove than `max`)."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "598": {
        "Variants": [
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "proposal_origin",
                "TypeName": "Box<PalletsOriginOf<T>>",
                "TypeId": 417
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 293
              },
              {
                "Name": "enactment_moment",
                "TypeName": "DispatchTime<T::BlockNumber>",
                "TypeId": 594
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a referendum on a privileged action.",
              "",
              "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
              "  available.",
              "- `proposal_origin`: The origin from which the proposal should be executed.",
              "- `proposal`: The proposal.",
              "- `enactment_moment`: The moment that the proposal should be enacted.",
              "",
              "Emits `Submitted`."
            ]
          },
          {
            "Name": "place_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Post the Decision Deposit for a referendum.",
              "",
              "- `origin`: must be `Signed` and the account must have funds available for the",
              "  referendum's track's Decision Deposit.",
              "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
              "  posted.",
              "",
              "Emits `DecisionDepositPlaced`."
            ]
          },
          {
            "Name": "refund_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Refund the Decision Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `DecisionDepositRefunded`."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel an ongoing referendum.",
              "",
              "- `origin`: must be the `CancelOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Cancelled`."
            ]
          },
          {
            "Name": "kill",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel an ongoing referendum and slash the deposits.",
              "",
              "- `origin`: must be the `KillOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Killed` and `DepositSlashed`."
            ]
          },
          {
            "Name": "nudge_referendum",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Advance a referendum onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `index`: the referendum to be advanced."
            ]
          },
          {
            "Name": "one_fewer_deciding",
            "TypeFields": [
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 292
              }
            ],
            "Index": 6,
            "Docs": [
              "Advance a track onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `track`: the track to be advanced.",
              "",
              "Action item for when there is now one fewer referendum in the deciding phase and the",
              "`DecidingCount` is not yet updated. This means that we should either:",
              "- begin deciding another referendum (and leave `DecidingCount` alone); or",
              "- decrement `DecidingCount`."
            ]
          },
          {
            "Name": "refund_submission_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Refund the Submission Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `SubmissionDepositRefunded`."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<PreimageHash>",
                "TypeId": 595
              }
            ],
            "Index": 8,
            "Docs": [
              "Set or clear metadata of a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
              "  metadata of a finished referendum.",
              "- `index`:  The index of a referendum to set or clear metadata for.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "599": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a registrar to the system.",
              "",
              "The dispatch origin for this call must be `T::RegistrarOrigin`.",
              "",
              "- `account`: the account of the registrar.",
              "",
              "Emits `RegistrarAdded` if successful.",
              "",
              "## Complexity",
              "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                "TypeId": 600
              }
            ],
            "Index": 1,
            "Docs": [
              "Set an account's identity information and reserve the appropriate deposit.",
              "",
              "If the account already has identity information, the deposit is taken as part payment",
              "for the new deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `info`: The identity information.",
              "",
              "Emits `IdentitySet` if successful.",
              "",
              "## Complexity",
              "- `O(X + X' + R)`",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
              "  - where `R` judgements-count (registrar-count-bounded)"
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 633
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the sub-accounts of the sender.",
              "",
              "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
              "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "- `subs`: The identity's (new) sub-accounts.",
              "",
              "## Complexity",
              "- `O(P + S)`",
              "  - where `P` old-subs-count (hard- and deposit-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded)."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Clear an account's identity info and all sub-accounts and return all deposits.",
              "",
              "Payment: All reserved balances on the account are returned.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "Emits `IdentityCleared` if successful.",
              "",
              "## Complexity",
              "- `O(R + S + X)`",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 123
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "Request a judgement from a registrar.",
              "",
              "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
              "given.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is requested.",
              "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
              "",
              "```nocompile",
              "Self::registrars().get(reg_index).unwrap().fee",
              "```",
              "",
              "Emits `JudgementRequested` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel a previous request.",
              "",
              "Payment: A previously reserved deposit is returned on success.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
              "",
              "Emits `JudgementUnrequested` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 123
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the fee required for a judgement to be requested from a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fee`: the new fee.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 123
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 7,
            "Docs": [
              "Change the account associated with a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `new`: the new account ID.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 123
              },
              {
                "Name": "fields",
                "TypeName": "IdentityFields",
                "TypeId": 635
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the field information for a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fields`: the fields that the registrar concerns themselves with.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 123
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 637
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "Provide a judgement for an account's identity.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `reg_index`.",
              "",
              "- `reg_index`: the index of the registrar whose judgement is being made.",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
              "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
              "",
              "Emits `JudgementGiven` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 10,
            "Docs": [
              "Remove an account's identity and sub-account information and slash the deposits.",
              "",
              "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
              "`Slash`. Verification request deposits are not returned; they should be cancelled",
              "manually using `cancel_request`.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`.",
              "",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "",
              "Emits `IdentityKilled` if successful.",
              "",
              "## Complexity",
              "- `O(R + S + X)`",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 603
              }
            ],
            "Index": 11,
            "Docs": [
              "Add the given account to the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 603
              }
            ],
            "Index": 12,
            "Docs": [
              "Alter the associated name of the given sub-account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              }
            ],
            "Index": 13,
            "Docs": [
              "Remove the given account from the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Remove the sender as a sub-account.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender (*not* the original depositor).",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "super-identity.",
              "",
              "NOTE: This should not normally be used, but is provided in the case that the non-",
              "controller of an account is maliciously registered as a sub-account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "600": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 601
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 603
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 603
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 603
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 603
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 603
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 632
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 603
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 603
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "601": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 631
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 602
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "602": {
        "TypeIds": [
          603,
          603
        ],
        "TypeDef": "Tuple"
      },
      "603": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 604
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 605
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 584
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 606
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 17
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 607
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 608
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 609
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 138
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 610
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 611
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 612
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 613
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 614
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 615
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 616
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 33
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 617
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 618
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 619
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 126
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 620
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 621
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 622
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 623
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 624
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 625
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 626
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 627
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 628
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 629
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 630
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "604": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "605": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "606": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "607": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "608": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "609": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "610": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "611": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "612": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "613": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "614": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "615": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "616": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "617": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "618": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "619": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "620": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "621": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "622": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "623": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "624": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "625": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "626": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "627": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "628": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "629": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "630": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "631": {
        "TypeId": 602,
        "TypeDef": "Sequence"
      },
      "632": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 126
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 126
          }
        ],
        "TypeDef": "Variant"
      },
      "633": {
        "TypeId": 634,
        "TypeDef": "Sequence"
      },
      "634": {
        "TypeIds": [
          0,
          603
        ],
        "TypeDef": "Tuple"
      },
      "635": {
        "TypeFields": [
          {
            "TypeName": "IdentityField",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 636
          }
        ],
        "TypeDef": "Composite"
      },
      "636": {
        "Variants": [
          {
            "Name": "Display",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Legal",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Web",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Riot",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Email",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "PgpFingerprint",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Image",
            "TypeFields": null,
            "Index": 64
          },
          {
            "Name": "Twitter",
            "TypeFields": null,
            "Index": 128
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityField"
        ],
        "TypeDef": "Variant"
      },
      "637": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "638": {
        "Variants": [
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 123
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T, I>>",
                "TypeId": 589
              },
              {
                "Name": "currency",
                "TypeName": "VoteCurrency<TokenIdOf<T, I>>",
                "TypeId": 639
              }
            ],
            "Index": 0,
            "Docs": [
              "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `poll_index`: The index of the poll to vote for.",
              "- `vote`: The vote configuration.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter has voted on."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "Option<ClassOf<T, I>>",
                "TypeId": 592
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a vote for a poll.",
              "",
              "If:",
              "- the poll was cancelled, or",
              "- the poll is ongoing, or",
              "- the poll has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the poll has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for poll `index`.",
              "",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
              "  which have finished or are cancelled, this must be `Some`.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 292
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Remove a vote for a poll.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the poll was cancelled, because the voter lost the poll or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for poll",
              "  `index`.",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: The class of the poll.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 292
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 311
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove the lock caused by prior voting/delegating which has expired within a particular",
              "class.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `class`: The class of polls to unlock.",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          }
        ],
        "Path": [
          "pallet_vote_manager",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "639": {
        "Variants": [
          {
            "Name": "Enj",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SEnj",
            "TypeFields": [
              {
                "TypeName": "TokenId",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_vote_manager",
          "types",
          "VoteCurrency"
        ],
        "TypeParams": [
          {
            "Name": "TokenId",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "640": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "641": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "support",
            "TypeName": "Votes",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Votes",
            "TypeId": 6
          },
          {
            "Name": "Total"
          }
        ],
        "TypeDef": "Composite"
      },
      "642": {
        "Variants": [
          {
            "Name": "CallWhitelisted",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "PreimageHash",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "WhitelistedCallRemoved",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "PreimageHash",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "WhitelistedCallDispatched",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "PreimageHash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResultWithPostInfo",
                "TypeId": 643
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "643": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 644
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 646
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 644
          },
          {
            "Name": "E",
            "TypeId": 646
          }
        ],
        "TypeDef": "Variant"
      },
      "644": {
        "TypeFields": [
          {
            "Name": "actual_weight",
            "TypeName": "Option<Weight>",
            "TypeId": 645
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 24
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PostDispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "645": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Variant"
      },
      "646": {
        "TypeFields": [
          {
            "Name": "post_info",
            "TypeName": "Info",
            "TypeId": 644
          },
          {
            "Name": "error",
            "TypeName": "DispatchError",
            "TypeId": 25
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchErrorWithPostInfo"
        ],
        "TypeParams": [
          {
            "Name": "Info",
            "TypeId": 644
          }
        ],
        "TypeDef": "Composite"
      },
      "647": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A member `who` has been added."
            ]
          },
          {
            "Name": "RankChanged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rank",
                "TypeName": "Rank",
                "TypeId": 292
              }
            ],
            "Index": 1,
            "Docs": [
              "The member `who`se rank has been changed to the given `rank`."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rank",
                "TypeName": "Rank",
                "TypeId": 292
              }
            ],
            "Index": 2,
            "Docs": [
              "The member `who` of given `rank` has been removed from the collective."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "poll",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "VoteRecord",
                "TypeId": 648
              },
              {
                "Name": "tally",
                "TypeName": "TallyOf<T, I>",
                "TypeId": 649
              }
            ],
            "Index": 3,
            "Docs": [
              "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
              "`tally`."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "648": {
        "Variants": [
          {
            "Name": "Aye",
            "TypeFields": [
              {
                "TypeName": "Votes",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Nay",
            "TypeFields": [
              {
                "TypeName": "Votes",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "VoteRecord"
        ],
        "TypeDef": "Variant"
      },
      "649": {
        "TypeFields": [
          {
            "Name": "bare_ayes",
            "TypeName": "MemberIndex",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Votes",
            "TypeId": 4
          },
          {
            "Name": "nays",
            "TypeName": "Votes",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          },
          {
            "Name": "M"
          }
        ],
        "TypeDef": "Composite"
      },
      "650": {
        "Variants": [
          {
            "Name": "Submitted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 292,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 293,
                "Docs": [
                  "The proposal for the referendum."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A referendum has been submitted."
            ]
          },
          {
            "Name": "DecisionDepositPlaced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The decision deposit has been placed."
            ]
          },
          {
            "Name": "DecisionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "The decision deposit has been refunded."
            ]
          },
          {
            "Name": "DepositSlashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A deposit has been slashaed."
            ]
          },
          {
            "Name": "DecisionStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 292,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 293,
                "Docs": [
                  "The proposal for the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 649,
                "Docs": [
                  "The current tally of votes in this referendum."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A referendum has moved into the deciding phase."
            ]
          },
          {
            "Name": "ConfirmStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 5
          },
          {
            "Name": "ConfirmAborted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 6
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 649,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 649,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 649,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "A referendum has been timed out without being decided."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 649,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 649,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "A referendum has been killed."
            ]
          },
          {
            "Name": "SubmissionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "The submission deposit has been refunded."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a referendum has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "651": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "652": {
        "Variants": [
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T, I>>",
                "TypeId": 589
              }
            ],
            "Index": 0,
            "Docs": [
              "An account has voted in a referendum"
            ]
          }
        ],
        "Path": [
          "pallet_vote_manager",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "653": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "654": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "655": {
        "TypeId": 287,
        "TypeDef": "Sequence"
      },
      "656": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 123
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 657
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "657": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "658": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 659
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "659": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 660
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 660
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 660
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 660
          }
        ],
        "TypeDef": "Composite"
      },
      "660": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 645
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 645
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 645
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "661": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 662
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "662": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "663": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "664": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 657
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 657
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 665
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "665": {
        "TypeFields": [
          {
            "TypeId": 666
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 666
          }
        ],
        "TypeDef": "Composite"
      },
      "666": {
        "TypeId": 667,
        "TypeDef": "Sequence"
      },
      "667": {
        "TypeIds": [
          138,
          4
        ],
        "TypeDef": "Tuple"
      },
      "668": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "669": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 654
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "670": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 672
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 671
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "671": {
        "TypeIds": [
          304,
          11
        ],
        "TypeDef": "Tuple"
      },
      "672": {
        "TypeId": 671,
        "TypeDef": "Sequence"
      },
      "673": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 674
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "674": {
        "TypeId": 1,
        "TypeDef": "Sequence"
      },
      "675": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 676
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 676
          }
        ],
        "TypeDef": "Variant"
      },
      "676": {
        "Variants": [
          {
            "Name": "Primary",
            "TypeFields": [
              {
                "TypeName": "PrimaryPreDigest",
                "TypeId": 677
              }
            ],
            "Index": 1
          },
          {
            "Name": "SecondaryPlain",
            "TypeFields": [
              {
                "TypeName": "SecondaryPlainPreDigest",
                "TypeId": 679
              }
            ],
            "Index": 2
          },
          {
            "Name": "SecondaryVRF",
            "TypeFields": [
              {
                "TypeName": "SecondaryVRFPreDigest",
                "TypeId": 680
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "PreDigest"
        ],
        "TypeDef": "Variant"
      },
      "677": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 305
          },
          {
            "Name": "vrf_signature",
            "TypeName": "VrfSignature",
            "TypeId": 678
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "PrimaryPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "678": {
        "TypeFields": [
          {
            "Name": "output",
            "TypeName": "VrfOutput",
            "TypeId": 1
          },
          {
            "Name": "proof",
            "TypeName": "VrfProof",
            "TypeId": 101
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "vrf",
          "VrfSignature"
        ],
        "TypeDef": "Composite"
      },
      "679": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 305
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "SecondaryPlainPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "680": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 305
          },
          {
            "Name": "vrf_signature",
            "TypeName": "VrfSignature",
            "TypeId": 678
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "SecondaryVRFPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "681": {
        "TypeFields": [
          {
            "Name": "c",
            "TypeName": "(u64, u64)",
            "TypeId": 308
          },
          {
            "Name": "allowed_slots",
            "TypeName": "AllowedSlots",
            "TypeId": 309
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "BabeEpochConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "682": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 684
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 683
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "683": {
        "TypeIds": [
          11,
          4
        ],
        "TypeDef": "Tuple"
      },
      "684": {
        "TypeId": 683,
        "TypeDef": "Sequence"
      },
      "685": {
        "Variants": [
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          },
          {
            "Name": "InvalidConfiguration",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Submitted configuration is invalid."
            ]
          }
        ],
        "Path": [
          "pallet_babe",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "686": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 689
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 687
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "687": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 138
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 688
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "688": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "689": {
        "TypeId": 687,
        "TypeDef": "Sequence"
      },
      "690": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 692
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 691
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "691": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 138
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 138
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "692": {
        "TypeId": 691,
        "TypeDef": "Sequence"
      },
      "693": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 695
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 694
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "694": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 56
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 56
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "695": {
        "TypeId": 694,
        "TypeDef": "Sequence"
      },
      "696": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `MaxHolds`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "697": {
        "TypeFields": [
          {
            "Name": "offender",
            "TypeName": "Offender",
            "TypeId": 61
          },
          {
            "Name": "reporters",
            "TypeName": "Vec<Reporter>",
            "TypeId": 80
          }
        ],
        "Path": [
          "sp_staking",
          "offence",
          "OffenceDetails"
        ],
        "TypeParams": [
          {
            "Name": "Reporter",
            "TypeId": 0
          },
          {
            "Name": "Offender",
            "TypeId": 61
          }
        ],
        "TypeDef": "Composite"
      },
      "698": {
        "TypeIds": [
          33,
          13
        ],
        "TypeDef": "Tuple"
      },
      "699": {
        "TypeFields": [
          {
            "Name": "supports",
            "TypeName": "BoundedSupports<AccountId, MaxWinners>",
            "TypeId": 700
          },
          {
            "Name": "score",
            "TypeName": "ElectionScore",
            "TypeId": 38
          },
          {
            "Name": "compute",
            "TypeName": "ElectionCompute",
            "TypeId": 35
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "ReadySolution"
        ],
        "TypeParams": [
          {
            "Name": "AccountId"
          },
          {
            "Name": "MaxWinners"
          }
        ],
        "TypeDef": "Composite"
      },
      "700": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 368
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 369
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "701": {
        "TypeFields": [
          {
            "Name": "voters",
            "TypeName": "Vec<DataProvider>",
            "TypeId": 704
          },
          {
            "Name": "targets",
            "TypeName": "Vec<AccountId>",
            "TypeId": 80
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "RoundSnapshot"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DataProvider",
            "TypeId": 702
          }
        ],
        "TypeDef": "Composite"
      },
      "702": {
        "TypeIds": [
          0,
          11,
          703
        ],
        "TypeDef": "Tuple"
      },
      "703": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 80
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "704": {
        "TypeId": 702,
        "TypeDef": "Sequence"
      },
      "705": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 707
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 706
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "706": {
        "TypeIds": [
          38,
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "707": {
        "TypeId": 706,
        "TypeDef": "Sequence"
      },
      "708": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "raw_solution",
            "TypeName": "RawSolution<Solution>",
            "TypeId": 314
          },
          {
            "Name": "call_fee",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "signed",
          "SignedSubmission"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Solution",
            "TypeId": 315
          }
        ],
        "TypeDef": "Composite"
      },
      "709": {
        "Variants": [
          {
            "Name": "PreDispatchEarlySubmission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Submission was too early."
            ]
          },
          {
            "Name": "PreDispatchWrongWinnerCount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Wrong number of winners presented."
            ]
          },
          {
            "Name": "PreDispatchWeakSubmission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Submission was too weak, score-wise."
            ]
          },
          {
            "Name": "SignedQueueFull",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The queue was full, and the solution was not better than any of the existing ones."
            ]
          },
          {
            "Name": "SignedCannotPayDeposit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The origin failed to pay the deposit."
            ]
          },
          {
            "Name": "SignedInvalidWitness",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Witness data to dispatchable is invalid."
            ]
          },
          {
            "Name": "SignedTooMuchWeight",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The signed submission consumes too much weight"
            ]
          },
          {
            "Name": "OcwCallWrongEra",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "OCW submitted solution for wrong round"
            ]
          },
          {
            "Name": "MissingSnapshotMetadata",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Snapshot metadata should exist but didn't."
            ]
          },
          {
            "Name": "InvalidSubmissionIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "`Self::insert_submission` returned an invalid index."
            ]
          },
          {
            "Name": "CallNotAllowed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The call is not allowed at this point."
            ]
          },
          {
            "Name": "FallbackFailed",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The fallback failed"
            ]
          },
          {
            "Name": "BoundNotMet",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Some bound not met"
            ]
          },
          {
            "Name": "TooManyWinners",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Submitted solution has too many winners"
            ]
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error of the pallet that can be returned in response to dispatches."
        ]
      },
      "710": {
        "TypeFields": [
          {
            "Name": "stash",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "total",
            "TypeName": "BalanceOf<T>",
            "TypeId": 63
          },
          {
            "Name": "active",
            "TypeName": "BalanceOf<T>",
            "TypeId": 63
          },
          {
            "Name": "unlocking",
            "TypeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>",
            "TypeId": 711
          },
          {
            "Name": "claimed_rewards",
            "TypeName": "BoundedVec<EraIndex, T::HistoryDepth>",
            "TypeId": 714
          }
        ],
        "Path": [
          "pallet_staking",
          "StakingLedger"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "711": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 713
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 712
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "712": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "era",
            "TypeName": "EraIndex",
            "TypeId": 123
          }
        ],
        "Path": [
          "pallet_staking",
          "UnlockChunk"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "713": {
        "TypeId": 712,
        "TypeDef": "Sequence"
      },
      "714": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 377
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "715": {
        "TypeFields": [
          {
            "Name": "targets",
            "TypeName": "BoundedVec<T::AccountId, T::MaxNominations>",
            "TypeId": 703
          },
          {
            "Name": "submitted_in",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "suppressed",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_staking",
          "Nominations"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "716": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "start",
            "TypeName": "Option<u64>",
            "TypeId": 212
          }
        ],
        "Path": [
          "pallet_staking",
          "ActiveEraInfo"
        ],
        "TypeDef": "Composite"
      },
      "717": {
        "TypeIds": [
          4,
          0
        ],
        "TypeDef": "Tuple"
      },
      "718": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "RewardPoint",
            "TypeId": 4
          },
          {
            "Name": "individual",
            "TypeName": "BTreeMap<AccountId, RewardPoint>",
            "TypeId": 719
          }
        ],
        "Path": [
          "pallet_staking",
          "EraRewardPoints"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "719": {
        "TypeFields": [
          {
            "TypeId": 720
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "720": {
        "TypeId": 721,
        "TypeDef": "Sequence"
      },
      "721": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "722": {
        "TypeId": 723,
        "TypeDef": "Sequence"
      },
      "723": {
        "TypeFields": [
          {
            "Name": "validator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "own",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "others",
            "TypeName": "Vec<(AccountId, Balance)>",
            "TypeId": 371
          },
          {
            "Name": "reporters",
            "TypeName": "Vec<AccountId>",
            "TypeId": 80
          },
          {
            "Name": "payout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_staking",
          "UnappliedSlash"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "724": {
        "TypeIds": [
          42,
          6
        ],
        "TypeDef": "Tuple"
      },
      "725": {
        "TypeFields": [
          {
            "Name": "span_index",
            "TypeName": "SpanIndex",
            "TypeId": 4
          },
          {
            "Name": "last_start",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "last_nonzero_slash",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "prior",
            "TypeName": "Vec<EraIndex>",
            "TypeId": 377
          }
        ],
        "Path": [
          "pallet_staking",
          "slashing",
          "SlashingSpans"
        ],
        "TypeDef": "Composite"
      },
      "726": {
        "TypeFields": [
          {
            "Name": "slashed",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "paid_out",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_staking",
          "slashing",
          "SpanRecord"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "727": {
        "TypeId": 728,
        "TypeDef": "Sequence"
      },
      "728": {
        "TypeIds": [
          4,
          37
        ],
        "TypeDef": "Tuple"
      },
      "729": {
        "Variants": [
          {
            "Name": "NotController",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not a controller account."
            ]
          },
          {
            "Name": "NotStash",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a stash account."
            ]
          },
          {
            "Name": "AlreadyBonded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Stash is already bonded."
            ]
          },
          {
            "Name": "AlreadyPaired",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Controller is already paired."
            ]
          },
          {
            "Name": "EmptyTargets",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Targets cannot be empty."
            ]
          },
          {
            "Name": "DuplicateIndex",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Duplicate index."
            ]
          },
          {
            "Name": "InvalidSlashIndex",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Slash record index out of bounds."
            ]
          },
          {
            "Name": "InsufficientBond",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot have a validator or nominator role, with value less than the minimum defined by",
              "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
              "intention, `chill` first to remove one's role as validator/nominator."
            ]
          },
          {
            "Name": "NoMoreChunks",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Can not schedule more unlock chunks."
            ]
          },
          {
            "Name": "NoUnlockChunk",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Can not rebond without unlocking chunks."
            ]
          },
          {
            "Name": "FundedTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Attempting to target a stash that still has funds."
            ]
          },
          {
            "Name": "InvalidEraToReward",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Invalid era to reward."
            ]
          },
          {
            "Name": "InvalidNumberOfNominations",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Invalid number of nominations."
            ]
          },
          {
            "Name": "NotSortedAndUnique",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Items are not sorted and unique."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Rewards for this era have already been claimed for this validator."
            ]
          },
          {
            "Name": "IncorrectHistoryDepth",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Incorrect previous history depth input provided."
            ]
          },
          {
            "Name": "IncorrectSlashingSpans",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Incorrect number of slashing spans provided."
            ]
          },
          {
            "Name": "BadState",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Internal state has become somehow corrupted and the operation cannot continue."
            ]
          },
          {
            "Name": "TooManyTargets",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Too many nomination targets supplied."
            ]
          },
          {
            "Name": "BadTarget",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "A nomination target was supplied that was blocked or otherwise not a validator."
            ]
          },
          {
            "Name": "CannotChillOther",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The user has enough bond and thus cannot be chilled forcefully by an external person."
            ]
          },
          {
            "Name": "TooManyNominators",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "There are too many nominators in the system. Governance needs to adjust the staking",
              "settings to keep things safe for the runtime."
            ]
          },
          {
            "Name": "TooManyValidators",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "There are too many validator candidates in the system. Governance needs to adjust the",
              "staking settings to keep things safe for the runtime."
            ]
          },
          {
            "Name": "CommissionTooLow",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Commission is too low. Must be at least `MinCommission`."
            ]
          },
          {
            "Name": "BoundNotMet",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Some bound is not met."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "730": {
        "TypeId": 731,
        "TypeDef": "Sequence"
      },
      "731": {
        "TypeIds": [
          0,
          383
        ],
        "TypeDef": "Tuple"
      },
      "732": {
        "TypeIds": [
          733,
          13
        ],
        "TypeDef": "Tuple"
      },
      "733": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "734": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "735": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PendingPause",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "PendingResume",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredState"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "736": {
        "TypeFields": [
          {
            "Name": "scheduled_at",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "delay",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "next_authorities",
            "TypeName": "BoundedAuthorityList<Limit>",
            "TypeId": 737
          },
          {
            "Name": "forced",
            "TypeName": "Option<N>",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredPendingChange"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          },
          {
            "Name": "Limit"
          }
        ],
        "TypeDef": "Composite"
      },
      "737": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 48
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 49
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "738": {
        "Variants": [
          {
            "Name": "PauseFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to signal GRANDPA pause when the authority set isn't live",
              "(either paused or already pending pause)."
            ]
          },
          {
            "Name": "ResumeFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Attempt to signal GRANDPA resume when the authority set isn't paused",
              "(either live or already pending resume)."
            ]
          },
          {
            "Name": "ChangePending",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Attempt to signal GRANDPA change with one already pending."
            ]
          },
          {
            "Name": "TooSoon",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot signal forced change so soon after last."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "739": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "740": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 377
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "741": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "742": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 138
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "743": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "744": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "745": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet"
        ]
      },
      "746": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 747
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 58
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "747": {
        "TypeId": 58,
        "TypeDef": "Sequence"
      },
      "748": {
        "TypeFields": [
          {
            "TypeId": 123
          },
          {
            "TypeName": "T",
            "TypeId": 749
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "misc",
          "WrapperOpaque"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 749
          }
        ],
        "TypeDef": "Composite"
      },
      "749": {
        "TypeFields": [
          {
            "Name": "peer_id",
            "TypeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
            "TypeId": 750
          },
          {
            "Name": "external_addresses",
            "TypeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
            "TypeId": 751
          }
        ],
        "Path": [
          "pallet_im_online",
          "BoundedOpaqueNetworkState"
        ],
        "TypeParams": [
          {
            "Name": "PeerIdEncodingLimit"
          },
          {
            "Name": "MultiAddrEncodingLimit"
          },
          {
            "Name": "AddressesLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "750": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "751": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 752
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 750
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "752": {
        "TypeId": 750,
        "TypeDef": "Sequence"
      },
      "753": {
        "Variants": [
          {
            "Name": "InvalidKey",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Non existent public key."
            ]
          },
          {
            "Name": "DuplicatedHeartbeat",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicated heartbeat."
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "754": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "prev",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 36
          },
          {
            "Name": "next",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 36
          },
          {
            "Name": "bag_upper",
            "TypeName": "T::Score",
            "TypeId": 11
          },
          {
            "Name": "score",
            "TypeName": "T::Score",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_bags_list",
          "list",
          "Node"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "755": {
        "TypeFields": [
          {
            "Name": "head",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 36
          },
          {
            "Name": "tail",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 36
          }
        ],
        "Path": [
          "pallet_bags_list",
          "list",
          "Bag"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "756": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "757": {
        "Variants": [
          {
            "Name": "List",
            "TypeFields": [
              {
                "TypeName": "ListError",
                "TypeId": 758
              }
            ],
            "Index": 0,
            "Docs": [
              "A error in the list interface implementation."
            ]
          }
        ],
        "Path": [
          "pallet_bags_list",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "758": {
        "Variants": [
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NotHeavier",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotInSameBag",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NodeNotFound",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_bags_list",
          "list",
          "ListError"
        ],
        "TypeDef": "Variant"
      },
      "759": {
        "TypeFields": [
          {
            "Name": "unbonding_eras",
            "TypeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>",
            "TypeId": 760
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "PoolMember"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "760": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 761
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "761": {
        "TypeFields": [
          {
            "TypeId": 762
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "762": {
        "TypeId": 763,
        "TypeDef": "Sequence"
      },
      "763": {
        "TypeIds": [
          4,
          6
        ],
        "TypeDef": "Tuple"
      },
      "764": {
        "TypeFields": [
          {
            "Name": "state",
            "TypeName": "PoolState",
            "TypeId": 68
          },
          {
            "Name": "commission",
            "TypeName": "Commission<T>",
            "TypeId": 765
          },
          {
            "Name": "token_id",
            "TypeName": "TokenIdOf<T>",
            "TypeId": 63
          },
          {
            "Name": "capacity",
            "TypeName": "BalanceOf<T>",
            "TypeId": 63
          },
          {
            "Name": "bonus_cycle",
            "TypeName": "BonusCycle",
            "TypeId": 766
          },
          {
            "Name": "creation_block",
            "TypeName": "T::BlockNumber",
            "TypeId": 123
          },
          {
            "Name": "bonuses_paid",
            "TypeName": "BoundedVec<EraIndex, T::HistoryDepth>",
            "TypeId": 714
          },
          {
            "Name": "name",
            "TypeName": "PoolNameOf<T>",
            "TypeId": 73
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "BondedPoolInner"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "765": {
        "TypeFields": [
          {
            "Name": "current",
            "TypeName": "Option<Perbill>",
            "TypeId": 69
          },
          {
            "Name": "max",
            "TypeName": "Option<Perbill>",
            "TypeId": 69
          },
          {
            "Name": "change_rate",
            "TypeName": "Option<CommissionChangeRate<T::BlockNumber>>",
            "TypeId": 76
          },
          {
            "Name": "throttle_from",
            "TypeName": "Option<T::BlockNumber>",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "Commission"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "766": {
        "TypeFields": [
          {
            "Name": "previous_start",
            "TypeName": "Option<EraIndex>",
            "TypeId": 74
          },
          {
            "Name": "start",
            "TypeName": "EraIndex",
            "TypeId": 123
          },
          {
            "Name": "end",
            "TypeName": "EraIndex",
            "TypeId": 123
          },
          {
            "Name": "pending_duration",
            "TypeName": "Option<EraIndex>",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "BonusCycle"
        ],
        "TypeDef": "Composite"
      },
      "767": {
        "TypeFields": [
          {
            "Name": "no_era",
            "TypeName": "UnbondPool<T>",
            "TypeId": 768
          },
          {
            "Name": "with_era",
            "TypeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>",
            "TypeId": 769
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "SubPools"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "768": {
        "TypeFields": [
          {
            "Name": "points",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "balance",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "UnbondPool"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "769": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 770
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 768
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "770": {
        "TypeFields": [
          {
            "TypeId": 771
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 768
          }
        ],
        "TypeDef": "Composite"
      },
      "771": {
        "TypeId": 772,
        "TypeDef": "Sequence"
      },
      "772": {
        "TypeIds": [
          4,
          768
        ],
        "TypeDef": "Tuple"
      },
      "773": {
        "TypeFields": [
          {
            "Name": "bonus_calculated",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "current_payment_id",
            "TypeName": "Option<PaymentId>",
            "TypeId": 74
          },
          {
            "Name": "next_payment_block",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 74
          },
          {
            "Name": "total_paid",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "EarlyBirdInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "774": {
        "TypeFields": [
          {
            "Name": "era",
            "TypeName": "EraIndex",
            "TypeId": 123
          },
          {
            "Name": "payout_count",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "payouts_processed",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "required_payments_percent",
            "TypeName": "Perbill",
            "TypeId": 42
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "EraPayout"
        ],
        "TypeDef": "Composite"
      },
      "775": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "share_capture_block",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 74
          },
          {
            "Name": "last_payment_id",
            "TypeName": "Option<PaymentId>",
            "TypeId": 74
          },
          {
            "Name": "total_paid",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "types",
          "PoolBonusInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "776": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perquintill"
        ],
        "TypeDef": "Composite"
      },
      "777": {
        "Variants": [
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A (bonded) pool id does not exist."
            ]
          },
          {
            "Name": "PoolTokenAlreadyInUse",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Pool already exists for the given token_id"
            ]
          },
          {
            "Name": "PoolMemberNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An account is not a member."
            ]
          },
          {
            "Name": "RewardPoolNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A reward pool does not exist. In all cases this is a system logic error."
            ]
          },
          {
            "Name": "SubPoolsNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A sub pool does not exist."
            ]
          },
          {
            "Name": "AccountBelongsToOtherPool",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "An account is already delegating in another pool. An account may only belong to one",
              "pool at a time."
            ]
          },
          {
            "Name": "FullyUnbonding",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The member is fully unbonded (and thus cannot access the bonded and reward pool",
              "anymore to, for example, collect rewards)."
            ]
          },
          {
            "Name": "MaxUnbondingLimit",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The member cannot unbond further chunks due to reaching the limit."
            ]
          },
          {
            "Name": "CannotWithdrawAny",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "None of the funds can be withdrawn yet because the bonding duration has not passed."
            ]
          },
          {
            "Name": "MinimumBondNotMet",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The amount does not meet the minimum bond to either join or create a pool.",
              "",
              "If the chain is not being destroyed no member can unbond to a value less than",
              "`Pallet::depositor_min_bond`. The caller does not have nominating",
              "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
            ]
          },
          {
            "Name": "OverflowRisk",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The transaction could not be executed due to overflow risk for the pool."
            ]
          },
          {
            "Name": "NotDestroying",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A pool must be in [`PoolState::Destroying`] in order for",
              "other members to be permissionlessly unbonded."
            ]
          },
          {
            "Name": "NotNominator",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The caller does not have nominating permissions for the pool."
            ]
          },
          {
            "Name": "NotKickerOrDestroying",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
            ]
          },
          {
            "Name": "NotOpen",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The pool is not open to join"
            ]
          },
          {
            "Name": "CanNotChangeState",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The pools state cannot be changed."
            ]
          },
          {
            "Name": "DoesNotHavePermission",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The caller does not have adequate permissions."
            ]
          },
          {
            "Name": "Defensive",
            "TypeFields": [
              {
                "TypeName": "DefensiveError",
                "TypeId": 778
              }
            ],
            "Index": 17,
            "Docs": [
              "Some error occurred that should never happen. This should be reported to the",
              "maintainers."
            ]
          },
          {
            "Name": "PartialUnbondNotAllowedPermissionlessly",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Partial unbonding now allowed permissionlessly."
            ]
          },
          {
            "Name": "PoolIdInUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Pool id currently in use."
            ]
          },
          {
            "Name": "InvalidPoolId",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Pool id provided is not correct/usable."
            ]
          },
          {
            "Name": "MintParamsCreationFailed",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Mint parameters are invalid."
            ]
          },
          {
            "Name": "BurnParamsCreationFailed",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Burn parameters are invalid."
            ]
          },
          {
            "Name": "TransferParamsCreationFailed",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Transfer parameters are invalid."
            ]
          },
          {
            "Name": "CapacityExceeded",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The capacity of the pool is exceeded by the amount"
            ]
          },
          {
            "Name": "CapacityMutationRestricted",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The capacity can only be mutated for the first 14 eras of a cycle"
            ]
          },
          {
            "Name": "DurationOutOfBounds",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The duration is out of bounds"
            ]
          },
          {
            "Name": "TokenRequired",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The required token is not owned by the caller"
            ]
          },
          {
            "Name": "DepositNotReadyForUnbonding",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Deposit should be the last supply of pool's sENJ token to be unbonded"
            ]
          },
          {
            "Name": "MaxCommissionRestricted",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "The pool's max commission cannot be set higher than the existing value."
            ]
          },
          {
            "Name": "CommissionExceedsMaximum",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "The supplied commission exceeds the max allowed commission."
            ]
          },
          {
            "Name": "CommissionChangeThrottled",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Not enough blocks have surpassed since the last commission update."
            ]
          },
          {
            "Name": "CommissionChangeRateNotAllowed",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "The submitted changes to commission change rate are not allowed."
            ]
          },
          {
            "Name": "NoPendingCommission",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "There is no pending commission to claim."
            ]
          },
          {
            "Name": "NoCommissionCurrentSet",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "No commission current has been set."
            ]
          },
          {
            "Name": "NoopMutation",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "The mutation does not change anything"
            ]
          },
          {
            "Name": "PoolMembersRemaining",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "The pool is not empty"
            ]
          },
          {
            "Name": "EarlyBirdBonusNotReady",
            "TypeFields": null,
            "Index": 37,
            "Docs": [
              "The early bird bonus is not yet ready to claim"
            ]
          },
          {
            "Name": "EarlyBirdTotalRewardsIsZero",
            "TypeFields": null,
            "Index": 38,
            "Docs": [
              "Total Weighted Rewards is 0"
            ]
          },
          {
            "Name": "EarlyBirdBonusAlreadyCalculated",
            "TypeFields": null,
            "Index": 39,
            "Docs": [
              "EarlyBirdReward has already been queued."
            ]
          },
          {
            "Name": "MissingPayouts",
            "TypeFields": null,
            "Index": 40,
            "Docs": [
              "Not all payouts have been made"
            ]
          },
          {
            "Name": "WrongPoolCount",
            "TypeFields": null,
            "Index": 41,
            "Docs": [
              "The pool count does not match the number of pools"
            ]
          },
          {
            "Name": "PayoutsAlreadyProcessed",
            "TypeFields": null,
            "Index": 42,
            "Docs": [
              "Payouts were already processed for this era"
            ]
          },
          {
            "Name": "AttributeKeyExceedsLength",
            "TypeFields": null,
            "Index": 43,
            "Docs": [
              "Attribute key exceeds max length"
            ]
          },
          {
            "Name": "AttributeValueDecodeFailed",
            "TypeFields": null,
            "Index": 44,
            "Docs": [
              "Unable to decode the attribute value"
            ]
          },
          {
            "Name": "AttributeCapacityExceedsGlobalCapacity",
            "TypeFields": null,
            "Index": 45,
            "Docs": [
              "Attribute capacity exceeds the global max capacity"
            ]
          },
          {
            "Name": "EarlyBirdBonusDistributionBlockNotPassed",
            "TypeFields": null,
            "Index": 46,
            "Docs": [
              "Cannot unlock early bird bonus before the dist block has passed"
            ]
          },
          {
            "Name": "EarlyBirdPaymentPeriodNotPassed",
            "TypeFields": null,
            "Index": 47,
            "Docs": [
              "Early bird payment period not passed"
            ]
          },
          {
            "Name": "NoEarlyBirdReward",
            "TypeFields": null,
            "Index": 48,
            "Docs": [
              "No early bird reward for this pool"
            ]
          },
          {
            "Name": "EarlyBirdShareAlreadyCaptured",
            "TypeFields": null,
            "Index": 49,
            "Docs": [
              "Early bird share has already been captured for this pool and account"
            ]
          },
          {
            "Name": "EarlyBirdBonusPaymentIdMismatch",
            "TypeFields": null,
            "Index": 50,
            "Docs": [
              "Mismatch in expected bonus payout value"
            ]
          },
          {
            "Name": "EarlyBirdBonusNotCalculated",
            "TypeFields": null,
            "Index": 51,
            "Docs": [
              "Early bird bonus not yet calculated"
            ]
          },
          {
            "Name": "BoundExceeded",
            "TypeFields": null,
            "Index": 52,
            "Docs": [
              "A bounded value was exceeded"
            ]
          },
          {
            "Name": "WrongAccountCount",
            "TypeFields": null,
            "Index": 53,
            "Docs": [
              "Wrong account count"
            ]
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "778": {
        "Variants": [
          {
            "Name": "NotEnoughSpaceInUnbondPool",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "RewardPoolNotFound",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "SubPoolsNotFound",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "BondedStashKilledPrematurely",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "DivisionError",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "DefensiveError"
        ],
        "TypeDef": "Variant"
      },
      "779": {
        "Variants": [
          {
            "Name": "CallerNotOfferCreator",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Caller is not the account of"
            ]
          },
          {
            "Name": "ZeroOffer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot create a offer with zero amount"
            ]
          },
          {
            "Name": "ZeroRate",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot create a offer with zero rate"
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Arithmetic overflow"
            ]
          },
          {
            "Name": "OfferNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A offer was not found"
            ]
          },
          {
            "Name": "NotEnoughLiquidity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The offer does not have liquidity to perform the operation"
            ]
          },
          {
            "Name": "TransferParamCreationFailed",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Cannot perform multi tokens transfer"
            ]
          },
          {
            "Name": "TokenRestriction",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "LP does not support this tokenId"
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Zero amount buy not supported"
            ]
          },
          {
            "Name": "RewardRateOutOfRange",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Pool rewards outside acceptable range"
            ]
          }
        ],
        "Path": [
          "pallet_stake_exchange",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Pallet's error type."
        ]
      },
      "780": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "781": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "782": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 93
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 783
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "783": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 80
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "784": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "785": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "async_backing_params",
            "TypeName": "AsyncBackingParams",
            "TypeId": 426
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_downward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_parachain_outbound_channels",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_parathread_outbound_channels",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_sender_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "hrmp_recipient_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "hrmp_channel_max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_channel_max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_parachain_inbound_channels",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_parathread_inbound_channels",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_channel_max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "executor_params",
            "TypeName": "ExecutorParams",
            "TypeId": 427
          },
          {
            "Name": "code_retention_period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "parathread_cores",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "parathread_retries",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "group_rotation_frequency",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "chain_availability_period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "thread_availability_period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "scheduling_lookahead",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_validators_per_core",
            "TypeName": "Option<u32>",
            "TypeId": 74
          },
          {
            "Name": "max_validators",
            "TypeName": "Option<u32>",
            "TypeId": 74
          },
          {
            "Name": "dispute_period",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "dispute_post_conclusion_acceptance_period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "no_show_slots",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "n_delay_tranches",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "zeroth_delay_tranche_width",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "needed_approvals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "relay_vrf_modulo_samples",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "pvf_checking_enabled",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "pvf_voting_ttl",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "minimum_validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "configuration",
          "HostConfiguration"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "786": {
        "TypeId": 787,
        "TypeDef": "Sequence"
      },
      "787": {
        "TypeIds": [
          4,
          785
        ],
        "TypeDef": "Tuple"
      },
      "788": {
        "Variants": [
          {
            "Name": "InvalidNewValue",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The new value for a configuration parameter is invalid."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "configuration",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "789": {
        "TypeId": 441,
        "TypeDef": "Sequence"
      },
      "790": {
        "TypeId": 384,
        "TypeDef": "Sequence"
      },
      "791": {
        "TypeFields": [
          {
            "Name": "bitfield",
            "TypeName": "AvailabilityBitfield",
            "TypeId": 438
          },
          {
            "Name": "submitted_at",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "inclusion",
          "AvailabilityBitfieldRecord"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "792": {
        "TypeFields": [
          {
            "Name": "core",
            "TypeName": "CoreIndex",
            "TypeId": 104
          },
          {
            "Name": "hash",
            "TypeName": "CandidateHash",
            "TypeId": 110
          },
          {
            "Name": "descriptor",
            "TypeName": "CandidateDescriptor<H>",
            "TypeId": 96
          },
          {
            "Name": "availability_votes",
            "TypeName": "BitVec<u8, BitOrderLsb0>",
            "TypeId": 439
          },
          {
            "Name": "backers",
            "TypeName": "BitVec<u8, BitOrderLsb0>",
            "TypeId": 439
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "backed_in_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "backing_group",
            "TypeName": "GroupIndex",
            "TypeId": 105
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "inclusion",
          "CandidatePendingAvailability"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "793": {
        "Variants": [
          {
            "Name": "UnsortedOrDuplicateValidatorIndices",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Validator indices are out of order or contains duplicates."
            ]
          },
          {
            "Name": "UnsortedOrDuplicateDisputeStatementSet",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Dispute statement sets are out of order or contain duplicates."
            ]
          },
          {
            "Name": "UnsortedOrDuplicateBackedCandidates",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Backed candidates are out of order (core index) or contain duplicates."
            ]
          },
          {
            "Name": "UnexpectedRelayParent",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A different relay parent was provided compared to the on-chain stored one."
            ]
          },
          {
            "Name": "WrongBitfieldSize",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Availability bitfield has unexpected size."
            ]
          },
          {
            "Name": "BitfieldAllZeros",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Bitfield consists of zeros only."
            ]
          },
          {
            "Name": "BitfieldDuplicateOrUnordered",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Multiple bitfields submitted by same validator or validators out of order by index."
            ]
          },
          {
            "Name": "ValidatorIndexOutOfBounds",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Validator index out of bounds."
            ]
          },
          {
            "Name": "InvalidBitfieldSignature",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid signature"
            ]
          },
          {
            "Name": "UnscheduledCandidate",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Candidate submitted but para not scheduled."
            ]
          },
          {
            "Name": "CandidateScheduledBeforeParaFree",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Candidate scheduled despite pending candidate already existing for the para."
            ]
          },
          {
            "Name": "WrongCollator",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Candidate included with the wrong collator."
            ]
          },
          {
            "Name": "ScheduledOutOfOrder",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Scheduled cores out of order."
            ]
          },
          {
            "Name": "HeadDataTooLarge",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Head data exceeds the configured maximum."
            ]
          },
          {
            "Name": "PrematureCodeUpgrade",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Code upgrade prematurely."
            ]
          },
          {
            "Name": "NewCodeTooLarge",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Output code is too large"
            ]
          },
          {
            "Name": "CandidateNotInParentContext",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Candidate not in parent context."
            ]
          },
          {
            "Name": "InvalidGroupIndex",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Invalid group index in core assignment."
            ]
          },
          {
            "Name": "InsufficientBacking",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Insufficient (non-majority) backing."
            ]
          },
          {
            "Name": "InvalidBacking",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid (bad signature, unknown validator, etc.) backing."
            ]
          },
          {
            "Name": "NotCollatorSigned",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Collator did not sign PoV."
            ]
          },
          {
            "Name": "ValidationDataHashMismatch",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The validation data hash does not match expected."
            ]
          },
          {
            "Name": "IncorrectDownwardMessageHandling",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The downward message queue is not processed correctly."
            ]
          },
          {
            "Name": "InvalidUpwardMessages",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "At least one upward message sent does not pass the acceptance criteria."
            ]
          },
          {
            "Name": "HrmpWatermarkMishandling",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The candidate didn't follow the rules of HRMP watermark advancement."
            ]
          },
          {
            "Name": "InvalidOutboundHrmp",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The HRMP messages sent by the candidate is not valid."
            ]
          },
          {
            "Name": "InvalidValidationCodeHash",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The validation code hash of the candidate is not valid."
            ]
          },
          {
            "Name": "ParaHeadMismatch",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual para head in the",
              "commitments."
            ]
          },
          {
            "Name": "BitfieldReferencesFreedCore",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "A bitfield that references a freed core,",
              "either intentionally or as part of a concluded",
              "invalid dispute."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "inclusion",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "794": {
        "TypeFields": [
          {
            "Name": "session",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "backing_validators_per_candidate",
            "TypeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>",
            "TypeId": 795
          },
          {
            "Name": "disputes",
            "TypeName": "MultiDisputeStatementSet",
            "TypeId": 455
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "ScrapedOnChainVotes"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "795": {
        "TypeId": 796,
        "TypeDef": "Sequence"
      },
      "796": {
        "TypeIds": [
          95,
          797
        ],
        "TypeDef": "Tuple"
      },
      "797": {
        "TypeId": 798,
        "TypeDef": "Sequence"
      },
      "798": {
        "TypeIds": [
          441,
          454
        ],
        "TypeDef": "Tuple"
      },
      "799": {
        "Variants": [
          {
            "Name": "TooManyInclusionInherents",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Inclusion inherent called more than once per block."
            ]
          },
          {
            "Name": "InvalidParentHeader",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The hash of the submitted parent header doesn't correspond to the saved block hash of",
              "the parent."
            ]
          },
          {
            "Name": "CandidateConcludedInvalid",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Disputed candidate that was concluded invalid."
            ]
          },
          {
            "Name": "InherentOverweight",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The data given to the inherent will result in an overweight block."
            ]
          },
          {
            "Name": "DisputeStatementsUnsortedOrDuplicates",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The ordering of dispute statements was invalid."
            ]
          },
          {
            "Name": "DisputeInvalid",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A dispute statement was invalid."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras_inherent",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "800": {
        "TypeId": 789,
        "TypeDef": "Sequence"
      },
      "801": {
        "TypeFields": [
          {
            "Name": "queue",
            "TypeName": "Vec<QueuedParathread>",
            "TypeId": 802
          },
          {
            "Name": "next_core_offset",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "scheduler",
          "ParathreadClaimQueue"
        ],
        "TypeDef": "Composite"
      },
      "802": {
        "TypeId": 803,
        "TypeDef": "Sequence"
      },
      "803": {
        "TypeFields": [
          {
            "Name": "claim",
            "TypeName": "ParathreadEntry",
            "TypeId": 804
          },
          {
            "Name": "core_offset",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "scheduler",
          "QueuedParathread"
        ],
        "TypeDef": "Composite"
      },
      "804": {
        "TypeFields": [
          {
            "Name": "claim",
            "TypeName": "ParathreadClaim",
            "TypeId": 805
          },
          {
            "Name": "retries",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "ParathreadEntry"
        ],
        "TypeDef": "Composite"
      },
      "805": {
        "TypeFields": [
          {
            "TypeName": "Id",
            "TypeId": 97
          },
          {
            "TypeName": "CollatorId",
            "TypeId": 98
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "ParathreadClaim"
        ],
        "TypeDef": "Composite"
      },
      "806": {
        "TypeId": 807,
        "TypeDef": "Sequence"
      },
      "807": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 808
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 808
          }
        ],
        "TypeDef": "Variant"
      },
      "808": {
        "Variants": [
          {
            "Name": "Parathread",
            "TypeFields": [
              {
                "TypeName": "ParathreadEntry",
                "TypeId": 804
              }
            ],
            "Index": 0
          },
          {
            "Name": "Parachain",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "CoreOccupied"
        ],
        "TypeDef": "Variant"
      },
      "809": {
        "TypeId": 97,
        "TypeDef": "Sequence"
      },
      "810": {
        "TypeId": 811,
        "TypeDef": "Sequence"
      },
      "811": {
        "TypeFields": [
          {
            "Name": "core",
            "TypeName": "CoreIndex",
            "TypeId": 104
          },
          {
            "Name": "para_id",
            "TypeName": "ParaId",
            "TypeId": 97
          },
          {
            "Name": "kind",
            "TypeName": "AssignmentKind",
            "TypeId": 812
          },
          {
            "Name": "group_idx",
            "TypeName": "GroupIndex",
            "TypeId": 105
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "scheduler",
          "CoreAssignment"
        ],
        "TypeDef": "Composite"
      },
      "812": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Parathread",
            "TypeFields": [
              {
                "TypeName": "CollatorId",
                "TypeId": 98
              },
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "scheduler",
          "AssignmentKind"
        ],
        "TypeDef": "Variant"
      },
      "813": {
        "TypeFields": [
          {
            "Name": "votes_accept",
            "TypeName": "BitVec<u8, BitOrderLsb0>",
            "TypeId": 439
          },
          {
            "Name": "votes_reject",
            "TypeName": "BitVec<u8, BitOrderLsb0>",
            "TypeId": 439
          },
          {
            "Name": "age",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "created_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "causes",
            "TypeName": "Vec<PvfCheckCause<BlockNumber>>",
            "TypeId": 814
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "PvfCheckActiveVoteState"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "814": {
        "TypeId": 815,
        "TypeDef": "Sequence"
      },
      "815": {
        "Variants": [
          {
            "Name": "Onboarding",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 97
              }
            ],
            "Index": 0
          },
          {
            "Name": "Upgrade",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ParaId",
                "TypeId": 97
              },
              {
                "Name": "relay_parent_number",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "PvfCheckCause"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "816": {
        "TypeId": 102,
        "TypeDef": "Sequence"
      },
      "817": {
        "Variants": [
          {
            "Name": "Onboarding",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Parathread",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Parachain",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UpgradingParathread",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DowngradingParachain",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "OffboardingParathread",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "OffboardingParachain",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "ParaLifecycle"
        ],
        "TypeDef": "Variant"
      },
      "818": {
        "TypeIds": [
          97,
          4
        ],
        "TypeDef": "Tuple"
      },
      "819": {
        "TypeFields": [
          {
            "Name": "upgrade_times",
            "TypeName": "Vec<ReplacementTimes<N>>",
            "TypeId": 820
          },
          {
            "Name": "last_pruned",
            "TypeName": "Option<N>",
            "TypeId": 74
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "ParaPastCodeMeta"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "820": {
        "TypeId": 821,
        "TypeDef": "Sequence"
      },
      "821": {
        "TypeFields": [
          {
            "Name": "expected_at",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "activated_at",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "ReplacementTimes"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "822": {
        "TypeId": 818,
        "TypeDef": "Sequence"
      },
      "823": {
        "Variants": [
          {
            "Name": "Abort",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "GoAhead",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "UpgradeGoAhead"
        ],
        "TypeDef": "Variant"
      },
      "824": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "825": {
        "Variants": [
          {
            "Name": "NotRegistered",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Para is not registered in our system."
            ]
          },
          {
            "Name": "CannotOnboard",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Para cannot be onboarded because it is already tracked by our system."
            ]
          },
          {
            "Name": "CannotOffboard",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Para cannot be offboarded at this time."
            ]
          },
          {
            "Name": "CannotUpgrade",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Para cannot be upgraded to a parachain."
            ]
          },
          {
            "Name": "CannotDowngrade",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Para cannot be downgraded to a parathread."
            ]
          },
          {
            "Name": "PvfCheckStatementStale",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The statement for PVF pre-checking is stale."
            ]
          },
          {
            "Name": "PvfCheckStatementFuture",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The statement for PVF pre-checking is for a future session."
            ]
          },
          {
            "Name": "PvfCheckValidatorIndexOutOfBounds",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Claimed validator index is out of bounds."
            ]
          },
          {
            "Name": "PvfCheckInvalidSignature",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The signature for the PVF pre-checking is invalid."
            ]
          },
          {
            "Name": "PvfCheckDoubleVote",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given validator already has cast a vote."
            ]
          },
          {
            "Name": "PvfCheckSubjectInvalid",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given PVF does not exist at the moment of process a vote."
            ]
          },
          {
            "Name": "CannotUpgradeCode",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Parachain cannot currently schedule a code upgrade."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "paras",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "826": {
        "TypeId": 827,
        "TypeDef": "Sequence"
      },
      "827": {
        "TypeFields": [
          {
            "Name": "validators",
            "TypeName": "Vec<ValidatorId>",
            "TypeId": 790
          },
          {
            "Name": "queued",
            "TypeName": "Vec<ValidatorId>",
            "TypeId": 790
          },
          {
            "Name": "session_index",
            "TypeName": "SessionIndex",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "initializer",
          "BufferedSessionChange"
        ],
        "TypeDef": "Composite"
      },
      "828": {
        "TypeId": 829,
        "TypeDef": "Sequence"
      },
      "829": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "830": {
        "TypeFields": [
          {
            "Name": "confirmed",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "_age",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "sender_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "hrmp",
          "HrmpOpenChannelRequest"
        ],
        "TypeDef": "Composite"
      },
      "831": {
        "TypeId": 108,
        "TypeDef": "Sequence"
      },
      "832": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 595
          },
          {
            "Name": "sender_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "recipient_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "hrmp",
          "HrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "833": {
        "TypeId": 834,
        "TypeDef": "Sequence"
      },
      "834": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "835": {
        "TypeId": 836,
        "TypeDef": "Sequence"
      },
      "836": {
        "TypeIds": [
          4,
          809
        ],
        "TypeDef": "Tuple"
      },
      "837": {
        "Variants": [
          {
            "Name": "OpenHrmpChannelToSelf",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The sender tried to open a channel to themselves."
            ]
          },
          {
            "Name": "OpenHrmpChannelInvalidRecipient",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The recipient is not a valid para."
            ]
          },
          {
            "Name": "OpenHrmpChannelZeroCapacity",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The requested capacity is zero."
            ]
          },
          {
            "Name": "OpenHrmpChannelCapacityExceedsLimit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The requested capacity exceeds the global limit."
            ]
          },
          {
            "Name": "OpenHrmpChannelZeroMessageSize",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The requested maximum message size is 0."
            ]
          },
          {
            "Name": "OpenHrmpChannelMessageSizeExceedsLimit",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The open request requested the message size that exceeds the global limit."
            ]
          },
          {
            "Name": "OpenHrmpChannelAlreadyExists",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The channel already exists"
            ]
          },
          {
            "Name": "OpenHrmpChannelAlreadyRequested",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There is already a request to open the same channel."
            ]
          },
          {
            "Name": "OpenHrmpChannelLimitExceeded",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The sender already has the maximum number of allowed outbound channels."
            ]
          },
          {
            "Name": "AcceptHrmpChannelDoesntExist",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The channel from the sender to the origin doesn't exist."
            ]
          },
          {
            "Name": "AcceptHrmpChannelAlreadyConfirmed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The channel is already confirmed."
            ]
          },
          {
            "Name": "AcceptHrmpChannelLimitExceeded",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The recipient already has the maximum number of allowed inbound channels."
            ]
          },
          {
            "Name": "CloseHrmpChannelUnauthorized",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The origin tries to close a channel where it is neither the sender nor the recipient."
            ]
          },
          {
            "Name": "CloseHrmpChannelDoesntExist",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The channel to be closed doesn't exist."
            ]
          },
          {
            "Name": "CloseHrmpChannelAlreadyUnderway",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The channel close request is already requested."
            ]
          },
          {
            "Name": "CancelHrmpOpenChannelUnauthorized",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Canceling is requested by neither the sender nor recipient of the open channel request."
            ]
          },
          {
            "Name": "OpenHrmpChannelDoesntExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The open request doesn't exist."
            ]
          },
          {
            "Name": "OpenHrmpChannelAlreadyConfirmed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Cannot cancel an HRMP open channel request because it is already confirmed."
            ]
          },
          {
            "Name": "WrongWitness",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The provided witness data is wrong."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "hrmp",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "838": {
        "TypeId": 385,
        "TypeDef": "Sequence"
      },
      "839": {
        "TypeFields": [
          {
            "Name": "active_validator_indices",
            "TypeName": "Vec<ValidatorIndex>",
            "TypeId": 789
          },
          {
            "Name": "random_seed",
            "TypeName": "[u8; 32]",
            "TypeId": 1
          },
          {
            "Name": "dispute_period",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "validators",
            "TypeName": "IndexedVec<ValidatorIndex, ValidatorId>",
            "TypeId": 840
          },
          {
            "Name": "discovery_keys",
            "TypeName": "Vec<AuthorityDiscoveryId>",
            "TypeId": 841
          },
          {
            "Name": "assignment_keys",
            "TypeName": "Vec<AssignmentId>",
            "TypeId": 838
          },
          {
            "Name": "validator_groups",
            "TypeName": "IndexedVec<GroupIndex, Vec<ValidatorIndex>>",
            "TypeId": 842
          },
          {
            "Name": "n_cores",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "zeroth_delay_tranche_width",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "relay_vrf_modulo_samples",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "n_delay_tranches",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "no_show_slots",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "needed_approvals",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "SessionInfo"
        ],
        "TypeDef": "Composite"
      },
      "840": {
        "TypeFields": [
          {
            "TypeName": "Vec<V>",
            "TypeId": 790
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "IndexedVec"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 441
          },
          {
            "Name": "V",
            "TypeId": 384
          }
        ],
        "TypeDef": "Composite"
      },
      "841": {
        "TypeId": 386,
        "TypeDef": "Sequence"
      },
      "842": {
        "TypeFields": [
          {
            "TypeName": "Vec<V>",
            "TypeId": 800
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "IndexedVec"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 105
          },
          {
            "Name": "V",
            "TypeId": 789
          }
        ],
        "TypeDef": "Composite"
      },
      "843": {
        "TypeIds": [
          4,
          110
        ],
        "TypeDef": "Tuple"
      },
      "844": {
        "TypeFields": [
          {
            "Name": "validators_for",
            "TypeName": "BitVec<u8, bitvec::order::Lsb0>",
            "TypeId": 439
          },
          {
            "Name": "validators_against",
            "TypeName": "BitVec<u8, bitvec::order::Lsb0>",
            "TypeId": 439
          },
          {
            "Name": "start",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "concluded_at",
            "TypeName": "Option<N>",
            "TypeId": 74
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v4",
          "DisputeState"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "845": {
        "TypeFields": [
          {
            "TypeId": 789
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 441
          }
        ],
        "TypeDef": "Composite"
      },
      "846": {
        "Variants": [
          {
            "Name": "DuplicateDisputeStatementSets",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Duplicate dispute statement sets provided."
            ]
          },
          {
            "Name": "AncientDisputeStatement",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Ancient dispute statement provided."
            ]
          },
          {
            "Name": "ValidatorIndexOutOfBounds",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Validator index on statement is out of bounds for session."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Invalid signature on statement."
            ]
          },
          {
            "Name": "DuplicateStatement",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Validator vote submitted more than once to dispute."
            ]
          },
          {
            "Name": "SingleSidedDispute",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A dispute where there are only votes on one side."
            ]
          },
          {
            "Name": "MaliciousBacker",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A dispute vote from a malicious backer."
            ]
          },
          {
            "Name": "MissingBackingVotes",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No backing votes were provides along dispute statements."
            ]
          },
          {
            "Name": "UnconfirmedDispute",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Unconfirmed dispute statement sets provided."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "847": {
        "TypeFields": [
          {
            "Name": "keys",
            "TypeName": "BTreeMap<ValidatorIndex, ValidatorId>",
            "TypeId": 848
          },
          {
            "Name": "kind",
            "TypeName": "SlashingOffenceKind",
            "TypeId": 470
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "slashing",
          "PendingSlashes"
        ],
        "TypeDef": "Composite"
      },
      "848": {
        "TypeFields": [
          {
            "TypeId": 849
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 441
          },
          {
            "Name": "V",
            "TypeId": 384
          }
        ],
        "TypeDef": "Composite"
      },
      "849": {
        "TypeId": 850,
        "TypeDef": "Sequence"
      },
      "850": {
        "TypeIds": [
          441,
          384
        ],
        "TypeDef": "Tuple"
      },
      "851": {
        "Variants": [
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The key ownership proof is invalid."
            ]
          },
          {
            "Name": "InvalidSessionIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The session index is too old or invalid."
            ]
          },
          {
            "Name": "InvalidCandidateHash",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The candidate hash is invalid."
            ]
          },
          {
            "Name": "InvalidValidatorIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There is no pending slash for the given validator index and time",
              "slot."
            ]
          },
          {
            "Name": "ValidatorIndexIdMismatch",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The validator index does not match the validator id."
            ]
          },
          {
            "Name": "DuplicateSlashingReport",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The given slashing report is valid but already previously reported."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_parachains",
          "disputes",
          "slashing",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "852": {
        "TypeFields": [
          {
            "Name": "manager",
            "TypeName": "Account",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "locked",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "paras_registrar",
          "ParaInfo"
        ],
        "TypeParams": [
          {
            "Name": "Account",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "853": {
        "Variants": [
          {
            "Name": "NotRegistered",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The ID is not registered."
            ]
          },
          {
            "Name": "AlreadyRegistered",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The ID is already registered."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The caller is not the owner of this Id."
            ]
          },
          {
            "Name": "CodeTooLarge",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Invalid para code size."
            ]
          },
          {
            "Name": "HeadDataTooLarge",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Invalid para head data size."
            ]
          },
          {
            "Name": "NotParachain",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Para is not a Parachain."
            ]
          },
          {
            "Name": "NotParathread",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Para is not a Parathread."
            ]
          },
          {
            "Name": "CannotDeregister",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot deregister para"
            ]
          },
          {
            "Name": "CannotDowngrade",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Cannot schedule downgrade of parachain to parathread"
            ]
          },
          {
            "Name": "CannotUpgrade",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Cannot schedule upgrade of parathread to parachain"
            ]
          },
          {
            "Name": "ParaLocked",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Para is locked from manipulation by the manager. Must use parachain or relay chain governance."
            ]
          },
          {
            "Name": "NotReserved",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The ID given for registration has not been reserved."
            ]
          },
          {
            "Name": "EmptyCode",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Registering parachain with empty code is not allowed."
            ]
          },
          {
            "Name": "CannotSwap",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras are",
              "correct for the swap to work."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "paras_registrar",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "854": {
        "TypeId": 855,
        "TypeDef": "Sequence"
      },
      "855": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 372
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 372
          }
        ],
        "TypeDef": "Variant"
      },
      "856": {
        "Variants": [
          {
            "Name": "ParaNotOnboarding",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The parachain ID is not onboarding."
            ]
          },
          {
            "Name": "LeaseError",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was an error with the lease."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "slots",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "857": {
        "TypeIds": [
          0,
          97
        ],
        "TypeDef": "Tuple"
      },
      "858": {
        "Length": 36,
        "TypeId": 859,
        "TypeDef": "Array"
      },
      "859": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 860
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 860
          }
        ],
        "TypeDef": "Variant"
      },
      "860": {
        "TypeIds": [
          0,
          97,
          6
        ],
        "TypeDef": "Tuple"
      },
      "861": {
        "Variants": [
          {
            "Name": "AuctionInProgress",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "This auction is already in progress."
            ]
          },
          {
            "Name": "LeasePeriodInPast",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The lease period is in the past."
            ]
          },
          {
            "Name": "ParaNotRegistered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Para is not registered"
            ]
          },
          {
            "Name": "NotCurrentAuction",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Not a current auction."
            ]
          },
          {
            "Name": "NotAuction",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Not an auction."
            ]
          },
          {
            "Name": "AuctionEnded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Auction has already ended."
            ]
          },
          {
            "Name": "AlreadyLeasedOut",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The para is already leased out for part of this range."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "auctions",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "862": {
        "TypeFields": [
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "verifier",
            "TypeName": "Option<MultiSigner>",
            "TypeId": 476
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "raised",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "cap",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "last_contribution",
            "TypeName": "LastContribution<BlockNumber>",
            "TypeId": 863
          },
          {
            "Name": "first_period",
            "TypeName": "LeasePeriod",
            "TypeId": 4
          },
          {
            "Name": "last_period",
            "TypeName": "LeasePeriod",
            "TypeId": 4
          },
          {
            "Name": "fund_index",
            "TypeName": "FundIndex",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "crowdloan",
          "FundInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "LeasePeriod",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "863": {
        "Variants": [
          {
            "Name": "Never",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PreEnding",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ending",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "crowdloan",
          "LastContribution"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "864": {
        "Variants": [
          {
            "Name": "FirstPeriodInPast",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The current lease period is more than the first lease period."
            ]
          },
          {
            "Name": "FirstPeriodTooFarInFuture",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The first lease period needs to at least be less than 3 `max_value`."
            ]
          },
          {
            "Name": "LastPeriodBeforeFirstPeriod",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Last lease period must be greater than first lease period."
            ]
          },
          {
            "Name": "LastPeriodTooFarInFuture",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The last lease period cannot be more than 3 periods after the first period."
            ]
          },
          {
            "Name": "CannotEndInPast",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The campaign ends before the current block number. The end must be in the future."
            ]
          },
          {
            "Name": "EndTooFarInFuture",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The end date for this crowdloan is not sensible."
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There was an overflow."
            ]
          },
          {
            "Name": "ContributionTooSmall",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The contribution was below the minimum, `MinContribution`."
            ]
          },
          {
            "Name": "InvalidParaId",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid fund index."
            ]
          },
          {
            "Name": "CapExceeded",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Contributions exceed maximum amount."
            ]
          },
          {
            "Name": "ContributionPeriodOver",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The contribution period has already ended."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The origin of this call is invalid."
            ]
          },
          {
            "Name": "NotParachain",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "This crowdloan does not correspond to a parachain."
            ]
          },
          {
            "Name": "LeaseActive",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "This parachain lease is still active and retirement cannot yet begin."
            ]
          },
          {
            "Name": "BidOrLeaseActive",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "This parachain's bid or lease is still active and withdraw cannot yet begin."
            ]
          },
          {
            "Name": "FundNotEnded",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The crowdloan has not yet ended."
            ]
          },
          {
            "Name": "NoContributions",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "There are no contributions stored in this crowdloan."
            ]
          },
          {
            "Name": "NotReadyToDissolve",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement period."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Invalid signature."
            ]
          },
          {
            "Name": "MemoTooLarge",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The provided memo is too large."
            ]
          },
          {
            "Name": "AlreadyInNewRaise",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The fund is already in `NewRaise`"
            ]
          },
          {
            "Name": "VrfDelayInProgress",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "No contributions allowed during the VRF delay"
            ]
          },
          {
            "Name": "NoLeasePeriod",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "A lease period has not started yet, due to an offset in the starting block."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "crowdloan",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "865": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 170
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedMultiLocation>",
                "TypeId": 866
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 867
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 170
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 37
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 869
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "866": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 170
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 170
          }
        ],
        "TypeDef": "Variant"
      },
      "867": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 868
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 868
          }
        ],
        "TypeDef": "Variant"
      },
      "868": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "869": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Response",
                "TypeId": 489
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 139
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "870": {
        "TypeIds": [
          4,
          170
        ],
        "TypeDef": "Tuple"
      },
      "871": {
        "TypeIds": [
          11,
          9,
          4
        ],
        "TypeDef": "Tuple"
      },
      "872": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 874
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 873
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "873": {
        "TypeIds": [
          170,
          4
        ],
        "TypeDef": "Tuple"
      },
      "874": {
        "TypeId": 873,
        "TypeDef": "Sequence"
      },
      "875": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 876
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "876": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Variant"
      },
      "877": {
        "TypeIds": [
          4,
          0,
          878
        ],
        "TypeDef": "Tuple"
      },
      "878": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 135
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "879": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 170
          },
          {
            "Name": "locker",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 170
          },
          {
            "Name": "consumers",
            "TypeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
            "TypeId": 880
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeParams": [
          {
            "Name": "ConsumerIdentifier",
            "TypeId": 56
          },
          {
            "Name": "MaxConsumers"
          }
        ],
        "TypeDef": "Composite"
      },
      "880": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 882
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 881
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "881": {
        "TypeIds": [
          56,
          6
        ],
        "TypeDef": "Tuple"
      },
      "882": {
        "TypeId": 881,
        "TypeDef": "Sequence"
      },
      "883": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 885
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 884
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "884": {
        "TypeIds": [
          6,
          170
        ],
        "TypeDef": "Tuple"
      },
      "885": {
        "TypeId": 884,
        "TypeDef": "Sequence"
      },
      "886": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
              "a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Invalid asset for the operation."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still consumers of the lock."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "887": {
        "TypeFields": [
          {
            "Name": "begin",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "end",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "count",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "ready_neighbours",
            "TypeName": "Option<Neighbours<MessageOrigin>>",
            "TypeId": 888
          },
          {
            "Name": "message_count",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "size",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_message_queue",
          "BookState"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 172
          }
        ],
        "TypeDef": "Composite"
      },
      "888": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 889
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 889
          }
        ],
        "TypeDef": "Variant"
      },
      "889": {
        "TypeFields": [
          {
            "Name": "prev",
            "TypeName": "MessageOrigin",
            "TypeId": 172
          },
          {
            "Name": "next",
            "TypeName": "MessageOrigin",
            "TypeId": 172
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Neighbours"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 172
          }
        ],
        "TypeDef": "Composite"
      },
      "890": {
        "TypeIds": [
          172,
          4
        ],
        "TypeDef": "Tuple"
      },
      "891": {
        "TypeFields": [
          {
            "Name": "remaining",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first_index",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "last",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "heap",
            "TypeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
            "TypeId": 892
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Page"
        ],
        "TypeParams": [
          {
            "Name": "Size",
            "TypeId": 4
          },
          {
            "Name": "HeapSize"
          }
        ],
        "TypeDef": "Composite"
      },
      "892": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "893": {
        "Variants": [
          {
            "Name": "NotReapable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Page is not reapable because it has items remaining to be processed and is not old",
              "enough."
            ]
          },
          {
            "Name": "NoPage",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Page to be reaped does not exist."
            ]
          },
          {
            "Name": "NoMessage",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The referenced message could not be found."
            ]
          },
          {
            "Name": "AlreadyProcessed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message was already processed and cannot be processed again."
            ]
          },
          {
            "Name": "Queued",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message is queued for future execution."
            ]
          },
          {
            "Name": "InsufficientWeight",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "There is temporarily not enough weight to continue servicing messages."
            ]
          },
          {
            "Name": "TemporarilyUnprocessable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "This message is temporarily unprocessable.",
              "",
              "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
              "retrying."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "894": {
        "Variants": [
          {
            "Name": "ParaDoesntExist",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The specified parachain or parathread is not registered."
            ]
          },
          {
            "Name": "ParaAlreadyExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specified parachain or parathread is already registered."
            ]
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "A DMP message couldn't be sent because it exceeds the maximum size allowed for a downward",
              "message."
            ]
          },
          {
            "Name": "CouldntCleanup",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Could not schedule para cleanup."
            ]
          },
          {
            "Name": "NotParathread",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Not a parathread."
            ]
          },
          {
            "Name": "NotParachain",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Not a parachain."
            ]
          },
          {
            "Name": "CannotUpgrade",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Cannot upgrade parathread."
            ]
          },
          {
            "Name": "CannotDowngrade",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot downgrade parachain."
            ]
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "paras_sudo_wrapper",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "895": {
        "TypeFields": [
          {
            "Name": "manager",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "period_begin",
            "TypeName": "LeasePeriod",
            "TypeId": 4
          },
          {
            "Name": "period_count",
            "TypeName": "LeasePeriod",
            "TypeId": 4
          },
          {
            "Name": "last_lease",
            "TypeName": "Option<LeasePeriod>",
            "TypeId": 74
          },
          {
            "Name": "lease_count",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "assigned_slots",
          "ParachainTemporarySlot"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "LeasePeriod",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "896": {
        "Variants": [
          {
            "Name": "ParaDoesntExist",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The specified parachain or parathread is not registered."
            ]
          },
          {
            "Name": "NotParathread",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a parathread."
            ]
          },
          {
            "Name": "CannotUpgrade",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot upgrade parathread."
            ]
          },
          {
            "Name": "CannotDowngrade",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot downgrade parachain."
            ]
          },
          {
            "Name": "SlotAlreadyAssigned",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Permanent or Temporary slot already assigned."
            ]
          },
          {
            "Name": "SlotNotAssigned",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Permanent or Temporary slot has not been assigned."
            ]
          },
          {
            "Name": "OngoingLeaseExists",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "An ongoing lease already exists."
            ]
          },
          {
            "Name": "MaxPermanentSlotsExceeded",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "MaxTemporarySlotsExceeded",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "polkadot_runtime_common",
          "assigned_slots",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "897": {
        "TypeIds": [
          6,
          6,
          0
        ],
        "TypeDef": "Tuple"
      },
      "898": {
        "TypeIds": [
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "899": {
        "TypeIds": [
          6,
          0
        ],
        "TypeDef": "Tuple"
      },
      "900": {
        "TypeIds": [
          6,
          78,
          205
        ],
        "TypeDef": "Tuple"
      },
      "901": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "902": {
        "TypeFields": [
          {
            "Name": "stage",
            "TypeName": "MigrationStage",
            "TypeId": 247
          },
          {
            "Name": "last_iterated_key",
            "TypeName": "Option<BoundedVec<u8, MaxMigrationKeyLength>>",
            "TypeId": 904
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "migrations",
          "Migration"
        ],
        "TypeParams": [
          {
            "Name": "MaxMigrationKeyLength",
            "TypeId": 903
          }
        ],
        "TypeDef": "Composite"
      },
      "903": {
        "Path": [
          "enjin_runtime",
          "MaxMigrationKeyLength"
        ],
        "TypeDef": "Composite"
      },
      "904": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 901
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 901
          }
        ],
        "TypeDef": "Variant"
      },
      "905": {
        "TypeIds": [
          6,
          11
        ],
        "TypeDef": "Tuple"
      },
      "906": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 181
          },
          {
            "Name": "units_per_second",
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "ep_multi_tokens",
          "types",
          "NativeAssetInfo"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 181
          }
        ],
        "TypeDef": "Composite"
      },
      "907": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 910
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 908
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "908": {
        "TypeFields": [
          {
            "Name": "pallet_name",
            "TypeName": "BoundedString<MaxNameLength>",
            "TypeId": 273
          },
          {
            "Name": "extrinsic_name",
            "TypeName": "Option<BoundedString<MaxNameLength>>",
            "TypeId": 909
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "types",
          "ExtrinsicInfo"
        ],
        "TypeParams": [
          {
            "Name": "MaxNameLength",
            "TypeId": 274
          }
        ],
        "TypeDef": "Composite"
      },
      "909": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 273
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 273
          }
        ],
        "TypeDef": "Variant"
      },
      "910": {
        "TypeId": 908,
        "TypeDef": "Sequence"
      },
      "911": {
        "Variants": [
          {
            "Name": "CollectionNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Collection was not found"
            ]
          },
          {
            "Name": "CollectionAccountNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "CollectionAccount was not found"
            ]
          },
          {
            "Name": "TokenNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Token was not found"
            ]
          },
          {
            "Name": "TokenAccountNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "TokenAccount was not found"
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Caller is not allowed to execute this extrinsic"
            ]
          },
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Not enough balance to perform the operation."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The operation failed due to an item being frozen"
            ]
          },
          {
            "Name": "HasNeverFreezeState",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The token has a never freeze state. The state cannot be changed and the token cannot be",
              "frozen."
            ]
          },
          {
            "Name": "PermanentlyFrozen",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The token is permanently frozen"
            ]
          },
          {
            "Name": "InvalidFreezeState",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The freeze state is not valid"
            ]
          },
          {
            "Name": "AmountZero",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "An amount of zero was used when it's not allowed"
            ]
          },
          {
            "Name": "InvalidAttributeKey",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Attribute key invalid"
            ]
          },
          {
            "Name": "MaxTokenCountExceeded",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Tried to mint more tokens than allowed"
            ]
          },
          {
            "Name": "TokenMintCapExceeded",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The cap for the token was exceeded during mint"
            ]
          },
          {
            "Name": "TokenAlreadyExists",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Tried to create Token that already exists"
            ]
          },
          {
            "Name": "DestroyForbiddenByAttributeCount",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The collection or token cannot be destroyed because it has attributes"
            ]
          },
          {
            "Name": "DestroyForbiddenByRemainingTokens",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Destroy is not allowed on collections that have tokens. Destroy all tokens before",
              "calling [`destroy_collection`](Pallet::destroy_collection). Keep in mind that the",
              "[`Tokens`] storage can remain even if all of [`Token`](ep_multi_tokens::Token)'s units",
              "were burned. A token can only be destroyed by setting",
              "[`remove_token_storage`](OnBurnInput::remove_token_storage) to true in",
              "[`burn`](Pallet::burn)."
            ]
          },
          {
            "Name": "DestroyForbiddenByCollectionEvent",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The `OnCollectionEvent` trait has forbidden burning of the collection"
            ]
          },
          {
            "Name": "DepositReserveFailed",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Unable to reserve the amount to create a new collection/token"
            ]
          },
          {
            "Name": "DepositUnreserveFailed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Unable to unreserve the amount to burn an existing collection/token"
            ]
          },
          {
            "Name": "InvalidUnitPrice",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The unit price cannot be zero, cannot decrease, and `unit_price * total_supply` must",
              "be greater than `TokenAccountDeposit`"
            ]
          },
          {
            "Name": "BalanceBelowMinimumRequirement",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The balance is below the minimum required balance"
            ]
          },
          {
            "Name": "MintFailedRequirements",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The minting did not meet the requirements set by the mint policy"
            ]
          },
          {
            "Name": "IdleOperationQueueFull",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The idle operation queue is full and cannot accept new operations"
            ]
          },
          {
            "Name": "ReservesLow",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Reserved balance is not enough to perform the operation"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Max named reserves for an account are exceeded"
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "Max named locks for an account are exceeded"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The balance is locked or restricted"
            ]
          },
          {
            "Name": "PercentageOutOfBounds",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Royalty percentage is above or below allowed bounds"
            ]
          },
          {
            "Name": "CurrencyIncompatibleWithCollectionRoyalty",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Token cannot act as both a currency and a royalty"
            ]
          },
          {
            "Name": "MaxApprovalsExceeded",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "The max number of approvals for this account was exceeded"
            ]
          },
          {
            "Name": "AlreadyExpired",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Tried to set an expiration that has already passed"
            ]
          },
          {
            "Name": "CollectionAlreadyApproved",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "The collection is already approved for all, so it is useless to approve for a single",
              "token"
            ]
          },
          {
            "Name": "InsufficientAllowance",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "Not enough allowance to perform the operation"
            ]
          },
          {
            "Name": "WrongCurrentApprovedAmount",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "The passed `current_amount` does not match the actual current amount of the approval"
            ]
          },
          {
            "Name": "CannotApproveSelf",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "An account cannot approve itself as an operator"
            ]
          },
          {
            "Name": "CannotTransferToSelf",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "An account cannot transfer tokens to itself"
            ]
          },
          {
            "Name": "TransferParamCreationFailed",
            "TypeFields": null,
            "Index": 37,
            "Docs": [
              "Transfer params could not be created"
            ]
          },
          {
            "Name": "OperationNotAllowedForNativeToken",
            "TypeFields": null,
            "Index": 38,
            "Docs": [
              "This operation is not allowed for the native token"
            ]
          },
          {
            "Name": "InvalidExplicitRoyaltyCurrencies",
            "TypeFields": null,
            "Index": 39,
            "Docs": [
              "One or more of the explicit royalty currencies are invalid"
            ]
          },
          {
            "Name": "InvalidAttributeCount",
            "TypeFields": null,
            "Index": 40,
            "Docs": [
              "Provided attribute count doesnt match the count is storage"
            ]
          },
          {
            "Name": "ConflictingLocation",
            "TypeFields": null,
            "Index": 41,
            "Docs": [
              "Conflicting MultiLocation for an AssetId"
            ]
          },
          {
            "Name": "CollectionIdAlreadyInUse",
            "TypeFields": null,
            "Index": 42,
            "Docs": [
              "Collection ID is already in use"
            ]
          },
          {
            "Name": "FreezeStateRequired",
            "TypeFields": null,
            "Index": 43,
            "Docs": [
              "Freeze state is required when freezing a token"
            ]
          },
          {
            "Name": "PremintExceeded",
            "TypeFields": null,
            "Index": 44,
            "Docs": [
              "The preminted amount would be exceeded by the mint operation"
            ]
          },
          {
            "Name": "TokenMetadataCreationFailed",
            "TypeFields": null,
            "Index": 45,
            "Docs": [
              "Token metadata could not be created from mint params"
            ]
          },
          {
            "Name": "NoClaimAvailable",
            "TypeFields": null,
            "Index": 46,
            "Docs": [
              "There is nothing to claim"
            ]
          },
          {
            "Name": "InvalidEthereumSignature",
            "TypeFields": null,
            "Index": 47,
            "Docs": [
              "The ethereum signature is invalid"
            ]
          },
          {
            "Name": "InvalidEthereumAddress",
            "TypeFields": null,
            "Index": 48,
            "Docs": [
              "The ethereum address does not match the signature"
            ]
          },
          {
            "Name": "TokenIdReservedForClaim",
            "TypeFields": null,
            "Index": 49,
            "Docs": [
              "The token id cannot be minted because it's reserved for claiming"
            ]
          },
          {
            "Name": "CollectionCountExceeded",
            "TypeFields": null,
            "Index": 50,
            "Docs": [
              "The number of collections has exceeded the bound"
            ]
          },
          {
            "Name": "WrongCount",
            "TypeFields": null,
            "Index": 51,
            "Docs": [
              "The passed count does not reflect the amount in storage"
            ]
          },
          {
            "Name": "InvalidMintParams",
            "TypeFields": null,
            "Index": 52,
            "Docs": [
              "Mint params are invalid"
            ]
          }
        ],
        "Path": [
          "pallet_multi_tokens",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "912": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "name",
            "TypeName": "Name",
            "TypeId": 252
          },
          {
            "Name": "rule_sets",
            "TypeName": "DispatchRuleSets",
            "TypeId": 913
          },
          {
            "Name": "total_reserved",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "account_count",
            "TypeName": "u32",
            "TypeId": 123
          },
          {
            "Name": "user_account_management",
            "TypeName": "Option<UserAccountManagement>",
            "TypeId": 258
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "provides_deposit",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "account_rules",
            "TypeName": "AccountRuleSets",
            "TypeId": 935
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "FuelTank"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 252
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DispatchRuleSets",
            "TypeId": 913
          },
          {
            "Name": "AccountRuleSets",
            "TypeId": 935
          }
        ],
        "TypeDef": "Composite"
      },
      "913": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 932
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 914
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "914": {
        "TypeFields": [
          {
            "Name": "rules",
            "TypeName": "BoundedBTreeMap<DispatchRuleKind, Rule, MaxRules>",
            "TypeId": 928
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "RuleSet"
        ],
        "TypeParams": [
          {
            "Name": "Rule",
            "TypeId": 915
          },
          {
            "Name": "MaxRules",
            "TypeId": 563
          }
        ],
        "TypeDef": "Composite"
      },
      "915": {
        "Variants": [
          {
            "Name": "WhitelistedCallers",
            "TypeFields": [
              {
                "TypeName": "WhitelistedCallersRuleOf<T>",
                "TypeId": 264
              }
            ],
            "Index": 0
          },
          {
            "Name": "WhitelistedCollections",
            "TypeFields": [
              {
                "TypeName": "WhitelistedCollectionsRuleOf<T>",
                "TypeId": 546
              }
            ],
            "Index": 1
          },
          {
            "Name": "MaxFuelBurnPerTransaction",
            "TypeFields": [
              {
                "TypeName": "MaxFuelBurnPerTransactionRuleOf<T>",
                "TypeId": 549
              }
            ],
            "Index": 2
          },
          {
            "Name": "UserFuelBudget",
            "TypeFields": [
              {
                "TypeName": "UserFuelBudgetRuleOf<T>",
                "TypeId": 916
              }
            ],
            "Index": 3
          },
          {
            "Name": "TankFuelBudget",
            "TypeFields": [
              {
                "TypeName": "TankFuelBudgetRuleOf<T>",
                "TypeId": 917
              }
            ],
            "Index": 4
          },
          {
            "Name": "RequireToken",
            "TypeFields": [
              {
                "TypeName": "RequireTokenRuleOf<T>",
                "TypeId": 268
              }
            ],
            "Index": 5
          },
          {
            "Name": "PermittedCalls",
            "TypeFields": [
              {
                "TypeName": "PermittedCallsRuleOf<T>",
                "TypeId": 553
              }
            ],
            "Index": 6
          },
          {
            "Name": "PermittedExtrinsics",
            "TypeFields": [
              {
                "TypeName": "PermittedExtrinsicsRuleOf<T>",
                "TypeId": 918
              }
            ],
            "Index": 7
          },
          {
            "Name": "WhitelistedPallets",
            "TypeFields": [
              {
                "TypeName": "WhitelistedPalletsRuleOf<T>",
                "TypeId": 925
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "DispatchRuleWrapper"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant"
      },
      "916": {
        "TypeFields": [
          {
            "Name": "budget",
            "TypeName": "Budget",
            "TypeId": 551
          },
          {
            "Name": "user_count",
            "TypeName": "u32",
            "TypeId": 123
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "user_fuel_budget",
          "UserFuelBudgetRule"
        ],
        "TypeParams": [
          {
            "Name": "Budget",
            "TypeId": 551
          }
        ],
        "TypeDef": "Composite"
      },
      "917": {
        "TypeFields": [
          {
            "Name": "budget",
            "TypeName": "Budget<Balance, BlockNumber>",
            "TypeId": 551
          },
          {
            "Name": "consumption",
            "TypeName": "Consumption<Balance, BlockNumber>",
            "TypeId": 271
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "tank_fuel_budget",
          "TankFuelBudgetRule"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "918": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<ExtrinsicInfo, Max>",
            "TypeId": 923
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "permitted_extrinsics",
          "PermittedExtrinsicsRule"
        ],
        "TypeParams": [
          {
            "Name": "ExtrinsicInfo",
            "TypeId": 919
          },
          {
            "Name": "Max",
            "TypeId": 560
          }
        ],
        "TypeDef": "Composite"
      },
      "919": {
        "TypeFields": [
          {
            "Name": "pallet_name",
            "TypeName": "BoundedString<MaxNameLength>",
            "TypeId": 921
          },
          {
            "Name": "extrinsic_name",
            "TypeName": "BoundedString<MaxNameLength>",
            "TypeId": 921
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "ExtrinsicInfo"
        ],
        "TypeParams": [
          {
            "Name": "MaxNameLength",
            "TypeId": 920
          }
        ],
        "TypeDef": "Composite"
      },
      "920": {
        "Path": [
          "enjin_runtime",
          "MaxExtrinsicNameLength"
        ],
        "TypeDef": "Composite"
      },
      "921": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, MaxLength>",
            "TypeId": 922
          }
        ],
        "Path": [
          "ep_core",
          "frame",
          "types",
          "BoundedString"
        ],
        "TypeParams": [
          {
            "Name": "MaxLength",
            "TypeId": 920
          }
        ],
        "TypeDef": "Composite"
      },
      "922": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "923": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 924
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 919
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "924": {
        "TypeId": 919,
        "TypeDef": "Sequence"
      },
      "925": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<BoundedString, Max>",
            "TypeId": 926
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "whitelisted_pallets",
          "WhitelistedPalletsRule"
        ],
        "TypeParams": [
          {
            "Name": "BoundedString",
            "TypeId": 921
          },
          {
            "Name": "Max",
            "TypeId": 555
          }
        ],
        "TypeDef": "Composite"
      },
      "926": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 927
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 921
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "927": {
        "TypeId": 921,
        "TypeDef": "Sequence"
      },
      "928": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 929
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 270
          },
          {
            "Name": "V",
            "TypeId": 915
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "929": {
        "TypeFields": [
          {
            "TypeId": 930
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 270
          },
          {
            "Name": "V",
            "TypeId": 915
          }
        ],
        "TypeDef": "Composite"
      },
      "930": {
        "TypeId": 931,
        "TypeDef": "Sequence"
      },
      "931": {
        "TypeIds": [
          270,
          915
        ],
        "TypeDef": "Tuple"
      },
      "932": {
        "TypeFields": [
          {
            "TypeId": 933
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 914
          }
        ],
        "TypeDef": "Composite"
      },
      "933": {
        "TypeId": 934,
        "TypeDef": "Sequence"
      },
      "934": {
        "TypeIds": [
          4,
          914
        ],
        "TypeDef": "Tuple"
      },
      "935": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 938
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 936
          },
          {
            "Name": "V",
            "TypeId": 937
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "936": {
        "Variants": [
          {
            "Name": "WhitelistedCallers",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "RequireToken",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "AccountRuleKind"
        ],
        "TypeDef": "Variant"
      },
      "937": {
        "Variants": [
          {
            "Name": "WhitelistedCallers",
            "TypeFields": [
              {
                "TypeName": "WhitelistedCallersRuleOf<T>",
                "TypeId": 264
              }
            ],
            "Index": 0
          },
          {
            "Name": "RequireToken",
            "TypeFields": [
              {
                "TypeName": "RequireTokenRuleOf<T>",
                "TypeId": 268
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "rules",
          "AccountRuleWrapper"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant"
      },
      "938": {
        "TypeFields": [
          {
            "TypeId": 939
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 936
          },
          {
            "Name": "V",
            "TypeId": 937
          }
        ],
        "TypeDef": "Composite"
      },
      "939": {
        "TypeId": 940,
        "TypeDef": "Sequence"
      },
      "940": {
        "TypeIds": [
          936,
          937
        ],
        "TypeDef": "Tuple"
      },
      "941": {
        "TypeIds": [
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "942": {
        "TypeFields": [
          {
            "Name": "tank_deposit",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "user_deposit",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "total_received",
            "TypeName": "Balance",
            "TypeId": 63
          },
          {
            "Name": "rule_data_sets",
            "TypeName": "BoundedBTreeMap<RuleSetId, BoundedBTreeMap<DispatchRuleKind, BoundedVec<\nu8, MaxRuleDataLength>, MaxRuleCount>, MaxRuleSets,>",
            "TypeId": 945
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "types",
          "UserAccount"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "RuleSetId",
            "TypeId": 4
          },
          {
            "Name": "MaxRuleSets",
            "TypeId": 943
          },
          {
            "Name": "MaxRuleCount",
            "TypeId": 563
          },
          {
            "Name": "MaxRuleDataLength",
            "TypeId": 944
          }
        ],
        "TypeDef": "Composite"
      },
      "943": {
        "Path": [
          "enjin_runtime",
          "MaxRuleSets"
        ],
        "TypeDef": "Composite"
      },
      "944": {
        "Path": [
          "enjin_runtime",
          "MaxAccountRuleDataLength"
        ],
        "TypeDef": "Composite"
      },
      "945": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 951
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 946
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "946": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 948
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 270
          },
          {
            "Name": "V",
            "TypeId": 947
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "947": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "948": {
        "TypeFields": [
          {
            "TypeId": 949
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 270
          },
          {
            "Name": "V",
            "TypeId": 947
          }
        ],
        "TypeDef": "Composite"
      },
      "949": {
        "TypeId": 950,
        "TypeDef": "Sequence"
      },
      "950": {
        "TypeIds": [
          270,
          947
        ],
        "TypeDef": "Tuple"
      },
      "951": {
        "TypeFields": [
          {
            "TypeId": 952
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 946
          }
        ],
        "TypeDef": "Composite"
      },
      "952": {
        "TypeId": 953,
        "TypeDef": "Sequence"
      },
      "953": {
        "TypeIds": [
          4,
          946
        ],
        "TypeDef": "Tuple"
      },
      "954": {
        "Variants": [
          {
            "Name": "FuelTankNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Fuel Tank not found"
            ]
          },
          {
            "Name": "FuelTankAlreadyExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Fuel Tank already exists"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Not enough funds to perform operation"
            ]
          },
          {
            "Name": "UsageRestricted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Fuel tank cannot be used due to restrictions"
            ]
          },
          {
            "Name": "FuelTankOutOfFunds",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fuel tank doesnt have enough funds"
            ]
          },
          {
            "Name": "RuleSetNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The rule set does not exist"
            ]
          },
          {
            "Name": "RuleNotFound",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The rule is missing"
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "User does not have permission to perform operation"
            ]
          },
          {
            "Name": "AccountAlreadyExists",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The account already exists"
            ]
          },
          {
            "Name": "AccountNotFound",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The account was not found"
            ]
          },
          {
            "Name": "DestroyWithExistingAccounts",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Destroying fuel tank is not possible while it has existing accounts attached"
            ]
          },
          {
            "Name": "DestroyUnfrozenTank",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Destroying fuel tank is not possible while it is not frozen"
            ]
          },
          {
            "Name": "MaxRuleSetsExceeded",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Max number of rules sets per fuel tank was exceeded"
            ]
          },
          {
            "Name": "UserRuleDataExceededMaxSize",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The size of the user rule data is greater than the allowed amount"
            ]
          },
          {
            "Name": "DecodeUserRuleDataFailed",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The user rule data could not be decoded"
            ]
          },
          {
            "Name": "RequiresFrozenTankOrRuleset",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Either the tank or ruleset must be frozen for this operation"
            ]
          },
          {
            "Name": "RequiresFrozenTank",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The fuel tank must be frozen for this operation"
            ]
          },
          {
            "Name": "MissingRequiredRule",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "A rule that is required for this operation does not exist"
            ]
          },
          {
            "Name": "MissingRequiredRuleUserData",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "User data for the required rule does not exist"
            ]
          },
          {
            "Name": "InvalidRuleSet",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The rule set of the fuel tank is misconfigured. This error should never occur."
            ]
          },
          {
            "Name": "AccountContainsRuleData",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "A user cannot remove an account that is storing data for a rule"
            ]
          },
          {
            "Name": "CannotRemoveRuleThatIsStoringAccountData",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "A rule cannot be removed from a rule set if it is storing data on any account"
            ]
          },
          {
            "Name": "DuplicateRuleKinds",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "A fuel tank cannot have more than one rule of the same kind"
            ]
          },
          {
            "Name": "DepositCalculationError",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Problems calculating the deposit for a call"
            ]
          },
          {
            "Name": "FuelTankFrozen",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The fuel tank is frozen"
            ]
          },
          {
            "Name": "CallerDoesNotHaveRuleSetTokenBalance",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The user does not have the token required by rule set"
            ]
          },
          {
            "Name": "NoDataToRemove",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The user does not have any data stored for rule set"
            ]
          }
        ],
        "Path": [
          "pallet_fuel_tanks",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "955": {
        "Variants": [
          {
            "Name": "CannotPauseSelf",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Cannot pause this pallet or it's extrinsic"
            ]
          },
          {
            "Name": "CannotProcessInput",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot read the pallet or extrinsic name"
            ]
          }
        ],
        "Path": [
          "pallet_extrinsic_pause",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Pallet's error type."
        ]
      },
      "956": {
        "TypeFields": [
          {
            "Name": "protocol_fee",
            "TypeName": "Perbill",
            "TypeId": 44
          }
        ],
        "Path": [
          "pallet_marketplace",
          "types",
          "MarketPlaceInfo"
        ],
        "TypeDef": "Composite"
      },
      "957": {
        "Variants": [
          {
            "Name": "UnableToFill",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "the order cannot be filled"
            ]
          },
          {
            "Name": "ListingNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The listing does not exist"
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The caller does not have permission for this operation"
            ]
          },
          {
            "Name": "MaxRoundingErrorExceeded",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The max rounding error was exceeded"
            ]
          },
          {
            "Name": "LowBaseCurrencyBalance",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The base currency balance is too low"
            ]
          },
          {
            "Name": "LowTokenBalance",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The token balance is too low"
            ]
          },
          {
            "Name": "TransferParamCreationFailed",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Transfer params could not be created"
            ]
          },
          {
            "Name": "TakeValueUnderMinimum",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The take value is under the minimum requirement"
            ]
          },
          {
            "Name": "ListingAlreadyExists",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "A listing with this id already exists"
            ]
          },
          {
            "Name": "InvalidAuctionStart",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The start time of the auction must be greater than the current block plus the",
              "minimum requirement"
            ]
          },
          {
            "Name": "InvalidAuctionEnd",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The end time of the auction must be after the start"
            ]
          },
          {
            "Name": "InactiveAuction",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Cannot bid on an auction that has not started or is over"
            ]
          },
          {
            "Name": "AuctionNotOver",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Cannot finalize an auction that is not over"
            ]
          },
          {
            "Name": "ListingIsWrongType",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "An action was taken that is not compatible with the listing's type."
            ]
          },
          {
            "Name": "InvalidAmount",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The amount is invalid"
            ]
          },
          {
            "Name": "InvalidPrice",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The price is invalid"
            ]
          },
          {
            "Name": "ListingForbidden",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Listing is forbidden for this token"
            ]
          },
          {
            "Name": "NoCurrency",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Neither the make side or the take side of the listing is considered a currency"
            ]
          },
          {
            "Name": "ListingNotActive",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The listing has not crossed the mandatory delay before its considered active"
            ]
          },
          {
            "Name": "CurrencyNotAllowedAsRoyalty",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The currency is not allowed to be used as a royalty payment"
            ]
          },
          {
            "Name": "BuyerIsSeller",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The seller is not allowed to buy their own listing"
            ]
          },
          {
            "Name": "MakeAssetFrozen",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Make asset is frozen"
            ]
          },
          {
            "Name": "TakeAssetFrozen",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Take asset is frozen"
            ]
          }
        ],
        "Path": [
          "pallet_marketplace",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The error for this pallet"
        ]
      },
      "958": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 959
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 577
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "959": {
        "TypeId": 577,
        "TypeDef": "Sequence"
      },
      "960": {
        "Variants": [
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "Path": [
          "pallet_beefy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "961": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "crate::ValidatorSetId",
            "TypeId": 11
          },
          {
            "Name": "len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "root",
            "TypeName": "MerkleRoot",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_consensus_beefy",
          "mmr",
          "BeefyAuthoritySet"
        ],
        "TypeParams": [
          {
            "Name": "MerkleRoot",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "962": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 965
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 963
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "963": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 964
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 964
          }
        ],
        "TypeDef": "Variant"
      },
      "964": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 288
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 293
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 586
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 417
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 293
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 417
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "965": {
        "TypeId": 963,
        "TypeDef": "Sequence"
      },
      "966": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "967": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 372
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 855
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 74
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "968": {
        "TypeIds": [
          12,
          4
        ],
        "TypeDef": "Tuple"
      },
      "969": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "970": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "971": {
        "TypeIds": [
          0,
          292
        ],
        "TypeDef": "Tuple"
      },
      "972": {
        "Variants": [
          {
            "Name": "Casting",
            "TypeFields": [
              {
                "TypeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                "TypeId": 973
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "TypeName": "Delegating<Balance, AccountId, BlockNumber>",
                "TypeId": 979
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "973": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
            "TypeId": 974
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 977
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 978
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Casting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Composite"
      },
      "974": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 976
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 975
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "975": {
        "TypeIds": [
          4,
          589
        ],
        "TypeDef": "Tuple"
      },
      "976": {
        "TypeId": 975,
        "TypeDef": "Sequence"
      },
      "977": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "978": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "979": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "target",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "conviction",
            "TypeName": "Conviction",
            "TypeId": 591
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 977
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 978
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Delegating"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "980": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 982
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 981
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "981": {
        "TypeIds": [
          292,
          6
        ],
        "TypeDef": "Tuple"
      },
      "982": {
        "TypeId": 981,
        "TypeDef": "Sequence"
      },
      "983": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Poll is not ongoing."
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given account did not vote on the poll."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "NoPermissionYet",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The actor has no permission to conduct the action right now but will do in the future."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "AlreadyVoting",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "ClassNeeded",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The class must be supplied since it is not easily determinable from the state."
            ]
          },
          {
            "Name": "BadClass",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The class ID supplied is invalid."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "984": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                "TypeId": 985
              }
            ],
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 1
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 2
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 3
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 4
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 292
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 417
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 293
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 641
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 287
          }
        ],
        "TypeDef": "Variant"
      },
      "985": {
        "TypeFields": [
          {
            "Name": "track",
            "TypeName": "TrackId",
            "TypeId": 292
          },
          {
            "Name": "origin",
            "TypeName": "RuntimeOrigin",
            "TypeId": 417
          },
          {
            "Name": "proposal",
            "TypeName": "Call",
            "TypeId": 293
          },
          {
            "Name": "enactment",
            "TypeName": "DispatchTime<Moment>",
            "TypeId": 594
          },
          {
            "Name": "submitted",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "submission_deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 986
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Option<Deposit<AccountId, Balance>>",
            "TypeId": 987
          },
          {
            "Name": "deciding",
            "TypeName": "Option<DecidingStatus<Moment>>",
            "TypeId": 988
          },
          {
            "Name": "tally",
            "TypeName": "Tally",
            "TypeId": 641
          },
          {
            "Name": "in_queue",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "alarm",
            "TypeName": "Option<(Moment, ScheduleAddress)>",
            "TypeId": 990
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 292
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 417
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 293
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 641
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 287
          }
        ],
        "TypeDef": "Composite"
      },
      "986": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "Deposit"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "987": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 986
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 986
          }
        ],
        "TypeDef": "Variant"
      },
      "988": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 989
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 989
          }
        ],
        "TypeDef": "Variant"
      },
      "989": {
        "TypeFields": [
          {
            "Name": "since",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "confirming",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "DecidingStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "990": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 991
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 991
          }
        ],
        "TypeDef": "Variant"
      },
      "991": {
        "TypeIds": [
          4,
          287
        ],
        "TypeDef": "Tuple"
      },
      "992": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 762
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 763
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "993": {
        "TypeId": 994,
        "TypeDef": "Sequence"
      },
      "994": {
        "TypeIds": [
          292,
          995
        ],
        "TypeDef": "Tuple"
      },
      "995": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "&'static str",
            "TypeId": 657
          },
          {
            "Name": "max_deciding",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "prepare_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "decision_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "confirm_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "min_enactment_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "min_approval",
            "TypeName": "Curve",
            "TypeId": 996
          },
          {
            "Name": "min_support",
            "TypeName": "Curve",
            "TypeId": 996
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "TrackInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Moment",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "996": {
        "Variants": [
          {
            "Name": "LinearDecreasing",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "Perbill",
                "TypeId": 42
              },
              {
                "Name": "floor",
                "TypeName": "Perbill",
                "TypeId": 42
              },
              {
                "Name": "ceil",
                "TypeName": "Perbill",
                "TypeId": 42
              }
            ],
            "Index": 0
          },
          {
            "Name": "SteppedDecreasing",
            "TypeFields": [
              {
                "Name": "begin",
                "TypeName": "Perbill",
                "TypeId": 42
              },
              {
                "Name": "end",
                "TypeName": "Perbill",
                "TypeId": 42
              },
              {
                "Name": "step",
                "TypeName": "Perbill",
                "TypeId": 42
              },
              {
                "Name": "period",
                "TypeName": "Perbill",
                "TypeId": 42
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reciprocal",
            "TypeFields": [
              {
                "Name": "factor",
                "TypeName": "FixedI64",
                "TypeId": 997
              },
              {
                "Name": "x_offset",
                "TypeName": "FixedI64",
                "TypeId": 997
              },
              {
                "Name": "y_offset",
                "TypeName": "FixedI64",
                "TypeId": 997
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "Curve"
        ],
        "TypeDef": "Variant"
      },
      "997": {
        "TypeFields": [
          {
            "TypeName": "i64",
            "TypeId": 998
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedI64"
        ],
        "TypeDef": "Composite"
      },
      "998": {
        "Primitive": "I64",
        "TypeDef": "Primitive"
      },
      "999": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Referendum is not ongoing."
            ]
          },
          {
            "Name": "HasDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "Name": "BadTrack",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The track identifier given was invalid."
            ]
          },
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "Name": "QueueEmpty",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The queue of the track is empty."
            ]
          },
          {
            "Name": "BadReferendum",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "Name": "NothingToDo",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "Name": "NoTrack",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "Name": "Unfinished",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "Name": "BadStatus",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "1000": {
        "Variants": [
          {
            "Name": "UnavailablePreImage",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The preimage of the call hash could not be loaded."
            ]
          },
          {
            "Name": "UndecodableCall",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The call could not be decoded."
            ]
          },
          {
            "Name": "InvalidCallWeightWitness",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The weight of the decoded call was higher than the witness."
            ]
          },
          {
            "Name": "CallIsNotWhitelisted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The call was not whitelisted."
            ]
          },
          {
            "Name": "CallAlreadyWhitelisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The call was already whitelisted; No-Op."
            ]
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "1001": {
        "TypeFields": [
          {
            "Name": "rank",
            "TypeName": "Rank",
            "TypeId": 292
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "MemberRecord"
        ],
        "TypeDef": "Composite"
      },
      "1002": {
        "TypeIds": [
          292,
          0
        ],
        "TypeDef": "Tuple"
      },
      "1003": {
        "TypeIds": [
          292,
          4
        ],
        "TypeDef": "Tuple"
      },
      "1004": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1005": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account is not a member."
            ]
          },
          {
            "Name": "NotPolling",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The given poll index is unknown or has closed."
            ]
          },
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given poll is still ongoing."
            ]
          },
          {
            "Name": "NoneRemaining",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are no further records to be removed."
            ]
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Unexpected error in state."
            ]
          },
          {
            "Name": "RankTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The member's rank is too low to vote."
            ]
          },
          {
            "Name": "InvalidWitness",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The information provided is incorrect."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The origin is not sufficiently privileged to do the operation."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "1006": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                "TypeId": 1007
              }
            ],
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 1
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 2
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 3
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 987
              }
            ],
            "Index": 4
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 292
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 417
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 293
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 649
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 287
          }
        ],
        "TypeDef": "Variant"
      },
      "1007": {
        "TypeFields": [
          {
            "Name": "track",
            "TypeName": "TrackId",
            "TypeId": 292
          },
          {
            "Name": "origin",
            "TypeName": "RuntimeOrigin",
            "TypeId": 417
          },
          {
            "Name": "proposal",
            "TypeName": "Call",
            "TypeId": 293
          },
          {
            "Name": "enactment",
            "TypeName": "DispatchTime<Moment>",
            "TypeId": 594
          },
          {
            "Name": "submitted",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "submission_deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 986
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Option<Deposit<AccountId, Balance>>",
            "TypeId": 987
          },
          {
            "Name": "deciding",
            "TypeName": "Option<DecidingStatus<Moment>>",
            "TypeId": 988
          },
          {
            "Name": "tally",
            "TypeName": "Tally",
            "TypeId": 649
          },
          {
            "Name": "in_queue",
            "TypeName": "bool",
            "TypeId": 37
          },
          {
            "Name": "alarm",
            "TypeName": "Option<(Moment, ScheduleAddress)>",
            "TypeId": 990
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 292
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 417
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 293
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 649
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 287
          }
        ],
        "TypeDef": "Composite"
      },
      "1008": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 655
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 287
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1009": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Referendum is not ongoing."
            ]
          },
          {
            "Name": "HasDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "Name": "BadTrack",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The track identifier given was invalid."
            ]
          },
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "Name": "QueueEmpty",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The queue of the track is empty."
            ]
          },
          {
            "Name": "BadReferendum",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "Name": "NothingToDo",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "Name": "NoTrack",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "Name": "Unfinished",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "Name": "BadStatus",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "1010": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 1011
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo<MaxAdditionalFields>",
            "TypeId": 600
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "MaxAdditionalFields"
          }
        ],
        "TypeDef": "Composite"
      },
      "1011": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 1013
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1012
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1012": {
        "TypeIds": [
          4,
          637
        ],
        "TypeDef": "Tuple"
      },
      "1013": {
        "TypeId": 1012,
        "TypeDef": "Sequence"
      },
      "1014": {
        "TypeIds": [
          6,
          1015
        ],
        "TypeDef": "Tuple"
      },
      "1015": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 80
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1016": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 1019
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1017
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "1017": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1018
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1018
          }
        ],
        "TypeDef": "Variant"
      },
      "1018": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdentityFields",
            "TypeId": 635
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "1019": {
        "TypeId": 1017,
        "TypeDef": "Sequence"
      },
      "1020": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyFields",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Too many additional fields."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "1021": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "currency",
            "TypeName": "VoteCurrency<TokenId>",
            "TypeId": 639
          },
          {
            "Name": "unlocks_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_vote_manager",
          "types",
          "BalanceToUnlock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "TokenId",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "1022": {
        "Variants": [
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account is already delegating their vote."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account has insufficient funds to cast the vote."
            ]
          },
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The maximum number of votes for this referendum has been reached."
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The account is not a registered voter for the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The account does not have permission to perform the operation."
            ]
          },
          {
            "Name": "UnlockVoteNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The vote unlock information was not found."
            ]
          },
          {
            "Name": "UnlockPeriodNotPassed",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The unlock period for the vote has not yet passed."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Max votes exceeded"
            ]
          },
          {
            "Name": "ClassNeeded",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Class info missing"
            ]
          },
          {
            "Name": "NoPermissionYet",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The account does not have permission, usually related to unlock periods"
            ]
          }
        ],
        "Path": [
          "pallet_vote_manager",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "1023": {
        "TypeFields": [
          {
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 311
          },
          {
            "Name": "Call",
            "TypeId": 294
          },
          {
            "Name": "Signature",
            "TypeId": 481
          },
          {
            "Name": "Extra",
            "TypeId": 1024
          }
        ],
        "TypeDef": "Composite"
      },
      "1024": {
        "TypeIds": [
          1025,
          1026,
          1027,
          1028,
          1029,
          1031,
          1032,
          1033,
          1034
        ],
        "TypeDef": "Tuple"
      },
      "1025": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1026": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1027": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1028": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1029": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 1030
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1030": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "1031": {
        "TypeFields": [
          {
            "TypeName": "T::Index",
            "TypeId": 123
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1032": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1033": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 63
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "1034": {
        "Path": [
          "pallet_fuel_tanks",
          "extension",
          "CheckFuelTank"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 18,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 655
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 656,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 37,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 37,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 653,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 295
        },
        "Events": {
          "TypeId": 21
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 658,
            "Value": "AgOBXQALACBKqdEBE///////////wukXGwABC5DVGZBYAROjcD0K16NwvQELAJj3Pl0BE/////////+/AQAAwukXGwABC5BdbPrMAROjcD0K16Nw/QELACBKqdEBE///////////AQcAiFJqdBMAAAAAAAAAQMLpFxsAAAAA",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 661,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "ABAAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 663,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 664,
            "Value": "FGVuamluFGVuamluAQAAAAEEAAABAAAAPN9qy2iZB2CbBAAAADfjl/x8kfXkAgAAAED+OtQB+JWaBgAAANK8mJfu0I8VAwAAAPeLJ4vlP0VMAgAAAMvKJeOfFCOHAgAAAEnqrxtUigywAgAAAJHV3xiw0s9YAgAAAGh61ErTfwPCAQAAAKs8BXIpH+uLAQAAAO2ZxayyXu31AwAAAK8sApeiPm09BAAAALydiZBPW5I/AQAAADfIuxNQqaKoBAAAAPP/FNWrUnBZAwAAAAYAAAAB",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 292,
            "Value": "Vwg=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 668
        },
        "Index": 0
      },
      "1": {
        "Name": "RandomnessCollectiveFlip",
        "Storage": {
          "Prefix": "RandomnessCollectiveFlip",
          "Entries": [
            {
              "Name": "RandomMaterial",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 669,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Series of block headers from the last 81 blocks that acts as random seed material. This",
                " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                " the oldest hash."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 1
      },
      "2": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 37,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 299
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 11,
            "Value": "uAsAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "Babe",
        "Storage": {
          "Prefix": "Babe",
          "Entries": [
            {
              "Name": "EpochIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current epoch index."
              ]
            },
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 670,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current epoch authorities."
              ]
            },
            {
              "Name": "GenesisSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 305,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The slot at which the first epoch actually started. This is 0",
                " until the first block of the chain."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 305,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current slot number."
              ]
            },
            {
              "Name": "Randomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The epoch randomness for the *current* epoch.",
                "",
                " # Security",
                "",
                " This MUST NOT be used for gambling, as it can be influenced by a",
                " malicious validator in the short term. It MAY be used in many",
                " cryptographic protocols, however, so long as one remembers that this",
                " (like everything else on-chain) it is public. For example, it can be",
                " used where a number is needed that cannot have been chosen by an",
                " adversary, for purposes such as public-coin zero-knowledge proofs."
              ]
            },
            {
              "Name": "PendingEpochConfigChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 307,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending epoch configuration change that will be applied when the next epoch is enacted."
              ]
            },
            {
              "Name": "NextRandomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Next epoch randomness."
              ]
            },
            {
              "Name": "NextAuthorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 670,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Next epoch authorities."
              ]
            },
            {
              "Name": "SegmentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Randomness under construction.",
                "",
                " We make a trade-off between storage accesses and list length.",
                " We store the under-construction randomness in segments of up to",
                " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                "",
                " Once a segment reaches this length, we begin the next one.",
                " We reset all segments and return to `0` at the beginning of every",
                " epoch."
              ]
            },
            {
              "Name": "UnderConstruction",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 673
                }
              },
              "Default": "AA==",
              "Docs": [
                " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
              ]
            },
            {
              "Name": "Initialized",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 675,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Temporary value (cleared at block finalization) which is `Some`",
                " if per-block initialization has already been called for current block."
              ]
            },
            {
              "Name": "AuthorVrfRandomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 288,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " This field should always be populated during block processing unless",
                " secondary plain slots are enabled (which don't contain a VRF output).",
                "",
                " It is set in `on_finalize`, before it will contain the value from the last block."
              ]
            },
            {
              "Name": "EpochStart",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 287,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The block numbers when the last and current epoch have started, respectively `N-1` and",
                " `N`.",
                " NOTE: We track this is in order to annotate the block number when a given pool of",
                " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                " slots, which may be skipped, the block numbers may not line up with the slot numbers."
              ]
            },
            {
              "Name": "Lateness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " How late the current block is compared to its parent.",
                "",
                " This entry is populated as part of block execution and is cleaned up",
                " on block finalization. Querying this storage entry outside of block",
                " execution context should always yield zero."
              ]
            },
            {
              "Name": "EpochConfig",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 681,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The configuration for the current epoch. Should never be `None` as it is initialized in",
                " genesis."
              ]
            },
            {
              "Name": "NextEpochConfig",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 681,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The configuration for the next epoch, `None` if the config will not change",
                " (you can fallback to `EpochConfig` instead in that case)."
              ]
            },
            {
              "Name": "SkippedEpochs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 682,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A list of the last 100 skipped epochs and the corresponding session index",
                " when the epoch was skipped.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof",
                " must contains a key-ownership proof for a given session, therefore we need a",
                " way to tie together sessions and epoch indices, i.e. we need to validate that",
                " a validator was the owner of a given key on a given session, and what the",
                " active epoch index was during that session."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 300
        },
        "Events": null,
        "Constants": [
          {
            "Name": "EpochDuration",
            "TypeId": 11,
            "Value": "YAkAAAAAAAA=",
            "Docs": [
              " The amount of time, in slots, that each epoch should last.",
              " NOTE: Currently it is not possible to change the epoch duration after",
              " the chain has started. Attempting to do so will brick block production."
            ]
          },
          {
            "Name": "ExpectedBlockTime",
            "TypeId": 11,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The expected average block time at which BABE should be creating",
              " blocks. Since BABE is probabilistic it is not trivial to figure out",
              " what the expected average block time should be based on the slot",
              " duration and the security parameter `c` (where `1 - c` represents",
              " the probability of a slot being empty)."
            ]
          },
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Max number of authorities allowed"
            ]
          }
        ],
        "Errors": {
          "TypeId": 685
        },
        "Index": 3
      },
      "4": {
        "Name": "Historical",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 4
      },
      "5": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 5
      },
      "6": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 686
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 690
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 693
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 693
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 310
        },
        "Events": {
          "TypeId": 30
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "AACKXXhFYwEAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          },
          {
            "Name": "MaxHolds",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of holds that can exist on an account at any time."
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 696
        },
        "Index": 6
      },
      "7": {
        "Name": "Offences",
        "Storage": {
          "Prefix": "Offences",
          "Entries": [
            {
              "Name": "Reports",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 697
                }
              },
              "Default": "AA==",
              "Docs": [
                " The primary structure that holds all offence records keyed by report identifiers."
              ]
            },
            {
              "Name": "ConcurrentReportsIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 698,
                  "Value": 654
                }
              },
              "Default": "AA==",
              "Docs": [
                " A vector of reports of the same kind that happened at the same time slot."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 32
        },
        "Constants": [],
        "Errors": null,
        "Index": 7
      },
      "8": {
        "Name": "ElectionProviderMultiPhase",
        "Storage": {
          "Prefix": "ElectionProviderMultiPhase",
          "Entries": [
            {
              "Name": "Round",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AQAAAA==",
              "Docs": [
                " Internal counter for the number of rounds.",
                "",
                " This is useful for de-duplication of transactions submitted to the pool, and general",
                " diagnostics of the pallet.",
                "",
                " This is merely incremented once per every time that an upstream `elect` is called."
              ]
            },
            {
              "Name": "CurrentPhase",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 39,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current phase."
              ]
            },
            {
              "Name": "QueuedSolution",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 699,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                "",
                " Always sorted by score."
              ]
            },
            {
              "Name": "Snapshot",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 701,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Snapshot data of the round.",
                "",
                " This is created at the beginning of the signed phase and cleared upon calling `elect`."
              ]
            },
            {
              "Name": "DesiredTargets",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Desired number of targets to elect for this round.",
                "",
                " Only exists when [`Snapshot`] is present."
              ]
            },
            {
              "Name": "SnapshotMetadata",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 366,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The metadata of the [`RoundSnapshot`]",
                "",
                " Only exists when [`Snapshot`] is present."
              ]
            },
            {
              "Name": "SignedSubmissionNextIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next index to be assigned to an incoming signed submission.",
                "",
                " Every accepted submission is assigned a unique index; that index is bound to that particular",
                " submission for the duration of the election. On election finalization, the next index is",
                " reset to 0.",
                "",
                " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                " because iteration is slow. Instead, we store the value here."
              ]
            },
            {
              "Name": "SignedSubmissionIndices",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 705,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                " value in `SignedSubmissions`.",
                "",
                " We never need to process more than a single signed submission at a time. Signed submissions",
                " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                " them one at a time instead of reading and decoding all of them at once."
              ]
            },
            {
              "Name": "SignedSubmissionsMap",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 708
                }
              },
              "Default": "AA==",
              "Docs": [
                " Unchecked, signed solutions.",
                "",
                " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                " allowing us to keep only a single one in memory at a time.",
                "",
                " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                " affect; we shouldn't need a cryptographically secure hasher."
              ]
            },
            {
              "Name": "MinimumUntrustedScore",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 38,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The minimum score that each 'untrusted' solution must attain in order to be considered",
                " feasible.",
                "",
                " Can be set via `set_minimum_untrusted_score`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 313
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [
          {
            "Name": "UnsignedPhase",
            "TypeId": 4,
            "Value": "WAIAAA==",
            "Docs": [
              " Duration of the unsigned phase."
            ]
          },
          {
            "Name": "SignedPhase",
            "TypeId": 4,
            "Value": "WAIAAA==",
            "Docs": [
              " Duration of the signed phase."
            ]
          },
          {
            "Name": "BetterSignedThreshold",
            "TypeId": 42,
            "Value": "AAAAAA==",
            "Docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Signed phase."
            ]
          },
          {
            "Name": "BetterUnsignedThreshold",
            "TypeId": 42,
            "Value": "oIYBAA==",
            "Docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Unsigned phase."
            ]
          },
          {
            "Name": "OffchainRepeat",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The repeat threshold of the offchain worker.",
              "",
              " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
              " to submit the worker's solution."
            ]
          },
          {
            "Name": "MinerTxPriority",
            "TypeId": 11,
            "Value": "/v///////38=",
            "Docs": [
              " The priority of the unsigned transaction submitted in the unsigned-phase"
            ]
          },
          {
            "Name": "SignedMaxSubmissions",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " Maximum number of signed submissions that can be queued.",
              "",
              " It is best to avoid adjusting this during an election, as it impacts downstream data",
              " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
              " update this value during an election, you _must_ ensure that",
              " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
              " attempts to submit new solutions may cause a runtime panic."
            ]
          },
          {
            "Name": "SignedMaxWeight",
            "TypeId": 9,
            "Value": "C9CUuXhYAROjcD0K16NwvQ==",
            "Docs": [
              " Maximum weight of a signed solution.",
              "",
              " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
              " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
              " this value."
            ]
          },
          {
            "Name": "SignedMaxRefunds",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " The maximum amount of unchecked solutions to refund the call fee for."
            ]
          },
          {
            "Name": "SignedRewardBase",
            "TypeId": 6,
            "Value": "AAB6IsHIsSIAAAAAAAAAAA==",
            "Docs": [
              " Base reward for a signed solution"
            ]
          },
          {
            "Name": "SignedDepositBase",
            "TypeId": 6,
            "Value": "AAB6IsHIsSIAAAAAAAAAAA==",
            "Docs": [
              " Base deposit for a signed solution."
            ]
          },
          {
            "Name": "SignedDepositByte",
            "TypeId": 6,
            "Value": "AIBiF17RWAAAAAAAAAAAAA==",
            "Docs": [
              " Per-byte deposit for a signed solution."
            ]
          },
          {
            "Name": "SignedDepositWeight",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Per-weight deposit for a signed solution."
            ]
          },
          {
            "Name": "MaxElectingVoters",
            "TypeId": 4,
            "Value": "QJwAAA==",
            "Docs": [
              " The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
              " are only over a single block, but once multi-block elections are introduced they will",
              " take place over multiple blocks."
            ]
          },
          {
            "Name": "MaxElectableTargets",
            "TypeId": 292,
            "Value": "ECc=",
            "Docs": [
              " The maximum number of electable targets to put in the snapshot."
            ]
          },
          {
            "Name": "MaxWinners",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of winners that can be elected by this `ElectionProvider`",
              " implementation.",
              "",
              " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
            ]
          },
          {
            "Name": "MinerMaxLength",
            "TypeId": 4,
            "Value": "AAA2AA==",
            "Docs": []
          },
          {
            "Name": "MinerMaxWeight",
            "TypeId": 9,
            "Value": "C9CUuXhYAROjcD0K16NwvQ==",
            "Docs": []
          },
          {
            "Name": "MinerMaxVotesPerVoter",
            "TypeId": 4,
            "Value": "EAAAAA==",
            "Docs": []
          },
          {
            "Name": "MinerMaxWinners",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 709
        },
        "Index": 8
      },
      "9": {
        "Name": "Staking",
        "Storage": {
          "Prefix": "Staking",
          "Entries": [
            {
              "Name": "ValidatorCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The ideal number of active validators."
              ]
            },
            {
              "Name": "MinimumValidatorCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Minimum number of staking participants before emergency conditions are imposed."
              ]
            },
            {
              "Name": "Invulnerables",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 80,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                " easy to initialize and the performance hit is minimal (we expect no more than four",
                " invulnerables) and restricted to testnets."
              ]
            },
            {
              "Name": "Bonded",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map from all locked \"stash\" accounts to the controller account.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "MinNominatorBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The minimum active bond to become and maintain the role of a nominator."
              ]
            },
            {
              "Name": "MinValidatorBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The minimum active bond to become and maintain the role of a validator."
              ]
            },
            {
              "Name": "MinimumActiveStake",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The minimum active nominator stake of the last successful election."
              ]
            },
            {
              "Name": "MinCommission",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The minimum amount of commission that validators can set.",
                "",
                " If set to `0`, no limit exists."
              ]
            },
            {
              "Name": "Ledger",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 710
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
              ]
            },
            {
              "Name": "Payee",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 374
                }
              },
              "Default": "AA==",
              "Docs": [
                " Where the reward payment should be made. Keyed by stash.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 43
                }
              },
              "Default": "AAA=",
              "Docs": [
                " The map from (wannabe) validator stash key to the preferences of that validator.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "CounterForValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "MaxValidatorsCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum validator count before we stop allowing new validators to join.",
                "",
                " When this value is not set, no limits are enforced."
              ]
            },
            {
              "Name": "Nominators",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 715
                }
              },
              "Default": "AA==",
              "Docs": [
                " The map from nominator stash key to their nomination preferences, namely the validators that",
                " they wish to support.",
                "",
                " Note that the keys of this storage map might become non-decodable in case the",
                " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators",
                " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                " nominators will effectively not-exist, until they re-submit their preferences such that it",
                " is within the bounds of the newly set `Config::MaxNominations`.",
                "",
                " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                " number of keys that exist.",
                "",
                " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                " [`Call::chill_other`] dispatchable by anyone.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "CounterForNominators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "MaxNominatorsCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum nominator count before we stop allowing new validators to join.",
                "",
                " When this value is not set, no limits are enforced."
              ]
            },
            {
              "Name": "CurrentEra",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current era index.",
                "",
                " This is the latest planned era, depending on how the Session pallet queues the validator",
                " set, it might be active or not."
              ]
            },
            {
              "Name": "ActiveEra",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 716,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The active era information, it holds index and start.",
                "",
                " The active era is the era being currently rewarded. Validator set of this era must be",
                " equal to [`SessionInterface::validators`]."
              ]
            },
            {
              "Name": "ErasStartSessionIndex",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                "",
                " Note: This tracks the starting session (i.e. session index when era start being active)",
                " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
              ]
            },
            {
              "Name": "ErasStakers",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 62
                }
              },
              "Default": "AAAA",
              "Docs": [
                " Exposure of validator at era.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                "",
                " Is it removed after `HISTORY_DEPTH` eras.",
                " If stakers hasn't been set or has been removed then empty exposure is returned."
              ]
            },
            {
              "Name": "ErasStakersClipped",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 62
                }
              },
              "Default": "AAAA",
              "Docs": [
                " Clipped Exposure of validator at era.",
                "",
                " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                " (Note: the field `total` and `own` of the exposure remains unchanged).",
                " This is used to limit the i/o cost for the nominator payout.",
                "",
                " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                "",
                " Is it removed after `HISTORY_DEPTH` eras.",
                " If stakers hasn't been set or has been removed then empty exposure is returned."
              ]
            },
            {
              "Name": "ErasValidatorPrefs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 43
                }
              },
              "Default": "AAA=",
              "Docs": [
                " Similar to `ErasStakers`, this holds the preferences of validators.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                "",
                " Is it removed after `HISTORY_DEPTH` eras."
              ]
            },
            {
              "Name": "ErasValidatorReward",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                "",
                " Eras that haven't finished yet or has been removed doesn't have reward."
              ]
            },
            {
              "Name": "ErasRewardPoints",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 718
                }
              },
              "Default": "AAAAAAA=",
              "Docs": [
                " Rewards for the last `HISTORY_DEPTH` eras.",
                " If reward hasn't been set or has been removed then 0 reward is returned."
              ]
            },
            {
              "Name": "ErasTotalStake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total amount staked for the last `HISTORY_DEPTH` eras.",
                " If total hasn't been set or has been removed then 0 stake is returned."
              ]
            },
            {
              "Name": "ForceEra",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 45,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Mode of era forcing."
              ]
            },
            {
              "Name": "SlashRewardFraction",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The percentage of the slash that is distributed to reporters.",
                "",
                " The rest of the slashed value is handled by the `Slash`."
              ]
            },
            {
              "Name": "CanceledSlashPayout",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount of currency given to reporters of a slash event which was",
                " canceled by extraordinary circumstances (e.g. governance)."
              ]
            },
            {
              "Name": "UnappliedSlashes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 722
                }
              },
              "Default": "AA==",
              "Docs": [
                " All unapplied slashes that are queued for later."
              ]
            },
            {
              "Name": "BondedEras",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 655,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from still-bonded eras to the first session index of that era.",
                "",
                " Must contains information for eras for the range:",
                " `[active_era - bounding_duration; active_era]`"
              ]
            },
            {
              "Name": "ValidatorSlashInEra",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 724
                }
              },
              "Default": "AA==",
              "Docs": [
                " All slashing events on validators, mapped by era to the highest slash proportion",
                " and slash value of the era."
              ]
            },
            {
              "Name": "NominatorSlashInEra",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " All slashing events on nominators, mapped by era to the highest slash value of the era."
              ]
            },
            {
              "Name": "SlashingSpans",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 725
                }
              },
              "Default": "AA==",
              "Docs": [
                " Slashing spans for stash accounts."
              ]
            },
            {
              "Name": "SpanSlash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 721,
                  "Value": 726
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Records information about the maximum slash of a stash within a slashing span,",
                " as well as how much reward has been paid out."
              ]
            },
            {
              "Name": "CurrentPlannedSession",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The last planned session scheduled by the session pallet.",
                "",
                " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
              ]
            },
            {
              "Name": "OffendingValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 727,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of validators that have offended in the active era and whether they are currently",
                " disabled.",
                "",
                " This value should be a superset of disabled validators since not all offences lead to the",
                " validator being disabled (if there was no slash). This is needed to track the percentage of",
                " validators that have offended in the current era, ensuring a new era is forced if",
                " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                " whether a given validator has previously offended using binary search. It gets cleared when",
                " the era ends."
              ]
            },
            {
              "Name": "ChillThreshold",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 376,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The threshold for when users can start calling `chill_other` for other validators /",
                " nominators. The threshold is compared to the actual number of validators / nominators",
                " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 373
        },
        "Events": {
          "TypeId": 41
        },
        "Constants": [
          {
            "Name": "MaxNominations",
            "TypeId": 4,
            "Value": "EAAAAA==",
            "Docs": [
              " Maximum number of nominations per nominator."
            ]
          },
          {
            "Name": "HistoryDepth",
            "TypeId": 4,
            "Value": "VAAAAA==",
            "Docs": [
              " Number of eras to keep in history.",
              "",
              " Following information is kept for eras in `[current_era -",
              " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
              " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
              " `ErasTotalStake`, `ErasStartSessionIndex`,",
              " `StakingLedger.claimed_rewards`.",
              "",
              " Must be more than the number of eras delayed by session.",
              " I.e. active era must always be in history. I.e. `active_era >",
              " current_era - history_depth` must be guaranteed.",
              "",
              " If migrating an existing pallet from storage value to config value,",
              " this should be set to same value or greater as in storage.",
              "",
              " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
              " item `StakingLedger.claimed_rewards`. Setting this value lower than",
              " the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a migration.",
              " The test `reducing_history_depth_abrupt` shows this effect."
            ]
          },
          {
            "Name": "SessionsPerEra",
            "TypeId": 4,
            "Value": "BgAAAA==",
            "Docs": [
              " Number of sessions per era."
            ]
          },
          {
            "Name": "BondingDuration",
            "TypeId": 4,
            "Value": "HAAAAA==",
            "Docs": [
              " Number of eras that staked funds must remain bonded for."
            ]
          },
          {
            "Name": "SlashDeferDuration",
            "TypeId": 4,
            "Value": "GwAAAA==",
            "Docs": [
              " Number of eras that slashes are deferred by, after computation.",
              "",
              " This should be less than the bonding duration. Set to 0 if slashes",
              " should be applied immediately, without opportunity for intervention."
            ]
          },
          {
            "Name": "MaxNominatorRewardedPerValidator",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximum number of nominators rewarded for each validator.",
              "",
              " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
              " claim their reward. This used to limit the i/o cost for the nominator payout."
            ]
          },
          {
            "Name": "MaxUnlockingChunks",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
              " have. Effectively determines how many unique eras a staker may be",
              " unbonding in.",
              "",
              " Note: `MaxUnlockingChunks` is used as the upper bound for the",
              " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
              " lower than the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a runtime",
              " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
              " this effect."
            ]
          }
        ],
        "Errors": {
          "TypeId": 729
        },
        "Index": 9
      },
      "10": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 80,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 37,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 730,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 377,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 383
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 732,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 382
        },
        "Events": {
          "TypeId": 46
        },
        "Constants": [],
        "Errors": {
          "TypeId": 734
        },
        "Index": 10
      },
      "11": {
        "Name": "Grandpa",
        "Storage": {
          "Prefix": "Grandpa",
          "Entries": [
            {
              "Name": "State",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 735,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " State of the current authority set."
              ]
            },
            {
              "Name": "PendingChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 736,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending change: (signaled at, scheduled change)."
              ]
            },
            {
              "Name": "NextForced",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " next block number where we can force a change."
              ]
            },
            {
              "Name": "Stalled",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 287,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `true` if we are currently stalled."
              ]
            },
            {
              "Name": "CurrentSetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                " in the \"set\" of Grandpa validators from genesis."
              ]
            },
            {
              "Name": "SetIdSession",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `SetId` is not under user control."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 387
        },
        "Events": {
          "TypeId": 47
        },
        "Constants": [
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max Authorities in use"
            ]
          },
          {
            "Name": "MaxSetIdSessionEntries",
            "TypeId": 11,
            "Value": "qAAAAAAAAAA=",
            "Docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "Errors": {
          "TypeId": 738
        },
        "Index": 11
      },
      "12": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 739
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 740,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 398
        },
        "Events": {
          "TypeId": 52
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 741,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AABAsrrJ4BkeAgAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 78,
            "Value": "AA==",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 741,
            "Value": "IKEHAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 742,
            "Value": "cHkvdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "Errors": {
          "TypeId": 743
        },
        "Index": 12
      },
      "13": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 85,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 744,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 53
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 13
      },
      "14": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 399
        },
        "Events": {
          "TypeId": 54
        },
        "Constants": [],
        "Errors": {
          "TypeId": 745
        },
        "Index": 14
      },
      "15": {
        "Name": "ImOnline",
        "Storage": {
          "Prefix": "ImOnline",
          "Entries": [
            {
              "Name": "HeartbeatAfter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The block number after which it's ok to send heartbeats in the current",
                " session.",
                "",
                " At the beginning of each session we set this to a value that should fall",
                " roughly in the middle of the session duration. The idea is to first wait for",
                " the validators to produce a block in the current session, so that the",
                " heartbeat later on will not be necessary.",
                "",
                " This value will only be used as a fallback if we fail to get a proper session",
                " progress estimate from `NextSessionRotation`, as those estimates should be",
                " more accurate then the value we calculate for `HeartbeatAfter`."
              ]
            },
            {
              "Name": "Keys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 746,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of keys that may issue a heartbeat."
              ]
            },
            {
              "Name": "ReceivedHeartbeats",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 287,
                  "Value": 748
                }
              },
              "Default": "AA==",
              "Docs": [
                " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                " `WrapperOpaque<BoundedOpaqueNetworkState>`."
              ]
            },
            {
              "Name": "AuthoredBlocks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                " number of blocks authored by the given authority."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 400
        },
        "Events": {
          "TypeId": 57
        },
        "Constants": [
          {
            "Name": "UnsignedPriority",
            "TypeId": 11,
            "Value": "//////////8=",
            "Docs": [
              " A configuration for base priority of unsigned transactions.",
              "",
              " This is exposed so that it can be tuned for particular runtime, when",
              " multiple pallets send unsigned transactions."
            ]
          }
        ],
        "Errors": {
          "TypeId": 753
        },
        "Index": 15
      },
      "16": {
        "Name": "AuthorityDiscovery",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 16
      },
      "17": {
        "Name": "VoterList",
        "Storage": {
          "Prefix": "VoterList",
          "Entries": [
            {
              "Name": "ListNodes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 754
                }
              },
              "Default": "AA==",
              "Docs": [
                " A single node, within some bag.",
                "",
                " Nodes store links forward and back within their respective bags."
              ]
            },
            {
              "Name": "CounterForListNodes",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "ListBags",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 755
                }
              },
              "Default": "AA==",
              "Docs": [
                " A bag stored in storage.",
                "",
                " Stores a `Bag` struct, which stores head and tail pointers to itself."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 407
        },
        "Events": {
          "TypeId": 66
        },
        "Constants": [
          {
            "Name": "BagThresholds",
            "TypeId": 756,
            "Value": "IQOrL7hEAAAAANXhVE0AAAAAQ+AFVwAAAABMy+1hAAAAAC6aM24AAAAARiYDfAAAAAC8x42LAAAAAM4FC50AAAAAOV25sAAAAAB6H9/GAAAAAAtuy98AAAAAHVXX+wAAAADBCWcbAQAAAPFP6z4BAAAAdQ3jZgEAAABGD92TAQAAAMgHesYBAAAA7sxu/wEAAABX3oY/AgAAAGM8p4cCAAAAZJrR2AIAAABe9yc0AwAAACSq8JoDAAAAVe+aDgQAAABzCcSQBAAAAG8FPSMFAAAAOzgRyAUAAACbjI2BBgAAAEi7SFIHAAAAx4osPQgAAAD+N4BFCQAAALcs9G4KAAAA6y2vvQsAAADtMF02DQAAAHMMQN4OAAAAI0FCuxAAAAC9HAzUEgAAAGmDGzAVAAAAJbTe1xcAAAD5Z9LUGgAAAIm3ozEeAAAAK0BW+iEAAADDEG88JgAAAMb3JAcrAAAA+96WazAAAAAt9wh9NgAAAGeOKVE9AAAAoIZeAEUAAAClgRymTQAAAK/5SGFXAAAAKaWoVGIAAAAJsFunbgAAAJSGaYV8AAAACSVeIIwAAAA6HvuvnQAAAJTR/nKxAAAAX5gEsMcAAAAkC4G24AAAAJDk3d/8AAAAK3i5kBwBAAA6Mk46QAEAAFUlB1xoAQAADEtHhZUBAAA80mlXyAEAAHShAogBAgAAQRln40ECAABPJIhPigIAANPFJ8/bAgAAlZ11hTcDAADKSB+6ngMAAOwk490SBAAAk8u1j5UEAACJqoyiKAUAAERp4iPOBQAAymQMY4gGAAAJdnv5WQcAAGd/BdRFCAAARPBYPU8JAADJlb/peQoAAFy+WgTKCwAAL/kHPkQNAACAqCPe7Q4AAE5IZdXMEAAAdcwY0+cSAAAV6wBdRhUAAPioN+rwFwAAhy9tAfEaAACi/PBaUR4AALUH/wYeIgAA2bTZmGQmAAAslUpXNCsAAC9AN3OeMAAAwkkNRbY2AADayOCRkT0AALdjNNlIRQAAU8mArPdNAAC1U7QRvVcAABHACvK7YgAARgTJlhtvAAD+6po1CH0AAI/5h46zjAAAnPyznVWeAACbUmZjLbIAAMKiIsWByAAApD/3iqLhAAAWP4p86f0AAOW836G7HQEAmGBTrIpBAQAu4M6M1mkBAHTb6DwvlwEAz05NwTbKAQAKi51sowMCACH122pCRAIAFwR7nvqMAgDNoUrZz94CAKFQx3zmOgMAI9e/joeiAwAj3eVQJRcEAN6msWtgmgQAXXsPvw0uBQDump3tPNQFAEQ+3Lk/jwYAATSfT7JhBwAT0VyXhE4IAKTQq7QEWQkA/7Nu1eqECgA2Hd57ZtYLAFVK7XItUg0ABid3ooz9DgBzolT/et4QAIADBtuu+xIAscIT37VcFQD1StYJEAoYAIsBEQ1ODRsA0HbiejNxHgAM0yQ73UEiACAJp9LsjCYA3sHfFrlhKwAE1Rv8hNEwAHi8+EG97zYAEKaF2j3SPQBQTQMEoJFFAPRDTiySSU4AwM331zoZWACQ5GvupyNjAPD3y/hLkG8AIMH7EouLfQAIIHKGWUeNABDGe0Xu+54AePOhxIvosgBoeNL/YVTJAEgO1dKMj+IAiEnOMTL0/gBAcHNAxOceAXBWu8Zr3EIB8OMQEqBSawHwYlf08dqYASAHs0gQGMwBgMqNMw3BBQIAGZg67KNGAgAgyFWCqI8CoN47P7LT4QIgrHeREEs+A2BvXrb8WKYDgFSfSj1xGwTAogFvMDafBECSgJGifjMFAPzuimBc2gWAnSqLnCOWBsC7Fz9Ac2kHgFUz60k+VwgAH1jvVdZiCQAHqVl6948KAPNt5p7V4guASOgZgStgDYAItRqaSw0PAMKSrCIz8BAAQlg8eZ8PEwBLnnE2JnMVAIJ+T0ZQIxgARxC2ZrgpGwA3fzh4LZEeAAAR4xvZZSIA4PnpJ2u1JgDAXoSOSo8rAMogrGXMBDEAKI5g1HEpNwD8Ea7CLRM+AKyEd0Wz2kUAZN8x3s2bTgAoT+DJxHVYAIBqIsLKi2MAUM+dv3sFcAAEjRZ/ag9+ACBD2cK/240AYPZ3ie2inwCQtym6eKSzAKgVXBfcJ8oASK9Sood94///////////",
            "Docs": [
              " The list of thresholds separating the various bags.",
              "",
              " Ids are separated into unsorted bags according to their score. This specifies the",
              " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
              " is less than or equal to its upper threshold.",
              "",
              " When ids are iterated, higher bags are iterated completely before lower bags. This means",
              " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
              " score, but peer ids within a particular bag are sorted in insertion order.",
              "",
              " # Expressing the constant",
              "",
              " This constant must be sorted in strictly increasing order. Duplicate items are not",
              " permitted.",
              "",
              " There is an implied upper limit of `Score::MAX`; that value does not need to be",
              " specified within the bag. For any two threshold lists, if one ends with",
              " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
              " lists will behave identically.",
              "",
              " # Calculation",
              "",
              " It is recommended to generate the set of thresholds in a geometric series, such that",
              " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
              " constant_ratio).max(threshold[k] + 1)` for all `k`.",
              "",
              " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
              "",
              " # Examples",
              "",
              " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
              "   iteration is strictly in insertion order.",
              " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is equal to 2.",
              " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
              " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
              "   into bag 0, an id with score 2 will fall into bag 1, etc.",
              "",
              " # Migration",
              "",
              " In the event that this list ever changes, a copy of the old bags list must be retained.",
              " With that `List::migrate` can be called, which will perform the appropriate migration."
            ]
          }
        ],
        "Errors": {
          "TypeId": 757
        },
        "Index": 17
      },
      "18": {
        "Name": "NominationPools",
        "Storage": {
          "Prefix": "NominationPools",
          "Entries": [
            {
              "Name": "MinJoinBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum amount to bond to join a pool."
              ]
            },
            {
              "Name": "MinCreateBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum bond required to create a pool.",
                "",
                " This is the amount that the pool creator must put as their initial stake in the pool, as an",
                " indication of \"skin in the game\".",
                "",
                " This is the value that will always exist in the staking ledger of the pool bonded account",
                " while all other accounts leave."
              ]
            },
            {
              "Name": "UnbondingMembers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 759
                }
              },
              "Default": "AA==",
              "Docs": [
                " Pool Members who are Unbonding.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "BondedPools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 764
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for bonded pools."
              ]
            },
            {
              "Name": "CounterForBondedPools",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "SubPoolsStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 767
                }
              },
              "Default": "AA==",
              "Docs": [
                " Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,",
                " hence the name sub-pools. Keyed by the bonded pools account."
              ]
            },
            {
              "Name": "CounterForSubPoolsStorage",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "NextPoolId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next pool id that will be used in [`create`](Pallet::create). Increments by one with",
                " each pool created."
              ]
            },
            {
              "Name": "ReversePoolIdLookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A reverse lookup from the pool's account id to its id.",
                "",
                " This is only used for slashing. In all other instances, the pool id is used, and the",
                " accounts are deterministically derived from it."
              ]
            },
            {
              "Name": "CounterForReversePoolIdLookup",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "UsedPoolTokenIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A reverse lookup from the token_id to pool_id.",
                "",
                " This is used for making sure the same token is not used to create multiple pools"
              ]
            },
            {
              "Name": "GlobalMaxCommission",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                " pool commissions that are > `GlobalMaxCommission`, necessary if a future"
              ]
            },
            {
              "Name": "StakingInformation",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 412,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The general staking parameters"
              ]
            },
            {
              "Name": "EarlyBirdBonusInfo",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 773,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The queue of bonuses that should be distributed to the pools"
              ]
            },
            {
              "Name": "EraPayoutInfo",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 774,
                "Item2": null
              },
              "Default": "AAAAAMqaOw==",
              "Docs": [
                " Tracks payout information for an era"
              ]
            },
            {
              "Name": "PoolBonusInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 775
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for pool bonus info"
              ]
            },
            {
              "Name": "EarlyBirdShares",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 776
                }
              },
              "Default": "AA==",
              "Docs": [
                " The percentage shares of pool users for early bird rewards"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 408
        },
        "Events": {
          "TypeId": 67
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 742,
            "Value": "cHkvbm9wbHM=",
            "Docs": [
              " The nomination pool's pallet id."
            ]
          },
          {
            "Name": "CollatorRewardPool",
            "TypeId": 742,
            "Value": "cHkvY29scnA=",
            "Docs": [
              " The pool ID for system account holding the collator rewards."
            ]
          },
          {
            "Name": "MaxPointsToBalance",
            "TypeId": 2,
            "Value": "Cg==",
            "Docs": [
              " The maximum pool points-to-balance ratio that an `open` pool can have.",
              "",
              " This is important in the event slashing takes place and the pool's points-to-balance",
              " ratio becomes disproportional.",
              "",
              " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
              " are a function of number of points, and by setting this value to e.g. 10, you ensure",
              " that the total number of points in the system are at most 10 times the total_issuance of",
              " the chain, in the absolute worse case.",
              "",
              " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
              " Such a scenario would also be the equivalent of the pool being 90% slashed."
            ]
          },
          {
            "Name": "PostUnbondingPoolsWindow",
            "TypeId": 4,
            "Value": "BAAAAA==",
            "Docs": [
              " The amount of eras a `SubPools::with_era` pool can exist before it gets merged into the",
              " `SubPools::no_era` pool. In other words, this is the amount of eras a member will be",
              " able to withdraw from an unbonding pool which is guaranteed to have the correct ratio of",
              " points to balance; once the `with_era` pool is merged into the `no_era` pool, the ratio",
              " can become skewed due to some slashed ratio getting merged in at some point."
            ]
          },
          {
            "Name": "MaxUnbonding",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": [
              " The maximum number of simultaneous unbonding chunks that can exist per member."
            ]
          },
          {
            "Name": "MinDuration",
            "TypeId": 4,
            "Value": "HgAAAA==",
            "Docs": [
              " Min duration of a pool's bonus cycle in eras"
            ]
          },
          {
            "Name": "MaxDuration",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " Max duration of a pool's bonus cycle in eras"
            ]
          },
          {
            "Name": "PoolCollectionId",
            "TypeId": 6,
            "Value": "AgAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The collection id that is used for pool NFTs"
            ]
          },
          {
            "Name": "StakedEnjCollectionId",
            "TypeId": 6,
            "Value": "AQAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The collection id that is used for sENJ tokens"
            ]
          },
          {
            "Name": "StakedEnjCollectionOwner",
            "TypeId": 0,
            "Value": "bW9kbHB5L25vcGxzAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " The owner of the sENJ collection"
            ]
          },
          {
            "Name": "BonusPercentage",
            "TypeId": 42,
            "Value": "AMLrCw==",
            "Docs": [
              " The percentage of each pool's rewards that goes to the bonus"
            ]
          },
          {
            "Name": "BaseBonusRewardPercentage",
            "TypeId": 42,
            "Value": "gLLmDg==",
            "Docs": [
              " Share of bonus reward that is distributed to everyone regardless of their weight"
            ]
          },
          {
            "Name": "UnclaimedBalanceReceiver",
            "TypeId": 0,
            "Value": "bW9kbHB5L3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " The account that will receive the deposit and commission if the pool's token is burned.",
              " It also receives the leftover bonus if a pool is destroyed."
            ]
          },
          {
            "Name": "CapacityMutationPeriod",
            "TypeId": 4,
            "Value": "DgAAAA==",
            "Docs": [
              " The number of eras its allowed to mutate the pools capacity"
            ]
          },
          {
            "Name": "EarlyBirdBonusDistributionBlock",
            "TypeId": 4,
            "Value": "mIsxAA==",
            "Docs": [
              " The block number after which the early bird bonus can be distributed"
            ]
          },
          {
            "Name": "EarlyBirdBonusAccount",
            "TypeId": 0,
            "Value": "bW9kbGVhcmxiaXJkAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " The account id that holds early bird bonus"
            ]
          },
          {
            "Name": "GlobalMaxCapacity",
            "TypeId": 6,
            "Value": "AAAAlJACKCwqixAAAAAAAA==",
            "Docs": [
              " The global maximum pool capacity"
            ]
          },
          {
            "Name": "DefaultMaxCapacity",
            "TypeId": 6,
            "Value": "AACA0HZm5w3haQAAAAAAAA==",
            "Docs": [
              " The default maximum pool capacity"
            ]
          },
          {
            "Name": "AttributeKeyMaxLength",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The max attribute key length"
            ]
          },
          {
            "Name": "AttributeValueMaxLength",
            "TypeId": 4,
            "Value": "AAQAAA==",
            "Docs": [
              " The max attribute value length"
            ]
          },
          {
            "Name": "MaxCapacityAttributeKey",
            "TypeId": 205,
            "Value": "RG1heF9wb29sX2NhcGFjaXR5",
            "Docs": [
              " Max pool capacity attribute key"
            ]
          },
          {
            "Name": "EarlyBirdPaymentPeriod",
            "TypeId": 4,
            "Value": "gJcGAA==",
            "Docs": [
              " The number of blocks between early bird payment unlocks"
            ]
          },
          {
            "Name": "EarlyBirdPaymentCount",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The max payments from early bird bonus"
            ]
          },
          {
            "Name": "MaxPoolNameLength",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of a pool name"
            ]
          },
          {
            "Name": "EarlyBirdReimbursementAccountId",
            "TypeId": 0,
            "Value": "JI1tkCQp13QQhN6jGiWHYWWIjLEeYbAgi+EEilgmSUM=",
            "Docs": [
              " The account that the early bird ENJ reimbursement is sent from"
            ]
          }
        ],
        "Errors": {
          "TypeId": 777
        },
        "Index": 18
      },
      "19": {
        "Name": "StakeExchange",
        "Storage": {
          "Prefix": "StakeExchange",
          "Entries": [
            {
              "Name": "LiquidityConfigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 90
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping of LP accounts to their configuration"
              ]
            },
            {
              "Name": "Offers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 82
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping of LPAccountId to their active offer"
              ]
            },
            {
              "Name": "NextOfferId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Value to use for Next offer Id"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 413
        },
        "Events": {
          "TypeId": 81
        },
        "Constants": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 138,
            "Value": "c3Rha2VleGc=",
            "Docs": [
              " The id used for making reservations with this pallet"
            ]
          },
          {
            "Name": "MaxFilteredTokenCount",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum number of tokens that can be whitelisted/blacklisted"
            ]
          },
          {
            "Name": "OfferDeposit",
            "TypeId": 6,
            "Value": "AGAq3LhqFAcAAAAAAAAAAA==",
            "Docs": [
              " The deposit for creating an offer"
            ]
          }
        ],
        "Errors": {
          "TypeId": 779
        },
        "Index": 19
      },
      "20": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 415
        },
        "Events": {
          "TypeId": 91
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 780
        },
        "Index": 20
      },
      "21": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 781,
                  "Value": 782
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 423
        },
        "Events": {
          "TypeId": 92
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "AIAzPj0s+AYAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AADSg5jXAgAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 784
        },
        "Index": 21
      },
      "50": {
        "Name": "ParachainsOrigin",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 50
      },
      "51": {
        "Name": "Configuration",
        "Storage": {
          "Prefix": "Configuration",
          "Entries": [
            {
              "Name": "ActiveConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 785,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAGAAAAZAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAA",
              "Docs": [
                " The active configuration for the current session."
              ]
            },
            {
              "Name": "PendingConfigs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 786,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending configuration changes.",
                "",
                " This is a list of configuration changes, each with a session index at which it should",
                " be applied.",
                "",
                " The list is sorted ascending by session index. Also, this list can only contain at most",
                " 2 items: for the next session and for the `scheduled_session`."
              ]
            },
            {
              "Name": "BypassConsistencyCheck",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 37,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " If this is set, then the configuration setters will bypass the consistency checks. This",
                " is meant to be used only as the last resort."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 425
        },
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 788
        },
        "Index": 51
      },
      "52": {
        "Name": "ParasShared",
        "Storage": {
          "Prefix": "ParasShared",
          "Entries": [
            {
              "Name": "CurrentSessionIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current session index."
              ]
            },
            {
              "Name": "ActiveValidatorIndices",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 789,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " All the validators actively participating in parachain consensus.",
                " Indices are into the broader validator set."
              ]
            },
            {
              "Name": "ActiveValidatorKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 790,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain attestation keys of the validators actively participating in parachain consensus.",
                " This should be the same length as `ActiveValidatorIndices`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 432
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 52
      },
      "53": {
        "Name": "ParaInclusion",
        "Storage": {
          "Prefix": "ParaInclusion",
          "Entries": [
            {
              "Name": "AvailabilityBitfields",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 441,
                  "Value": 791
                }
              },
              "Default": "AA==",
              "Docs": [
                " The latest bitfield for each validator, referred to by their index in the validator set."
              ]
            },
            {
              "Name": "PendingAvailability",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 792
                }
              },
              "Default": "AA==",
              "Docs": [
                " Candidates pending availability by `ParaId`."
              ]
            },
            {
              "Name": "PendingAvailabilityCommitments",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 446
                }
              },
              "Default": "AA==",
              "Docs": [
                " The commitments of candidates pending availability, by `ParaId`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 433
        },
        "Events": {
          "TypeId": 94
        },
        "Constants": [],
        "Errors": {
          "TypeId": 793
        },
        "Index": 53
      },
      "54": {
        "Name": "ParaInherent",
        "Storage": {
          "Prefix": "ParaInherent",
          "Entries": [
            {
              "Name": "Included",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 56,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the paras inherent was included within this block.",
                "",
                " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
                " due to the guarantees of FRAME's storage APIs.",
                "",
                " If this is `None` at the end of the block, we panic and render the block invalid."
              ]
            },
            {
              "Name": "OnChainVotes",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 794,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Scraped on chain data for extracting resolved disputes as well as backing votes."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 434
        },
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 799
        },
        "Index": 54
      },
      "55": {
        "Name": "ParaScheduler",
        "Storage": {
          "Prefix": "ParaScheduler",
          "Entries": [
            {
              "Name": "ValidatorGroups",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 800,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
                " broader set of Polkadot validators, but instead just the subset used for parachains during",
                " this session.",
                "",
                " Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.",
                " Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k."
              ]
            },
            {
              "Name": "ParathreadQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 801,
                "Item2": null
              },
              "Default": "AAAAAAA=",
              "Docs": [
                " A queue of upcoming claims and which core they should be mapped onto.",
                "",
                " The number of queued claims is bounded at the `scheduling_lookahead`",
                " multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500."
              ]
            },
            {
              "Name": "AvailabilityCores",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 806,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be",
                " temporarily `Some` if scheduled but not occupied.",
                " The i'th parachain belongs to the i'th core, with the remaining cores all being",
                " parathread-multiplexers.",
                "",
                " Bounded by the maximum of either of these two values:",
                "   * The number of parachains and parathread multiplexers",
                "   * The number of validators divided by `configuration.max_validators_per_core`."
              ]
            },
            {
              "Name": "ParathreadClaimIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 809,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An index used to ensure that only one claim on a parathread exists in the queue or is",
                " currently being handled by an occupied core.",
                "",
                " Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500."
              ]
            },
            {
              "Name": "SessionStartBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The block number where the session start occurred. Used to track how many group rotations have occurred.",
                "",
                " Note that in the context of parachains modules the session change is signaled during",
                " the block and enacted at the end of the block (at the finalization stage, to be exact).",
                " Thus for all intents and purposes the effect of the session change is observed at the",
                " block following the session change, block number of which we save in this storage value."
              ]
            },
            {
              "Name": "Scheduled",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 810,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Currently scheduled cores - free but up to be occupied.",
                "",
                " Bounded by the number of cores: one for each parachain and parathread multiplexer.",
                "",
                " The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/",
                " for the upcoming block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 55
      },
      "56": {
        "Name": "Paras",
        "Storage": {
          "Prefix": "Paras",
          "Entries": [
            {
              "Name": "PvfActiveVoteMap",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 102,
                  "Value": 813
                }
              },
              "Default": "AA==",
              "Docs": [
                " All currently active PVF pre-checking votes.",
                "",
                " Invariant:",
                " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."
              ]
            },
            {
              "Name": "PvfActiveVoteList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 816,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."
              ]
            },
            {
              "Name": "Parachains",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 809,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " All parachains. Ordered ascending by `ParaId`. Parathreads are not included.",
                "",
                " Consider using the [`ParachainsCache`] type of modifying."
              ]
            },
            {
              "Name": "ParaLifecycles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 817
                }
              },
              "Default": "AA==",
              "Docs": [
                " The current lifecycle of a all known Para IDs."
              ]
            },
            {
              "Name": "Heads",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 103
                }
              },
              "Default": "AA==",
              "Docs": [
                " The head-data of every registered para."
              ]
            },
            {
              "Name": "CurrentCodeHash",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 102
                }
              },
              "Default": "AA==",
              "Docs": [
                " The validation code hash of every live para.",
                "",
                " Corresponding code can be retrieved with [`CodeByHash`]."
              ]
            },
            {
              "Name": "PastCodeHash",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 818,
                  "Value": 102
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual past code hash, indicated by the para id as well as the block number at which it",
                " became outdated.",
                "",
                " Corresponding code can be retrieved with [`CodeByHash`]."
              ]
            },
            {
              "Name": "PastCodeMeta",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 819
                }
              },
              "Default": "AAA=",
              "Docs": [
                " Past code of parachains. The parachains themselves may not be registered anymore,",
                " but we also keep their code on-chain for the same amount of time as outdated code",
                " to keep it available for approval checkers."
              ]
            },
            {
              "Name": "PastCodePruning",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 822,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Which paras have past code that needs pruning and the relay-chain block at which the code was replaced.",
                " Note that this is the actual height of the included block, not the expected height at which the",
                " code upgrade would be applied, although they may be equal.",
                " This is to ensure the entire acceptance period is covered, not an offset acceptance period starting",
                " from the time at which the parachain perceives a code upgrade as having occurred.",
                " Multiple entries for a single para are permitted. Ordered ascending by block number."
              ]
            },
            {
              "Name": "FutureCodeUpgrades",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The block number at which the planned code change is expected for a para.",
                " The change will be applied after the first parablock for this ID included which executes",
                " in the context of a relay chain block with a number >= `expected_at`."
              ]
            },
            {
              "Name": "FutureCodeHash",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 102
                }
              },
              "Default": "AA==",
              "Docs": [
                " The actual future code hash of a para.",
                "",
                " Corresponding code can be retrieved with [`CodeByHash`]."
              ]
            },
            {
              "Name": "UpgradeGoAheadSignal",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 823
                }
              },
              "Default": "AA==",
              "Docs": [
                " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure.",
                "",
                " This value is absent when there are no upgrades scheduled or during the time the relay chain",
                " performs the checks. It is set at the first relay-chain block when the corresponding parachain",
                " can switch its upgrade function. As soon as the parachain's block is included, the value",
                " gets reset to `None`.",
                "",
                " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                " the format will require migration of parachains."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 824
                }
              },
              "Default": "AA==",
              "Docs": [
                " This is used by the relay-chain to communicate that there are restrictions for performing",
                " an upgrade for this parachain.",
                "",
                " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
                " potential use case is when we want to perform some maintenance (such as storage migration)",
                " we could restrict upgrades to make the process simpler.",
                "",
                " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                " the format will require migration of parachains."
              ]
            },
            {
              "Name": "UpgradeCooldowns",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 822,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
                "",
                " Ordered ascending by block number."
              ]
            },
            {
              "Name": "UpcomingUpgrades",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 822,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The list of upcoming code upgrades. Each item is a pair of which para performs a code",
                " upgrade and at which relay-chain block it is expected at.",
                "",
                " Ordered ascending by block number."
              ]
            },
            {
              "Name": "ActionsQueue",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 809
                }
              },
              "Default": "AA==",
              "Docs": [
                " The actions to perform during the start of a specific session index."
              ]
            },
            {
              "Name": "UpcomingParasGenesis",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 507
                }
              },
              "Default": "AA==",
              "Docs": [
                " Upcoming paras instantiation arguments.",
                "",
                " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set",
                " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."
              ]
            },
            {
              "Name": "CodeByHashRefs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 102,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of reference on the validation code in [`CodeByHash`] storage."
              ]
            },
            {
              "Name": "CodeByHash",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 102,
                  "Value": 452
                }
              },
              "Default": "AA==",
              "Docs": [
                " Validation code stored by its hash.",
                "",
                " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
                " [`PastCodeHash`]."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 462
        },
        "Events": {
          "TypeId": 106
        },
        "Constants": [
          {
            "Name": "UnsignedPriority",
            "TypeId": 11,
            "Value": "//////////8=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 825
        },
        "Index": 56
      },
      "57": {
        "Name": "Initializer",
        "Storage": {
          "Prefix": "Initializer",
          "Entries": [
            {
              "Name": "HasInitialized",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 56,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the parachains modules have been initialized within this block.",
                "",
                " Semantically a `bool`, but this guarantees it should never hit the trie,",
                " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
                "",
                " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of",
                " them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for",
                " the semantics of this variable."
              ]
            },
            {
              "Name": "BufferedSessionChanges",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 826,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Buffered session changes along with the block number at which they should be applied.",
                "",
                " Typically this will be empty or one element long. Apart from that this item never hits",
                " the storage.",
                "",
                " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
                " upgrade boundaries or if governance intervenes."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 464
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 57
      },
      "58": {
        "Name": "Dmp",
        "Storage": {
          "Prefix": "Dmp",
          "Entries": [
            {
              "Name": "DownwardMessageQueues",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 828
                }
              },
              "Default": "AA==",
              "Docs": [
                " The downward messages addressed for a certain para."
              ]
            },
            {
              "Name": "DownwardMessageQueueHeads",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " A mapping that stores the downward message queue MQC head for each para.",
                "",
                " Each link in this chain has a form:",
                " `(prev_head, B, H(M))`, where",
                " - `prev_head`: is the previous head hash or zero if none.",
                " - `B`: is the relay-chain block number in which a message was appended.",
                " - `H(M)`: is the hash of the message being appended."
              ]
            },
            {
              "Name": "DeliveryFeeFactor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 85
                }
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": [
                " The number to multiply the base delivery fee by."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 58
      },
      "60": {
        "Name": "Hrmp",
        "Storage": {
          "Prefix": "Hrmp",
          "Entries": [
            {
              "Name": "HrmpOpenChannelRequests",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 108,
                  "Value": 830
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of pending HRMP open channel requests.",
                "",
                " The set is accompanied by a list for iteration.",
                "",
                " Invariant:",
                " - There are no channels that exists in list but not in the set and vice versa."
              ]
            },
            {
              "Name": "HrmpOpenChannelRequestsList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 831,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "HrmpOpenChannelRequestCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " This mapping tracks how many open channel requests are initiated by a given sender para.",
                " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has",
                " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."
              ]
            },
            {
              "Name": "HrmpAcceptedChannelRequestCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " This mapping tracks how many open channel requests were accepted by a given recipient para.",
                " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
                " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
              ]
            },
            {
              "Name": "HrmpCloseChannelRequests",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 108,
                  "Value": 56
                }
              },
              "Default": "AA==",
              "Docs": [
                " A set of pending HRMP close channel requests that are going to be closed during the session",
                " change. Used for checking if a given channel is registered for closure.",
                "",
                " The set is accompanied by a list for iteration.",
                "",
                " Invariant:",
                " - There are no channels that exists in list but not in the set and vice versa."
              ]
            },
            {
              "Name": "HrmpCloseChannelRequestsList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 831,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "HrmpWatermarks",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The HRMP watermark associated with each para.",
                " Invariant:",
                " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."
              ]
            },
            {
              "Name": "HrmpChannels",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 108,
                  "Value": 832
                }
              },
              "Default": "AA==",
              "Docs": [
                " HRMP channel data associated with each para.",
                " Invariant:",
                " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
              ]
            },
            {
              "Name": "HrmpIngressChannelsIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 809
                }
              },
              "Default": "AA==",
              "Docs": [
                " Ingress/egress indexes allow to find all the senders and receivers given the opposite side.",
                " I.e.",
                "",
                " (a) ingress index allows to find all the senders for a given recipient.",
                " (b) egress index allows to find all the recipients for a given sender.",
                "",
                " Invariants:",
                " - for each ingress index entry for `P` each item `I` in the index should present in",
                "   `HrmpChannels` as `(I, P)`.",
                " - for each egress index entry for `P` each item `E` in the index should present in",
                "   `HrmpChannels` as `(P, E)`.",
                " - there should be no other dangling channels in `HrmpChannels`.",
                " - the vectors are sorted."
              ]
            },
            {
              "Name": "HrmpEgressChannelsIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 809
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "HrmpChannelContents",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 108,
                  "Value": 833
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for the messages for each channel.",
                " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
              ]
            },
            {
              "Name": "HrmpChannelDigests",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 835
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maintains a mapping that can be used to answer the question: What paras sent a message at",
                " the given block number for a given receiver. Invariants:",
                " - The inner `Vec<ParaId>` is never empty.",
                " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
                " - The outer vector is sorted ascending by block number and cannot store two items with the",
                "   same block number."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 465
        },
        "Events": {
          "TypeId": 107
        },
        "Constants": [],
        "Errors": {
          "TypeId": 837
        },
        "Index": 60
      },
      "61": {
        "Name": "ParaSessionInfo",
        "Storage": {
          "Prefix": "ParaSessionInfo",
          "Entries": [
            {
              "Name": "AssignmentKeysUnsafe",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 838,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Assignment keys for the current session.",
                " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
                " When in doubt, use `Sessions` API instead."
              ]
            },
            {
              "Name": "EarliestStoredSession",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The earliest session for which previous session info is stored."
              ]
            },
            {
              "Name": "Sessions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 839
                }
              },
              "Default": "AA==",
              "Docs": [
                " Session information in a rolling window.",
                " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
                " Does not have any entries before the session index in the first session change notification."
              ]
            },
            {
              "Name": "AccountKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 80
                }
              },
              "Default": "AA==",
              "Docs": [
                " The validator account keys of the validators actively participating in parachain consensus."
              ]
            },
            {
              "Name": "SessionExecutorParams",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 427
                }
              },
              "Default": "AA==",
              "Docs": [
                " Executor parameter set for a given session index"
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 61
      },
      "62": {
        "Name": "ParasDisputes",
        "Storage": {
          "Prefix": "ParasDisputes",
          "Entries": [
            {
              "Name": "LastPrunedSession",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The last pruned session, if any. All data stored by this module",
                " references sessions."
              ]
            },
            {
              "Name": "Disputes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 843,
                  "Value": 844
                }
              },
              "Default": "AA==",
              "Docs": [
                " All ongoing or concluded disputes for the last several sessions."
              ]
            },
            {
              "Name": "BackersOnDisputes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 843,
                  "Value": 845
                }
              },
              "Default": "AA==",
              "Docs": [
                " Backing votes stored for each dispute.",
                " This storage is used for slashing."
              ]
            },
            {
              "Name": "Included",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 843,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " All included blocks on the chain, as well as the block number in this chain that",
                " should be reverted back to if the candidate is disputed and determined to be invalid."
              ]
            },
            {
              "Name": "Frozen",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 74,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the chain is frozen. Starts as `None`. When this is `Some`,",
                " the chain will not accept any new parachain blocks for backing or inclusion,",
                " and its value indicates the last valid block number in the chain.",
                " It can only be set back to `None` by governance intervention."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 466
        },
        "Events": {
          "TypeId": 109
        },
        "Constants": [],
        "Errors": {
          "TypeId": 846
        },
        "Index": 62
      },
      "63": {
        "Name": "ParasSlashing",
        "Storage": {
          "Prefix": "ParasSlashing",
          "Entries": [
            {
              "Name": "UnappliedSlashes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 843,
                  "Value": 847
                }
              },
              "Default": "AA==",
              "Docs": [
                " Validators pending dispute slashes."
              ]
            },
            {
              "Name": "ValidatorSetCounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " `ValidatorSetCount` per session."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 467
        },
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 851
        },
        "Index": 63
      },
      "70": {
        "Name": "Registrar",
        "Storage": {
          "Prefix": "Registrar",
          "Entries": [
            {
              "Name": "PendingSwap",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 97
                }
              },
              "Default": "AA==",
              "Docs": [
                " Pending swap operations."
              ]
            },
            {
              "Name": "Paras",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 852
                }
              },
              "Default": "AA==",
              "Docs": [
                " Amount held on deposit for each para and the original depositor.",
                "",
                " The given account ID is responsible for registering the code and initial head data, but may only do",
                " so if it isn't yet registered. (After that, it's up to governance to do so.)"
              ]
            },
            {
              "Name": "NextFreeParaId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 97,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free `ParaId`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 471
        },
        "Events": {
          "TypeId": 113
        },
        "Constants": [
          {
            "Name": "ParaDeposit",
            "TypeId": 6,
            "Value": "AABAsrrJ4BkeAgAAAAAAAA==",
            "Docs": [
              " The deposit to be paid to run a parathread.",
              " This should include the cost for storing the genesis head and validation code."
            ]
          },
          {
            "Name": "DataDepositPerByte",
            "TypeId": 6,
            "Value": "AIBiF17RWAAAAAAAAAAAAA==",
            "Docs": [
              " The deposit to be paid per byte stored on chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 853
        },
        "Index": 70
      },
      "71": {
        "Name": "Slots",
        "Storage": {
          "Prefix": "Slots",
          "Entries": [
            {
              "Name": "Leases",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 854
                }
              },
              "Default": "AA==",
              "Docs": [
                " Amounts held on deposit for each (possibly future) leased parachain.",
                "",
                " The actual amount locked on its behalf by any account at any time is the maximum of the second values",
                " of the items in this list whose first value is the account.",
                "",
                " The first item in the list is the amount locked for the current Lease Period. Following",
                " items are for the subsequent lease periods.",
                "",
                " The default value (an empty list) implies that the parachain no longer exists (or never",
                " existed) as far as this pallet is concerned.",
                "",
                " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
                " deposit for the non-existent chain currently, but is held at some point in the future.",
                "",
                " It is illegal for a `None` value to trail in the list."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 472
        },
        "Events": {
          "TypeId": 114
        },
        "Constants": [
          {
            "Name": "LeasePeriod",
            "TypeId": 4,
            "Value": "AHUSAA==",
            "Docs": [
              " The number of blocks over which a single period lasts."
            ]
          },
          {
            "Name": "LeaseOffset",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The number of blocks to offset each lease period by."
            ]
          }
        ],
        "Errors": {
          "TypeId": 856
        },
        "Index": 71
      },
      "72": {
        "Name": "Auctions",
        "Storage": {
          "Prefix": "Auctions",
          "Entries": [
            {
              "Name": "AuctionCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of auctions started so far."
              ]
            },
            {
              "Name": "AuctionInfo",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 287,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Information relating to the current auction, if there is one.",
                "",
                " The first item in the tuple is the lease period index that the first of the four",
                " contiguous lease periods on auction is for. The second is the block number when the",
                " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
              ]
            },
            {
              "Name": "ReservedAmounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 857,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Amounts currently reserved in the accounts of the bidders currently winning",
                " (sub-)ranges."
              ]
            },
            {
              "Name": "Winning",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 858
                }
              },
              "Default": "AA==",
              "Docs": [
                " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
                " the current auction. The map's key is the 0-based index into the Sample Size. The",
                " first sample of the ending period is 0; the last is `Sample Size - 1`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 473
        },
        "Events": {
          "TypeId": 115
        },
        "Constants": [
          {
            "Name": "EndingPeriod",
            "TypeId": 4,
            "Value": "QBkBAA==",
            "Docs": [
              " The number of blocks over which an auction may be retroactively ended."
            ]
          },
          {
            "Name": "SampleLength",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The length of each sample to take during the ending period.",
              "",
              " `EndingPeriod` / `SampleLength` = Total # of Samples"
            ]
          },
          {
            "Name": "SlotRangeCount",
            "TypeId": 4,
            "Value": "JAAAAA==",
            "Docs": []
          },
          {
            "Name": "LeasePeriodsPerSlot",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 861
        },
        "Index": 72
      },
      "73": {
        "Name": "Crowdloan",
        "Storage": {
          "Prefix": "Crowdloan",
          "Entries": [
            {
              "Name": "Funds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 862
                }
              },
              "Default": "AA==",
              "Docs": [
                " Info on all of the funds."
              ]
            },
            {
              "Name": "NewRaise",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 809,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The funds that have had additional contributions during the last block. This is used",
                " in order to determine which funds should submit new or updated bids."
              ]
            },
            {
              "Name": "EndingsCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of auctions that have entered into their ending period so far."
              ]
            },
            {
              "Name": "NextFundIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Tracker for the next available fund index"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 475
        },
        "Events": {
          "TypeId": 116
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 742,
            "Value": "cHkvY2Z1bmQ=",
            "Docs": [
              " `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b\"py/cfund\")`"
            ]
          },
          {
            "Name": "MinContribution",
            "TypeId": 6,
            "Value": "AABMCqKG1RAEAAAAAAAAAA==",
            "Docs": [
              " The minimum amount that may be contributed into a crowdloan. Should almost certainly be at",
              " least `ExistentialDeposit`."
            ]
          },
          {
            "Name": "RemoveKeysLimit",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " Max number of storage keys to remove per extrinsic call."
            ]
          }
        ],
        "Errors": {
          "TypeId": 864
        },
        "Index": 73
      },
      "99": {
        "Name": "XcmPallet",
        "Storage": {
          "Prefix": "XcmPallet",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 865
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 870,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 870,
                  "Value": 11
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 870,
                  "Value": 871
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 872,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 875,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 877,
                  "Value": 879
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 883
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            },
            {
              "Name": "XcmExecutionSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 37,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Global suspension state of the XCM executor."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 484
        },
        "Events": {
          "TypeId": 117
        },
        "Constants": [],
        "Errors": {
          "TypeId": 886
        },
        "Index": 99
      },
      "110": {
        "Name": "MessageQueue",
        "Storage": {
          "Prefix": "MessageQueue",
          "Entries": [
            {
              "Name": "BookStateFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 172,
                  "Value": 887
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The index of the first and last (non-empty) pages."
              ]
            },
            {
              "Name": "ServiceHead",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 172,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The origin at which we should begin servicing."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 890,
                  "Value": 891
                }
              },
              "Default": "AA==",
              "Docs": [
                " The map of page indices to pages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 505
        },
        "Events": {
          "TypeId": 171
        },
        "Constants": [
          {
            "Name": "HeapSize",
            "TypeId": 4,
            "Value": "AAABAA==",
            "Docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "Name": "MaxStale",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "Name": "ServiceWeight",
            "TypeId": 645,
            "Value": "AQcAoNshXRMzMzMzMzMzMw==",
            "Docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually."
            ]
          }
        ],
        "Errors": {
          "TypeId": 893
        },
        "Index": 110
      },
      "250": {
        "Name": "ParasSudoWrapper",
        "Storage": null,
        "Calls": {
          "TypeId": 506
        },
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 894
        },
        "Index": 250
      },
      "251": {
        "Name": "AssignedSlots",
        "Storage": {
          "Prefix": "AssignedSlots",
          "Entries": [
            {
              "Name": "PermanentSlots",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 287
                }
              },
              "Default": "AA==",
              "Docs": [
                " Assigned permanent slots, with their start lease period, and duration."
              ]
            },
            {
              "Name": "PermanentSlotCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of assigned (and active) permanent slots."
              ]
            },
            {
              "Name": "TemporarySlots",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 97,
                  "Value": 895
                }
              },
              "Default": "AA==",
              "Docs": [
                " Assigned temporary slots."
              ]
            },
            {
              "Name": "TemporarySlotCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of assigned temporary slots."
              ]
            },
            {
              "Name": "ActiveTemporarySlotCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of active temporary slots in current slot lease period."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 508
        },
        "Events": {
          "TypeId": 175
        },
        "Constants": [
          {
            "Name": "PermanentSlotLeasePeriodLength",
            "TypeId": 4,
            "Value": "bQEAAA==",
            "Docs": [
              " The number of lease periods a permanent parachain slot lasts."
            ]
          },
          {
            "Name": "TemporarySlotLeasePeriodLength",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " The number of lease periods a temporary parachain slot lasts."
            ]
          },
          {
            "Name": "MaxPermanentSlots",
            "TypeId": 4,
            "Value": "KAAAAA==",
            "Docs": [
              " The max number of permanent slots that can be assigned."
            ]
          },
          {
            "Name": "MaxTemporarySlots",
            "TypeId": 4,
            "Value": "KAAAAA==",
            "Docs": [
              " The max number of temporary slots that can be assigned."
            ]
          },
          {
            "Name": "MaxTemporarySlotPerLeasePeriod",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The max number of temporary slots to be scheduled per lease periods."
            ]
          }
        ],
        "Errors": {
          "TypeId": 896
        },
        "Index": 251
      },
      "252": {
        "Name": "ValidatorManager",
        "Storage": {
          "Prefix": "ValidatorManager",
          "Entries": [
            {
              "Name": "ValidatorsToRetire",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 80,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validators that should be retired, because their Parachain was deregistered."
              ]
            },
            {
              "Name": "ValidatorsToAdd",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 80,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validators that should be added."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 510
        },
        "Events": {
          "TypeId": 176
        },
        "Constants": [],
        "Errors": null,
        "Index": 252
      },
      "253": {
        "Name": "MultiTokens",
        "Storage": {
          "Prefix": "MultiTokens",
          "Entries": [
            {
              "Name": "TokenAccounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 897,
                  "Value": 234
                }
              },
              "Default": "AA==",
              "Docs": [
                " Accounts per token"
              ]
            },
            {
              "Name": "Collections",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 209
                }
              },
              "Default": "AA==",
              "Docs": [
                " The collections in existence and their ownership details."
              ]
            },
            {
              "Name": "Tokens",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 898,
                  "Value": 222
                }
              },
              "Default": "AA==",
              "Docs": [
                " Tokens storage"
              ]
            },
            {
              "Name": "NextCollectionId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Sequencer for collectionID generators."
              ]
            },
            {
              "Name": "CollectionAccounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 899,
                  "Value": 227
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores information for an account per collection"
              ]
            },
            {
              "Name": "Attributes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 900,
                  "Value": 536
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata of collections and tokens."
              ]
            },
            {
              "Name": "AssetIdsByLocation",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 120,
                  "Value": 181
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map of Locations to AssetIds of Foreign Tokens"
              ]
            },
            {
              "Name": "Migrations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 901,
                  "Value": 902
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores last iterated keys for migrations. Used by multi block migrations",
                " to resume from the last iterated key.",
                "",
                " Key is the storage prefix, value is the status of migration and last iterated key, if any.",
                " i.e `[\"MultiTokens\", \"TokenAccounts\"] -> (collection_id, token_id, account_id)`"
              ]
            },
            {
              "Name": "MigrationStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 247,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Status of the current multi-block migration"
              ]
            },
            {
              "Name": "ClaimableCollectionIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 248,
                  "Value": 540
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores data for an ethereum address"
              ]
            },
            {
              "Name": "UnmintableTokenIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 905,
                  "Value": 11
                }
              },
              "Default": "AA==",
              "Docs": [
                " These token ids can only be minted by calling `force_mint`. The second key is an ethereum",
                " base token id, and the value is the highest token index that cannot be minted. All token",
                " indexes start from 1, so effectively it blocks token indexes from 1 to the value."
              ]
            },
            {
              "Name": "NativeCollectionIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map of ethereum collection id to the native collection id"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 511
        },
        "Events": {
          "TypeId": 177
        },
        "Constants": [
          {
            "Name": "AttributeDepositBase",
            "TypeId": 6,
            "Value": "AADFLryisQAAAAAAAAAAAA==",
            "Docs": [
              " The base deposit required for setting an attribute"
            ]
          },
          {
            "Name": "AttributeDepositPerByte",
            "TypeId": 6,
            "Value": "AJAexLwWAAAAAAAAAAAAAA==",
            "Docs": [
              " Additional deposit per byte for setting an attribute"
            ]
          },
          {
            "Name": "MaxRecipientsPerBatchTransfer",
            "TypeId": 4,
            "Value": "+gAAAA==",
            "Docs": [
              " The max number of recipients allowed in a batch transfer"
            ]
          },
          {
            "Name": "MaxTokensPerBatchTransfer",
            "TypeId": 4,
            "Value": "9AEAAA==",
            "Docs": [
              " The max number of tokens allowed in a batch transfer"
            ]
          },
          {
            "Name": "MaxBatchAttributesPerCall",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The max number of attributes to set in one call"
            ]
          },
          {
            "Name": "MaxRecipientsPerBatchMint",
            "TypeId": 4,
            "Value": "+gAAAA==",
            "Docs": [
              " The max number of recipients allowed in a batch mint"
            ]
          },
          {
            "Name": "CollectionCreationDeposit",
            "TypeId": 6,
            "Value": "AAAx1uJ1vFYAAAAAAAAAAA==",
            "Docs": [
              " Amount of [`Balance`](BalanceOf) reserved to create a collection"
            ]
          },
          {
            "Name": "TokenAccountDeposit",
            "TypeId": 6,
            "Value": "AADBb/KGIwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of [`Balance`](BalanceOf) that must be reserved for a token account to be",
              " maintained"
            ]
          },
          {
            "Name": "MaxIdleOperationQueueLength",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum length of the idle operation queue"
            ]
          },
          {
            "Name": "MaxIdleOperationQueueWeight",
            "TypeId": 9,
            "Value": "BwDodkgXAA==",
            "Docs": [
              " The maximum weight of the idle operation queue"
            ]
          },
          {
            "Name": "MaxOperatorsPerAccount",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The max number of operators a [`TokenAccount`] and an [`CollectionAccount`] can have"
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " The maximum number of locks that can exist on a token account"
            ]
          },
          {
            "Name": "MaxExplicitRoyaltyCurrencies",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum number of explicit royalty currencies"
            ]
          },
          {
            "Name": "NativeAssetInfo",
            "TypeId": 906,
            "Value": "AAAAwKfGs9FGMQEAAAAAAAAA",
            "Docs": [
              " The [`NativeAssetInfo`](ep_multi_tokens::NativeAssetInfo) for this pallet"
            ]
          },
          {
            "Name": "ReserveIdentifier",
            "TypeId": 138,
            "Value": "bXVsdG9rZW4=",
            "Docs": [
              " The id used for making reservations with this pallet"
            ]
          },
          {
            "Name": "TokenMetadataMaxNameLength",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max length of name stored in [`TokenMetadata`]"
            ]
          },
          {
            "Name": "TokenMetadataMaxSymbolLength",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": [
              " Max length of symbol stored in [`TokenMetadata`]"
            ]
          },
          {
            "Name": "MaxMigrationKeyLength",
            "TypeId": 4,
            "Value": "AAQAAA==",
            "Docs": [
              " Max length for the [`Migrations`] storage"
            ]
          },
          {
            "Name": "MigrationWeightLimitPercentage",
            "TypeId": 42,
            "Value": "AOH1BQ==",
            "Docs": [
              " Percentage of block weight to consume during migration"
            ]
          },
          {
            "Name": "MaxMigrationExtrinsicInfosToPause",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Bound for the number of extrinsics to pause during multi block migration"
            ]
          },
          {
            "Name": "MigrationExtrinsicsInfosToPause",
            "TypeId": 907,
            "Value": "ECRGdWVsVGFua3MALE11bHRpVG9rZW5zADRTdGFrZUV4Y2hhbmdlADxOb21pbmF0aW9uUG9vbHMA",
            "Docs": [
              " List of extrinsics to pause during multi block migration (this pallet is excluded)"
            ]
          },
          {
            "Name": "MaxClaimableCollectionsPerAccount",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Max number of collections that can be claimed by an account"
            ]
          },
          {
            "Name": "ClaimCollectionsPrefix",
            "TypeId": 13,
            "Value": "gFRyYW5zZmVyIGNvbGxlY3Rpb25zIHRvIGFjY291bnQ6",
            "Docs": [
              " The prefix of the message used to claim collections"
            ]
          },
          {
            "Name": "ClaimTokensPrefix",
            "TypeId": 13,
            "Value": "bFRyYW5zZmVyIHRva2VucyB0byBhY2NvdW50Og==",
            "Docs": [
              " The prefix of the message used to claim tokens"
            ]
          },
          {
            "Name": "EthereumMigrationAccountId",
            "TypeId": 0,
            "Value": "svuGevS3k9+sb1Dt/r+y58mYBiHDfm6SeBhl9x+TsmU=",
            "Docs": [
              " The account id that provides the existential deposit when claiming collections"
            ]
          }
        ],
        "Errors": {
          "TypeId": 911
        },
        "Index": 253
      },
      "254": {
        "Name": "FuelTanks",
        "Storage": {
          "Prefix": "FuelTanks",
          "Entries": [
            {
              "Name": "Tanks",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 912
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping of Fuel Tanks accounts to their data"
              ]
            },
            {
              "Name": "Accounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 941,
                  "Value": 942
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping of Fuel Tanks and their user Accounts to account data"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 541
        },
        "Events": {
          "TypeId": 251
        },
        "Constants": [
          {
            "Name": "Salt",
            "TypeId": 138,
            "Value": "ZWZpbml0eXk=",
            "Docs": [
              " The salt used for address generation"
            ]
          },
          {
            "Name": "MaxWhitelistedCallers",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of whitelisted callers per fuel tank"
            ]
          },
          {
            "Name": "MaxRuleSets",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum number of rule sets per fuel tank"
            ]
          },
          {
            "Name": "MaxRulesPerSet",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " Maximum number of rules in a ruleset"
            ]
          },
          {
            "Name": "MaxAccountRuleDataLength",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": [
              " Max length of data a rule can store per account"
            ]
          },
          {
            "Name": "MaxCallFilters",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum number of permitted calls"
            ]
          },
          {
            "Name": "MaxWhitelistedCollections",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " Maximum number of whitelisted collections for a fuel tank"
            ]
          },
          {
            "Name": "MaxCallSize",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of rule sets per fuel tank"
            ]
          },
          {
            "Name": "MaxUserHistorySize",
            "TypeId": 4,
            "Value": "ECcAAA==",
            "Docs": [
              " The maximum number of user history that can be stored"
            ]
          },
          {
            "Name": "MaxBatchAccounts",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of accounts for batch operations"
            ]
          },
          {
            "Name": "MaxFuelTankNameLength",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length for fuel tank name"
            ]
          },
          {
            "Name": "MaxExtrinsicNameLength",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum length for extrinsics for PermittedExtrinsic rule"
            ]
          },
          {
            "Name": "MaxPermittedExtrinsicLength",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of extrinsics to allow for PermittedExtrinsic rule"
            ]
          },
          {
            "Name": "TankCreationDeposit",
            "TypeId": 6,
            "Value": "AAB6IsHIsSIAAAAAAAAAAA==",
            "Docs": [
              " Deposit for creating a new fuel tank"
            ]
          },
          {
            "Name": "AccountCreationDeposit",
            "TypeId": 6,
            "Value": "AACKXXhFYwEAAAAAAAAAAA==",
            "Docs": [
              " Deposit for creating an account"
            ]
          },
          {
            "Name": "ReserveIdentifier",
            "TypeId": 138,
            "Value": "ZnVlbHRhbms=",
            "Docs": [
              " The identifier used for currency reserves"
            ]
          },
          {
            "Name": "LevyScale",
            "TypeId": 4,
            "Value": "uAsAAA==",
            "Docs": [
              " value of a unit of the independant variable in EFI for the levy discount according to",
              " f(x) = (1/2)^x. Cannot be 0."
            ]
          },
          {
            "Name": "Levy",
            "TypeId": 42,
            "Value": "gBe0LA==",
            "Docs": [
              " The Levy applied to all transactions in Matrix."
            ]
          }
        ],
        "Errors": {
          "TypeId": 954
        },
        "Index": 254
      },
      "255": {
        "Name": "ExtrinsicPause",
        "Storage": {
          "Prefix": "ExtrinsicPause",
          "Entries": [
            {
              "Name": "PausedExtrinsics",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 908,
                  "Value": 56
                }
              },
              "Default": "AA==",
              "Docs": [
                " Paused extrinsics map",
                "",
                " The key is tuple with the name of the pallet and the extrinsic name and value is",
                " an Option<()> which is None if the extrinsic is not paused and Some(()) if it is."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 572
        },
        "Events": {
          "TypeId": 272
        },
        "Constants": [
          {
            "Name": "MaxNameLength",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " Max number of characters in pallet or extrinsic name."
            ]
          }
        ],
        "Errors": {
          "TypeId": 955
        },
        "Index": 255
      },
      "249": {
        "Name": "Marketplace",
        "Storage": {
          "Prefix": "Marketplace",
          "Entries": [
            {
              "Name": "Info",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 956,
                "Item2": null
              },
              "Default": "AuH1BQ==",
              "Docs": [
                " Stores information about the marketplace"
              ]
            },
            {
              "Name": "Listings",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 277
                }
              },
              "Default": "AA==",
              "Docs": [
                " Listings by ID"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 573
        },
        "Events": {
          "TypeId": 276
        },
        "Constants": [
          {
            "Name": "MinimumBidIncreasePercentage",
            "TypeId": 42,
            "Value": "gPD6Ag==",
            "Docs": [
              " The percentage the minimum bid in an auction must increase by"
            ]
          },
          {
            "Name": "ReserveIdentifier",
            "TypeId": 138,
            "Value": "bWFya3RwbGM=",
            "Docs": [
              " ID used by the pallet for making reservations"
            ]
          },
          {
            "Name": "ListingDeposit",
            "TypeId": 6,
            "Value": "AJBgttouBwcAAAAAAAAAAA==",
            "Docs": [
              " The deposit for creating a listing"
            ]
          },
          {
            "Name": "ListingActiveDelay",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The delay before a listing is considered active"
            ]
          },
          {
            "Name": "MaxRoundingError",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The max amount that can be lost due to rounding before failing"
            ]
          },
          {
            "Name": "MaxSaltLength",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max length of salt used when creating listings and bids"
            ]
          }
        ],
        "Errors": {
          "TypeId": 957
        },
        "Index": 249
      },
      "240": {
        "Name": "Beefy",
        "Storage": {
          "Prefix": "Beefy",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 958,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authorities set"
              ]
            },
            {
              "Name": "ValidatorSetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current validator set id"
              ]
            },
            {
              "Name": "NextAuthorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 958,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Authorities set scheduled to be used with the next session"
              ]
            },
            {
              "Name": "SetIdSession",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from BEEFY set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and BEEFY set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `ValidatorSetId` is not under user control."
              ]
            },
            {
              "Name": "GenesisBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 74,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Block number where BEEFY consensus is enabled/started.",
                " By changing this (through governance or sudo), BEEFY consensus is effectively",
                " restarted from the new block number."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 575
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of authorities that can be added."
            ]
          },
          {
            "Name": "MaxSetIdSessionEntries",
            "TypeId": 11,
            "Value": "qAAAAAAAAAA=",
            "Docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "Errors": {
          "TypeId": 960
        },
        "Index": 240
      },
      "241": {
        "Name": "Mmr",
        "Storage": {
          "Prefix": "Mmr",
          "Entries": [
            {
              "Name": "RootHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Latest MMR Root hash."
              ]
            },
            {
              "Name": "NumberOfLeaves",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current size of the MMR (number of leaves)."
              ]
            },
            {
              "Name": "Nodes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Hashes of the nodes in the MMR.",
                "",
                " Note this collection only contains MMR peaks, the inner nodes (and leaves)",
                " are pruned and only stored in the Offchain DB."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 241
      },
      "242": {
        "Name": "MmrLeaf",
        "Storage": {
          "Prefix": "MmrLeaf",
          "Entries": [
            {
              "Name": "BeefyAuthorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 961,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Details of current BEEFY authority set."
              ]
            },
            {
              "Name": "BeefyNextAuthorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 961,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Details of next BEEFY authority set.",
                "",
                " This storage entry is used as cache for calls to `update_beefy_next_authority_set`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 242
      },
      "100": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 962
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 287
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 585
        },
        "Events": {
          "TypeId": 286
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 9,
            "Value": "CwCAbod0ARPMzMzMzMzMzA==",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 966
        },
        "Index": 100
      },
      "101": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 967
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 968,
                  "Value": 969
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 587
        },
        "Events": {
          "TypeId": 289
        },
        "Constants": [],
        "Errors": {
          "TypeId": 970
        },
        "Index": 101
      },
      "102": {
        "Name": "ConvictionVoting",
        "Storage": {
          "Prefix": "ConvictionVoting",
          "Entries": [
            {
              "Name": "VotingFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 971,
                  "Value": 972
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All voting for a particular voter in a particular voting class. We store the balance for the",
                " number of votes that we have recorded."
              ]
            },
            {
              "Name": "ClassLocksFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 980
                }
              },
              "Default": "AA==",
              "Docs": [
                " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                " this list."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 588
        },
        "Events": {
          "TypeId": 290
        },
        "Constants": [
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " The maximum number of concurrent votes an account may have.",
              "",
              " Also used to compute weight, an overly large value can lead to extrinsics with large",
              " weight estimation: see `delegate` for instance."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          }
        ],
        "Errors": {
          "TypeId": 983
        },
        "Index": 102
      },
      "103": {
        "Name": "Referenda",
        "Storage": {
          "Prefix": "Referenda",
          "Entries": [
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "ReferendumInfoFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 984
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "Name": "TrackQueue",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 292,
                  "Value": 992
                }
              },
              "Default": "AA==",
              "Docs": [
                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                " conviction-weighted approvals.",
                "",
                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
              ]
            },
            {
              "Name": "DecidingCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 292,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of referenda being decided currently."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The metadata is a general information concerning the referendum.",
                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 593
        },
        "Events": {
          "TypeId": 291
        },
        "Constants": [
          {
            "Name": "SubmissionDeposit",
            "TypeId": 6,
            "Value": "AIBiF17RWAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "MaxQueued",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "Name": "UndecidingTimeout",
            "TypeId": 4,
            "Value": "gBMDAA==",
            "Docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "Name": "AlarmInterval",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "Name": "Tracks",
            "TypeId": 993,
            "Value": "WAAAEHJvb3QBAAAAAACg3sWtyTU2AAAAAAAAALAEAACAEwMAQDgAAEA4AAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAADKmjsAAAAAAGXNHQEASHdoaXRlbGlzdGVkX2NhbGxlcmQAAAAAAKDexa3JNTYAAAAAAAAAlgAAAMCJAQBkAAAAZAAAAALslyUQAAAAAHtXPBcAAAAAQjkvEgAAAAACDgCEAAAAAADW5h8BAAAAADlieQIAAAAAAgBQcmVmZXJlbmR1bV9jYW5jZWxsZXLoAwAAAACg3sWtyTU2AAAAAAAAALAEAADAiQEACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////wMARHJlZmVyZW5kdW1fa2lsbGVy6AMAAAAAQLK6yeAZHgIAAAAAAACwBAAAgBMDAAgHAABkAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////9kADRzdGFraW5nX2FkbWluCgAAAAAAUO/i1uQaGwAAAAAAAACwBAAAgBMDAAgHAABkAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////9lADh0cmVhc3VyeV9hZG1pbgoAAAAAAKDexa3JNTYAAAAAAAAAsAQAAIATAwAIBwAAQDgAAAKQ1z4NAAAAAFdD3hMAAAAAVEPeEwAAAAAAAMqaOwAAAAAAZc0dZgAsbGVhc2VfYWRtaW4KAAAAAABQ7+LW5BobAAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////2cAQGZlbGxvd3NoaXBfYWRtaW4KAAAAAAAQYy1ex2sFAAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////2gANGdlbmVyYWxfYWRtaW4KAAAAAAAQYy1ex2sFAAAAAAAAALAEAACAEwMACAcAAGQAAAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAlmi9AIAAAAAoylrBQAAAAAua0r9/////2kANGF1Y3Rpb25fYWRtaW4KAAAAAACg3sWtyTU2AAAAAAAAALAEAACAEwMACAcAAGQAAAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAlmi9AIAAAAAoylrBQAAAAAua0r9/////2oASG11bHRpX3Rva2Vuc19hZG1pbgoAAAAAAKDexa3JNTYAAAAAAAAAsAQAAIATAwAIBwAAZAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////awBAZnVlbF90YW5rc19hZG1pbgoAAAAAAKDexa3JNTYAAAAAAAAAsAQAAIATAwAIBwAAZAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////bAAwY2xhaW1zX2FkbWluCgAAAAAAoN7Frck1NgAAAAAAAACwBAAAgBMDAAgHAABkAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////9tAFRleHRyaW5zaWNfcGF1c2VfYWRtaW4KAAAAAACg3sWtyTU2AAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////24AOHByZWltYWdlX2FkbWluCgAAAAAAoN7Frck1NgAAAAAAAACwBAAAgBMDAAgHAABkAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////9vADx3aGl0ZWxpc3RfYWRtaW4KAAAAAACg3sWtyTU2AAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////3AAQHBhcmFjaGFpbnNfYWRtaW4KAAAAAACg3sWtyTU2AAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////8gAMHNtYWxsX3RpcHBlcsgAAAAAAGSns7bgDQAAAAAAAAAACgAAAMCJAQBkAAAACgAAAABJkUkVAGXNHQDKmjsC+boYAAAAAAAqTTEAAAAAAGtZ5///////yQAoYmlnX3RpcHBlcmQAAAAAAOiJBCPHigAAAAAAAAAAZAAAAMCJAQBYAgAAZAAAAABJkUkVAGXNHQDKmjsCaU8/AAAAAAA1ln0AAAAAAOU0wf//////ygA0c21hbGxfc3BlbmRlcjIAAAAAABBjLV7HawUAAAAAAAAAYAkAAIATAwAgHAAAQDgAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////ywA4bWVkaXVtX3NwZW5kZXIyAAAAAAAgxlq8jtcKAAAAAAAAAGAJAACAEwMAQDgAAEA4AAAAWwH2MABlzR0Aypo7AhFh2wAAAAAAv9GqAQAAAAAglyr//////8wALGJpZ19zcGVuZGVyMgAAAAAAQIy1eB2vFQAAAAAAAABgCQAAgBMDAIBwAABAOAAAAADKmjsAZc0dAMqaOwJBPLABAAAAAHVdNAMAAAAARdFl/v////8=",
            "Docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "Errors": {
          "TypeId": 999
        },
        "Index": 103
      },
      "105": {
        "Name": "Whitelist",
        "Storage": {
          "Prefix": "Whitelist",
          "Entries": [
            {
              "Name": "WhitelistedCall",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 56
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 596
        },
        "Events": {
          "TypeId": 642
        },
        "Constants": [],
        "Errors": {
          "TypeId": 1000
        },
        "Index": 105
      },
      "106": {
        "Name": "FellowshipCollective",
        "Storage": {
          "Prefix": "FellowshipCollective",
          "Entries": [
            {
              "Name": "MemberCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 292,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of members in the collective who have at least the rank according to the index",
                " of the vec."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 1001
                }
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective."
              ]
            },
            {
              "Name": "IdToIndex",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 1002,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The index of each ranks's member into the group of members who have at least that rank."
              ]
            },
            {
              "Name": "IndexToId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 1003,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The members in the collective by index. All indices in the range `0..MemberCount` will",
                " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 717,
                  "Value": 648
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "VotingCleanup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 1004
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 597
        },
        "Events": {
          "TypeId": 647
        },
        "Constants": [],
        "Errors": {
          "TypeId": 1005
        },
        "Index": 106
      },
      "107": {
        "Name": "FellowshipReferenda",
        "Storage": {
          "Prefix": "FellowshipReferenda",
          "Entries": [
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "ReferendumInfoFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 1006
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "Name": "TrackQueue",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 292,
                  "Value": 1008
                }
              },
              "Default": "AA==",
              "Docs": [
                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                " conviction-weighted approvals.",
                "",
                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
              ]
            },
            {
              "Name": "DecidingCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 292,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of referenda being decided currently."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The metadata is a general information concerning the referendum.",
                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 598
        },
        "Events": {
          "TypeId": 650
        },
        "Constants": [
          {
            "Name": "SubmissionDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "MaxQueued",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "Name": "UndecidingTimeout",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "Name": "AlarmInterval",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "Name": "Tracks",
            "TypeId": 993,
            "Value": "KAAAKGNhbmRpZGF0ZXMKAAAAAADoiQQjx4oAAAAAAAAAAFgCAACAEwMAwgEAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQEAHG1lbWJlcnMKAAAAAAAQYy1ex2sFAAAAAAAAAMIBAACAMgIALAEAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQIALHByb2ZpY2llbnRzCgAAAAAAIMZavI7XCgAAAAAAAAAsAQAAwIkBAJYAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0DABxmZWxsb3dzCgAAAAAAoN7Frck1NgAAAAAAAACWAAAAwKgAAJYAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0EADhzZW5pb3IgZmVsbG93cwoAAAAAAJCsbjJ4hocAAAAAAAAAlgAAAIBwAABkAAAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dBQAcZXhwZXJ0cwoAAAAAACBZ3WTwDA8BAAAAAAAAZAAAAEA4AABkAAAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dBgA4c2VuaW9yIGV4cGVydHMKAAAAAACwBUyXaJOWAQAAAAAAAGQAAACAJQAAMgAAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQcAHG1hc3RlcnMKAAAAAABAsrrJ4BkeAgAAAAAAADIAAAAgHAAAMgAAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQgAOHNlbmlvciBtYXN0ZXJzCgAAAAAAQHul8GOBlgoAAAAAAAAyAAAAwBIAADIAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0JADRncmFuZCBtYXN0ZXJzCgAAAAAAgPZK4ccCLRUAAAAAAAAyAAAAYAkAADIAAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0=",
            "Docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "Errors": {
          "TypeId": 1009
        },
        "Index": 107
      },
      "108": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 1010
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 634
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 1014
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1016,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 599
        },
        "Events": {
          "TypeId": 651
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "AABAjLV4Ha8VAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "Name": "FieldDeposit",
            "TypeId": 6,
            "Value": "AAA9kWDkWBEAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per additional field for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "AAC42p7JOfkSAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxAdditionalFields",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
              " required to access an identity, but can be pretty high."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "Errors": {
          "TypeId": 1020
        },
        "Index": 108
      },
      "109": {
        "Name": "VoteManager",
        "Storage": {
          "Prefix": "VoteManager",
          "Entries": [
            {
              "Name": "VoteCurrencies",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 721,
                  "Value": 639
                }
              },
              "Default": "AA==",
              "Docs": [
                " The currency used by `AccountId` to vote in Poll with",
                " `PollIndex`",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "VotesToUnlock",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 721,
                  "Value": 1021
                }
              },
              "Default": "AA==",
              "Docs": [
                " The currency used by `AccountId` to vote in referendum with",
                " `ReferendumIndex`",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 638
        },
        "Events": {
          "TypeId": 652
        },
        "Constants": [],
        "Errors": {
          "TypeId": 1022
        },
        "Index": 109
      }
    },
    "Extrinsic": {
      "TypeId": 1023,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 1025,
          "AddSignedExtType": 56
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 1026,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 1027,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 1028,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 1029,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 1031,
          "AddSignedExtType": 56
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 1032,
          "AddSignedExtType": 56
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 1033,
          "AddSignedExtType": 56
        },
        {
          "SignedIdentifier": "CheckFuelTank",
          "SignedExtType": 1034,
          "AddSignedExtType": 56
        }
      ]
    },
    "TypeId": 256
  }
}