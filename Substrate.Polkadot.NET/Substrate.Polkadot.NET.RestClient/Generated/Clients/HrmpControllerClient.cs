//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_core_primitives;
   using Substrate.Polkadot.NET.RestClient.Generated.Interfaces;
   
   public sealed class HrmpControllerClient : BaseClient, IHrmpControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public HrmpControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<HrmpOpenChannelRequest> GetHrmpOpenChannelRequests(HrmpChannelId key)
      {
         return await SendRequestAsync<HrmpOpenChannelRequest>(_httpClient, "hrmp/hrmpopenchannelrequests", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpOpenChannelRequestsParams(key));
      }
      public async Task<bool> SubscribeHrmpOpenChannelRequests(HrmpChannelId key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpOpenChannelRequests", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpOpenChannelRequestsParams(key));
      }
      public async Task<BaseVec<HrmpChannelId>> GetHrmpOpenChannelRequestsList()
      {
         return await SendRequestAsync<BaseVec<HrmpChannelId>>(_httpClient, "hrmp/hrmpopenchannelrequestslist");
      }
      public async Task<bool> SubscribeHrmpOpenChannelRequestsList()
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpOpenChannelRequestsList");
      }
      public async Task<U32> GetHrmpOpenChannelRequestCount(Id key)
      {
         return await SendRequestAsync<U32>(_httpClient, "hrmp/hrmpopenchannelrequestcount", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpOpenChannelRequestCountParams(key));
      }
      public async Task<bool> SubscribeHrmpOpenChannelRequestCount(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpOpenChannelRequestCount", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpOpenChannelRequestCountParams(key));
      }
      public async Task<U32> GetHrmpAcceptedChannelRequestCount(Id key)
      {
         return await SendRequestAsync<U32>(_httpClient, "hrmp/hrmpacceptedchannelrequestcount", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpAcceptedChannelRequestCountParams(key));
      }
      public async Task<bool> SubscribeHrmpAcceptedChannelRequestCount(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpAcceptedChannelRequestCount", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpAcceptedChannelRequestCountParams(key));
      }
      public async Task<BaseTuple> GetHrmpCloseChannelRequests(HrmpChannelId key)
      {
         return await SendRequestAsync<BaseTuple>(_httpClient, "hrmp/hrmpclosechannelrequests", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpCloseChannelRequestsParams(key));
      }
      public async Task<bool> SubscribeHrmpCloseChannelRequests(HrmpChannelId key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpCloseChannelRequests", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpCloseChannelRequestsParams(key));
      }
      public async Task<BaseVec<HrmpChannelId>> GetHrmpCloseChannelRequestsList()
      {
         return await SendRequestAsync<BaseVec<HrmpChannelId>>(_httpClient, "hrmp/hrmpclosechannelrequestslist");
      }
      public async Task<bool> SubscribeHrmpCloseChannelRequestsList()
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpCloseChannelRequestsList");
      }
      public async Task<U32> GetHrmpWatermarks(Id key)
      {
         return await SendRequestAsync<U32>(_httpClient, "hrmp/hrmpwatermarks", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpWatermarksParams(key));
      }
      public async Task<bool> SubscribeHrmpWatermarks(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpWatermarks", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpWatermarksParams(key));
      }
      public async Task<HrmpChannel> GetHrmpChannels(HrmpChannelId key)
      {
         return await SendRequestAsync<HrmpChannel>(_httpClient, "hrmp/hrmpchannels", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpChannelsParams(key));
      }
      public async Task<bool> SubscribeHrmpChannels(HrmpChannelId key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpChannels", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpChannelsParams(key));
      }
      public async Task<BaseVec<Id>> GetHrmpIngressChannelsIndex(Id key)
      {
         return await SendRequestAsync<BaseVec<Id>>(_httpClient, "hrmp/hrmpingresschannelsindex", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpIngressChannelsIndexParams(key));
      }
      public async Task<bool> SubscribeHrmpIngressChannelsIndex(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpIngressChannelsIndex", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpIngressChannelsIndexParams(key));
      }
      public async Task<BaseVec<Id>> GetHrmpEgressChannelsIndex(Id key)
      {
         return await SendRequestAsync<BaseVec<Id>>(_httpClient, "hrmp/hrmpegresschannelsindex", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpEgressChannelsIndexParams(key));
      }
      public async Task<bool> SubscribeHrmpEgressChannelsIndex(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpEgressChannelsIndex", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpEgressChannelsIndexParams(key));
      }
      public async Task<BaseVec<InboundHrmpMessage>> GetHrmpChannelContents(HrmpChannelId key)
      {
         return await SendRequestAsync<BaseVec<InboundHrmpMessage>>(_httpClient, "hrmp/hrmpchannelcontents", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpChannelContentsParams(key));
      }
      public async Task<bool> SubscribeHrmpChannelContents(HrmpChannelId key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpChannelContents", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpChannelContentsParams(key));
      }
      public async Task<BaseVec<BaseTuple<U32, BaseVec<Id>>>> GetHrmpChannelDigests(Id key)
      {
         return await SendRequestAsync<BaseVec<BaseTuple<U32, BaseVec<Id>>>>(_httpClient, "hrmp/hrmpchanneldigests", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpChannelDigestsParams(key));
      }
      public async Task<bool> SubscribeHrmpChannelDigests(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Hrmp.HrmpChannelDigests", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.HrmpStorage.HrmpChannelDigestsParams(key));
      }
   }
}
