//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.pallet_nomination_pools;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Polkadot.NET.RestClient.Generated.Interfaces;
   
   public sealed class NominationPoolsControllerClient : BaseClient, INominationPoolsControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public NominationPoolsControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<U128> GetMinJoinBond()
      {
         return await SendRequestAsync<U128>(_httpClient, "nominationpools/minjoinbond");
      }
      public async Task<bool> SubscribeMinJoinBond()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.MinJoinBond");
      }
      public async Task<U128> GetMinCreateBond()
      {
         return await SendRequestAsync<U128>(_httpClient, "nominationpools/mincreatebond");
      }
      public async Task<bool> SubscribeMinCreateBond()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.MinCreateBond");
      }
      public async Task<U32> GetMaxPools()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/maxpools");
      }
      public async Task<bool> SubscribeMaxPools()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.MaxPools");
      }
      public async Task<U32> GetMaxPoolMembers()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/maxpoolmembers");
      }
      public async Task<bool> SubscribeMaxPoolMembers()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.MaxPoolMembers");
      }
      public async Task<U32> GetMaxPoolMembersPerPool()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/maxpoolmembersperpool");
      }
      public async Task<bool> SubscribeMaxPoolMembersPerPool()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.MaxPoolMembersPerPool");
      }
      public async Task<Perbill> GetGlobalMaxCommission()
      {
         return await SendRequestAsync<Perbill>(_httpClient, "nominationpools/globalmaxcommission");
      }
      public async Task<bool> SubscribeGlobalMaxCommission()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.GlobalMaxCommission");
      }
      public async Task<PoolMember> GetPoolMembers(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<PoolMember>(_httpClient, "nominationpools/poolmembers", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.PoolMembersParams(key));
      }
      public async Task<bool> SubscribePoolMembers(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.PoolMembers", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.PoolMembersParams(key));
      }
      public async Task<U32> GetCounterForPoolMembers()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/counterforpoolmembers");
      }
      public async Task<bool> SubscribeCounterForPoolMembers()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.CounterForPoolMembers");
      }
      public async Task<BondedPoolInner> GetBondedPools(U32 key)
      {
         return await SendRequestAsync<BondedPoolInner>(_httpClient, "nominationpools/bondedpools", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.BondedPoolsParams(key));
      }
      public async Task<bool> SubscribeBondedPools(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.BondedPools", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.BondedPoolsParams(key));
      }
      public async Task<U32> GetCounterForBondedPools()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/counterforbondedpools");
      }
      public async Task<bool> SubscribeCounterForBondedPools()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.CounterForBondedPools");
      }
      public async Task<RewardPool> GetRewardPools(U32 key)
      {
         return await SendRequestAsync<RewardPool>(_httpClient, "nominationpools/rewardpools", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.RewardPoolsParams(key));
      }
      public async Task<bool> SubscribeRewardPools(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.RewardPools", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.RewardPoolsParams(key));
      }
      public async Task<U32> GetCounterForRewardPools()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/counterforrewardpools");
      }
      public async Task<bool> SubscribeCounterForRewardPools()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.CounterForRewardPools");
      }
      public async Task<SubPools> GetSubPoolsStorage(U32 key)
      {
         return await SendRequestAsync<SubPools>(_httpClient, "nominationpools/subpoolsstorage", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.SubPoolsStorageParams(key));
      }
      public async Task<bool> SubscribeSubPoolsStorage(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.SubPoolsStorage", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.SubPoolsStorageParams(key));
      }
      public async Task<U32> GetCounterForSubPoolsStorage()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/counterforsubpoolsstorage");
      }
      public async Task<bool> SubscribeCounterForSubPoolsStorage()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.CounterForSubPoolsStorage");
      }
      public async Task<BoundedVecT37> GetMetadata(U32 key)
      {
         return await SendRequestAsync<BoundedVecT37>(_httpClient, "nominationpools/metadata", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.MetadataParams(key));
      }
      public async Task<bool> SubscribeMetadata(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.Metadata", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.MetadataParams(key));
      }
      public async Task<U32> GetCounterForMetadata()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/counterformetadata");
      }
      public async Task<bool> SubscribeCounterForMetadata()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.CounterForMetadata");
      }
      public async Task<U32> GetLastPoolId()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/lastpoolid");
      }
      public async Task<bool> SubscribeLastPoolId()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.LastPoolId");
      }
      public async Task<U32> GetReversePoolIdLookup(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/reversepoolidlookup", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.ReversePoolIdLookupParams(key));
      }
      public async Task<bool> SubscribeReversePoolIdLookup(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.ReversePoolIdLookup", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.ReversePoolIdLookupParams(key));
      }
      public async Task<U32> GetCounterForReversePoolIdLookup()
      {
         return await SendRequestAsync<U32>(_httpClient, "nominationpools/counterforreversepoolidlookup");
      }
      public async Task<bool> SubscribeCounterForReversePoolIdLookup()
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.CounterForReversePoolIdLookup");
      }
      public async Task<EnumClaimPermission> GetClaimPermissions(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<EnumClaimPermission>(_httpClient, "nominationpools/claimpermissions", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.ClaimPermissionsParams(key));
      }
      public async Task<bool> SubscribeClaimPermissions(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("NominationPools.ClaimPermissions", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.NominationPoolsStorage.ClaimPermissionsParams(key));
      }
   }
}
