//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.pallet_democracy.types;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.pallet_democracy.vote;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.frame_support.traits.preimages;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.pallet_democracy.vote_threshold;
   using Substrate.Polkadot.NET.RestClient.Generated.Interfaces;
   
   public sealed class DemocracyControllerClient : BaseClient, IDemocracyControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public DemocracyControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<U32> GetPublicPropCount()
      {
         return await SendRequestAsync<U32>(_httpClient, "democracy/publicpropcount");
      }
      public async Task<bool> SubscribePublicPropCount()
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.PublicPropCount");
      }
      public async Task<BoundedVecT11> GetPublicProps()
      {
         return await SendRequestAsync<BoundedVecT11>(_httpClient, "democracy/publicprops");
      }
      public async Task<bool> SubscribePublicProps()
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.PublicProps");
      }
      public async Task<BaseTuple<BoundedVecT12, U128>> GetDepositOf(U32 key)
      {
         return await SendRequestAsync<BaseTuple<BoundedVecT12, U128>>(_httpClient, "democracy/depositof", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.DepositOfParams(key));
      }
      public async Task<bool> SubscribeDepositOf(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.DepositOf", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.DepositOfParams(key));
      }
      public async Task<U32> GetReferendumCount()
      {
         return await SendRequestAsync<U32>(_httpClient, "democracy/referendumcount");
      }
      public async Task<bool> SubscribeReferendumCount()
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.ReferendumCount");
      }
      public async Task<U32> GetLowestUnbaked()
      {
         return await SendRequestAsync<U32>(_httpClient, "democracy/lowestunbaked");
      }
      public async Task<bool> SubscribeLowestUnbaked()
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.LowestUnbaked");
      }
      public async Task<EnumReferendumInfo> GetReferendumInfoOf(U32 key)
      {
         return await SendRequestAsync<EnumReferendumInfo>(_httpClient, "democracy/referenduminfoof", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.ReferendumInfoOfParams(key));
      }
      public async Task<bool> SubscribeReferendumInfoOf(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.ReferendumInfoOf", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.ReferendumInfoOfParams(key));
      }
      public async Task<EnumVoting> GetVotingOf(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<EnumVoting>(_httpClient, "democracy/votingof", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.VotingOfParams(key));
      }
      public async Task<bool> SubscribeVotingOf(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.VotingOf", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.VotingOfParams(key));
      }
      public async Task<Bool> GetLastTabledWasExternal()
      {
         return await SendRequestAsync<Bool>(_httpClient, "democracy/lasttabledwasexternal");
      }
      public async Task<bool> SubscribeLastTabledWasExternal()
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.LastTabledWasExternal");
      }
      public async Task<BaseTuple<EnumBounded, EnumVoteThreshold>> GetNextExternal()
      {
         return await SendRequestAsync<BaseTuple<EnumBounded, EnumVoteThreshold>>(_httpClient, "democracy/nextexternal");
      }
      public async Task<bool> SubscribeNextExternal()
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.NextExternal");
      }
      public async Task<BaseTuple<U32, BoundedVecT12>> GetBlacklist(Substrate.Polkadot.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await SendRequestAsync<BaseTuple<U32, BoundedVecT12>>(_httpClient, "democracy/blacklist", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.BlacklistParams(key));
      }
      public async Task<bool> SubscribeBlacklist(Substrate.Polkadot.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.Blacklist", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.BlacklistParams(key));
      }
      public async Task<Bool> GetCancellations(Substrate.Polkadot.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await SendRequestAsync<Bool>(_httpClient, "democracy/cancellations", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.CancellationsParams(key));
      }
      public async Task<bool> SubscribeCancellations(Substrate.Polkadot.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await _subscriptionClient.SubscribeAsync("Democracy.Cancellations", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.DemocracyStorage.CancellationsParams(key));
      }
   }
}
