//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.scheduler;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Polkadot.NET.RestClient.Generated.Interfaces;
   
   public sealed class ParaSchedulerControllerClient : BaseClient, IParaSchedulerControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public ParaSchedulerControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<BaseVec<BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex>>> GetValidatorGroups()
      {
         return await SendRequestAsync<BaseVec<BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex>>>(_httpClient, "parascheduler/validatorgroups");
      }
      public async Task<bool> SubscribeValidatorGroups()
      {
         return await _subscriptionClient.SubscribeAsync("ParaScheduler.ValidatorGroups");
      }
      public async Task<ParathreadClaimQueue> GetParathreadQueue()
      {
         return await SendRequestAsync<ParathreadClaimQueue>(_httpClient, "parascheduler/parathreadqueue");
      }
      public async Task<bool> SubscribeParathreadQueue()
      {
         return await _subscriptionClient.SubscribeAsync("ParaScheduler.ParathreadQueue");
      }
      public async Task<BaseVec<BaseOpt<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v2.EnumCoreOccupied>>> GetAvailabilityCores()
      {
         return await SendRequestAsync<BaseVec<BaseOpt<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v2.EnumCoreOccupied>>>(_httpClient, "parascheduler/availabilitycores");
      }
      public async Task<bool> SubscribeAvailabilityCores()
      {
         return await _subscriptionClient.SubscribeAsync("ParaScheduler.AvailabilityCores");
      }
      public async Task<BaseVec<Id>> GetParathreadClaimIndex()
      {
         return await SendRequestAsync<BaseVec<Id>>(_httpClient, "parascheduler/parathreadclaimindex");
      }
      public async Task<bool> SubscribeParathreadClaimIndex()
      {
         return await _subscriptionClient.SubscribeAsync("ParaScheduler.ParathreadClaimIndex");
      }
      public async Task<U32> GetSessionStartBlock()
      {
         return await SendRequestAsync<U32>(_httpClient, "parascheduler/sessionstartblock");
      }
      public async Task<bool> SubscribeSessionStartBlock()
      {
         return await _subscriptionClient.SubscribeAsync("ParaScheduler.SessionStartBlock");
      }
      public async Task<BaseVec<CoreAssignment>> GetScheduled()
      {
         return await SendRequestAsync<BaseVec<CoreAssignment>>(_httpClient, "parascheduler/scheduled");
      }
      public async Task<bool> SubscribeScheduled()
      {
         return await _subscriptionClient.SubscribeAsync("ParaScheduler.Scheduled");
      }
   }
}
