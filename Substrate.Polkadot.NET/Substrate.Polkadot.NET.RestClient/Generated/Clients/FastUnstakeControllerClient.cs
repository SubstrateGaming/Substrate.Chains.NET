//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.pallet_fast_unstake.types;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Polkadot.NET.RestClient.Generated.Interfaces;
   
   public sealed class FastUnstakeControllerClient : BaseClient, IFastUnstakeControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public FastUnstakeControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<UnstakeRequest> GetHead()
      {
         return await SendRequestAsync<UnstakeRequest>(_httpClient, "fastunstake/head");
      }
      public async Task<bool> SubscribeHead()
      {
         return await _subscriptionClient.SubscribeAsync("FastUnstake.Head");
      }
      public async Task<U128> GetQueue(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<U128>(_httpClient, "fastunstake/queue", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.FastUnstakeStorage.QueueParams(key));
      }
      public async Task<bool> SubscribeQueue(Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("FastUnstake.Queue", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.FastUnstakeStorage.QueueParams(key));
      }
      public async Task<U32> GetCounterForQueue()
      {
         return await SendRequestAsync<U32>(_httpClient, "fastunstake/counterforqueue");
      }
      public async Task<bool> SubscribeCounterForQueue()
      {
         return await _subscriptionClient.SubscribeAsync("FastUnstake.CounterForQueue");
      }
      public async Task<U32> GetErasToCheckPerBlock()
      {
         return await SendRequestAsync<U32>(_httpClient, "fastunstake/erastocheckperblock");
      }
      public async Task<bool> SubscribeErasToCheckPerBlock()
      {
         return await _subscriptionClient.SubscribeAsync("FastUnstake.ErasToCheckPerBlock");
      }
   }
}
