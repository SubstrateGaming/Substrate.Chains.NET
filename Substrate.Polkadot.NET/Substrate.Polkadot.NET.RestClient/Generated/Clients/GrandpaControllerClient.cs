//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.pallet_grandpa;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec;
   using Substrate.Polkadot.NET.RestClient.Generated.Interfaces;
   
   public sealed class GrandpaControllerClient : BaseClient, IGrandpaControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public GrandpaControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<EnumStoredState> GetState()
      {
         return await SendRequestAsync<EnumStoredState>(_httpClient, "grandpa/state");
      }
      public async Task<bool> SubscribeState()
      {
         return await _subscriptionClient.SubscribeAsync("Grandpa.State");
      }
      public async Task<StoredPendingChange> GetPendingChange()
      {
         return await SendRequestAsync<StoredPendingChange>(_httpClient, "grandpa/pendingchange");
      }
      public async Task<bool> SubscribePendingChange()
      {
         return await _subscriptionClient.SubscribeAsync("Grandpa.PendingChange");
      }
      public async Task<U32> GetNextForced()
      {
         return await SendRequestAsync<U32>(_httpClient, "grandpa/nextforced");
      }
      public async Task<bool> SubscribeNextForced()
      {
         return await _subscriptionClient.SubscribeAsync("Grandpa.NextForced");
      }
      public async Task<BaseTuple<U32, U32>> GetStalled()
      {
         return await SendRequestAsync<BaseTuple<U32, U32>>(_httpClient, "grandpa/stalled");
      }
      public async Task<bool> SubscribeStalled()
      {
         return await _subscriptionClient.SubscribeAsync("Grandpa.Stalled");
      }
      public async Task<U64> GetCurrentSetId()
      {
         return await SendRequestAsync<U64>(_httpClient, "grandpa/currentsetid");
      }
      public async Task<bool> SubscribeCurrentSetId()
      {
         return await _subscriptionClient.SubscribeAsync("Grandpa.CurrentSetId");
      }
      public async Task<U32> GetSetIdSession(U64 key)
      {
         return await SendRequestAsync<U32>(_httpClient, "grandpa/setidsession", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.GrandpaStorage.SetIdSessionParams(key));
      }
      public async Task<bool> SubscribeSetIdSession(U64 key)
      {
         return await _subscriptionClient.SubscribeAsync("Grandpa.SetIdSession", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.GrandpaStorage.SetIdSessionParams(key));
      }
      public async Task<WeakBoundedVecT4> GetAuthorities()
      {
         return await SendRequestAsync<WeakBoundedVecT4>(_httpClient, "grandpa/authorities");
      }
      public async Task<bool> SubscribeAuthorities()
      {
         return await _subscriptionClient.SubscribeAsync("Grandpa.Authorities");
      }
   }
}
