//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar;
   using Substrate.Polkadot.NET.RestClient.Generated.Interfaces;
   
   public sealed class RegistrarControllerClient : BaseClient, IRegistrarControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public RegistrarControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<Id> GetPendingSwap(Id key)
      {
         return await SendRequestAsync<Id>(_httpClient, "registrar/pendingswap", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.RegistrarStorage.PendingSwapParams(key));
      }
      public async Task<bool> SubscribePendingSwap(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Registrar.PendingSwap", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.RegistrarStorage.PendingSwapParams(key));
      }
      public async Task<ParaInfo> GetParas(Id key)
      {
         return await SendRequestAsync<ParaInfo>(_httpClient, "registrar/paras", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.RegistrarStorage.ParasParams(key));
      }
      public async Task<bool> SubscribeParas(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Registrar.Paras", Substrate.Polkadot.NET.NetApiExt.Generated.Storage.RegistrarStorage.ParasParams(key));
      }
      public async Task<Id> GetNextFreeParaId()
      {
         return await SendRequestAsync<Id>(_httpClient, "registrar/nextfreeparaid");
      }
      public async Task<bool> SubscribeNextFreeParaId()
      {
         return await _subscriptionClient.SubscribeAsync("Registrar.NextFreeParaId");
      }
   }
}
