//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Polkadot.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IParasDisputesStorage interface definition.
    /// </summary>
    public interface IParasDisputesStorage : IStorage
    {
        
        /// <summary>
        /// >> LastPrunedSession
        ///  The last pruned session, if any. All data stored by this module
        ///  references sessions.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetLastPrunedSession();
        
        /// <summary>
        /// >> Disputes
        ///  All ongoing or concluded disputes for the last several sessions.
        /// </summary>
        Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_primitives.v7.DisputeState GetDisputes(string key);
        
        /// <summary>
        /// >> BackersOnDisputes
        ///  Backing votes stored for each dispute.
        ///  This storage is used for slashing.
        /// </summary>
        Substrate.Polkadot.NetApiExt.Generated.Types.Base.BTreeSet GetBackersOnDisputes(string key);
        
        /// <summary>
        /// >> Included
        ///  All included blocks on the chain, as well as the block number in this chain that
        ///  should be reverted back to if the candidate is disputed and determined to be invalid.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetIncluded(string key);
        
        /// <summary>
        /// >> Frozen
        ///  Whether the chain is frozen. Starts as `None`. When this is `Some`,
        ///  the chain will not accept any new parachain blocks for backing or inclusion,
        ///  and its value indicates the last valid block number in the chain.
        ///  It can only be set back to `None` by governance intervention.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> GetFrozen();
    }
    
    /// <summary>
    /// ParasDisputesStorage class definition.
    /// </summary>
    public sealed class ParasDisputesStorage : IParasDisputesStorage
    {
        
        /// <summary>
        /// _lastPrunedSessionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _lastPrunedSessionTypedStorage;
        
        /// <summary>
        /// _disputesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_primitives.v7.DisputeState> _disputesTypedStorage;
        
        /// <summary>
        /// _backersOnDisputesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Polkadot.NetApiExt.Generated.Types.Base.BTreeSet> _backersOnDisputesTypedStorage;
        
        /// <summary>
        /// _includedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _includedTypedStorage;
        
        /// <summary>
        /// _frozenTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>> _frozenTypedStorage;
        
        /// <summary>
        /// ParasDisputesStorage constructor.
        /// </summary>
        public ParasDisputesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.LastPrunedSessionTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParasDisputes.LastPrunedSession", storageDataProvider, storageChangeDelegates);
            this.DisputesTypedStorage = new TypedMapStorage<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_primitives.v7.DisputeState>("ParasDisputes.Disputes", storageDataProvider, storageChangeDelegates);
            this.BackersOnDisputesTypedStorage = new TypedMapStorage<Substrate.Polkadot.NetApiExt.Generated.Types.Base.BTreeSet>("ParasDisputes.BackersOnDisputes", storageDataProvider, storageChangeDelegates);
            this.IncludedTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParasDisputes.Included", storageDataProvider, storageChangeDelegates);
            this.FrozenTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>>("ParasDisputes.Frozen", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _lastPrunedSessionTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> LastPrunedSessionTypedStorage
        {
            get
            {
                return _lastPrunedSessionTypedStorage;
            }
            set
            {
                _lastPrunedSessionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _disputesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_primitives.v7.DisputeState> DisputesTypedStorage
        {
            get
            {
                return _disputesTypedStorage;
            }
            set
            {
                _disputesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _backersOnDisputesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Polkadot.NetApiExt.Generated.Types.Base.BTreeSet> BackersOnDisputesTypedStorage
        {
            get
            {
                return _backersOnDisputesTypedStorage;
            }
            set
            {
                _backersOnDisputesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _includedTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> IncludedTypedStorage
        {
            get
            {
                return _includedTypedStorage;
            }
            set
            {
                _includedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _frozenTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>> FrozenTypedStorage
        {
            get
            {
                return _frozenTypedStorage;
            }
            set
            {
                _frozenTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await LastPrunedSessionTypedStorage.InitializeAsync("ParasDisputes", "LastPrunedSession");
            await DisputesTypedStorage.InitializeAsync("ParasDisputes", "Disputes");
            await BackersOnDisputesTypedStorage.InitializeAsync("ParasDisputes", "BackersOnDisputes");
            await IncludedTypedStorage.InitializeAsync("ParasDisputes", "Included");
            await FrozenTypedStorage.InitializeAsync("ParasDisputes", "Frozen");
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.LastPrunedSession
        /// </summary>
        [StorageChange("ParasDisputes", "LastPrunedSession")]
        public void OnUpdateLastPrunedSession(string data)
        {
            LastPrunedSessionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LastPrunedSession
        ///  The last pruned session, if any. All data stored by this module
        ///  references sessions.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetLastPrunedSession()
        {
            return LastPrunedSessionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.Disputes
        /// </summary>
        [StorageChange("ParasDisputes", "Disputes")]
        public void OnUpdateDisputes(string key, string data)
        {
            DisputesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Disputes
        ///  All ongoing or concluded disputes for the last several sessions.
        /// </summary>
        public Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_primitives.v7.DisputeState GetDisputes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DisputesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_primitives.v7.DisputeState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.BackersOnDisputes
        /// </summary>
        [StorageChange("ParasDisputes", "BackersOnDisputes")]
        public void OnUpdateBackersOnDisputes(string key, string data)
        {
            BackersOnDisputesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BackersOnDisputes
        ///  Backing votes stored for each dispute.
        ///  This storage is used for slashing.
        /// </summary>
        public Substrate.Polkadot.NetApiExt.Generated.Types.Base.BTreeSet GetBackersOnDisputes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BackersOnDisputesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Polkadot.NetApiExt.Generated.Types.Base.BTreeSet result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.Included
        /// </summary>
        [StorageChange("ParasDisputes", "Included")]
        public void OnUpdateIncluded(string key, string data)
        {
            IncludedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Included
        ///  All included blocks on the chain, as well as the block number in this chain that
        ///  should be reverted back to if the candidate is disputed and determined to be invalid.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetIncluded(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (IncludedTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.Frozen
        /// </summary>
        [StorageChange("ParasDisputes", "Frozen")]
        public void OnUpdateFrozen(string data)
        {
            FrozenTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Frozen
        ///  Whether the chain is frozen. Starts as `None`. When this is `Some`,
        ///  the chain will not accept any new parachain blocks for backing or inclusion,
        ///  and its value indicates the last valid block number in the chain.
        ///  It can only be set back to `None` by governance intervention.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> GetFrozen()
        {
            return FrozenTypedStorage.Get();
        }
    }
}
