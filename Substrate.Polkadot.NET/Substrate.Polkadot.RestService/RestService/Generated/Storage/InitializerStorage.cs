//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Polkadot.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IInitializerStorage interface definition.
    /// </summary>
    public interface IInitializerStorage : IStorage
    {
        
        /// <summary>
        /// >> HasInitialized
        ///  Whether the parachains modules have been initialized within this block.
        /// 
        ///  Semantically a `bool`, but this guarantees it should never hit the trie,
        ///  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.
        /// 
        ///  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one
        ///  of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable
        ///  for the semantics of this variable.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetHasInitialized();
        
        /// <summary>
        /// >> BufferedSessionChanges
        ///  Buffered session changes along with the block number at which they should be applied.
        /// 
        ///  Typically this will be empty or one element long. Apart from that this item never hits
        ///  the storage.
        /// 
        ///  However this is a `Vec` regardless to handle various edge cases that may occur at runtime
        ///  upgrade boundaries or if governance intervenes.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange> GetBufferedSessionChanges();
    }
    
    /// <summary>
    /// InitializerStorage class definition.
    /// </summary>
    public sealed class InitializerStorage : IInitializerStorage
    {
        
        /// <summary>
        /// _hasInitializedTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _hasInitializedTypedStorage;
        
        /// <summary>
        /// _bufferedSessionChangesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>> _bufferedSessionChangesTypedStorage;
        
        /// <summary>
        /// InitializerStorage constructor.
        /// </summary>
        public InitializerStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.HasInitializedTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("Initializer.HasInitialized", storageDataProvider, storageChangeDelegates);
            this.BufferedSessionChangesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>>("Initializer.BufferedSessionChanges", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _hasInitializedTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> HasInitializedTypedStorage
        {
            get
            {
                return _hasInitializedTypedStorage;
            }
            set
            {
                _hasInitializedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bufferedSessionChangesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>> BufferedSessionChangesTypedStorage
        {
            get
            {
                return _bufferedSessionChangesTypedStorage;
            }
            set
            {
                _bufferedSessionChangesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await HasInitializedTypedStorage.InitializeAsync("Initializer", "HasInitialized");
            await BufferedSessionChangesTypedStorage.InitializeAsync("Initializer", "BufferedSessionChanges");
        }
        
        /// <summary>
        /// Implements any storage change for Initializer.HasInitialized
        /// </summary>
        [StorageChange("Initializer", "HasInitialized")]
        public void OnUpdateHasInitialized(string data)
        {
            HasInitializedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> HasInitialized
        ///  Whether the parachains modules have been initialized within this block.
        /// 
        ///  Semantically a `bool`, but this guarantees it should never hit the trie,
        ///  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.
        /// 
        ///  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one
        ///  of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable
        ///  for the semantics of this variable.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetHasInitialized()
        {
            return HasInitializedTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Initializer.BufferedSessionChanges
        /// </summary>
        [StorageChange("Initializer", "BufferedSessionChanges")]
        public void OnUpdateBufferedSessionChanges(string data)
        {
            BufferedSessionChangesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> BufferedSessionChanges
        ///  Buffered session changes along with the block number at which they should be applied.
        /// 
        ///  Typically this will be empty or one element long. Apart from that this item never hits
        ///  the storage.
        /// 
        ///  However this is a `Vec` regardless to handle various edge cases that may occur at runtime
        ///  upgrade boundaries or if governance intervenes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange> GetBufferedSessionChanges()
        {
            return BufferedSessionChangesTypedStorage.Get();
        }
    }
}
