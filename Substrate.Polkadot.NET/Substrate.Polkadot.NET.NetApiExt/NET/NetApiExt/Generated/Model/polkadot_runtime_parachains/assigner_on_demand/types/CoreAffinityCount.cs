//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.types
{
    
    
    /// <summary>
    /// >> 773 - Composite[polkadot_runtime_parachains.assigner_on_demand.types.CoreAffinityCount]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class CoreAffinityCount : BaseType
    {
        
        /// <summary>
        /// >> core_index
        /// </summary>
        public Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v7.CoreIndex CoreIndex { get; set; }
        /// <summary>
        /// >> count
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 Count { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "CoreAffinityCount";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(CoreIndex.Encode());
            result.AddRange(Count.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            CoreIndex = new Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v7.CoreIndex();
            CoreIndex.Decode(byteArray, ref p);
            Count = new Substrate.NetApi.Model.Types.Primitive.U32();
            Count.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
