//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Polkadot.NET.NetApiExt.Generated.Model.pallet_fast_unstake.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> register_fast_unstake
        /// Register oneself for fast-unstake.
        /// 
        /// ## Dispatch Origin
        /// 
        /// The dispatch origin of this call must be *signed* by whoever is permitted to call
        /// unbond funds by the staking system. See [`Config::Staking`].
        /// 
        /// ## Details
        /// 
        /// The stash associated with the origin must have no ongoing unlocking chunks. If
        /// successful, this will fully unbond and chill the stash. Then, it will enqueue the stash
        /// to be checked in further blocks.
        /// 
        /// If by the time this is called, the stash is actually eligible for fast-unstake, then
        /// they are guaranteed to remain eligible, because the call will chill them as well.
        /// 
        /// If the check works, the entire staking data is removed, i.e. the stash is fully
        /// unstaked.
        /// 
        /// If the check fails, the stash remains chilled and waiting for being unbonded as in with
        /// the normal staking system, but they lose part of their unbonding chunks due to consuming
        /// the chain's resources.
        /// 
        /// ## Events
        /// 
        /// Some events from the staking and currency system might be emitted.
        /// </summary>
        register_fast_unstake = 0,
        
        /// <summary>
        /// >> deregister
        /// Deregister oneself from the fast-unstake.
        /// 
        /// ## Dispatch Origin
        /// 
        /// The dispatch origin of this call must be *signed* by whoever is permitted to call
        /// unbond funds by the staking system. See [`Config::Staking`].
        /// 
        /// ## Details
        /// 
        /// This is useful if one is registered, they are still waiting, and they change their mind.
        /// 
        /// Note that the associated stash is still fully unbonded and chilled as a consequence of
        /// calling [`Pallet::register_fast_unstake`]. Therefore, this should probably be followed
        /// by a call to `rebond` in the staking system.
        /// 
        /// ## Events
        /// 
        /// Some events from the staking and currency system might be emitted.
        /// </summary>
        deregister = 1,
        
        /// <summary>
        /// >> control
        /// Control the operation of this pallet.
        /// 
        /// ## Dispatch Origin
        /// 
        /// The dispatch origin of this call must be [`Config::ControlOrigin`].
        /// 
        /// ## Details
        /// 
        /// Can set the number of eras to check per block, and potentially other admin work.
        /// 
        /// ## Events
        /// 
        /// No events are emitted from this dispatch.
        /// </summary>
        control = 2,
    }
    
    /// <summary>
    /// >> 275 - Variant[pallet_fast_unstake.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseVoid>(Call.register_fast_unstake);
				AddTypeDecoder<BaseVoid>(Call.deregister);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.control);
        }
    }
}
