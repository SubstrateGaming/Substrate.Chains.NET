//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.paras;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v6;
   using Substrate.Polkadot.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class ParasControllerMockupClient : MockupBaseClient, IParasControllerMockupClient
   {
      private HttpClient _httpClient;
      public ParasControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetPvfActiveVoteMap(PvfCheckActiveVoteState value, ValidationCodeHash key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/PvfActiveVoteMap", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.PvfActiveVoteMapParams(key));
      }
      public async Task<bool> SetPvfActiveVoteList(BaseVec<ValidationCodeHash> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/PvfActiveVoteList", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.PvfActiveVoteListParams());
      }
      public async Task<bool> SetParachains(BaseVec<Id> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/Parachains", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.ParachainsParams());
      }
      public async Task<bool> SetParaLifecycles(EnumParaLifecycle value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/ParaLifecycles", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.ParaLifecyclesParams(key));
      }
      public async Task<bool> SetHeads(HeadData value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/Heads", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.HeadsParams(key));
      }
      public async Task<bool> SetMostRecentContext(U32 value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/MostRecentContext", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.MostRecentContextParams(key));
      }
      public async Task<bool> SetCurrentCodeHash(ValidationCodeHash value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/CurrentCodeHash", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.CurrentCodeHashParams(key));
      }
      public async Task<bool> SetPastCodeHash(ValidationCodeHash value, BaseTuple<Id, U32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/PastCodeHash", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.PastCodeHashParams(key));
      }
      public async Task<bool> SetPastCodeMeta(ParaPastCodeMeta value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/PastCodeMeta", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.PastCodeMetaParams(key));
      }
      public async Task<bool> SetPastCodePruning(BaseVec<BaseTuple<Id, U32>> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/PastCodePruning", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.PastCodePruningParams());
      }
      public async Task<bool> SetFutureCodeUpgrades(U32 value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/FutureCodeUpgrades", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.FutureCodeUpgradesParams(key));
      }
      public async Task<bool> SetFutureCodeHash(ValidationCodeHash value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/FutureCodeHash", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.FutureCodeHashParams(key));
      }
      public async Task<bool> SetUpgradeGoAheadSignal(EnumUpgradeGoAhead value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/UpgradeGoAheadSignal", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.UpgradeGoAheadSignalParams(key));
      }
      public async Task<bool> SetUpgradeRestrictionSignal(EnumUpgradeRestriction value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/UpgradeRestrictionSignal", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.UpgradeRestrictionSignalParams(key));
      }
      public async Task<bool> SetUpgradeCooldowns(BaseVec<BaseTuple<Id, U32>> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/UpgradeCooldowns", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.UpgradeCooldownsParams());
      }
      public async Task<bool> SetUpcomingUpgrades(BaseVec<BaseTuple<Id, U32>> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/UpcomingUpgrades", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.UpcomingUpgradesParams());
      }
      public async Task<bool> SetActionsQueue(BaseVec<Id> value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/ActionsQueue", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.ActionsQueueParams(key));
      }
      public async Task<bool> SetUpcomingParasGenesis(ParaGenesisArgs value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/UpcomingParasGenesis", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.UpcomingParasGenesisParams(key));
      }
      public async Task<bool> SetCodeByHashRefs(U32 value, ValidationCodeHash key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/CodeByHashRefs", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.CodeByHashRefsParams(key));
      }
      public async Task<bool> SetCodeByHash(ValidationCode value, ValidationCodeHash key)
      {
         return await SendMockupRequestAsync(_httpClient, "Paras/CodeByHash", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParasStorage.CodeByHashParams(key));
      }
   }
}
