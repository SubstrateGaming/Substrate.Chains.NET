//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Polkadot.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v2.assignment_app;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v2;
   using Substrate.Polkadot.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.Polkadot.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class ParaSessionInfoControllerMockupClient : MockupBaseClient, IParaSessionInfoControllerMockupClient
   {
      private HttpClient _httpClient;
      public ParaSessionInfoControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetAssignmentKeysUnsafe(BaseVec<Public> value)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaSessionInfo/AssignmentKeysUnsafe", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParaSessionInfoStorage.AssignmentKeysUnsafeParams());
      }
      public async Task<bool> SetEarliestStoredSession(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaSessionInfo/EarliestStoredSession", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParaSessionInfoStorage.EarliestStoredSessionParams());
      }
      public async Task<bool> SetSessions(SessionInfo value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaSessionInfo/Sessions", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParaSessionInfoStorage.SessionsParams(key));
      }
      public async Task<bool> SetAccountKeys(BaseVec<AccountId32> value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaSessionInfo/AccountKeys", value.Encode(), Substrate.Polkadot.NET.NetApiExt.Generated.Storage.ParaSessionInfoStorage.AccountKeysParams(key));
      }
   }
}
