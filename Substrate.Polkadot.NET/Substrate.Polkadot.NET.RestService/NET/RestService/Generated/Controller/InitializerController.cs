//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.Polkadot.NET.RestService.Generated.Storage;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Polkadot.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// InitializerController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class InitializerController : ControllerBase
    {
        
        private IInitializerStorage _initializerStorage;
        
        /// <summary>
        /// InitializerController constructor.
        /// </summary>
        public InitializerController(IInitializerStorage initializerStorage)
        {
            _initializerStorage = initializerStorage;
        }
        
        /// <summary>
        /// >> HasInitialized
        ///  Whether the parachains modules have been initialized within this block.
        /// 
        ///  Semantically a `bool`, but this guarantees it should never hit the trie,
        ///  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.
        /// 
        ///  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one
        ///  of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable
        ///  for the semantics of this variable.
        /// </summary>
        [HttpGet("HasInitialized")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple), 200)]
        [StorageKeyBuilder(typeof(Substrate.Polkadot.NET.NetApiExt.Generated.Storage.InitializerStorage), "HasInitializedParams")]
        public IActionResult GetHasInitialized()
        {
            return this.Ok(_initializerStorage.GetHasInitialized());
        }
        
        /// <summary>
        /// >> BufferedSessionChanges
        ///  Buffered session changes along with the block number at which they should be applied.
        /// 
        ///  Typically this will be empty or one element long. Apart from that this item never hits
        ///  the storage.
        /// 
        ///  However this is a `Vec` regardless to handle various edge cases that may occur at runtime
        ///  upgrade boundaries or if governance intervenes.
        /// </summary>
        [HttpGet("BufferedSessionChanges")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Polkadot.NET.NetApiExt.Generated.Storage.InitializerStorage), "BufferedSessionChangesParams")]
        public IActionResult GetBufferedSessionChanges()
        {
            return this.Ok(_initializerStorage.GetBufferedSessionChanges());
        }
    }
}
