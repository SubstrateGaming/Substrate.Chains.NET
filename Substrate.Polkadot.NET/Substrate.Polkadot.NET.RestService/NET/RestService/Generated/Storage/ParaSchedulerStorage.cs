//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Polkadot.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IParaSchedulerStorage interface definition.
    /// </summary>
    public interface IParaSchedulerStorage : IStorage
    {
        
        /// <summary>
        /// >> ValidatorGroups
        ///  All the validator groups. One for each core. Indices are into `ActiveValidators` - not the
        ///  broader set of Polkadot validators, but instead just the subset used for parachains during
        ///  this session.
        /// 
        ///  Bound: The number of cores is the sum of the numbers of parachains and parathread
        ///  multiplexers. Reasonably, 100-1000. The dominant factor is the number of validators: safe
        ///  upper bound at 10k.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v7.ValidatorIndex>> GetValidatorGroups();
        
        /// <summary>
        /// >> AvailabilityCores
        ///  One entry for each availability core. The i'th parachain belongs to the i'th core, with the
        ///  remaining cores all being on demand parachain multiplexers.
        /// 
        ///  Bounded by the maximum of either of these two values:
        ///    * The number of parachains and parathread multiplexers
        ///    * The number of validators divided by `configuration.max_validators_per_core`.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.scheduler.pallet.EnumCoreOccupied> GetAvailabilityCores();
        
        /// <summary>
        /// >> SessionStartBlock
        ///  The block number where the session start occurred. Used to track how many group rotations
        ///  have occurred.
        /// 
        ///  Note that in the context of parachains modules the session change is signaled during
        ///  the block and enacted at the end of the block (at the finalization stage, to be exact).
        ///  Thus for all intents and purposes the effect of the session change is observed at the
        ///  block following the session change, block number of which we save in this storage value.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetSessionStartBlock();
        
        /// <summary>
        /// >> ClaimQueue
        ///  One entry for each availability core. The `VecDeque` represents the assignments to be
        ///  scheduled on that core. The value contained here will not be valid after the end of
        ///  a block. Runtime APIs should be used to determine scheduled cores for the upcoming block.
        /// </summary>
        Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.BTreeMapT4 GetClaimQueue();
    }
    
    /// <summary>
    /// ParaSchedulerStorage class definition.
    /// </summary>
    public sealed class ParaSchedulerStorage : IParaSchedulerStorage
    {
        
        /// <summary>
        /// _validatorGroupsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v7.ValidatorIndex>>> _validatorGroupsTypedStorage;
        
        /// <summary>
        /// _availabilityCoresTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.scheduler.pallet.EnumCoreOccupied>> _availabilityCoresTypedStorage;
        
        /// <summary>
        /// _sessionStartBlockTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _sessionStartBlockTypedStorage;
        
        /// <summary>
        /// _claimQueueTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.BTreeMapT4> _claimQueueTypedStorage;
        
        /// <summary>
        /// ParaSchedulerStorage constructor.
        /// </summary>
        public ParaSchedulerStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ValidatorGroupsTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v7.ValidatorIndex>>>("ParaScheduler.ValidatorGroups", storageDataProvider, storageChangeDelegates);
            this.AvailabilityCoresTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.scheduler.pallet.EnumCoreOccupied>>("ParaScheduler.AvailabilityCores", storageDataProvider, storageChangeDelegates);
            this.SessionStartBlockTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParaScheduler.SessionStartBlock", storageDataProvider, storageChangeDelegates);
            this.ClaimQueueTypedStorage = new TypedStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.BTreeMapT4>("ParaScheduler.ClaimQueue", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _validatorGroupsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v7.ValidatorIndex>>> ValidatorGroupsTypedStorage
        {
            get
            {
                return _validatorGroupsTypedStorage;
            }
            set
            {
                _validatorGroupsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _availabilityCoresTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.scheduler.pallet.EnumCoreOccupied>> AvailabilityCoresTypedStorage
        {
            get
            {
                return _availabilityCoresTypedStorage;
            }
            set
            {
                _availabilityCoresTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sessionStartBlockTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> SessionStartBlockTypedStorage
        {
            get
            {
                return _sessionStartBlockTypedStorage;
            }
            set
            {
                _sessionStartBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _claimQueueTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.BTreeMapT4> ClaimQueueTypedStorage
        {
            get
            {
                return _claimQueueTypedStorage;
            }
            set
            {
                _claimQueueTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ValidatorGroupsTypedStorage.InitializeAsync("ParaScheduler", "ValidatorGroups");
            await AvailabilityCoresTypedStorage.InitializeAsync("ParaScheduler", "AvailabilityCores");
            await SessionStartBlockTypedStorage.InitializeAsync("ParaScheduler", "SessionStartBlock");
            await ClaimQueueTypedStorage.InitializeAsync("ParaScheduler", "ClaimQueue");
        }
        
        /// <summary>
        /// Implements any storage change for ParaScheduler.ValidatorGroups
        /// </summary>
        [StorageChange("ParaScheduler", "ValidatorGroups")]
        public void OnUpdateValidatorGroups(string data)
        {
            ValidatorGroupsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ValidatorGroups
        ///  All the validator groups. One for each core. Indices are into `ActiveValidators` - not the
        ///  broader set of Polkadot validators, but instead just the subset used for parachains during
        ///  this session.
        /// 
        ///  Bound: The number of cores is the sum of the numbers of parachains and parathread
        ///  multiplexers. Reasonably, 100-1000. The dominant factor is the number of validators: safe
        ///  upper bound at 10k.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_primitives.v7.ValidatorIndex>> GetValidatorGroups()
        {
            return ValidatorGroupsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParaScheduler.AvailabilityCores
        /// </summary>
        [StorageChange("ParaScheduler", "AvailabilityCores")]
        public void OnUpdateAvailabilityCores(string data)
        {
            AvailabilityCoresTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> AvailabilityCores
        ///  One entry for each availability core. The i'th parachain belongs to the i'th core, with the
        ///  remaining cores all being on demand parachain multiplexers.
        /// 
        ///  Bounded by the maximum of either of these two values:
        ///    * The number of parachains and parathread multiplexers
        ///    * The number of validators divided by `configuration.max_validators_per_core`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.scheduler.pallet.EnumCoreOccupied> GetAvailabilityCores()
        {
            return AvailabilityCoresTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParaScheduler.SessionStartBlock
        /// </summary>
        [StorageChange("ParaScheduler", "SessionStartBlock")]
        public void OnUpdateSessionStartBlock(string data)
        {
            SessionStartBlockTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SessionStartBlock
        ///  The block number where the session start occurred. Used to track how many group rotations
        ///  have occurred.
        /// 
        ///  Note that in the context of parachains modules the session change is signaled during
        ///  the block and enacted at the end of the block (at the finalization stage, to be exact).
        ///  Thus for all intents and purposes the effect of the session change is observed at the
        ///  block following the session change, block number of which we save in this storage value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetSessionStartBlock()
        {
            return SessionStartBlockTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParaScheduler.ClaimQueue
        /// </summary>
        [StorageChange("ParaScheduler", "ClaimQueue")]
        public void OnUpdateClaimQueue(string data)
        {
            ClaimQueueTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ClaimQueue
        ///  One entry for each availability core. The `VecDeque` represents the assignments to be
        ///  scheduled on that core. The value contained here will not be valid after the end of
        ///  a block. Runtime APIs should be used to determine scheduled cores for the upcoming block.
        /// </summary>
        public Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.BTreeMapT4 GetClaimQueue()
        {
            return ClaimQueueTypedStorage.Get();
        }
    }
}
