//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Polkadot.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAuctionsStorage interface definition.
    /// </summary>
    public interface IAuctionsStorage : IStorage
    {
        
        /// <summary>
        /// >> AuctionCounter
        ///  Number of auctions started so far.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetAuctionCounter();
        
        /// <summary>
        /// >> AuctionInfo
        ///  Information relating to the current auction, if there is one.
        /// 
        ///  The first item in the tuple is the lease period index that the first of the four
        ///  contiguous lease periods on auction is for. The second is the block number when the
        ///  auction will "begin to end", i.e. the first block of the Ending Period of the auction.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetAuctionInfo();
        
        /// <summary>
        /// >> ReservedAmounts
        ///  Amounts currently reserved in the accounts of the bidders currently winning
        ///  (sub-)ranges.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetReservedAmounts(string key);
        
        /// <summary>
        /// >> Winning
        ///  The winning bids for each of the 10 ranges at each sample in the final Ending Period of
        ///  the current auction. The map's key is the 0-based index into the Sample Size. The
        ///  first sample of the ending period is 0; the last is `Sample Size - 1`.
        /// </summary>
        Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.Arr36BaseOpt GetWinning(string key);
    }
    
    /// <summary>
    /// AuctionsStorage class definition.
    /// </summary>
    public sealed class AuctionsStorage : IAuctionsStorage
    {
        
        /// <summary>
        /// _auctionCounterTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _auctionCounterTypedStorage;
        
        /// <summary>
        /// _auctionInfoTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> _auctionInfoTypedStorage;
        
        /// <summary>
        /// _reservedAmountsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _reservedAmountsTypedStorage;
        
        /// <summary>
        /// _winningTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.Arr36BaseOpt> _winningTypedStorage;
        
        /// <summary>
        /// AuctionsStorage constructor.
        /// </summary>
        public AuctionsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AuctionCounterTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Auctions.AuctionCounter", storageDataProvider, storageChangeDelegates);
            this.AuctionInfoTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>("Auctions.AuctionInfo", storageDataProvider, storageChangeDelegates);
            this.ReservedAmountsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Auctions.ReservedAmounts", storageDataProvider, storageChangeDelegates);
            this.WinningTypedStorage = new TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.Arr36BaseOpt>("Auctions.Winning", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _auctionCounterTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> AuctionCounterTypedStorage
        {
            get
            {
                return _auctionCounterTypedStorage;
            }
            set
            {
                _auctionCounterTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _auctionInfoTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> AuctionInfoTypedStorage
        {
            get
            {
                return _auctionInfoTypedStorage;
            }
            set
            {
                _auctionInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _reservedAmountsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> ReservedAmountsTypedStorage
        {
            get
            {
                return _reservedAmountsTypedStorage;
            }
            set
            {
                _reservedAmountsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _winningTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.Arr36BaseOpt> WinningTypedStorage
        {
            get
            {
                return _winningTypedStorage;
            }
            set
            {
                _winningTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AuctionCounterTypedStorage.InitializeAsync("Auctions", "AuctionCounter");
            await AuctionInfoTypedStorage.InitializeAsync("Auctions", "AuctionInfo");
            await ReservedAmountsTypedStorage.InitializeAsync("Auctions", "ReservedAmounts");
            await WinningTypedStorage.InitializeAsync("Auctions", "Winning");
        }
        
        /// <summary>
        /// Implements any storage change for Auctions.AuctionCounter
        /// </summary>
        [StorageChange("Auctions", "AuctionCounter")]
        public void OnUpdateAuctionCounter(string data)
        {
            AuctionCounterTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> AuctionCounter
        ///  Number of auctions started so far.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetAuctionCounter()
        {
            return AuctionCounterTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Auctions.AuctionInfo
        /// </summary>
        [StorageChange("Auctions", "AuctionInfo")]
        public void OnUpdateAuctionInfo(string data)
        {
            AuctionInfoTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> AuctionInfo
        ///  Information relating to the current auction, if there is one.
        /// 
        ///  The first item in the tuple is the lease period index that the first of the four
        ///  contiguous lease periods on auction is for. The second is the block number when the
        ///  auction will "begin to end", i.e. the first block of the Ending Period of the auction.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetAuctionInfo()
        {
            return AuctionInfoTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Auctions.ReservedAmounts
        /// </summary>
        [StorageChange("Auctions", "ReservedAmounts")]
        public void OnUpdateReservedAmounts(string key, string data)
        {
            ReservedAmountsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReservedAmounts
        ///  Amounts currently reserved in the accounts of the bidders currently winning
        ///  (sub-)ranges.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetReservedAmounts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReservedAmountsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Auctions.Winning
        /// </summary>
        [StorageChange("Auctions", "Winning")]
        public void OnUpdateWinning(string key, string data)
        {
            WinningTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Winning
        ///  The winning bids for each of the 10 ranges at each sample in the final Ending Period of
        ///  the current auction. The map's key is the 0-based index into the Sample Size. The
        ///  first sample of the ending period is 0; the last is `Sample Size - 1`.
        /// </summary>
        public Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.Arr36BaseOpt GetWinning(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (WinningTypedStorage.Dictionary.TryGetValue(key, out Substrate.Polkadot.NET.NetApiExt.Generated.Types.Base.Arr36BaseOpt result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
