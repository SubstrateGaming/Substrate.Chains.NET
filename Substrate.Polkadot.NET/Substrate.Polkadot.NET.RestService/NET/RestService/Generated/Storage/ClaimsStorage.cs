//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Polkadot.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IClaimsStorage interface definition.
    /// </summary>
    public interface IClaimsStorage : IStorage
    {
        
        /// <summary>
        /// >> Claims
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetClaims(string key);
        
        /// <summary>
        /// >> Total
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetTotal();
        
        /// <summary>
        /// >> Vesting
        ///  Vesting schedule for a claim.
        ///  First balance is the total amount that should be held for vesting.
        ///  Second balance is how much should be unlocked per block.
        ///  The block number is when the vesting should start.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32> GetVesting(string key);
        
        /// <summary>
        /// >> Signing
        ///  The statement kind that must be signed, if any.
        /// </summary>
        Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EnumStatementKind GetSigning(string key);
        
        /// <summary>
        /// >> Preclaims
        ///  Pre-claimed Ethereum accounts, by the Account ID that they are claimed to.
        /// </summary>
        Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EthereumAddress GetPreclaims(string key);
    }
    
    /// <summary>
    /// ClaimsStorage class definition.
    /// </summary>
    public sealed class ClaimsStorage : IClaimsStorage
    {
        
        /// <summary>
        /// _claimsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _claimsTypedStorage;
        
        /// <summary>
        /// _totalTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _totalTypedStorage;
        
        /// <summary>
        /// _vestingTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32>> _vestingTypedStorage;
        
        /// <summary>
        /// _signingTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EnumStatementKind> _signingTypedStorage;
        
        /// <summary>
        /// _preclaimsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EthereumAddress> _preclaimsTypedStorage;
        
        /// <summary>
        /// ClaimsStorage constructor.
        /// </summary>
        public ClaimsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ClaimsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Claims.Claims", storageDataProvider, storageChangeDelegates);
            this.TotalTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Claims.Total", storageDataProvider, storageChangeDelegates);
            this.VestingTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32>>("Claims.Vesting", storageDataProvider, storageChangeDelegates);
            this.SigningTypedStorage = new TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EnumStatementKind>("Claims.Signing", storageDataProvider, storageChangeDelegates);
            this.PreclaimsTypedStorage = new TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EthereumAddress>("Claims.Preclaims", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _claimsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> ClaimsTypedStorage
        {
            get
            {
                return _claimsTypedStorage;
            }
            set
            {
                _claimsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _totalTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> TotalTypedStorage
        {
            get
            {
                return _totalTypedStorage;
            }
            set
            {
                _totalTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _vestingTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32>> VestingTypedStorage
        {
            get
            {
                return _vestingTypedStorage;
            }
            set
            {
                _vestingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _signingTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EnumStatementKind> SigningTypedStorage
        {
            get
            {
                return _signingTypedStorage;
            }
            set
            {
                _signingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _preclaimsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EthereumAddress> PreclaimsTypedStorage
        {
            get
            {
                return _preclaimsTypedStorage;
            }
            set
            {
                _preclaimsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ClaimsTypedStorage.InitializeAsync("Claims", "Claims");
            await TotalTypedStorage.InitializeAsync("Claims", "Total");
            await VestingTypedStorage.InitializeAsync("Claims", "Vesting");
            await SigningTypedStorage.InitializeAsync("Claims", "Signing");
            await PreclaimsTypedStorage.InitializeAsync("Claims", "Preclaims");
        }
        
        /// <summary>
        /// Implements any storage change for Claims.Claims
        /// </summary>
        [StorageChange("Claims", "Claims")]
        public void OnUpdateClaims(string key, string data)
        {
            ClaimsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Claims
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetClaims(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ClaimsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Claims.Total
        /// </summary>
        [StorageChange("Claims", "Total")]
        public void OnUpdateTotal(string data)
        {
            TotalTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Total
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetTotal()
        {
            return TotalTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Claims.Vesting
        /// </summary>
        [StorageChange("Claims", "Vesting")]
        public void OnUpdateVesting(string key, string data)
        {
            VestingTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Vesting
        ///  Vesting schedule for a claim.
        ///  First balance is the total amount that should be held for vesting.
        ///  Second balance is how much should be unlocked per block.
        ///  The block number is when the vesting should start.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32> GetVesting(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (VestingTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Claims.Signing
        /// </summary>
        [StorageChange("Claims", "Signing")]
        public void OnUpdateSigning(string key, string data)
        {
            SigningTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Signing
        ///  The statement kind that must be signed, if any.
        /// </summary>
        public Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EnumStatementKind GetSigning(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SigningTypedStorage.Dictionary.TryGetValue(key, out Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EnumStatementKind result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Claims.Preclaims
        /// </summary>
        [StorageChange("Claims", "Preclaims")]
        public void OnUpdatePreclaims(string key, string data)
        {
            PreclaimsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Preclaims
        ///  Pre-claimed Ethereum accounts, by the Account ID that they are claimed to.
        /// </summary>
        public Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EthereumAddress GetPreclaims(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PreclaimsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Polkadot.NET.NetApiExt.Generated.Model.polkadot_runtime_common.claims.EthereumAddress result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
