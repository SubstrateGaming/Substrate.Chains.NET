//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IDelegationStorage interface definition.
    /// </summary>
    public interface IDelegationStorage : IStorage
    {
        
        /// <summary>
        /// >> DelegationNodes
        ///  Delegation nodes stored on chain.
        /// 
        ///  It maps from a node ID to the node details.
        /// </summary>
        Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode GetDelegationNodes(string key);
        
        /// <summary>
        /// >> DelegationHierarchies
        ///  Delegation hierarchies stored on chain.
        /// 
        ///  It maps for a (root) node ID to the hierarchy details.
        /// </summary>
        Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails GetDelegationHierarchies(string key);
    }
    
    /// <summary>
    /// DelegationStorage class definition.
    /// </summary>
    public sealed class DelegationStorage : IDelegationStorage
    {
        
        /// <summary>
        /// _delegationNodesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode> _delegationNodesTypedStorage;
        
        /// <summary>
        /// _delegationHierarchiesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails> _delegationHierarchiesTypedStorage;
        
        /// <summary>
        /// DelegationStorage constructor.
        /// </summary>
        public DelegationStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.DelegationNodesTypedStorage = new TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode>("Delegation.DelegationNodes", storageDataProvider, storageChangeDelegates);
            this.DelegationHierarchiesTypedStorage = new TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails>("Delegation.DelegationHierarchies", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _delegationNodesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode> DelegationNodesTypedStorage
        {
            get
            {
                return _delegationNodesTypedStorage;
            }
            set
            {
                _delegationNodesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _delegationHierarchiesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails> DelegationHierarchiesTypedStorage
        {
            get
            {
                return _delegationHierarchiesTypedStorage;
            }
            set
            {
                _delegationHierarchiesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await DelegationNodesTypedStorage.InitializeAsync("Delegation", "DelegationNodes");
            await DelegationHierarchiesTypedStorage.InitializeAsync("Delegation", "DelegationHierarchies");
        }
        
        /// <summary>
        /// Implements any storage change for Delegation.DelegationNodes
        /// </summary>
        [StorageChange("Delegation", "DelegationNodes")]
        public void OnUpdateDelegationNodes(string key, string data)
        {
            DelegationNodesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DelegationNodes
        ///  Delegation nodes stored on chain.
        /// 
        ///  It maps from a node ID to the node details.
        /// </summary>
        public Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode GetDelegationNodes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DelegationNodesTypedStorage.Dictionary.TryGetValue(key, out Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Delegation.DelegationHierarchies
        /// </summary>
        [StorageChange("Delegation", "DelegationHierarchies")]
        public void OnUpdateDelegationHierarchies(string key, string data)
        {
            DelegationHierarchiesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DelegationHierarchies
        ///  Delegation hierarchies stored on chain.
        /// 
        ///  It maps for a (root) node ID to the hierarchy details.
        /// </summary>
        public Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails GetDelegationHierarchies(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DelegationHierarchiesTypedStorage.Dictionary.TryGetValue(key, out Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
