//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAttestationStorage interface definition.
    /// </summary>
    public interface IAttestationStorage : IStorage
    {
        
        /// <summary>
        /// >> Attestations
        ///  Attestations stored on chain.
        /// 
        ///  It maps from a claim hash to the full attestation.
        /// </summary>
        Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails GetAttestations(string key);
        
        /// <summary>
        /// >> ExternalAttestations
        ///  Delegated attestations stored on chain.
        /// 
        ///  It maps from a delegation ID to a vector of claim hashes.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetExternalAttestations(string key);
    }
    
    /// <summary>
    /// AttestationStorage class definition.
    /// </summary>
    public sealed class AttestationStorage : IAttestationStorage
    {
        
        /// <summary>
        /// _attestationsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails> _attestationsTypedStorage;
        
        /// <summary>
        /// _externalAttestationsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _externalAttestationsTypedStorage;
        
        /// <summary>
        /// AttestationStorage constructor.
        /// </summary>
        public AttestationStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AttestationsTypedStorage = new TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails>("Attestation.Attestations", storageDataProvider, storageChangeDelegates);
            this.ExternalAttestationsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("Attestation.ExternalAttestations", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _attestationsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails> AttestationsTypedStorage
        {
            get
            {
                return _attestationsTypedStorage;
            }
            set
            {
                _attestationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _externalAttestationsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> ExternalAttestationsTypedStorage
        {
            get
            {
                return _externalAttestationsTypedStorage;
            }
            set
            {
                _externalAttestationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AttestationsTypedStorage.InitializeAsync("Attestation", "Attestations");
            await ExternalAttestationsTypedStorage.InitializeAsync("Attestation", "ExternalAttestations");
        }
        
        /// <summary>
        /// Implements any storage change for Attestation.Attestations
        /// </summary>
        [StorageChange("Attestation", "Attestations")]
        public void OnUpdateAttestations(string key, string data)
        {
            AttestationsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Attestations
        ///  Attestations stored on chain.
        /// 
        ///  It maps from a claim hash to the full attestation.
        /// </summary>
        public Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails GetAttestations(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AttestationsTypedStorage.Dictionary.TryGetValue(key, out Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Attestation.ExternalAttestations
        /// </summary>
        [StorageChange("Attestation", "ExternalAttestations")]
        public void OnUpdateExternalAttestations(string key, string data)
        {
            ExternalAttestationsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ExternalAttestations
        ///  Delegated attestations stored on chain.
        /// 
        ///  It maps from a delegation ID to a vector of claim hashes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetExternalAttestations(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ExternalAttestationsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
