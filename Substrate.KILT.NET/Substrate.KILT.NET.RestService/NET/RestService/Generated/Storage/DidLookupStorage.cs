//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IDidLookupStorage interface definition.
    /// </summary>
    public interface IDidLookupStorage : IStorage
    {
        
        /// <summary>
        /// >> ConnectedDids
        ///  Mapping from account identifiers to DIDs.
        /// </summary>
        Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord GetConnectedDids(string key);
        
        /// <summary>
        /// >> ConnectedAccounts
        ///  Mapping from (DID + account identifier) -> ().
        ///  The empty tuple is used as a sentinel value to simply indicate the
        ///  presence of a given tuple in the map.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetConnectedAccounts(string key);
    }
    
    /// <summary>
    /// DidLookupStorage class definition.
    /// </summary>
    public sealed class DidLookupStorage : IDidLookupStorage
    {
        
        /// <summary>
        /// _connectedDidsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord> _connectedDidsTypedStorage;
        
        /// <summary>
        /// _connectedAccountsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _connectedAccountsTypedStorage;
        
        /// <summary>
        /// DidLookupStorage constructor.
        /// </summary>
        public DidLookupStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ConnectedDidsTypedStorage = new TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord>("DidLookup.ConnectedDids", storageDataProvider, storageChangeDelegates);
            this.ConnectedAccountsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("DidLookup.ConnectedAccounts", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _connectedDidsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord> ConnectedDidsTypedStorage
        {
            get
            {
                return _connectedDidsTypedStorage;
            }
            set
            {
                _connectedDidsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _connectedAccountsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> ConnectedAccountsTypedStorage
        {
            get
            {
                return _connectedAccountsTypedStorage;
            }
            set
            {
                _connectedAccountsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ConnectedDidsTypedStorage.InitializeAsync("DidLookup", "ConnectedDids");
            await ConnectedAccountsTypedStorage.InitializeAsync("DidLookup", "ConnectedAccounts");
        }
        
        /// <summary>
        /// Implements any storage change for DidLookup.ConnectedDids
        /// </summary>
        [StorageChange("DidLookup", "ConnectedDids")]
        public void OnUpdateConnectedDids(string key, string data)
        {
            ConnectedDidsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ConnectedDids
        ///  Mapping from account identifiers to DIDs.
        /// </summary>
        public Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord GetConnectedDids(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ConnectedDidsTypedStorage.Dictionary.TryGetValue(key, out Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DidLookup.ConnectedAccounts
        /// </summary>
        [StorageChange("DidLookup", "ConnectedAccounts")]
        public void OnUpdateConnectedAccounts(string key, string data)
        {
            ConnectedAccountsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ConnectedAccounts
        ///  Mapping from (DID + account identifier) -> ().
        ///  The empty tuple is used as a sentinel value to simply indicate the
        ///  presence of a given tuple in the map.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetConnectedAccounts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ConnectedAccountsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
