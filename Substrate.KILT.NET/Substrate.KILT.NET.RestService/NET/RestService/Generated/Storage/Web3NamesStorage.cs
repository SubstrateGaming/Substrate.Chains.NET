//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IWeb3NamesStorage interface definition.
    /// </summary>
    public interface IWeb3NamesStorage : IStorage
    {
        
        /// <summary>
        /// >> Owner
        ///  Map of name -> ownership details.
        /// </summary>
        Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership GetOwner(string key);
        
        /// <summary>
        /// >> Names
        ///  Map of owner -> name.
        /// </summary>
        Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name GetNames(string key);
        
        /// <summary>
        /// >> Banned
        ///  Map of name -> ().
        /// 
        ///  If a name key is present, the name is currently banned.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetBanned(string key);
    }
    
    /// <summary>
    /// Web3NamesStorage class definition.
    /// </summary>
    public sealed class Web3NamesStorage : IWeb3NamesStorage
    {
        
        /// <summary>
        /// _ownerTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership> _ownerTypedStorage;
        
        /// <summary>
        /// _namesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name> _namesTypedStorage;
        
        /// <summary>
        /// _bannedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _bannedTypedStorage;
        
        /// <summary>
        /// Web3NamesStorage constructor.
        /// </summary>
        public Web3NamesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.OwnerTypedStorage = new TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership>("Web3Names.Owner", storageDataProvider, storageChangeDelegates);
            this.NamesTypedStorage = new TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name>("Web3Names.Names", storageDataProvider, storageChangeDelegates);
            this.BannedTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("Web3Names.Banned", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _ownerTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership> OwnerTypedStorage
        {
            get
            {
                return _ownerTypedStorage;
            }
            set
            {
                _ownerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _namesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name> NamesTypedStorage
        {
            get
            {
                return _namesTypedStorage;
            }
            set
            {
                _namesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bannedTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> BannedTypedStorage
        {
            get
            {
                return _bannedTypedStorage;
            }
            set
            {
                _bannedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await OwnerTypedStorage.InitializeAsync("Web3Names", "Owner");
            await NamesTypedStorage.InitializeAsync("Web3Names", "Names");
            await BannedTypedStorage.InitializeAsync("Web3Names", "Banned");
        }
        
        /// <summary>
        /// Implements any storage change for Web3Names.Owner
        /// </summary>
        [StorageChange("Web3Names", "Owner")]
        public void OnUpdateOwner(string key, string data)
        {
            OwnerTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Owner
        ///  Map of name -> ownership details.
        /// </summary>
        public Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership GetOwner(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OwnerTypedStorage.Dictionary.TryGetValue(key, out Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Web3Names.Names
        /// </summary>
        [StorageChange("Web3Names", "Names")]
        public void OnUpdateNames(string key, string data)
        {
            NamesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Names
        ///  Map of owner -> name.
        /// </summary>
        public Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name GetNames(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NamesTypedStorage.Dictionary.TryGetValue(key, out Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Web3Names.Banned
        /// </summary>
        [StorageChange("Web3Names", "Banned")]
        public void OnUpdateBanned(string key, string data)
        {
            BannedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Banned
        ///  Map of name -> ().
        /// 
        ///  If a name key is present, the name is currently banned.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetBanned(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BannedTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
