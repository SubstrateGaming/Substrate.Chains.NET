//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.KILT.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// ParachainStakingController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class ParachainStakingController : ControllerBase
    {
        
        private IParachainStakingStorage _parachainStakingStorage;
        
        /// <summary>
        /// ParachainStakingController constructor.
        /// </summary>
        public ParachainStakingController(IParachainStakingStorage parachainStakingStorage)
        {
            _parachainStakingStorage = parachainStakingStorage;
        }
        
        /// <summary>
        /// >> MaxSelectedCandidates
        ///  The maximum number of collator candidates selected at each round.
        /// </summary>
        [HttpGet("MaxSelectedCandidates")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "MaxSelectedCandidatesParams")]
        public IActionResult GetMaxSelectedCandidates()
        {
            return this.Ok(_parachainStakingStorage.GetMaxSelectedCandidates());
        }
        
        /// <summary>
        /// >> Round
        ///  Current round number and next round scheduled transition.
        /// </summary>
        [HttpGet("Round")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "RoundParams")]
        public IActionResult GetRound()
        {
            return this.Ok(_parachainStakingStorage.GetRound());
        }
        
        /// <summary>
        /// >> LastDelegation
        ///  Delegation information for the latest session in which a delegator
        ///  delegated.
        /// 
        ///  It maps from an account to the number of delegations in the last
        ///  session in which they (re-)delegated.
        /// </summary>
        [HttpGet("LastDelegation")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "LastDelegationParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetLastDelegation(string key)
        {
            return this.Ok(_parachainStakingStorage.GetLastDelegation(key));
        }
        
        /// <summary>
        /// >> DelegatorState
        ///  Delegation staking information.
        /// 
        ///  It maps from an account to its delegation details.
        /// </summary>
        [HttpGet("DelegatorState")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "DelegatorStateParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetDelegatorState(string key)
        {
            return this.Ok(_parachainStakingStorage.GetDelegatorState(key));
        }
        
        /// <summary>
        /// >> CandidatePool
        ///  The staking information for a candidate.
        /// 
        ///  It maps from an account to its information.
        ///  Moreover, it counts the number of candidates.
        /// </summary>
        [HttpGet("CandidatePool")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "CandidatePoolParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetCandidatePool(string key)
        {
            return this.Ok(_parachainStakingStorage.GetCandidatePool(key));
        }
        
        /// <summary>
        /// >> CounterForCandidatePool
        /// Counter for the related counted storage map
        /// </summary>
        [HttpGet("CounterForCandidatePool")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "CounterForCandidatePoolParams")]
        public IActionResult GetCounterForCandidatePool()
        {
            return this.Ok(_parachainStakingStorage.GetCounterForCandidatePool());
        }
        
        /// <summary>
        /// >> TotalCollatorStake
        ///  Total funds locked to back the currently selected collators.
        ///  The sum of all collator and their delegator stakes.
        /// 
        ///  Note: There are more funds locked by this pallet, since the backing for
        ///  non collating candidates is not included in [TotalCollatorStake].
        /// </summary>
        [HttpGet("TotalCollatorStake")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "TotalCollatorStakeParams")]
        public IActionResult GetTotalCollatorStake()
        {
            return this.Ok(_parachainStakingStorage.GetTotalCollatorStake());
        }
        
        /// <summary>
        /// >> TopCandidates
        ///  The collator candidates with the highest amount of stake.
        /// 
        ///  Each time the stake of a collator is increased, it is checked whether
        ///  this pushes another candidate out of the list. When the stake is
        ///  reduced however, it is not checked if another candidate has more stake,
        ///  since this would require iterating over the entire [CandidatePool].
        /// 
        ///  There must always be more candidates than [MaxSelectedCandidates] so
        ///  that a collator can drop out of the collator set by reducing their
        ///  stake.
        /// </summary>
        [HttpGet("TopCandidates")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "TopCandidatesParams")]
        public IActionResult GetTopCandidates()
        {
            return this.Ok(_parachainStakingStorage.GetTopCandidates());
        }
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration.
        /// </summary>
        [HttpGet("InflationConfig")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "InflationConfigParams")]
        public IActionResult GetInflationConfig()
        {
            return this.Ok(_parachainStakingStorage.GetInflationConfig());
        }
        
        /// <summary>
        /// >> Unstaking
        ///  The funds waiting to be unstaked.
        /// 
        ///  It maps from accounts to all the funds addressed to them in the future
        ///  blocks.
        /// </summary>
        [HttpGet("Unstaking")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT1), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "UnstakingParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetUnstaking(string key)
        {
            return this.Ok(_parachainStakingStorage.GetUnstaking(key));
        }
        
        /// <summary>
        /// >> MaxCollatorCandidateStake
        ///  The maximum amount a collator candidate can stake.
        /// </summary>
        [HttpGet("MaxCollatorCandidateStake")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "MaxCollatorCandidateStakeParams")]
        public IActionResult GetMaxCollatorCandidateStake()
        {
            return this.Ok(_parachainStakingStorage.GetMaxCollatorCandidateStake());
        }
        
        /// <summary>
        /// >> LastRewardReduction
        ///  The year in which the last automatic reduction of the reward rates
        ///  occurred.
        /// 
        ///  It starts at zero at genesis and increments by one every BLOCKS_PER_YEAR
        ///  many blocks.
        /// </summary>
        [HttpGet("LastRewardReduction")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U64), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "LastRewardReductionParams")]
        public IActionResult GetLastRewardReduction()
        {
            return this.Ok(_parachainStakingStorage.GetLastRewardReduction());
        }
        
        /// <summary>
        /// >> BlocksAuthored
        ///  The number of authored blocks for collators. It is updated via the
        ///  `note_author` hook when authoring a block .
        /// </summary>
        [HttpGet("BlocksAuthored")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U64), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "BlocksAuthoredParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetBlocksAuthored(string key)
        {
            return this.Ok(_parachainStakingStorage.GetBlocksAuthored(key));
        }
        
        /// <summary>
        /// >> BlocksRewarded
        ///  The number of blocks for which rewards have been claimed by an address.
        /// 
        ///  For collators, this can be at most BlocksAuthored. It is updated when
        ///  incrementing collator rewards, either when calling
        ///  `inc_collator_rewards` or updating the `InflationInfo`.
        /// 
        ///  For delegators, this can be at most BlocksAuthored of the collator.It is
        ///  updated when incrementing delegator rewards, either when calling
        ///  `inc_delegator_rewards` or updating the `InflationInfo`.
        /// </summary>
        [HttpGet("BlocksRewarded")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U64), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "BlocksRewardedParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetBlocksRewarded(string key)
        {
            return this.Ok(_parachainStakingStorage.GetBlocksRewarded(key));
        }
        
        /// <summary>
        /// >> Rewards
        ///  The accumulated rewards for collator candidates and delegators.
        /// 
        ///  It maps from accounts to their total rewards since the last payout.
        /// </summary>
        [HttpGet("Rewards")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "RewardsParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetRewards(string key)
        {
            return this.Ok(_parachainStakingStorage.GetRewards(key));
        }
        
        /// <summary>
        /// >> ForceNewRound
        /// </summary>
        [HttpGet("ForceNewRound")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.Bool), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "ForceNewRoundParams")]
        public IActionResult GetForceNewRound()
        {
            return this.Ok(_parachainStakingStorage.GetForceNewRound());
        }
    }
}
