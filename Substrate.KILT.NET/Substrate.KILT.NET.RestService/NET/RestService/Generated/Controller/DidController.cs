//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.KILT.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// DidController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class DidController : ControllerBase
    {
        
        private IDidStorage _didStorage;
        
        /// <summary>
        /// DidController constructor.
        /// </summary>
        public DidController(IDidStorage didStorage)
        {
            _didStorage = didStorage;
        }
        
        /// <summary>
        /// >> Did
        ///  DIDs stored on chain.
        /// 
        ///  It maps from a DID identifier to the DID details.
        /// </summary>
        [HttpGet("Did")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.did.did_details.DidDetails), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.DidStorage), "DidParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetDid(string key)
        {
            return this.Ok(_didStorage.GetDid(key));
        }
        
        /// <summary>
        /// >> ServiceEndpoints
        ///  Service endpoints associated with DIDs.
        /// 
        ///  It maps from (DID identifier, service ID) to the service details.
        /// </summary>
        [HttpGet("ServiceEndpoints")]
        [ProducesResponseType(typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.did.service_endpoints.DidEndpoint), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.DidStorage), "ServiceEndpointsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14>))]
        public IActionResult GetServiceEndpoints(string key)
        {
            return this.Ok(_didStorage.GetServiceEndpoints(key));
        }
        
        /// <summary>
        /// >> DidEndpointsCount
        ///  Counter of service endpoints for each DID.
        /// 
        ///  It maps from (DID identifier) to a 32-bit counter.
        /// </summary>
        [HttpGet("DidEndpointsCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.DidStorage), "DidEndpointsCountParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetDidEndpointsCount(string key)
        {
            return this.Ok(_didStorage.GetDidEndpointsCount(key));
        }
        
        /// <summary>
        /// >> DidBlacklist
        ///  The set of DIDs that have been deleted and cannot therefore be created
        ///  again for security reasons.
        /// 
        ///  It maps from a DID identifier to a unit tuple, for the sake of tracking
        ///  DID identifiers.
        /// </summary>
        [HttpGet("DidBlacklist")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple), 200)]
        [StorageKeyBuilder(typeof(Substrate.KILT.NET.NetApiExt.Generated.Storage.DidStorage), "DidBlacklistParams", typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetDidBlacklist(string key)
        {
            return this.Ok(_didStorage.GetDidBlacklist(key));
        }
    }
}
