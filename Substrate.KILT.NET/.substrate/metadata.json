{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Index",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 7
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 7
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 7
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Index",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "misc_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 9
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "11": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "12": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "13": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 15,
        "TypeDef": "Sequence"
      },
      "15": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "16": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "17": {
        "TypeId": 18,
        "TypeDef": "Sequence"
      },
      "18": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 162
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 19
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 163
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 19
          },
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "19": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 20
              }
            ],
            "Index": 0
          },
          {
            "Name": "Indices",
            "TypeFields": [
              {
                "TypeName": "pallet_indices::Event<Runtime>",
                "TypeId": 29
              }
            ],
            "Index": 5
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 30
              }
            ],
            "Index": 6
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 32
              }
            ],
            "Index": 7
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 33
              }
            ],
            "Index": 22
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "parachain_staking::Event<Runtime>",
                "TypeId": 34
              }
            ],
            "Index": 21
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 36
              }
            ],
            "Index": 30
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 41
              }
            ],
            "Index": 31
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                "TypeId": 45
              }
            ],
            "Index": 32
          },
          {
            "Name": "TechnicalMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                "TypeId": 46
              }
            ],
            "Index": 34
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 47
              }
            ],
            "Index": 35
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 48
              }
            ],
            "Index": 40
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "pallet_vesting::Event<Runtime>",
                "TypeId": 49
              }
            ],
            "Index": 41
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 50
              }
            ],
            "Index": 42
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 53
              }
            ],
            "Index": 43
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 56
              }
            ],
            "Index": 44
          },
          {
            "Name": "TipsMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>",
                "TypeId": 57
              }
            ],
            "Index": 45
          },
          {
            "Name": "Tips",
            "TypeFields": [
              {
                "TypeName": "pallet_tips::Event<Runtime>",
                "TypeId": 58
              }
            ],
            "Index": 46
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 59
              }
            ],
            "Index": 47
          },
          {
            "Name": "Ctype",
            "TypeFields": [
              {
                "TypeName": "ctype::Event<Runtime>",
                "TypeId": 61
              }
            ],
            "Index": 61
          },
          {
            "Name": "Attestation",
            "TypeFields": [
              {
                "TypeName": "attestation::Event<Runtime>",
                "TypeId": 62
              }
            ],
            "Index": 62
          },
          {
            "Name": "Delegation",
            "TypeFields": [
              {
                "TypeName": "delegation::Event<Runtime>",
                "TypeId": 65
              }
            ],
            "Index": 63
          },
          {
            "Name": "Did",
            "TypeFields": [
              {
                "TypeName": "did::Event<Runtime>",
                "TypeId": 67
              }
            ],
            "Index": 64
          },
          {
            "Name": "DidLookup",
            "TypeFields": [
              {
                "TypeName": "pallet_did_lookup::Event<Runtime>",
                "TypeId": 68
              }
            ],
            "Index": 67
          },
          {
            "Name": "Web3Names",
            "TypeFields": [
              {
                "TypeName": "pallet_web3_names::Event<Runtime>",
                "TypeId": 72
              }
            ],
            "Index": 68
          },
          {
            "Name": "PublicCredentials",
            "TypeFields": [
              {
                "TypeName": "public_credentials::Event<Runtime>",
                "TypeId": 75
              }
            ],
            "Index": 69
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 103
              }
            ],
            "Index": 80
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 104
              }
            ],
            "Index": 82
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 107
              }
            ],
            "Index": 83
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 160
              }
            ],
            "Index": 84
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                "TypeId": 161
              }
            ],
            "Index": 85
          }
        ],
        "Path": [
          "spiritnet_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "20": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 24
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "21": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 22
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 23
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "22": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "23": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 25
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 26
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 27
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 28
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "26": {
        "Variants": [
          {
            "Name": "NoFunds",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "IndexAssigned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A account index was assigned."
            ]
          },
          {
            "Name": "IndexFreed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A account index has been freed up (unassigned)."
            ]
          },
          {
            "Name": "IndexFrozen",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "A account index has been frozen to its current account ID."
            ]
          }
        ],
        "Path": [
          "pallet_indices",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "30": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 31
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "31": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "32": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "33": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "34": {
        "Variants": [
          {
            "Name": "NewRound",
            "TypeFields": [
              {
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "TypeName": "SessionIndex",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "A new staking round has started.",
              "\\[block number, round number\\]"
            ]
          },
          {
            "Name": "EnteredTopCandidates",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A new account has joined the set of top candidates.",
              "\\[account\\]"
            ]
          },
          {
            "Name": "LeftTopCandidates",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "An account was removed from the set of top candidates.",
              "\\[account\\]"
            ]
          },
          {
            "Name": "JoinedCollatorCandidates",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account has joined the set of collator candidates.",
              "\\[account, amount staked by the new candidate\\]"
            ]
          },
          {
            "Name": "CollatorStakedMore",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A collator candidate has increased the amount of funds at stake.",
              "\\[collator's account, previous stake, new stake\\]"
            ]
          },
          {
            "Name": "CollatorStakedLess",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "A collator candidate has decreased the amount of funds at stake.",
              "\\[collator's account, previous stake, new stake\\]"
            ]
          },
          {
            "Name": "CollatorScheduledExit",
            "TypeFields": [
              {
                "TypeName": "SessionIndex",
                "TypeId": 7
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "SessionIndex",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A collator candidate has started the process to leave the set of",
              "candidates. \\[round number, collator's account, round number when",
              "the collator will be effectively removed from the set of",
              "candidates\\]"
            ]
          },
          {
            "Name": "CollatorCanceledExit",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A collator candidate has canceled the process to leave the set of",
              "candidates and was added back to the candidate pool. \\[collator's",
              "account\\]"
            ]
          },
          {
            "Name": "CandidateLeft",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has left the set of collator candidates.",
              "\\[account, amount of funds un-staked\\]"
            ]
          },
          {
            "Name": "CollatorRemoved",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "An account was forcedly removed from the  set of collator",
              "candidates. \\[account, amount of funds un-staked\\]"
            ]
          },
          {
            "Name": "MaxCandidateStakeChanged",
            "TypeFields": [
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "The maximum candidate stake has been changed.",
              "\\[new max amount\\]"
            ]
          },
          {
            "Name": "DelegatorStakedMore",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "A delegator has increased the amount of funds at stake for a",
              "collator. \\[delegator's account, collator's account, previous",
              "delegation stake, new delegation stake\\]"
            ]
          },
          {
            "Name": "DelegatorStakedLess",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "A delegator has decreased the amount of funds at stake for a",
              "collator. \\[delegator's account, collator's account, previous",
              "delegation stake, new delegation stake\\]"
            ]
          },
          {
            "Name": "DelegatorLeft",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "An account has left the set of delegators.",
              "\\[account, amount of funds un-staked\\]"
            ]
          },
          {
            "Name": "Delegation",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "An account has delegated a new collator candidate.",
              "\\[account, amount of funds staked, total amount of delegators' funds",
              "staked for the collator candidate\\]"
            ]
          },
          {
            "Name": "DelegationReplaced",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "A new delegation has replaced an existing one in the set of ongoing",
              "delegations for a collator candidate. \\[new delegator's account,",
              "amount of funds staked in the new delegation, replaced delegator's",
              "account, amount of funds staked in the replace delegation, collator",
              "candidate's account, new total amount of delegators' funds staked",
              "for the collator candidate\\]"
            ]
          },
          {
            "Name": "DelegatorLeftCollator",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "An account has stopped delegating a collator candidate.",
              "\\[account, collator candidate's account, old amount of delegators'",
              "funds staked, new amount of delegators' funds staked\\]"
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "A collator or a delegator has received a reward.",
              "\\[account, amount of reward\\]"
            ]
          },
          {
            "Name": "RoundInflationSet",
            "TypeFields": [
              {
                "TypeName": "Perquintill",
                "TypeId": 35
              },
              {
                "TypeName": "Perquintill",
                "TypeId": 35
              },
              {
                "TypeName": "Perquintill",
                "TypeId": 35
              },
              {
                "TypeName": "Perquintill",
                "TypeId": 35
              }
            ],
            "Index": 18,
            "Docs": [
              "Inflation configuration for future validation rounds has changed.",
              "\\[maximum collator's staking rate, maximum collator's reward rate,",
              "maximum delegator's staking rate, maximum delegator's reward rate\\]"
            ]
          },
          {
            "Name": "MaxSelectedCandidatesSet",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 19,
            "Docs": [
              "The maximum number of collator candidates selected in future",
              "validation rounds has changed. \\[old value, new value\\]"
            ]
          },
          {
            "Name": "BlocksPerRoundSet",
            "TypeFields": [
              {
                "TypeName": "SessionIndex",
                "TypeId": 7
              },
              {
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "The length in blocks for future validation rounds has changed.",
              "\\[round number, first block in the current round, old value, new",
              "value\\]"
            ]
          }
        ],
        "Path": [
          "parachain_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "35": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perquintill"
        ],
        "TypeDef": "Composite"
      },
      "36": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 37
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "until",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 38
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has secconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 40,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 11,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a proposal or a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 40,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 11,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ]
          },
          {
            "Name": "MetadataTransferred",
            "TypeFields": [
              {
                "Name": "prev_owner",
                "TypeName": "MetadataOwner",
                "TypeId": 40,
                "Docs": [
                  "Previous metadata owner."
                ]
              },
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 40,
                "Docs": [
                  "New metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 11,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been transferred to new owner."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "37": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "38": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 39
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "39": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "40": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Proposal",
            "TypeFields": [
              {
                "TypeName": "PropIndex",
                "TypeId": 7
              }
            ],
            "Index": 1
          },
          {
            "Name": "Referendum",
            "TypeFields": [
              {
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "MetadataOwner"
        ],
        "TypeDef": "Variant"
      },
      "41": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 42
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "42": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "43": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 44
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 24
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 44
          },
          {
            "Name": "E",
            "TypeId": 24
          }
        ],
        "TypeDef": "Variant"
      },
      "44": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "45": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 42
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "46": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "47": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "48": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "49": {
        "Variants": [
          {
            "Name": "VestingUpdated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unvested",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ]
          },
          {
            "Name": "VestingCompleted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has become fully vested."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "50": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 51
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 52
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 51
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 52
              }
            ],
            "Index": 3,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 51
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 52
              }
            ],
            "Index": 4,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 51
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 52
              }
            ],
            "Index": 5,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "51": {
        "TypeIds": [
          4,
          7
        ],
        "TypeDef": "Tuple"
      },
      "52": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "53": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 54
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 55
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 54
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 54
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "54": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Governance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NonDepositClaiming",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "spiritnet_runtime",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "55": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "56": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "57": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "58": {
        "Variants": [
          {
            "Name": "NewTip",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "A new tip suggestion has been opened."
            ]
          },
          {
            "Name": "TipClosing",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "A tip suggestion has reached threshold and is closing."
            ]
          },
          {
            "Name": "TipClosed",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "payout",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A tip suggestion has been closed."
            ]
          },
          {
            "Name": "TipRetracted",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A tip suggestion has been retracted."
            ]
          },
          {
            "Name": "TipSlashed",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "finder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A tip suggestion has been slashed."
            ]
          }
        ],
        "Path": [
          "pallet_tips",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "59": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 60
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 60
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 60
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "60": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "61": {
        "Variants": [
          {
            "Name": "CTypeCreated",
            "TypeFields": [
              {
                "TypeName": "CtypeCreatorOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "CtypeHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "A new CType has been created.",
              "\\[creator identifier, CType hash\\]"
            ]
          },
          {
            "Name": "CTypeUpdated",
            "TypeFields": [
              {
                "TypeName": "CtypeHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Information about a CType has been updated.",
              "\\[CType hash\\]"
            ]
          }
        ],
        "Path": [
          "ctype",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "62": {
        "Variants": [
          {
            "Name": "AttestationCreated",
            "TypeFields": [
              {
                "TypeName": "AttesterOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              },
              {
                "TypeName": "CtypeHashOf<T>",
                "TypeId": 11
              },
              {
                "TypeName": "Option<AuthorizationIdOf<T>>",
                "TypeId": 63
              }
            ],
            "Index": 0,
            "Docs": [
              "A new attestation has been created.",
              "\\[attester ID, claim hash, CType hash, (optional) delegation ID\\]"
            ]
          },
          {
            "Name": "AttestationRevoked",
            "TypeFields": [
              {
                "TypeName": "AttesterOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "An attestation has been revoked.",
              "\\[account id, claim hash\\]"
            ]
          },
          {
            "Name": "AttestationRemoved",
            "TypeFields": [
              {
                "TypeName": "AttesterOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "An attestation has been removed.",
              "\\[account id, claim hash\\]"
            ]
          },
          {
            "Name": "DepositReclaimed",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "The deposit owner reclaimed a deposit by removing an attestation.",
              "\\[account id, claim hash\\]"
            ]
          }
        ],
        "Path": [
          "attestation",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "63": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 64
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 64
          }
        ],
        "TypeDef": "Variant"
      },
      "64": {
        "Variants": [
          {
            "Name": "Delegation",
            "TypeFields": [
              {
                "TypeName": "DelegationId",
                "TypeId": 11
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "runtime_common",
          "authorization",
          "AuthorizationId"
        ],
        "TypeParams": [
          {
            "Name": "DelegationId",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "65": {
        "Variants": [
          {
            "Name": "HierarchyCreated",
            "TypeFields": [
              {
                "TypeName": "DelegatorIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "TypeName": "CtypeHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "A new hierarchy has been created.",
              "\\[creator ID, root node ID, CTYPE hash\\]"
            ]
          },
          {
            "Name": "HierarchyRevoked",
            "TypeFields": [
              {
                "TypeName": "DelegatorIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "A hierarchy has been revoked.",
              "\\[revoker ID, root node ID\\]"
            ]
          },
          {
            "Name": "HierarchyRemoved",
            "TypeFields": [
              {
                "TypeName": "DelegatorIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A hierarchy has been removed from the storage on chain.",
              "\\[remover ID, root node ID\\]"
            ]
          },
          {
            "Name": "DelegationCreated",
            "TypeFields": [
              {
                "TypeName": "DelegatorIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "TypeName": "DelegatorIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "Permissions",
                "TypeId": 66
              }
            ],
            "Index": 3,
            "Docs": [
              "A new delegation has been created.",
              "\\[creator ID, root node ID, delegation node ID, parent node ID,",
              "delegate ID, permissions\\]"
            ]
          },
          {
            "Name": "DelegationRevoked",
            "TypeFields": [
              {
                "TypeName": "DelegatorIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "A delegation has been revoked.",
              "\\[revoker ID, delegation node ID\\]"
            ]
          },
          {
            "Name": "DelegationRemoved",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "A delegation has been removed.",
              "\\[remover ID, delegation node ID\\]"
            ]
          },
          {
            "Name": "DepositReclaimed",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "The deposit owner reclaimed a deposit by removing a delegation",
              "subtree. \\[revoker ID, delegation node ID\\]"
            ]
          }
        ],
        "Path": [
          "delegation",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "66": {
        "TypeFields": [
          {
            "Name": "bits",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "delegation",
          "delegation_hierarchy",
          "Permissions"
        ],
        "TypeDef": "Composite"
      },
      "67": {
        "Variants": [
          {
            "Name": "DidCreated",
            "TypeFields": [
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A new DID has been created.",
              "\\[transaction signer, DID identifier\\]"
            ]
          },
          {
            "Name": "DidUpdated",
            "TypeFields": [
              {
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A DID has been updated.",
              "\\[DID identifier\\]"
            ]
          },
          {
            "Name": "DidDeleted",
            "TypeFields": [
              {
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "A DID has been deleted.",
              "\\[DID identifier\\]"
            ]
          },
          {
            "Name": "DidCallDispatched",
            "TypeFields": [
              {
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              },
              {
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 3,
            "Docs": [
              "A DID-authorised call has been executed.",
              "\\[DID caller, dispatch result\\]"
            ]
          }
        ],
        "Path": [
          "did",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "68": {
        "Variants": [
          {
            "Name": "AssociationEstablished",
            "TypeFields": [
              {
                "TypeName": "LinkableAccountId",
                "TypeId": 69
              },
              {
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A new association between a DID and an account ID was created."
            ]
          },
          {
            "Name": "AssociationRemoved",
            "TypeFields": [
              {
                "TypeName": "LinkableAccountId",
                "TypeId": 69
              },
              {
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An association between a DID and an account ID was removed."
            ]
          },
          {
            "Name": "MigrationProgress",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "There was some progress in the migration process."
            ]
          },
          {
            "Name": "MigrationCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "All AccountIds have been migrated to LinkableAccountId."
            ]
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "69": {
        "Variants": [
          {
            "Name": "AccountId20",
            "TypeFields": [
              {
                "TypeName": "AccountId20",
                "TypeId": 70
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "TypeName": "AccountId32",
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "linkable_account",
          "LinkableAccountId"
        ],
        "TypeDef": "Variant"
      },
      "70": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 71
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "account",
          "AccountId20"
        ],
        "TypeDef": "Composite"
      },
      "71": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "72": {
        "Variants": [
          {
            "Name": "Web3NameClaimed",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "Web3NameOwnerOf<T>",
                "TypeId": 0
              },
              {
                "Name": "name",
                "TypeName": "Web3NameOf<T>",
                "TypeId": 73
              }
            ],
            "Index": 0,
            "Docs": [
              "A new name has been claimed."
            ]
          },
          {
            "Name": "Web3NameReleased",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "Web3NameOwnerOf<T>",
                "TypeId": 0
              },
              {
                "Name": "name",
                "TypeName": "Web3NameOf<T>",
                "TypeId": 73
              }
            ],
            "Index": 1,
            "Docs": [
              "A name has been released."
            ]
          },
          {
            "Name": "Web3NameBanned",
            "TypeFields": [
              {
                "Name": "name",
                "TypeName": "Web3NameOf<T>",
                "TypeId": 73
              }
            ],
            "Index": 2,
            "Docs": [
              "A name has been banned."
            ]
          },
          {
            "Name": "Web3NameUnbanned",
            "TypeFields": [
              {
                "Name": "name",
                "TypeName": "Web3NameOf<T>",
                "TypeId": 73
              }
            ],
            "Index": 3,
            "Docs": [
              "A name has been unbanned."
            ]
          }
        ],
        "Path": [
          "pallet_web3_names",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "73": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, T::MaxNameLength>",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_web3_names",
          "web3_name",
          "AsciiWeb3Name"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "74": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "75": {
        "Variants": [
          {
            "Name": "CredentialStored",
            "TypeFields": [
              {
                "Name": "subject_id",
                "TypeName": "T::SubjectId",
                "TypeId": 76,
                "Docs": [
                  "The subject of the new credential."
                ]
              },
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11,
                "Docs": [
                  "The id of the new credential."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A new public credential has been issued."
            ]
          },
          {
            "Name": "CredentialRemoved",
            "TypeFields": [
              {
                "Name": "subject_id",
                "TypeName": "T::SubjectId",
                "TypeId": 76,
                "Docs": [
                  "The subject of the removed credential."
                ]
              },
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11,
                "Docs": [
                  "The id of the removed credential."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A public credentials has been removed."
            ]
          },
          {
            "Name": "CredentialRevoked",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11,
                "Docs": [
                  "The id of the revoked credential."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "A public credential has been revoked."
            ]
          },
          {
            "Name": "CredentialUnrevoked",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11,
                "Docs": [
                  "The id of the unrevoked credential."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A public credential has been unrevoked."
            ]
          }
        ],
        "Path": [
          "public_credentials",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The events generated by this pallet."
        ]
      },
      "76": {
        "TypeFields": [
          {
            "TypeName": "AssetIdentifier",
            "TypeId": 77
          }
        ],
        "Path": [
          "runtime_common",
          "assets",
          "AssetDid"
        ],
        "TypeDef": "Composite"
      },
      "77": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "ChainId",
            "TypeId": 78
          },
          {
            "Name": "asset_id",
            "TypeName": "AssetId",
            "TypeId": 88
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "v1",
          "AssetDid"
        ],
        "TypeDef": "Composite"
      },
      "78": {
        "Variants": [
          {
            "Name": "Eip155",
            "TypeFields": [
              {
                "TypeName": "Eip155Reference",
                "TypeId": 79
              }
            ],
            "Index": 0
          },
          {
            "Name": "Bip122",
            "TypeFields": [
              {
                "TypeName": "GenesisHexHash32Reference",
                "TypeId": 80
              }
            ],
            "Index": 1
          },
          {
            "Name": "Dotsama",
            "TypeFields": [
              {
                "TypeName": "GenesisHexHash32Reference",
                "TypeId": 80
              }
            ],
            "Index": 2
          },
          {
            "Name": "Solana",
            "TypeFields": [
              {
                "TypeName": "GenesisBase58Hash32Reference",
                "TypeId": 82
              }
            ],
            "Index": 3
          },
          {
            "Name": "Generic",
            "TypeFields": [
              {
                "TypeName": "GenericChainId",
                "TypeId": 84
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "chain",
          "v1",
          "ChainId"
        ],
        "TypeDef": "Variant"
      },
      "79": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "chain",
          "v1",
          "Eip155Reference"
        ],
        "TypeDef": "Composite"
      },
      "80": {
        "TypeFields": [
          {
            "TypeName": "[u8; 16]",
            "TypeId": 81
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "chain",
          "v1",
          "GenesisHexHash32Reference"
        ],
        "TypeDef": "Composite"
      },
      "81": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "82": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, ConstU32<32>>",
            "TypeId": 83
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "chain",
          "v1",
          "GenesisBase58Hash32Reference"
        ],
        "TypeDef": "Composite"
      },
      "83": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "84": {
        "TypeFields": [
          {
            "Name": "namespace",
            "TypeName": "GenericChainNamespace",
            "TypeId": 85
          },
          {
            "Name": "reference",
            "TypeName": "GenericChainReference",
            "TypeId": 87
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "chain",
          "v1",
          "GenericChainId"
        ],
        "TypeDef": "Composite"
      },
      "85": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, ConstU32<MAXIMUM_CHAIN_NAMESPACE_LENGTH_U32>>",
            "TypeId": 86
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "chain",
          "v1",
          "GenericChainNamespace"
        ],
        "TypeDef": "Composite"
      },
      "86": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "87": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, ConstU32<MAXIMUM_CHAIN_REFERENCE_LENGTH_U32>>",
            "TypeId": 83
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "chain",
          "v1",
          "GenericChainReference"
        ],
        "TypeDef": "Composite"
      },
      "88": {
        "Variants": [
          {
            "Name": "Slip44",
            "TypeFields": [
              {
                "TypeName": "Slip44Reference",
                "TypeId": 89
              }
            ],
            "Index": 0
          },
          {
            "Name": "Erc20",
            "TypeFields": [
              {
                "TypeName": "EvmSmartContractFungibleReference",
                "TypeId": 92
              }
            ],
            "Index": 1
          },
          {
            "Name": "Erc721",
            "TypeFields": [
              {
                "TypeName": "EvmSmartContractNonFungibleReference",
                "TypeId": 93
              }
            ],
            "Index": 2
          },
          {
            "Name": "Erc1155",
            "TypeFields": [
              {
                "TypeName": "EvmSmartContractNonFungibleReference",
                "TypeId": 93
              }
            ],
            "Index": 3
          },
          {
            "Name": "Generic",
            "TypeFields": [
              {
                "TypeName": "GenericAssetId",
                "TypeId": 97
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "89": {
        "TypeFields": [
          {
            "TypeName": "U256",
            "TypeId": 90
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "Slip44Reference"
        ],
        "TypeDef": "Composite"
      },
      "90": {
        "TypeFields": [
          {
            "TypeName": "[u64; 4]",
            "TypeId": 91
          }
        ],
        "Path": [
          "primitive_types",
          "U256"
        ],
        "TypeDef": "Composite"
      },
      "91": {
        "Length": 4,
        "TypeId": 4,
        "TypeDef": "Array"
      },
      "92": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 71
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "EvmSmartContractFungibleReference"
        ],
        "TypeDef": "Composite"
      },
      "93": {
        "TypeFields": [
          {
            "TypeName": "EvmSmartContractFungibleReference",
            "TypeId": 92
          },
          {
            "TypeName": "Option<EvmSmartContractNonFungibleIdentifier>",
            "TypeId": 94
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "EvmSmartContractNonFungibleReference"
        ],
        "TypeDef": "Composite"
      },
      "94": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 95
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 95
          }
        ],
        "TypeDef": "Variant"
      },
      "95": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, ConstU32<MAXIMUM_ASSET_IDENTIFIER_LENGTH_U32>>",
            "TypeId": 96
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "EvmSmartContractNonFungibleIdentifier"
        ],
        "TypeDef": "Composite"
      },
      "96": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "97": {
        "TypeFields": [
          {
            "Name": "namespace",
            "TypeName": "GenericAssetNamespace",
            "TypeId": 98
          },
          {
            "Name": "reference",
            "TypeName": "GenericAssetReference",
            "TypeId": 99
          },
          {
            "Name": "id",
            "TypeName": "Option<GenericAssetIdentifier>",
            "TypeId": 101
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "GenericAssetId"
        ],
        "TypeDef": "Composite"
      },
      "98": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, ConstU32<MAXIMUM_ASSET_NAMESPACE_LENGTH_U32>>",
            "TypeId": 86
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "GenericAssetNamespace"
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, ConstU32<MAXIMUM_ASSET_REFERENCE_LENGTH_U32>>",
            "TypeId": 100
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "GenericAssetReference"
        ],
        "TypeDef": "Composite"
      },
      "100": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "101": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 102
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 102
          }
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<u8, ConstU32<MAXIMUM_ASSET_IDENTIFIER_LENGTH_U32>>",
            "TypeId": 96
          }
        ],
        "Path": [
          "kilt_asset_dids",
          "asset",
          "v1",
          "GenericAssetIdentifier"
        ],
        "TypeDef": "Composite"
      },
      "103": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "An upgrade has been authorized."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 52
              }
            ],
            "Index": 6,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "104": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 52
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Some XCM was executed ok."
            ]
          },
          {
            "Name": "Fail",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 52
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 105
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Some XCM failed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 52
              }
            ],
            "Index": 2,
            "Docs": [
              "Bad XCM version used."
            ]
          },
          {
            "Name": "BadFormat",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 52
              }
            ],
            "Index": 3,
            "Docs": [
              "Bad XCM format used."
            ]
          },
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 52
              }
            ],
            "Index": 4,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 106
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 7
              },
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "required",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "An XCM exceeded the individual message weight budget."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 6,
            "Docs": [
              "An XCM from the overweight queue was executed with the given actual weight used."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "105": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 4
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "106": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "107": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 108
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted.",
              "",
              "\\[ outcome \\]"
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent.",
              "",
              "\\[ origin, destination, message \\]"
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "Response",
                "TypeId": 128
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call.",
              "",
              "\\[ id, response \\]"
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification could",
              "not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result.",
              "",
              "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected location \\]"
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed.",
              "",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 145
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap.",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 7
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included.",
              "",
              "\\[ destination, result, cost \\]"
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 7
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention.",
              "",
              "\\[ location, XCM version \\]"
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "XcmError",
                "TypeId": 105
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it.",
              "",
              "\\[ location, query ID, error \\]"
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "TypeName": "VersionedMultiLocation",
                "TypeId": 159
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format.",
              "",
              "\\[ location, query ID \\]"
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected querier, maybe actual querier \\]"
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain sends us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`).",
              "",
              "\\[ paying location, fees \\]"
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 145
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "108": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "TypeName": "Error",
                "TypeId": 105
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Error",
                "TypeId": 105
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "109": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 110
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "110": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "111": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 113
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 113
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 113
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 71
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 115
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 116
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 117
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 114
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "112": {
        "TypeId": 7,
        "TypeDef": "Compact"
      },
      "113": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 114
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 114
          }
        ],
        "TypeDef": "Variant"
      },
      "114": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 4
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "115": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "116": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "117": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "118": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 119
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "119": {
        "TypeId": 120,
        "TypeDef": "Sequence"
      },
      "120": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 128
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 138
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 139
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 110
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 144
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 118
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 118
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 129
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 135
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 114
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 110
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 144
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "121": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 122
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "122": {
        "TypeId": 123,
        "TypeDef": "Sequence"
      },
      "123": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 124
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 125
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "124": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "125": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 115
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 126
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "126": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 115
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 127
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 81
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "127": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "128": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 129
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 7
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 131
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 135
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "129": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 130
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 130
          }
        ],
        "TypeDef": "Variant"
      },
      "130": {
        "TypeIds": [
          7,
          105
        ],
        "TypeDef": "Tuple"
      },
      "131": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 134
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 132
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "132": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 112
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 133
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 133
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 112
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 112
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 112
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "133": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "134": {
        "TypeId": 132,
        "TypeDef": "Sequence"
      },
      "135": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 136
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 136
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "136": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "137": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 109
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 109
          }
        ],
        "TypeDef": "Variant"
      },
      "138": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "139": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "140": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 109
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 10
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "141": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 142
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "142": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 124
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 143
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 124
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 143
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "143": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "144": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "145": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAssets"
        ],
        "TypeDef": "Variant"
      },
      "146": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 147
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "147": {
        "TypeId": 148,
        "TypeDef": "Sequence"
      },
      "148": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 149
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 157
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "149": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 151
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              },
              {
                "TypeName": "Junction",
                "TypeId": 152
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "152": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 153
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 153
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 153
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 71
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 115
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 154
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 155
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 156
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "153": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 154
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "154": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "155": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 154
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "156": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "157": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 115
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 158
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "158": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 115
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 127
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 81
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "159": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "160": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "TypeName": "Outcome",
                "TypeId": 108
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "161": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM."
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM."
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "outcome",
                "TypeName": "Outcome",
                "TypeId": 108
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome."
            ]
          },
          {
            "Name": "WeightExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "remaining_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3,
            "Docs": [
              "The weight limit for handling downward messages was reached."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward message is overweight and was placed in the overweight queue."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward message from the overweight queue was executed."
            ]
          },
          {
            "Name": "MaxMessagesExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 6,
            "Docs": [
              "The maximum number of downward messages was."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "162": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "163": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "164": {
        "TypeId": 51,
        "TypeDef": "Sequence"
      },
      "165": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 112
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 166
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "166": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "167": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "## Complexity",
              "- `O(1)`"
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code.",
              "",
              "## Complexity",
              "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "## Complexity",
              "- `O(C)` where `C` length of `code`"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 168
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 170
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 12
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "168": {
        "TypeId": 169,
        "TypeDef": "Sequence"
      },
      "169": {
        "TypeIds": [
          12,
          12
        ],
        "TypeDef": "Tuple"
      },
      "170": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "171": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 172
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "172": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 173
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 173
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 173
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 173
          }
        ],
        "TypeDef": "Composite"
      },
      "173": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 174
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 174
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 174
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "174": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Variant"
      },
      "175": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 176
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "176": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 7
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 7
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 7
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "177": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 4
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "178": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 166
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 166
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 179
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "179": {
        "TypeFields": [
          {
            "TypeId": 180
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 180
          }
        ],
        "TypeDef": "Composite"
      },
      "180": {
        "TypeId": 181,
        "TypeDef": "Sequence"
      },
      "181": {
        "TypeIds": [
          127,
          7
        ],
        "TypeDef": "Tuple"
      },
      "182": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "183": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "184": {
        "TypeIds": [
          0,
          6,
          42
        ],
        "TypeDef": "Tuple"
      },
      "185": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Assign an previously unassigned index.",
              "",
              "Payment: `Deposit` is reserved from the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `index`: the index to be claimed. This must not be in use.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Assign an index already owned by the sender to another account. The balance reservation",
              "is effectively transferred to the new account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `index`: the index to be re-assigned. This must be owned by the sender.",
              "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "free",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Free up an index owned by the sender.",
              "",
              "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
              "",
              "- `index`: the index to be freed. This must be owned by the sender.",
              "",
              "Emits `IndexFreed` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              },
              {
                "Name": "freeze",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 3,
            "Docs": [
              "Force an index to an account. This doesn't require a deposit. If the index is already",
              "held, then any deposit is reimbursed to its current owner.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `index`: the index to be (re-)assigned.",
              "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
              "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "T::AccountIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Freeze an index so it will always point to the sender account. This consumes the",
              "deposit.",
              "",
              "The dispatch origin for this call must be _Signed_ and the signing account must have a",
              "non-frozen account `index`.",
              "",
              "- `index`: the index to be frozen in place.",
              "",
              "Emits `IndexFrozen` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_indices",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "186": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 187
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 71
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 44
          }
        ],
        "TypeDef": "Variant"
      },
      "187": {
        "TypeId": 44,
        "TypeDef": "Compact"
      },
      "188": {
        "Variants": [
          {
            "Name": "NotAssigned",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The index was not already assigned."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The index is assigned to another account."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The index was not available."
            ]
          },
          {
            "Name": "NotTransfer",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The source and destination accounts are identical."
            ]
          },
          {
            "Name": "Permanent",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The index is permanent and may not be freed/changed."
            ]
          }
        ],
        "Path": [
          "pallet_indices",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "189": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 192
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 190
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "190": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 127
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 191
          }
        ],
        "Path": [
          "pallet_balances",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "191": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "192": {
        "TypeId": 190,
        "TypeDef": "Sequence"
      },
      "193": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 195
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 194
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "194": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 127
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 127
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "195": {
        "TypeId": 194,
        "TypeDef": "Sequence"
      },
      "196": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 115
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor.",
              "",
              "## Complexity",
              "- Dependent on arguments but not critical, given proper implementations for input config",
              "  types. See related functions below.",
              "- It contains a limited number of reads and writes internally and no complex",
              "  computation.",
              "",
              "Related functions:",
              "",
              "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
              "  - Transferring balances to accounts that did not exist before will cause",
              "    `T::OnNewAccount::on_new_account` to be called.",
              "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
              "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
              "    that the transfer will not kill the origin account."
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 115
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 115
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
              "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
              "If the new free or reserved balance is below the existential deposit,",
              "it will reset the account nonce (`frame_system::AccountNonce`).",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 115
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source account may be",
              "specified.",
              "## Complexity",
              "- Same as transfer, but additional read and write because the source account is not",
              "  assumed to be in the overlay."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 115
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
              "origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "[`transfer`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true). ## Complexity",
              "- O(1). Just like transfer, but reading the user's transferable balance first."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "197": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed MaxReserves"
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "198": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "199": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "200": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 203
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 201
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "201": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 202
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "202": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "203": {
        "TypeId": 201,
        "TypeDef": "Sequence"
      },
      "204": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "206": {
        "TypeId": 207,
        "TypeDef": "Sequence"
      },
      "207": {
        "TypeIds": [
          0,
          208
        ],
        "TypeDef": "Tuple"
      },
      "208": {
        "TypeFields": [
          {
            "Name": "aura",
            "TypeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 201
          }
        ],
        "Path": [
          "spiritnet_runtime",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "209": {
        "TypeId": 7,
        "TypeDef": "Sequence"
      },
      "210": {
        "TypeIds": [
          211,
          12
        ],
        "TypeDef": "Tuple"
      },
      "211": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "212": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 208
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "213": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "214": {
        "TypeFields": [
          {
            "Name": "current",
            "TypeName": "SessionIndex",
            "TypeId": 7
          },
          {
            "Name": "first",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "length",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "parachain_staking",
          "types",
          "RoundInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "215": {
        "TypeFields": [
          {
            "Name": "round",
            "TypeName": "SessionIndex",
            "TypeId": 7
          },
          {
            "Name": "counter",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "parachain_staking",
          "types",
          "DelegationCounter"
        ],
        "TypeDef": "Composite"
      },
      "216": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "parachain_staking",
          "types",
          "Stake"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "217": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "delegators",
            "TypeName": "OrderedSet<Stake<AccountId, Balance>, MaxDelegatorsPerCandidate>",
            "TypeId": 218
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "CandidateStatus",
            "TypeId": 221
          }
        ],
        "Path": [
          "parachain_staking",
          "types",
          "Candidate"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxDelegatorsPerCandidate"
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<T, S>",
            "TypeId": 219
          }
        ],
        "Path": [
          "parachain_staking",
          "set",
          "OrderedSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 216
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "219": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 220
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 216
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "220": {
        "TypeId": 216,
        "TypeDef": "Sequence"
      },
      "221": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Leaving",
            "TypeFields": [
              {
                "TypeName": "SessionIndex",
                "TypeId": 7
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "parachain_staking",
          "types",
          "CandidateStatus"
        ],
        "TypeDef": "Variant"
      },
      "222": {
        "TypeFields": [
          {
            "Name": "collators",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "delegators",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "parachain_staking",
          "types",
          "TotalStake"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "223": {
        "TypeFields": [
          {
            "TypeName": "BoundedVec<T, S>",
            "TypeId": 224
          }
        ],
        "Path": [
          "parachain_staking",
          "set",
          "OrderedSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 216
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "224": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 220
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 216
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "225": {
        "TypeFields": [
          {
            "Name": "collator",
            "TypeName": "StakingInfo",
            "TypeId": 226
          },
          {
            "Name": "delegator",
            "TypeName": "StakingInfo",
            "TypeId": 226
          }
        ],
        "Path": [
          "parachain_staking",
          "inflation",
          "InflationInfo"
        ],
        "TypeDef": "Composite"
      },
      "226": {
        "TypeFields": [
          {
            "Name": "max_rate",
            "TypeName": "Perquintill",
            "TypeId": 35
          },
          {
            "Name": "reward_rate",
            "TypeName": "RewardRate",
            "TypeId": 227
          }
        ],
        "Path": [
          "parachain_staking",
          "inflation",
          "StakingInfo"
        ],
        "TypeDef": "Composite"
      },
      "227": {
        "TypeFields": [
          {
            "Name": "annual",
            "TypeName": "Perquintill",
            "TypeId": 35
          },
          {
            "Name": "per_block",
            "TypeName": "Perquintill",
            "TypeId": 35
          }
        ],
        "Path": [
          "parachain_staking",
          "inflation",
          "RewardRate"
        ],
        "TypeDef": "Composite"
      },
      "228": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 229
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "229": {
        "TypeFields": [
          {
            "TypeId": 230
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "230": {
        "TypeId": 231,
        "TypeDef": "Sequence"
      },
      "231": {
        "TypeIds": [
          4,
          6
        ],
        "TypeDef": "Tuple"
      },
      "232": {
        "Variants": [
          {
            "Name": "force_new_round",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Forces the start of the new round in the next block.",
              "",
              "The new round will be enforced via <T as",
              "ShouldEndSession<_>>::should_end_session.",
              "",
              "The dispatch origin must be Root."
            ]
          },
          {
            "Name": "set_inflation",
            "TypeFields": [
              {
                "Name": "collator_max_rate_percentage",
                "TypeName": "Perquintill",
                "TypeId": 35
              },
              {
                "Name": "collator_annual_reward_rate_percentage",
                "TypeName": "Perquintill",
                "TypeId": 35
              },
              {
                "Name": "delegator_max_rate_percentage",
                "TypeName": "Perquintill",
                "TypeId": 35
              },
              {
                "Name": "delegator_annual_reward_rate_percentage",
                "TypeName": "Perquintill",
                "TypeId": 35
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the annual inflation rate to derive per-round inflation.",
              "",
              "The inflation details are considered valid if the annual reward rate",
              "is approximately the per-block reward rate multiplied by the",
              "estimated* total number of blocks per year.",
              "",
              "The estimated average block time is twelve seconds.",
              "",
              "NOTE: Iterates over CandidatePool and for each candidate over their",
              "delegators to update their rewards before the reward rates change.",
              "Needs to be improved when scaling up `MaxTopCandidates`.",
              "",
              "The dispatch origin must be Root.",
              "",
              "Emits `RoundInflationSet`."
            ]
          },
          {
            "Name": "set_max_selected_candidates",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the maximum number of collator candidates that can be selected",
              "at the beginning of each validation round.",
              "",
              "Changes are not applied until the start of the next round.",
              "",
              "The new value must be higher than the minimum allowed as set in the",
              "pallet's configuration.",
              "",
              "The dispatch origin must be Root.",
              "",
              "Emits `MaxSelectedCandidatesSet`."
            ]
          },
          {
            "Name": "set_blocks_per_round",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the number of blocks each validation round lasts.",
              "",
              "If the new value is less than the length of the current round, the",
              "system will immediately move to the next round in the next block.",
              "",
              "The new value must be higher than the minimum allowed as set in the",
              "pallet's configuration.",
              "",
              "The dispatch origin must be Root.",
              "",
              "Emits `BlocksPerRoundSet`."
            ]
          },
          {
            "Name": "set_max_candidate_stake",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the maximal amount a collator can stake. Existing stakes are not",
              "changed.",
              "",
              "The dispatch origin must be Root.",
              "",
              "Emits `MaxCandidateStakeChanged`."
            ]
          },
          {
            "Name": "force_remove_candidate",
            "TypeFields": [
              {
                "Name": "collator",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 186
              }
            ],
            "Index": 5,
            "Docs": [
              "Forcedly removes a collator candidate from the TopCandidates and",
              "clears all associated storage for the candidate and their",
              "delegators.",
              "",
              "Prepares unstaking of the candidates and their delegators stake",
              "which can be unlocked via `unlock_unstaked` after waiting at",
              "least `StakeDuration` many blocks. Also increments rewards for the",
              "collator and their delegators.",
              "",
              "Increments rewards of candidate and their delegators.",
              "",
              "Emits `CandidateRemoved`."
            ]
          },
          {
            "Name": "join_candidates",
            "TypeFields": [
              {
                "Name": "stake",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Join the set of collator candidates.",
              "",
              "In the next blocks, if the collator candidate has enough funds",
              "staked to be included in any of the top `MaxSelectedCandidates`",
              "positions, it will be included in the set of potential authors that",
              "will be selected by the stake-weighted random selection function.",
              "",
              "The staked funds of the new collator candidate are added to the",
              "total stake of the system.",
              "",
              "The total amount of funds staked must be within the allowed range as",
              "set in the pallet's configuration.",
              "",
              "The dispatch origin must not be already part of the collator",
              "candidates nor of the delegators set.",
              "",
              "Emits `JoinedCollatorCandidates`."
            ]
          },
          {
            "Name": "init_leave_candidates",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Request to leave the set of collator candidates.",
              "",
              "On success, the account is immediately removed from the candidate",
              "pool to prevent selection as a collator in future validation rounds,",
              "but unstaking of the funds is executed with a delay of",
              "`StakeDuration` blocks.",
              "",
              "The exit request can be reversed by calling",
              "`cancel_leave_candidates`.",
              "",
              "This operation affects the pallet's total stake amount. It is",
              "updated even though the funds of the candidate who signaled to leave",
              "are still locked for `ExitDelay` + `StakeDuration` more blocks.",
              "",
              "NOTE 1: Upon starting a new session_i in `new_session`, the current",
              "top candidates are selected to be block authors for session_i+1. Any",
              "changes to the top candidates afterwards do not effect the set of",
              "authors for session_i+1.",
              "Thus, we have to make sure none of these collators can",
              "leave before session_i+1 ends by delaying their",
              "exit for `ExitDelay` many blocks.",
              "",
              "NOTE 2: We do not increment rewards in this extrinsic as the",
              "candidate could still author blocks, and thus be eligible to receive",
              "rewards, until the end of the next session.",
              "",
              "Emits `CollatorScheduledExit`."
            ]
          },
          {
            "Name": "execute_leave_candidates",
            "TypeFields": [
              {
                "Name": "collator",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 186
              }
            ],
            "Index": 8,
            "Docs": [
              "Execute the network exit of a candidate who requested to leave at",
              "least `ExitQueueDelay` rounds ago. Prepares unstaking of the",
              "candidates and their delegators stake which can be unlocked via",
              "`unlock_unstaked` after waiting at least `StakeDuration` many",
              "blocks.",
              "",
              "Requires the candidate to previously have called",
              "`init_leave_candidates`.",
              "",
              "The exit request can be reversed by calling",
              "`cancel_leave_candidates`.",
              "",
              "NOTE: Iterates over CandidatePool for each candidate over their",
              "delegators to set rewards. Needs to be improved when scaling up",
              "`MaxTopCandidates`.",
              "",
              "Emits `CollatorLeft`."
            ]
          },
          {
            "Name": "cancel_leave_candidates",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Revert the previously requested exit of the network of a collator",
              "candidate. On success, adds back the candidate to the TopCandidates",
              "and updates the collators.",
              "",
              "Requires the candidate to previously have called",
              "`init_leave_candidates`.",
              "",
              "Emits `CollatorCanceledExit`."
            ]
          },
          {
            "Name": "candidate_stake_more",
            "TypeFields": [
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Stake more funds for a collator candidate.",
              "",
              "If not in the set of candidates, staking enough funds allows the",
              "account to be added to it. The larger amount of funds, the higher",
              "chances to be selected as the author of the next block.",
              "",
              "This operation affects the pallet's total stake amount.",
              "",
              "The resulting total amount of funds staked must be within the",
              "allowed range as set in the pallet's configuration.",
              "",
              "Emits `CollatorStakedMore`."
            ]
          },
          {
            "Name": "candidate_stake_less",
            "TypeFields": [
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Stake less funds for a collator candidate.",
              "",
              "If the new amount of staked fund is not large enough, the account",
              "could be removed from the set of collator candidates and not be",
              "considered for authoring the next blocks.",
              "",
              "This operation affects the pallet's total stake amount.",
              "",
              "The unstaked funds are not released immediately to the account, but",
              "they will be available after `StakeDuration` blocks.",
              "",
              "The resulting total amount of funds staked must be within the",
              "allowed range as set in the pallet's configuration.",
              "",
              "Emits `CollatorStakedLess`."
            ]
          },
          {
            "Name": "join_delegators",
            "TypeFields": [
              {
                "Name": "collator",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 186
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Join the set of delegators by delegating to a collator candidate.",
              "",
              "The account that wants to delegate cannot be part of the collator",
              "candidates set as well.",
              "",
              "The caller must _not_ have a delegation. If that is the case, they",
              "are required to first remove the delegation.",
              "",
              "The amount staked must be larger than the minimum required to become",
              "a delegator as set in the pallet's configuration.",
              "",
              "As only `MaxDelegatorsPerCollator` are allowed to delegate a given",
              "collator, the amount staked must be larger than the lowest one in",
              "the current set of delegator for the operation to be meaningful.",
              "",
              "The collator's total stake as well as the pallet's total stake are",
              "increased accordingly.",
              "",
              "Emits `Delegation`.",
              "Emits `DelegationReplaced` if the candidate has",
              "`MaxDelegatorsPerCollator` many delegations but this delegator",
              "staked more than one of the other delegators of this candidate."
            ]
          },
          {
            "Name": "leave_delegators",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Leave the set of delegators and, by implication, revoke the ongoing",
              "delegation.",
              "",
              "All staked funds are not unlocked immediately, but they are added to",
              "the queue of pending unstaking, and will effectively be released",
              "after `StakeDuration` blocks from the moment the delegator leaves.",
              "",
              "This operation reduces the total stake of the pallet as well as the",
              "stakes of all collators that were delegated, potentially affecting",
              "their chances to be included in the set of candidates in the next",
              "rounds.",
              "",
              "Automatically increments the accumulated rewards of the origin of",
              "the current delegation.",
              "",
              "Emits `DelegatorLeft`."
            ]
          },
          {
            "Name": "delegator_stake_more",
            "TypeFields": [
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Increase the stake for delegating a collator candidate.",
              "",
              "If not in the set of candidates, staking enough funds allows the",
              "collator candidate to be added to it.",
              "",
              "Emits `DelegatorStakedMore`."
            ]
          },
          {
            "Name": "delegator_stake_less",
            "TypeFields": [
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Reduce the stake for delegating a collator candidate.",
              "",
              "If the new amount of staked fund is not large enough, the collator",
              "could be removed from the set of collator candidates and not be",
              "considered for authoring the next blocks.",
              "",
              "The unstaked funds are not release immediately to the account, but",
              "they will be available after `StakeDuration` blocks.",
              "",
              "The remaining staked funds must still be larger than the minimum",
              "required by this pallet to maintain the status of delegator.",
              "",
              "The resulting total amount of funds staked must be within the",
              "allowed range as set in the pallet's configuration.",
              "",
              "Emits `DelegatorStakedLess`."
            ]
          },
          {
            "Name": "unlock_unstaked",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 186
              }
            ],
            "Index": 16,
            "Docs": [
              "Unlock all previously staked funds that are now available for",
              "unlocking by the origin account after `StakeDuration` blocks have",
              "elapsed.",
              "",
              "Weight: O(U) where U is the number of locked unstaking requests",
              "bounded by `MaxUnstakeRequests`.",
              "- Reads: [Origin Account], Unstaking, Locks",
              "- Writes: Unstaking, Locks",
              "- Kills: Unstaking & Locks if no balance is locked anymore",
              "# </weight>"
            ]
          },
          {
            "Name": "claim_rewards",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Claim block authoring rewards for the target address.",
              "",
              "Requires `Rewards` to be set beforehand, which can by triggered by",
              "any of the following options",
              "* Calling increment_{collator, delegator}_rewards (active)",
              "* Altering your stake (active)",
              "* Leaving the network as a collator (active)",
              "* Revoking a delegation as a delegator (active)",
              "* Being a delegator whose collator left the network, altered their",
              "  stake or incremented rewards (passive)",
              "",
              "The dispatch origin can be any signed one, e.g., anyone can claim",
              "for anyone.",
              "",
              "Emits `Rewarded`."
            ]
          },
          {
            "Name": "increment_collator_rewards",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Actively increment the rewards of a collator.",
              "",
              "The same effect is triggered by changing the stake or leaving the",
              "network.",
              "",
              "The dispatch origin must be a collator."
            ]
          },
          {
            "Name": "increment_delegator_rewards",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Actively increment the rewards of a delegator.",
              "",
              "The same effect is triggered by changing the stake or revoking",
              "delegations.",
              "",
              "The dispatch origin must be a delegator."
            ]
          },
          {
            "Name": "execute_scheduled_reward_change",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Executes the annual reduction of the reward rates for collators and",
              "delegators.",
              "",
              "Moreover, sets rewards for all collators and delegators",
              "before adjusting the inflation.",
              "",
              "The dispatch origin can be any signed one because we bail if called",
              "too early.",
              "",
              "Emits `RoundInflationSet`."
            ]
          }
        ],
        "Path": [
          "parachain_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "233": {
        "Variants": [
          {
            "Name": "DelegatorNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account is not part of the delegators set."
            ]
          },
          {
            "Name": "CandidateNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account is not part of the collator candidates set."
            ]
          },
          {
            "Name": "DelegatorExists",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The account is already part of the delegators set."
            ]
          },
          {
            "Name": "CandidateExists",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The account is already part of the collator candidates set."
            ]
          },
          {
            "Name": "ValStakeZero",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The account tried to stake more or less with amount zero."
            ]
          },
          {
            "Name": "ValStakeBelowMin",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The account has not staked enough funds to be added to the collator",
              "candidates set."
            ]
          },
          {
            "Name": "ValStakeAboveMax",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The account has already staked the maximum amount of funds possible."
            ]
          },
          {
            "Name": "DelegationBelowMin",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The account has not staked enough funds to delegate a collator",
              "candidate."
            ]
          },
          {
            "Name": "AlreadyLeaving",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The collator candidate has already trigger the process to leave the",
              "set of collator candidates."
            ]
          },
          {
            "Name": "NotLeaving",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The collator candidate wanted to execute the exit but has not",
              "requested to leave before by calling `init_leave_candidates`."
            ]
          },
          {
            "Name": "CannotLeaveYet",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The collator tried to leave before waiting at least for",
              "`ExitQueueDelay` many rounds."
            ]
          },
          {
            "Name": "CannotJoinBeforeUnlocking",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The account has a full list of unstaking requests and needs to",
              "unlock at least one of these before being able to join (again).",
              "NOTE: Can only happen if the account was a candidate or",
              "delegator before and either got kicked or exited voluntarily."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The account is already delegating the collator candidate."
            ]
          },
          {
            "Name": "NotYetDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account has not delegated any collator candidate yet, hence it",
              "is not in the set of delegators."
            ]
          },
          {
            "Name": "DelegationsPerRoundExceeded",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The delegator has exceeded the number of delegations per round which",
              "is equal to MaxDelegatorsPerCollator.",
              "",
              "This protects against attacks in which a delegator can re-delegate",
              "from a collator who has already authored a block, to another one",
              "which has not in this round."
            ]
          },
          {
            "Name": "TooManyDelegators",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The collator candidate has already reached the maximum number of",
              "delegators.",
              "",
              "This error is generated in case a new delegation request does not",
              "stake enough funds to replace some other existing delegation."
            ]
          },
          {
            "Name": "TooFewCollatorCandidates",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The set of collator candidates would fall below the required minimum",
              "if the collator left."
            ]
          },
          {
            "Name": "CannotStakeIfLeaving",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The collator candidate is in the process of leaving the set of",
              "candidates and cannot perform any other actions in the meantime."
            ]
          },
          {
            "Name": "CannotDelegateIfLeaving",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The collator candidate is in the process of leaving the set of",
              "candidates and thus cannot be delegated to."
            ]
          },
          {
            "Name": "MaxCollatorsPerDelegatorExceeded",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The delegator has already delegated the maximum number of candidates",
              "allowed."
            ]
          },
          {
            "Name": "AlreadyDelegatedCollator",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The delegator has already previously delegated the collator",
              "candidate."
            ]
          },
          {
            "Name": "DelegationNotFound",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The given delegation does not exist in the set of delegations."
            ]
          },
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The collator delegate or the delegator is trying to un-stake more",
              "funds that are currently staked."
            ]
          },
          {
            "Name": "CannotSetAboveMax",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The number of selected candidates per staking round is",
              "above the maximum value allowed."
            ]
          },
          {
            "Name": "CannotSetBelowMin",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The number of selected candidates per staking round is",
              "below the minimum value allowed."
            ]
          },
          {
            "Name": "InvalidSchedule",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "An invalid inflation configuration is trying to be set."
            ]
          },
          {
            "Name": "NoMoreUnstaking",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The staking reward being unlocked does not exist.",
              "Max unlocking requests reached."
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The reward rate cannot be adjusted yet as an entire year has not",
              "passed."
            ]
          },
          {
            "Name": "StakeNotFound",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Provided staked value is zero. Should never be thrown."
            ]
          },
          {
            "Name": "UnstakingIsEmpty",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Cannot unlock when Unstaked is empty."
            ]
          },
          {
            "Name": "RewardsNotFound",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Cannot claim rewards if empty."
            ]
          }
        ],
        "Path": [
          "parachain_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "234": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 350
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 235
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "235": {
        "TypeIds": [
          7,
          236,
          0
        ],
        "TypeDef": "Tuple"
      },
      "236": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 11
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 100
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 11
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 237
          }
        ],
        "TypeDef": "Variant"
      },
      "237": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 167
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 183
              }
            ],
            "Index": 2
          },
          {
            "Name": "Indices",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                "TypeId": 185
              }
            ],
            "Index": 5
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 196
              }
            ],
            "Index": 6
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 212
              }
            ],
            "Index": 22
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>",
                "TypeId": 232
              }
            ],
            "Index": 21
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 238
              }
            ],
            "Index": 30
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 242
              }
            ],
            "Index": 31
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                "TypeId": 246
              }
            ],
            "Index": 32
          },
          {
            "Name": "TechnicalMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                "TypeId": 247
              }
            ],
            "Index": 34
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 248
              }
            ],
            "Index": 35
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 249
              }
            ],
            "Index": 40
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 259
              }
            ],
            "Index": 41
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 261
              }
            ],
            "Index": 42
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 263
              }
            ],
            "Index": 43
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 265
              }
            ],
            "Index": 44
          },
          {
            "Name": "TipsMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TipsMembership, Runtime>",
                "TypeId": 266
              }
            ],
            "Index": 45
          },
          {
            "Name": "Tips",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                "TypeId": 267
              }
            ],
            "Index": 46
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 268
              }
            ],
            "Index": 47
          },
          {
            "Name": "Ctype",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ctype, Runtime>",
                "TypeId": 270
              }
            ],
            "Index": 61
          },
          {
            "Name": "Attestation",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Attestation, Runtime>",
                "TypeId": 271
              }
            ],
            "Index": 62
          },
          {
            "Name": "Delegation",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Delegation, Runtime>",
                "TypeId": 276
              }
            ],
            "Index": 63
          },
          {
            "Name": "Did",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Did, Runtime>",
                "TypeId": 283
              }
            ],
            "Index": 64
          },
          {
            "Name": "DidLookup",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DidLookup, Runtime>",
                "TypeId": 305
              }
            ],
            "Index": 67
          },
          {
            "Name": "Web3Names",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Web3Names, Runtime>",
                "TypeId": 309
              }
            ],
            "Index": 68
          },
          {
            "Name": "PublicCredentials",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PublicCredentials, Runtime>",
                "TypeId": 310
              }
            ],
            "Index": 69
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 314
              }
            ],
            "Index": 80
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 327
              }
            ],
            "Index": 82
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 328
              }
            ],
            "Index": 83
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                "TypeId": 349
              }
            ],
            "Index": 85
          }
        ],
        "Path": [
          "spiritnet_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "238": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 236
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 115
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a sensitive action to be taken.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender must",
              "have funds to cover the deposit.",
              "",
              "- `proposal_hash`: The hash of the proposal preimage.",
              "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
              "",
              "Emits `Proposed`."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 112
              }
            ],
            "Index": 1,
            "Docs": [
              "Signals agreement with a particular proposal.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender",
              "must have funds to cover the deposit, equal to the original deposit.",
              "",
              "- `proposal`: The index of the proposal to second."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 112
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 38
              }
            ],
            "Index": 2,
            "Docs": [
              "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `ref_index`: The index of the referendum to vote for.",
              "- `vote`: The vote configuration."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 3,
            "Docs": [
              "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
              "referendum.",
              "",
              "The dispatch origin of this call must be `CancellationOrigin`.",
              "",
              "-`ref_index`: The index of the referendum to cancel.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 236
              }
            ],
            "Index": 4,
            "Docs": [
              "Schedule a referendum to be tabled once it is legal to schedule an external",
              "referendum.",
              "",
              "The dispatch origin of this call must be `ExternalOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 236
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
              "an external referendum.",
              "",
              "The dispatch of this call must be `ExternalMajorityOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 236
              }
            ],
            "Index": 6,
            "Docs": [
              "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
              "schedule an external referendum.",
              "",
              "The dispatch of this call must be `ExternalDefaultOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "voting_period",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Schedule the currently externally-proposed majority-carries referendum to be tabled",
              "immediately. If there is no externally-proposed referendum currently, or if there is one",
              "but it is not a majority-carries referendum then it fails.",
              "",
              "The dispatch of this call must be `FastTrackOrigin`.",
              "",
              "- `proposal_hash`: The hash of the current external proposal.",
              "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
              "\tMust be always greater than zero.",
              "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
              "- `delay`: The number of block after voting has ended in approval and this should be",
              "  enacted. This doesn't have a minimum amount.",
              "",
              "Emits `Started`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Veto and blacklist the external proposal hash.",
              "",
              "The dispatch origin of this call must be `VetoOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
              "",
              "Emits `Vetoed`.",
              "",
              "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 112
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove a referendum.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "- `ref_index`: The index of the referendum to cancel.",
              "",
              "# Weight: `O(1)`."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 239
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Undelegate the voting power of the sending account.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Clears all public proposals.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 13,
            "Docs": [
              "Unlock tokens that have an expired lock.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 14,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If:",
              "- the referendum was cancelled, or",
              "- the referendum is ongoing, or",
              "- the referendum has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the referendum has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for referendum `index`.",
              "",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 15,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the referendum was cancelled, because the voter lost the referendum or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for",
              "  referendum `index`.",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 240
              }
            ],
            "Index": 16,
            "Docs": [
              "Permanently place a proposal into the blacklist. This prevents it from ever being",
              "proposed again.",
              "",
              "If called on a queued public or external proposal, then this will result in it being",
              "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
              "then it will be cancelled.",
              "",
              "The dispatch origin of this call must be `BlacklistOrigin`.",
              "",
              "- `proposal_hash`: The proposal hash to blacklist permanently.",
              "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
              "cancelled.",
              "",
              "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
              "  reasonable value)."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 112
              }
            ],
            "Index": 17,
            "Docs": [
              "Remove a proposal.",
              "",
              "The dispatch origin of this call must be `CancelProposalOrigin`.",
              "",
              "- `prop_index`: The index of the proposal to cancel.",
              "",
              "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 40
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<PreimageHash>",
                "TypeId": 241
              }
            ],
            "Index": 18,
            "Docs": [
              "Set or clear a metadata of a proposal or a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must correspond to the `MetadataOwner`.",
              "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
              "      threshold.",
              "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
              "      threshold.",
              "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
              "      threshold.",
              "    - `Signed` by a creator for a public proposal.",
              "    - `Signed` to clear a metadata for a finished referendum.",
              "    - `Root` to set a metadata for an ongoing referendum.",
              "- `owner`: an identifier of a metadata owner.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "239": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "240": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 7
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 7
          }
        ],
        "TypeDef": "Variant"
      },
      "241": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "242": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 243
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 237
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 112
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 237
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "close_old_weight",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "OldWeight",
                "TypeId": 244
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 4,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "243": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "244": {
        "TypeId": 245,
        "TypeDef": "Compact"
      },
      "245": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_weights",
          "OldWeight"
        ],
        "TypeDef": "Composite"
      },
      "246": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 243
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 237
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 112
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 237
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "close_old_weight",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "OldWeight",
                "TypeId": 244
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 4,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "247": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "248": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 115
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 0,
            "Docs": [
              "Put forward a suggestion for spending. A deposit proportional to the value",
              "is reserved and slashed if the proposal is rejected. It is returned once the",
              "proposal is awarded.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              }
            ],
            "Index": 1,
            "Docs": [
              "Reject a proposed spend. The original deposit will be slashed.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              }
            ],
            "Index": 2,
            "Docs": [
              "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::ApproveOrigin`.",
              "",
              "## Complexity",
              " - O(1)."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 115
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 112
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "The original deposit will no longer be returned.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "- `proposal_id`: The index of a proposal",
              "",
              "## Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "Errors:",
              "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
              "i.e., the proposal has not been approved. This could also mean the proposal does not",
              "exist altogether, thus there is no way it would have been approved in the first place."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "249": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 250
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 55
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 250
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 251
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 250
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "250": {
        "TypeId": 237,
        "TypeDef": "Sequence"
      },
      "251": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 252
              }
            ],
            "Index": 0
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 253
              }
            ],
            "Index": 31
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                "TypeId": 254
              }
            ],
            "Index": 32
          },
          {
            "Name": "Did",
            "TypeFields": [
              {
                "TypeName": "did::Origin<Runtime>",
                "TypeId": 255
              }
            ],
            "Index": 64
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 256
              }
            ],
            "Index": 83
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 257
              }
            ],
            "Index": 84
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                "TypeId": 258
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "spiritnet_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "252": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "253": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "254": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "255": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "submitter",
            "TypeName": "AccountId",
            "TypeId": 0
          }
        ],
        "Path": [
          "did",
          "origin",
          "DidRawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "256": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "257": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 106
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "258": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "259": {
        "Variants": [
          {
            "Name": "vest",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unlock any vested funds of the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vest_other",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 1,
            "Docs": [
              "Unlock any vested funds of a `target` account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account whose vested funds should be unlocked. Must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "TypeId": 260
              }
            ],
            "Index": 2,
            "Docs": [
              "Create a vested transfer.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account receiving the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "force_vested_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "TypeId": 260
              }
            ],
            "Index": 3,
            "Docs": [
              "Force a vested transfer.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The account whose funds should be transferred.",
              "- `target`: The account that should be transferred the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "merge_schedules",
            "TypeFields": [
              {
                "Name": "schedule1_index",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "schedule2_index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
              "the highest possible start and end blocks. If both schedules have already started the",
              "current block will be used as the schedule start; with the caveat that if one schedule",
              "is finished by the current block, the other will be treated as the new merged schedule,",
              "unmodified.",
              "",
              "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
              "NOTE: This will unlock all schedules through the current block prior to merging.",
              "NOTE: If both schedules have ended by the current block, no new schedule will be created",
              "and both will be removed.",
              "",
              "Merged schedule attributes:",
              "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
              "  current_block)`.",
              "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
              "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `schedule1_index`: index of the first schedule to merge.",
              "- `schedule2_index`: index of the second schedule to merge."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "260": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "per_block",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "starting_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_vesting",
          "vesting_info",
          "VestingInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "261": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 262
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 262
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 262
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 262
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "262": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 51
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 51
          }
        ],
        "TypeDef": "Variant"
      },
      "263": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 264
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 54
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 54
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 54
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 55
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 54
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 55
              },
              {
                "Name": "height",
                "TypeName": "T::BlockNumber",
                "TypeId": 10
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 264
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "264": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 54
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 54
          }
        ],
        "TypeDef": "Variant"
      },
      "265": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "266": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "267": {
        "Variants": [
          {
            "Name": "report_awesome",
            "TypeFields": [
              {
                "Name": "reason",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              }
            ],
            "Index": 0,
            "Docs": [
              "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
              "`DataDepositPerByte` for each byte in `reason`.",
              "",
              "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
              "  a UTF-8-encoded URL.",
              "- `who`: The account which should be credited for the tip.",
              "",
              "Emits `NewTip` if successful.",
              "",
              "## Complexity",
              "- `O(R)` where `R` length of `reason`.",
              "  - encoding and hashing of 'reason'"
            ]
          },
          {
            "Name": "retract_tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
              "",
              "If successful, the original deposit will be unreserved.",
              "",
              "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
              "must have been reported by the signing account through `report_awesome` (and not",
              "through `tip_new`).",
              "",
              "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
              "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
              "",
              "Emits `TipRetracted` if successful.",
              "",
              "## Complexity",
              "- `O(1)`",
              "  - Depends on the length of `T::Hash` which is fixed."
            ]
          },
          {
            "Name": "tip_new",
            "TypeFields": [
              {
                "Name": "reason",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 186
              },
              {
                "Name": "tip_value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 115
              }
            ],
            "Index": 2,
            "Docs": [
              "Give a tip for something new; no finder's fee will be taken.",
              "",
              "The dispatch origin for this call must be _Signed_ and the signing account must be a",
              "member of the `Tippers` set.",
              "",
              "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
              "  a UTF-8-encoded URL.",
              "- `who`: The account which should be credited for the tip.",
              "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
              "  value of active tippers will be given to the `who`.",
              "",
              "Emits `NewTip` if successful.",
              "",
              "## Complexity",
              "- `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
              "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
              "    `ContainsLengthBound`. The actual cost depends on the implementation of",
              "    `T::Tippers`.",
              "  - `O(R)`: hashing and encoding of reason of length `R`"
            ]
          },
          {
            "Name": "tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "tip_value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 115
              }
            ],
            "Index": 3,
            "Docs": [
              "Declare a tip value for an already-open tip.",
              "",
              "The dispatch origin for this call must be _Signed_ and the signing account must be a",
              "member of the `Tippers` set.",
              "",
              "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
              "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
              "  account ID.",
              "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
              "  value of active tippers will be given to the `who`.",
              "",
              "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
              "has started.",
              "",
              "## Complexity",
              "- `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`, insert",
              "  tip and check closing, `T` is charged as upper bound given by `ContainsLengthBound`.",
              "  The actual cost depends on the implementation of `T::Tippers`.",
              "",
              "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
              "  is weighted as if almost full i.e of length `T-1`."
            ]
          },
          {
            "Name": "close_tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "Close and payout a tip.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "The tip identified by `hash` must have finished its countdown period.",
              "",
              "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
              "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
              "",
              "## Complexity",
              "- : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`. `T`",
              "  is charged as upper bound given by `ContainsLengthBound`. The actual cost depends on",
              "  the implementation of `T::Tippers`."
            ]
          },
          {
            "Name": "slash_tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Remove and slash an already-open tip.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "As a result, the finder is slashed and the deposits are lost.",
              "",
              "Emits `TipSlashed` if successful.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          }
        ],
        "Path": [
          "pallet_tips",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "268": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 55
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 269
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 237
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 55
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 269
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 55
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 205
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 60
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "269": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 60
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 60
          }
        ],
        "TypeDef": "Variant"
      },
      "270": {
        "Variants": [
          {
            "Name": "add",
            "TypeFields": [
              {
                "Name": "ctype",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a new CType from the given unique CType hash and associates",
              "it with its creator.",
              "",
              "A CType with the same hash must not be stored on chain.",
              "",
              "Emits `CTypeCreated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: Ctypes, Balance",
              "- Writes: Ctypes, Balance",
              "# </weight>"
            ]
          },
          {
            "Name": "set_block_number",
            "TypeFields": [
              {
                "Name": "ctype_hash",
                "TypeName": "CtypeHashOf<T>",
                "TypeId": 11
              },
              {
                "Name": "block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the creation block number for a given CType, if found.",
              "",
              "Emits `CTypeUpdated`."
            ]
          }
        ],
        "Path": [
          "ctype",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "271": {
        "Variants": [
          {
            "Name": "add",
            "TypeFields": [
              {
                "Name": "claim_hash",
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              },
              {
                "Name": "ctype_hash",
                "TypeName": "CtypeHashOf<T>",
                "TypeId": 11
              },
              {
                "Name": "authorization",
                "TypeName": "Option<T::AccessControl>",
                "TypeId": 272
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a new attestation.",
              "",
              "The attester can optionally provide a reference to an existing",
              "delegation that will be saved along with the attestation itself in",
              "the form of an attested delegation.",
              "",
              "The referenced CType hash must already be present on chain.",
              "",
              "If an optional delegation id is provided, the dispatch origin must",
              "be the owner of the delegation. Otherwise, it could be any",
              "`DelegationEntityId`.",
              "",
              "Emits `AttestationCreated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Ctype, Attestations",
              "- Reads if delegation id is provided: Delegations, Roots,",
              "  DelegatedAttestations",
              "- Writes: Attestations, (DelegatedAttestations)",
              "# </weight>"
            ]
          },
          {
            "Name": "revoke",
            "TypeFields": [
              {
                "Name": "claim_hash",
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              },
              {
                "Name": "authorization",
                "TypeName": "Option<T::AccessControl>",
                "TypeId": 272
              }
            ],
            "Index": 1,
            "Docs": [
              "Revoke an existing attestation.",
              "",
              "The revoker must be either the creator of the attestation being",
              "revoked or an entity that in the delegation tree is an ancestor of",
              "the attester, i.e., it was either the delegator of the attester or",
              "an ancestor thereof.",
              "",
              "Emits `AttestationRevoked`.",
              "",
              "# <weight>",
              "Weight: O(P) where P is the number of steps required to verify that",
              "the dispatch Origin controls the delegation entitled to revoke the",
              "attestation. It is bounded by `max_parent_checks`.",
              "- Reads: [Origin Account], Attestations, delegation::Roots",
              "- Reads per delegation step P: delegation::Delegations",
              "- Writes: Attestations, DelegatedAttestations",
              "# </weight>"
            ]
          },
          {
            "Name": "remove",
            "TypeFields": [
              {
                "Name": "claim_hash",
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              },
              {
                "Name": "authorization",
                "TypeName": "Option<T::AccessControl>",
                "TypeId": 272
              }
            ],
            "Index": 2,
            "Docs": [
              "Remove an attestation.",
              "",
              "The origin must be either the creator of the attestation or an",
              "entity which is an ancestor of the attester in the delegation tree,",
              "i.e., it was either the delegator of the attester or an ancestor",
              "thereof.",
              "",
              "Emits `AttestationRemoved`.",
              "",
              "# <weight>",
              "Weight: O(P) where P is the number of steps required to verify that",
              "the dispatch Origin controls the delegation entitled to revoke the",
              "attestation. It is bounded by `max_parent_checks`.",
              "- Reads: [Origin Account], Attestations, delegation::Roots",
              "- Reads per delegation step P: delegation::Delegations",
              "- Writes: Attestations, DelegatedAttestations",
              "# </weight>"
            ]
          },
          {
            "Name": "reclaim_deposit",
            "TypeFields": [
              {
                "Name": "claim_hash",
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "Reclaim a storage deposit by removing an attestation",
              "",
              "Emits `DepositReclaimed`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Attestations, DelegatedAttestations",
              "- Writes: Attestations, DelegatedAttestations",
              "# </weight>"
            ]
          },
          {
            "Name": "change_deposit_owner",
            "TypeFields": [
              {
                "Name": "claim_hash",
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "Changes the deposit owner.",
              "",
              "The balance that is reserved by the current deposit owner will be",
              "freed and balance of the new deposit owner will get reserved.",
              "",
              "The subject of the call must be the attester who issues the",
              "attestation. The sender of the call will be the new deposit owner."
            ]
          },
          {
            "Name": "update_deposit",
            "TypeFields": [
              {
                "Name": "claim_hash",
                "TypeName": "ClaimHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Updates the deposit amount to the current deposit rate.",
              "",
              "The sender must be the deposit owner."
            ]
          }
        ],
        "Path": [
          "attestation",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "272": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 273
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 273
          }
        ],
        "TypeDef": "Variant"
      },
      "273": {
        "Variants": [
          {
            "Name": "Delegation",
            "TypeFields": [
              {
                "TypeName": "DelegationAc",
                "TypeId": 274
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "runtime_common",
          "authorization",
          "PalletAuthorize"
        ],
        "TypeParams": [
          {
            "Name": "DelegationAc",
            "TypeId": 274
          }
        ],
        "TypeDef": "Variant"
      },
      "274": {
        "TypeFields": [
          {
            "Name": "subject_node_id",
            "TypeName": "DelegationNodeIdOf<T>",
            "TypeId": 11
          },
          {
            "Name": "max_checks",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "delegation",
          "access_control",
          "DelegationAc"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 275
          }
        ],
        "TypeDef": "Composite"
      },
      "275": {
        "Path": [
          "spiritnet_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      },
      "276": {
        "Variants": [
          {
            "Name": "create_hierarchy",
            "TypeFields": [
              {
                "Name": "root_node_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "ctype_hash",
                "TypeName": "CtypeHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a new delegation root associated with a given CType hash.",
              "",
              "The new root will allow a new trust hierarchy to be created by",
              "adding children delegations to the root.",
              "",
              "There must be no delegation with the same ID stored on chain, while",
              "there must be already a CType with the given hash stored in the",
              "CType pallet.",
              "",
              "The dispatch origin must be split into",
              "* a submitter of type `AccountId` who is responsible for paying the",
              "  transaction fee and",
              "* a DID subject of type `DelegationEntityId` who creates, owns and",
              "  can revoke the delegation.",
              "",
              "Requires the sender of the transaction to have a reservable balance",
              "of at least `Deposit` many tokens.",
              "",
              "Emits `RootCreated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Roots, CTypes",
              "- Writes: Roots",
              "# </weight>"
            ]
          },
          {
            "Name": "add_delegation",
            "TypeFields": [
              {
                "Name": "delegation_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "parent_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "delegate",
                "TypeName": "DelegatorIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "permissions",
                "TypeName": "Permissions",
                "TypeId": 66
              },
              {
                "Name": "delegate_signature",
                "TypeName": "DelegateSignatureTypeOf<T>",
                "TypeId": 277
              }
            ],
            "Index": 1,
            "Docs": [
              "Create a new delegation node.",
              "",
              "The new delegation node represents a new trust hierarchy that",
              "considers the new node as its root. The owner of this node has full",
              "control over any of its direct and indirect descendants.",
              "",
              "For the creation to succeed, the delegatee must provide a valid",
              "signature over the (blake256) hash of the creation operation details",
              "which include (in order) delegation id, root node id, parent id, and",
              "permissions of the new node.",
              "",
              "There must be no delegation with the same id stored on chain.",
              "Furthermore, the referenced root and parent nodes must already be",
              "present on chain and contain the valid permissions and revocation",
              "status (i.e., not revoked).",
              "",
              "The dispatch origin must be split into",
              "* a submitter of type `AccountId` who is responsible for paying the",
              "  transaction fee and",
              "* a DID subject of type `DelegationEntityId` who creates, owns and",
              "  can revoke the delegation.",
              "",
              "Requires the sender of the transaction to have a reservable balance",
              "of at least `Deposit` many tokens.",
              "",
              "Emits `DelegationCreated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Roots, Delegations",
              "- Writes: Delegations",
              "# </weight>"
            ]
          },
          {
            "Name": "revoke_delegation",
            "TypeFields": [
              {
                "Name": "delegation_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "max_parent_checks",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "max_revocations",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 2,
            "Docs": [
              "Revoke a delegation node (potentially a root node) and all its",
              "children.",
              "",
              "Does not refund the delegation back to the deposit owner as the",
              "node is still stored on chain. Requires to additionally call",
              "`remove_delegation` to unreserve the deposit.",
              "",
              "Revoking a delegation node results in the trust hierarchy starting",
              "from the given node being revoked. Nevertheless, revocation starts",
              "from the leave nodes upwards, so if the operation ends prematurely",
              "because it runs out of gas, the delegation state would be consistent",
              "as no child would \"survive\" its parent. As a consequence, if the",
              "given node is revoked, the trust hierarchy with the node as root is",
              "to be considered revoked.",
              "",
              "The dispatch origin must be split into",
              "* a submitter of type `AccountId` who is responsible for paying the",
              "  transaction fee and",
              "* a DID subject of type `DelegationEntityId` who creates, owns and",
              "  can revoke the delegation.",
              "",
              "Emits C * `DelegationRevoked`.",
              "",
              "# <weight>",
              "Weight: O(C) where C is the number of children of the delegation",
              "node which is bounded by `max_children`.",
              "- Reads: [Origin Account], Roots, C * Delegations, C * Children.",
              "- Writes: Roots, C * Delegations",
              "# </weight>"
            ]
          },
          {
            "Name": "remove_delegation",
            "TypeFields": [
              {
                "Name": "delegation_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "max_removals",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove a delegation node (potentially a root node) and all its",
              "children.",
              "",
              "Returns the delegation deposit to the deposit owner for each",
              "removed DelegationNode by unreserving it.",
              "",
              "Removing a delegation node results in the trust hierarchy starting",
              "from the given node being removed. Nevertheless, removal starts",
              "from the leave nodes upwards, so if the operation ends prematurely",
              "because it runs out of gas, the delegation state would be consistent",
              "as no child would \"survive\" its parent. As a consequence, if the",
              "given node is removed, the trust hierarchy with the node as root is",
              "to be considered removed.",
              "",
              "The dispatch origin must be split into",
              "* a submitter of type `AccountId` who is responsible for paying the",
              "  transaction fee and",
              "* a DID subject of type `DelegationEntityId` who creates, owns and",
              "  can revoke the delegation.",
              "",
              "Emits C * `DelegationRemoved`.",
              "",
              "# <weight>",
              "Weight: O(C) where C is the number of children of the delegation",
              "node which is bounded by `max_children`.",
              "- Reads: [Origin Account], Roots, C * Delegations, C * Children.",
              "- Writes: Roots, 2 * C * Delegations",
              "# </weight>"
            ]
          },
          {
            "Name": "reclaim_deposit",
            "TypeFields": [
              {
                "Name": "delegation_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "max_removals",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Reclaim the deposit for a delegation node (potentially a root",
              "node), removing the node and all its children.",
              "",
              "Returns the delegation deposit to the deposit owner for each",
              "removed DelegationNode by unreserving it.",
              "",
              "Removing a delegation node results in the trust hierarchy starting",
              "from the given node being removed. Nevertheless, removal starts",
              "from the leave nodes upwards, so if the operation ends prematurely",
              "because it runs out of gas, the delegation state would be consistent",
              "as no child would \"survive\" its parent. As a consequence, if the",
              "given node is removed, the trust hierarchy with the node as root is",
              "to be considered removed.",
              "",
              "The dispatch origin must be signed by the delegation deposit owner.",
              "",
              "`DepositReclaimed`.",
              "",
              "# <weight>",
              "Weight: O(C) where C is the number of children of the delegation",
              "node which is bounded by `max_removals`.",
              "- Reads: [Origin Account], Roots, C * Delegations, C * Children.",
              "- Writes: Roots, 2 * C * Delegations",
              "# </weight>"
            ]
          },
          {
            "Name": "change_deposit_owner",
            "TypeFields": [
              {
                "Name": "delegation_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Changes the deposit owner.",
              "",
              "The balance that is reserved by the current deposit owner will be",
              "freed and balance of the new deposit owner will get reserved.",
              "",
              "The subject of the call must be the owner of the delegation node.",
              "The sender of the call will be the new deposit owner."
            ]
          },
          {
            "Name": "update_deposit",
            "TypeFields": [
              {
                "Name": "delegation_id",
                "TypeName": "DelegationNodeIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "Updates the deposit amount to the current deposit rate.",
              "",
              "The sender must be the deposit owner."
            ]
          }
        ],
        "Path": [
          "delegation",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "277": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 278
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 280
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 281
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidSignature"
        ],
        "TypeDef": "Variant"
      },
      "278": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 279
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "279": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "280": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 279
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "281": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 282
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "282": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "283": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "details",
                "TypeName": "Box<DidCreationDetailsOf<T>>",
                "TypeId": 284
              },
              {
                "Name": "signature",
                "TypeName": "DidSignature",
                "TypeId": 277
              }
            ],
            "Index": 0,
            "Docs": [
              "Store a new DID on chain, after verifying that the creation",
              "operation has been signed by the KILT account associated with the",
              "identifier of the DID being created and that a DID with the same",
              "identifier has not previously existed on (and then deleted from) the",
              "chain.",
              "",
              "There must be no DID information stored on chain under the same DID",
              "identifier.",
              "",
              "The new keys added with this operation are stored under the DID",
              "identifier along with the block number in which the operation was",
              "executed.",
              "",
              "The dispatch origin can be any KILT account with enough funds to",
              "execute the extrinsic and it does not have to be tied in any way to",
              "the KILT account identifying the DID subject.",
              "",
              "Emits `DidCreated`.",
              "",
              "# <weight>",
              "- The transaction's complexity is mainly dependent on the number of",
              "  new key agreement keys and the number of new service endpoints",
              "  included in the operation.",
              "---------",
              "Weight: O(K) + O(N) where K is the number of new key agreement",
              "keys bounded by `MaxNewKeyAgreementKeys`, while N is the number of",
              "new service endpoints bounded by `MaxNumberOfServicesPerDid`.",
              "- Reads: [Origin Account], Did, DidBlacklist",
              "- Writes: Did (with K new key agreement keys), ServiceEndpoints",
              "  (with N new service endpoints), DidEndpointsCount",
              "# </weight>"
            ]
          },
          {
            "Name": "set_authentication_key",
            "TypeFields": [
              {
                "Name": "new_key",
                "TypeName": "DidVerificationKey",
                "TypeId": 299
              }
            ],
            "Index": 1,
            "Docs": [
              "Update the DID authentication key.",
              "",
              "The old key is deleted from the set of public keys if it is",
              "not used in any other part of the DID. The new key is added to the",
              "set of public keys.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "set_delegation_key",
            "TypeFields": [
              {
                "Name": "new_key",
                "TypeName": "DidVerificationKey",
                "TypeId": 299
              }
            ],
            "Index": 2,
            "Docs": [
              "Set or update the DID delegation key.",
              "",
              "If an old key existed, it is deleted from the set of public keys if",
              "it is not used in any other part of the DID. The new key is added to",
              "the set of public keys.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "remove_delegation_key",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Remove the DID delegation key.",
              "",
              "The old key is deleted from the set of public keys if",
              "it is not used in any other part of the DID.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "set_attestation_key",
            "TypeFields": [
              {
                "Name": "new_key",
                "TypeName": "DidVerificationKey",
                "TypeId": 299
              }
            ],
            "Index": 4,
            "Docs": [
              "Set or update the DID attestation key.",
              "",
              "If an old key existed, it is deleted from the set of public keys if",
              "it is not used in any other part of the DID. The new key is added to",
              "the set of public keys.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "remove_attestation_key",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Remove the DID attestation key.",
              "",
              "The old key is deleted from the set of public keys if",
              "it is not used in any other part of the DID.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "add_key_agreement_key",
            "TypeFields": [
              {
                "Name": "new_key",
                "TypeName": "DidEncryptionKey",
                "TypeId": 295
              }
            ],
            "Index": 6,
            "Docs": [
              "Add a single new key agreement key to the DID.",
              "",
              "The new key is added to the set of public keys.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "remove_key_agreement_key",
            "TypeFields": [
              {
                "Name": "key_id",
                "TypeName": "KeyIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a DID key agreement key from both its set of key agreement",
              "keys and as well as its public keys.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "add_service_endpoint",
            "TypeFields": [
              {
                "Name": "service_endpoint",
                "TypeName": "DidEndpoint<T>",
                "TypeId": 286
              }
            ],
            "Index": 8,
            "Docs": [
              "Add a new service endpoint under the given DID.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did, ServiceEndpoints, DidEndpointsCount",
              "- Writes: Did, ServiceEndpoints, DidEndpointsCount",
              "# </weight>"
            ]
          },
          {
            "Name": "remove_service_endpoint",
            "TypeFields": [
              {
                "Name": "service_id",
                "TypeName": "ServiceEndpointId<T>",
                "TypeId": 287
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove the service with the provided ID from the DID.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidUpdated`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], ServiceEndpoints, DidEndpointsCount",
              "- Writes: Did, ServiceEndpoints, DidEndpointsCount",
              "# </weight>"
            ]
          },
          {
            "Name": "delete",
            "TypeFields": [
              {
                "Name": "endpoints_to_remove",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 10,
            "Docs": [
              "Delete a DID from the chain and all information associated with it,",
              "after verifying that the delete operation has been signed by the DID",
              "subject using the authentication key currently stored on chain.",
              "",
              "The referenced DID identifier must be present on chain before the",
              "delete operation is evaluated.",
              "",
              "After it is deleted, a DID with the same identifier cannot be",
              "re-created ever again.",
              "",
              "As the result of the deletion, all traces of the DID are removed",
              "from the storage, which results in the invalidation of all",
              "attestations issued by the DID subject.",
              "",
              "The dispatch origin must be a DID origin proxied via the",
              "`submit_did_call` extrinsic.",
              "",
              "Emits `DidDeleted`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Kills: Did entry associated to the DID identifier",
              "# </weight>"
            ]
          },
          {
            "Name": "reclaim_deposit",
            "TypeFields": [
              {
                "Name": "did_subject",
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              },
              {
                "Name": "endpoints_to_remove",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 11,
            "Docs": [
              "Reclaim a deposit for a DID. This will delete the DID and all",
              "information associated with it, after verifying that the caller is",
              "the owner of the deposit.",
              "",
              "The referenced DID identifier must be present on chain before the",
              "delete operation is evaluated.",
              "",
              "After it is deleted, a DID with the same identifier cannot be",
              "re-created ever again.",
              "",
              "As the result of the deletion, all traces of the DID are removed",
              "from the storage, which results in the invalidation of all",
              "attestations issued by the DID subject.",
              "",
              "Emits `DidDeleted`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: [Origin Account], Did",
              "- Kills: Did entry associated to the DID identifier",
              "# </weight>"
            ]
          },
          {
            "Name": "submit_did_call",
            "TypeFields": [
              {
                "Name": "did_call",
                "TypeName": "Box<DidAuthorizedCallOperationOf<T>>",
                "TypeId": 304
              },
              {
                "Name": "signature",
                "TypeName": "DidSignature",
                "TypeId": 277
              }
            ],
            "Index": 12,
            "Docs": [
              "Proxy a dispatchable call of another runtime extrinsic that",
              "supports a DID origin.",
              "",
              "The referenced DID identifier must be present on chain before the",
              "operation is dispatched.",
              "",
              "A call submitted through this extrinsic must be signed with the",
              "right DID key, depending on the call. This information is provided",
              "by the `DidAuthorizedCallOperation` parameter, which specifies the",
              "DID subject acting as the origin of the call, the DID's tx counter",
              "(nonce), the dispatchable to call in case signature verification",
              "succeeds, the type of DID key to use to verify the operation",
              "signature, and the block number the operation was targeting for",
              "inclusion, when it was created and signed.",
              "",
              "In case the signature is incorrect, the nonce is not valid, the",
              "required key is not present for the specified DID, or the block",
              "specified is too old the verification fails and the call is not",
              "dispatched. Otherwise, the call is properly dispatched with a",
              "`DidOrigin` origin indicating the DID subject.",
              "",
              "A successful dispatch operation results in the tx counter associated",
              "with the given DID to be incremented, to mitigate replay attacks.",
              "",
              "The dispatch origin can be any KILT account with enough funds to",
              "execute the extrinsic and it does not have to be tied in any way to",
              "the KILT account identifying the DID subject.",
              "",
              "Emits `DidCallDispatched`.",
              "",
              "# <weight>",
              "Weight: O(1) + weight of the dispatched call",
              "- Reads: [Origin Account], Did",
              "- Writes: Did",
              "# </weight>"
            ]
          },
          {
            "Name": "change_deposit_owner",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Changes the deposit owner.",
              "",
              "The balance that is reserved by the current deposit owner will be",
              "freed and balance of the new deposit owner will get reserved.",
              "",
              "The subject of the call must be the did owner.",
              "The sender of the call will be the new deposit owner."
            ]
          },
          {
            "Name": "update_deposit",
            "TypeFields": [
              {
                "Name": "did",
                "TypeName": "DidIdentifierOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "Updates the deposit amount to the current deposit rate.",
              "",
              "The sender must be the deposit owner."
            ]
          }
        ],
        "Path": [
          "did",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "284": {
        "TypeFields": [
          {
            "Name": "did",
            "TypeName": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "submitter",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "new_key_agreement_keys",
            "TypeName": "DidNewKeyAgreementKeySet<MaxNewKeyAgreementKeys>",
            "TypeId": 294
          },
          {
            "Name": "new_attestation_key",
            "TypeName": "Option<DidVerificationKey>",
            "TypeId": 298
          },
          {
            "Name": "new_delegation_key",
            "TypeName": "Option<DidVerificationKey>",
            "TypeId": 298
          },
          {
            "Name": "new_service_details",
            "TypeName": "Vec<DidEndpoint>",
            "TypeId": 303
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidCreationDetails"
        ],
        "TypeParams": [
          {
            "Name": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxNewKeyAgreementKeys",
            "TypeId": 285
          },
          {
            "Name": "DidEndpoint",
            "TypeId": 286
          }
        ],
        "TypeDef": "Composite"
      },
      "285": {
        "Path": [
          "runtime_common",
          "constants",
          "did",
          "MaxNewKeyAgreementKeys"
        ],
        "TypeDef": "Composite"
      },
      "286": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ServiceEndpointId<T>",
            "TypeId": 287
          },
          {
            "Name": "service_types",
            "TypeName": "ServiceEndpointTypeEntries<T>",
            "TypeId": 288
          },
          {
            "Name": "urls",
            "TypeName": "ServiceEndpointUrlEntries<T>",
            "TypeId": 291
          }
        ],
        "Path": [
          "did",
          "service_endpoints",
          "DidEndpoint"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "287": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "288": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 290
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 289
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "289": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "290": {
        "TypeId": 289,
        "TypeDef": "Sequence"
      },
      "291": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 293
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 292
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "292": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "293": {
        "TypeId": 292,
        "TypeDef": "Sequence"
      },
      "294": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 296
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 295
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "295": {
        "Variants": [
          {
            "Name": "X25519",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidEncryptionKey"
        ],
        "TypeDef": "Variant"
      },
      "296": {
        "TypeFields": [
          {
            "TypeId": 297
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 295
          }
        ],
        "TypeDef": "Composite"
      },
      "297": {
        "TypeId": 295,
        "TypeDef": "Sequence"
      },
      "298": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 299
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 299
          }
        ],
        "TypeDef": "Variant"
      },
      "299": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Public",
                "TypeId": 300
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Public",
                "TypeId": 202
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Public",
                "TypeId": 301
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidVerificationKey"
        ],
        "TypeDef": "Variant"
      },
      "300": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "301": {
        "TypeFields": [
          {
            "TypeName": "[u8; 33]",
            "TypeId": 302
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "302": {
        "Length": 33,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "303": {
        "TypeId": 286,
        "TypeDef": "Sequence"
      },
      "304": {
        "TypeFields": [
          {
            "Name": "did",
            "TypeName": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "tx_counter",
            "TypeName": "TxCounter",
            "TypeId": 4
          },
          {
            "Name": "call",
            "TypeName": "DidCallable",
            "TypeId": 237
          },
          {
            "Name": "block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "submitter",
            "TypeName": "AccountId",
            "TypeId": 0
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidAuthorizedCallOperation"
        ],
        "TypeParams": [
          {
            "Name": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "DidCallable",
            "TypeId": 237
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "TxCounter",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "305": {
        "Variants": [
          {
            "Name": "associate_account",
            "TypeFields": [
              {
                "Name": "req",
                "TypeName": "AssociateAccountRequest",
                "TypeId": 306
              },
              {
                "Name": "expiration",
                "TypeName": "<T as frame_system::Config>::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Associate the given account to the DID that authorized this call.",
              "",
              "The account has to sign the DID and a blocknumber after which the",
              "signature expires in order to authorize the association.",
              "",
              "The signature will be checked against the scale encoded tuple of the",
              "method specific id of the did identifier and the block number after",
              "which the signature should be regarded invalid.",
              "",
              "Emits `AssociationEstablished` and, optionally, `AssociationRemoved`",
              "if there was a previous association for the account.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
              "- Writes: ConnectedDids + ConnectedAccounts",
              "# </weight>"
            ]
          },
          {
            "Name": "associate_sender",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Associate the sender of the call to the DID that authorized this",
              "call.",
              "",
              "Emits `AssociationEstablished` and, optionally, `AssociationRemoved`",
              "if there was a previous association for the account.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
              "- Writes: ConnectedDids + ConnectedAccounts",
              "# </weight>"
            ]
          },
          {
            "Name": "remove_sender_association",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Remove the association of the sender account. This call doesn't",
              "require the authorization of the DID, but requires a signed origin.",
              "",
              "Emits `AssociationRemoved`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
              "- Writes: ConnectedDids + ConnectedAccounts",
              "# </weight>"
            ]
          },
          {
            "Name": "remove_account_association",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "LinkableAccountId",
                "TypeId": 69
              }
            ],
            "Index": 3,
            "Docs": [
              "Remove the association of the provided account ID. This call doesn't",
              "require the authorization of the account ID, but the associated DID",
              "needs to match the DID that authorized this call.",
              "",
              "Emits `AssociationRemoved`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
              "- Writes: ConnectedDids + ConnectedAccounts",
              "# </weight>"
            ]
          },
          {
            "Name": "reclaim_deposit",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "LinkableAccountId",
                "TypeId": 69
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove the association of the provided account. This call can only",
              "be called from the deposit owner. The reserved deposit will be",
              "freed.",
              "",
              "Emits `AssociationRemoved`.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: ConnectedDids",
              "- Writes: ConnectedDids",
              "# </weight>"
            ]
          },
          {
            "Name": "change_deposit_owner",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "LinkableAccountId",
                "TypeId": 69
              }
            ],
            "Index": 5,
            "Docs": [
              "Changes the deposit owner.",
              "",
              "The balance that is reserved by the current deposit owner will be",
              "freed and balance of the new deposit owner will get reserved.",
              "",
              "The subject of the call must be linked to the account.",
              "The sender of the call will be the new deposit owner."
            ]
          },
          {
            "Name": "update_deposit",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "LinkableAccountId",
                "TypeId": 69
              }
            ],
            "Index": 6,
            "Docs": [
              "Updates the deposit amount to the current deposit rate.",
              "",
              "The sender must be the deposit owner."
            ]
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "306": {
        "Variants": [
          {
            "Name": "Polkadot",
            "TypeFields": [
              {
                "TypeName": "AccountId32",
                "TypeId": 0
              },
              {
                "TypeName": "MultiSignature",
                "TypeId": 307
              }
            ],
            "Index": 0
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "AccountId20",
                "TypeId": 70
              },
              {
                "TypeName": "EthereumSignature",
                "TypeId": 308
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "associate_account_request",
          "AssociateAccountRequest"
        ],
        "TypeDef": "Variant"
      },
      "307": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 278
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 280
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 281
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "308": {
        "TypeFields": [
          {
            "TypeName": "ecdsa::Signature",
            "TypeId": 281
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "account",
          "EthereumSignature"
        ],
        "TypeDef": "Composite"
      },
      "309": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": [
              {
                "Name": "name",
                "TypeName": "Web3NameInput<T>",
                "TypeId": 74
              }
            ],
            "Index": 0,
            "Docs": [
              "Assign the specified name to the owner as specified in the",
              "origin.",
              "",
              "The name must not have already been claimed by someone else and the",
              "owner must not already own another name.",
              "",
              "Emits `Web3NameClaimed` if the operation is carried out",
              "successfully.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: Names, Owner, Banned storage entries + available currency",
              "  check + origin check",
              "- Writes: Names, Owner storage entries + currency deposit reserve",
              "# </weight>"
            ]
          },
          {
            "Name": "release_by_owner",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Release the provided name from its owner.",
              "",
              "The origin must be the owner of the specified name.",
              "",
              "Emits `Web3NameReleased` if the operation is carried out",
              "successfully.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: Names storage entry + origin check",
              "- Writes: Names, Owner storage entries + currency deposit release",
              "# </weight>"
            ]
          },
          {
            "Name": "reclaim_deposit",
            "TypeFields": [
              {
                "Name": "name",
                "TypeName": "Web3NameInput<T>",
                "TypeId": 74
              }
            ],
            "Index": 2,
            "Docs": [
              "Release the provided name from its owner.",
              "",
              "The origin must be the account that paid for the name's deposit.",
              "",
              "Emits `Web3NameReleased` if the operation is carried out",
              "successfully.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: Owner storage entry + origin check",
              "- Writes: Names, Owner storage entries + currency deposit release",
              "# </weight>"
            ]
          },
          {
            "Name": "ban",
            "TypeFields": [
              {
                "Name": "name",
                "TypeName": "Web3NameInput<T>",
                "TypeId": 74
              }
            ],
            "Index": 3,
            "Docs": [
              "Ban a name.",
              "",
              "A banned name cannot be claimed by anyone. The name's deposit",
              "is returned to the original payer.",
              "",
              "The origin must be the ban origin.",
              "",
              "Emits `Web3NameBanned` if the operation is carried out",
              "successfully.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: Banned, Owner, Names storage entries + origin check",
              "- Writes: Names, Owner, Banned storage entries + currency deposit",
              "  release",
              "# </weight>"
            ]
          },
          {
            "Name": "unban",
            "TypeFields": [
              {
                "Name": "name",
                "TypeName": "Web3NameInput<T>",
                "TypeId": 74
              }
            ],
            "Index": 4,
            "Docs": [
              "Unban a name.",
              "",
              "Make a name claimable again.",
              "",
              "The origin must be the ban origin.",
              "",
              "Emits `Web3NameUnbanned` if the operation is carried out",
              "successfully.",
              "",
              "# <weight>",
              "Weight: O(1)",
              "- Reads: Banned storage entry + origin check",
              "- Writes: Banned storage entry deposit release",
              "# </weight>"
            ]
          },
          {
            "Name": "change_deposit_owner",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Changes the deposit owner.",
              "",
              "The balance that is reserved by the current deposit owner will be",
              "freed and balance of the new deposit owner will get reserved.",
              "",
              "The subject of the call must be the owner of the web3name.",
              "The sender of the call will be the new deposit owner."
            ]
          },
          {
            "Name": "update_deposit",
            "TypeFields": [
              {
                "Name": "name_input",
                "TypeName": "Web3NameInput<T>",
                "TypeId": 74
              }
            ],
            "Index": 6,
            "Docs": [
              "Updates the deposit amount to the current deposit rate.",
              "",
              "The sender must be the deposit owner."
            ]
          }
        ],
        "Path": [
          "pallet_web3_names",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "310": {
        "Variants": [
          {
            "Name": "add",
            "TypeFields": [
              {
                "Name": "credential",
                "TypeName": "Box<InputCredentialOf<T>>",
                "TypeId": 311
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a new public credential on chain.",
              "",
              "This function fails if a credential with the same identifier already",
              "exists for the specified subject.",
              "",
              "Emits `CredentialStored`."
            ]
          },
          {
            "Name": "revoke",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "authorization",
                "TypeName": "Option<T::AccessControl>",
                "TypeId": 272
              }
            ],
            "Index": 1,
            "Docs": [
              "Revokes a public credential.",
              "",
              "If a credential was already revoked, this function does not fail but",
              "simply results in a noop.",
              "",
              "The dispatch origin must be authorized to revoke the credential.",
              "",
              "Emits `CredentialRevoked`."
            ]
          },
          {
            "Name": "unrevoke",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "authorization",
                "TypeName": "Option<T::AccessControl>",
                "TypeId": 272
              }
            ],
            "Index": 2,
            "Docs": [
              "Unrevokes a public credential.",
              "",
              "If a credential was not revoked, this function does not fail but",
              "simply results in a noop.",
              "",
              "The dispatch origin must be authorized to unrevoke the",
              "credential.",
              "",
              "Emits `CredentialUnrevoked`."
            ]
          },
          {
            "Name": "remove",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11
              },
              {
                "Name": "authorization",
                "TypeName": "Option<T::AccessControl>",
                "TypeId": 272
              }
            ],
            "Index": 3,
            "Docs": [
              "Removes the information pertaining a public credential from the",
              "chain.",
              "",
              "The removal of the credential does not delete it entirely from the",
              "blockchain history, but only its link *from* the blockchain state",
              "*to* the blockchain history is removed.",
              "",
              "Clients parsing public credentials should interpret",
              "the lack of such a link as the fact that the credential has been",
              "removed by its attester some time in the past.",
              "",
              "This function fails if a credential already exists for the specified",
              "subject.",
              "",
              "The dispatch origin must be authorized to remove the credential.",
              "",
              "Emits `CredentialRemoved`."
            ]
          },
          {
            "Name": "reclaim_deposit",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "Removes the information pertaining a public credential from the",
              "chain and returns the deposit to its payer.",
              "",
              "The removal of the credential does not delete it entirely from the",
              "blockchain history, but only its link *from* the blockchain state",
              "*to* the blockchain history is removed.",
              "",
              "Clients parsing public credentials should interpret",
              "the lack of such a link as the fact that the credential has been",
              "removed by its attester some time in the past.",
              "",
              "This function fails if a credential already exists for the specified",
              "subject.",
              "",
              "The dispatch origin must be the owner of the deposit, hence not the",
              "credential's attester.",
              "",
              "Emits `CredentialRemoved`."
            ]
          },
          {
            "Name": "change_deposit_owner",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Changes the deposit owner.",
              "",
              "The balance that is reserved by the current deposit owner will be",
              "freed and balance of the new deposit owner will get reserved.",
              "",
              "The subject of the call must be the owner of the credential.",
              "The sender of the call will be the new deposit owner."
            ]
          },
          {
            "Name": "update_deposit",
            "TypeFields": [
              {
                "Name": "credential_id",
                "TypeName": "CredentialIdOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "Updates the deposit amount to the current deposit rate.",
              "",
              "The sender must be the deposit owner."
            ]
          }
        ],
        "Path": [
          "public_credentials",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "311": {
        "TypeFields": [
          {
            "Name": "ctype_hash",
            "TypeName": "CtypeHash",
            "TypeId": 11
          },
          {
            "Name": "subject",
            "TypeName": "SubjectIdentifier",
            "TypeId": 312
          },
          {
            "Name": "claims",
            "TypeName": "Claims",
            "TypeId": 313
          },
          {
            "Name": "authorization",
            "TypeName": "Option<AccessControl>",
            "TypeId": 272
          }
        ],
        "Path": [
          "public_credentials",
          "credentials",
          "Credential"
        ],
        "TypeParams": [
          {
            "Name": "CtypeHash",
            "TypeId": 11
          },
          {
            "Name": "SubjectIdentifier",
            "TypeId": 312
          },
          {
            "Name": "Claims",
            "TypeId": 313
          },
          {
            "Name": "AccessControl",
            "TypeId": 273
          }
        ],
        "TypeDef": "Composite"
      },
      "312": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "313": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "314": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 315
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 2,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
              "version and name should be verified on upgrade. Since the authorization only has a hash,",
              "it cannot actually perform the verification.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "enact_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
              "",
              "If the authorization required a version check, this call will ensure the spec name",
              "remains unchanged and that the spec version has increased.",
              "",
              "Note that this function will not apply the new `code`, but only attempt to schedule the",
              "upgrade with the Relay Chain.",
              "",
              "All origins are allowed."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "315": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 316
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 318
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 320
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 322
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "316": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 317
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 7
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 11
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "317": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "318": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 319
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "319": {
        "TypeFields": [
          {
            "TypeId": 170
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "TypeId": 321,
        "TypeDef": "Sequence"
      },
      "321": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 7
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "322": {
        "TypeFields": [
          {
            "TypeId": 325
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 106
          },
          {
            "Name": "V",
            "TypeId": 323
          }
        ],
        "TypeDef": "Composite"
      },
      "323": {
        "TypeId": 324,
        "TypeDef": "Sequence"
      },
      "324": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 7
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "325": {
        "TypeId": 326,
        "TypeDef": "Sequence"
      },
      "326": {
        "TypeIds": [
          106,
          323
        ],
        "TypeDef": "Tuple"
      },
      "327": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Services a single overweight XCM.",
              "",
              "- `origin`: Must pass `ExecuteOverweightOrigin`.",
              "- `index`: The index of the overweight XCM to service",
              "- `weight_limit`: The amount of weight that XCM execution may take.",
              "",
              "Errors:",
              "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
              "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
              "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
              "",
              "Events:",
              "- `OverweightServiced`: On success."
            ]
          },
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
              "suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
              "messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
              "message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          },
          {
            "Name": "update_threshold_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 6,
            "Docs": [
              "Overwrites the amount of remaining weight under which we stop processing messages.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.threshold_weight`"
            ]
          },
          {
            "Name": "update_weight_restrict_decay",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 7,
            "Docs": [
              "Overwrites the speed to which the available weight approaches the maximum weight.",
              "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
            ]
          },
          {
            "Name": "update_xcmp_max_individual_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 8,
            "Docs": [
              "Overwrite the maximum amount of weight any individual message may consume.",
              "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "328": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 329
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 145
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 145
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                "TypeId": 341
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than the",
              "maximum amount of weight that the message could take to be executed, then no execution",
              "attempt will be made.",
              "",
              "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
              "to completion; only that *some* of it was executed."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 109
              },
              {
                "Name": "xcm_version",
                "TypeName": "XcmVersion",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 240
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be Root.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 145
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 144
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 159
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 145
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 144
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "329": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 330
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 118
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "330": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 331
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "331": {
        "TypeId": 332,
        "TypeDef": "Sequence"
      },
      "332": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 333
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 146
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 146
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 138
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 139
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 151
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 148
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 340
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 330
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 330
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 146
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "333": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 334
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 7
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "334": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 335
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 335
          }
        ],
        "TypeDef": "Variant"
      },
      "335": {
        "TypeIds": [
          7,
          336
        ],
        "TypeDef": "Tuple"
      },
      "336": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 4
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 4
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "337": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 338
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "338": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 149
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 339
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "339": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "340": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "341": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 342
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 346
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "342": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 343
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "343": {
        "TypeId": 344,
        "TypeDef": "Sequence"
      },
      "344": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 333
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 146
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 146
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 138
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 345
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 151
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 146
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 330
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 150
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 337
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 148
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 340
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 342
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 342
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 146
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 150
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "345": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "346": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 347
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "347": {
        "TypeId": 348,
        "TypeDef": "Sequence"
      },
      "348": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 128
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 138
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 345
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 110
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 141
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 144
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 346
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 346
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 121
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 121
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 129
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 135
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 112
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 112
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 140
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 114
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 110
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 118
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 123
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 42
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 144
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 137
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "349": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Service a single overweight message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "350": {
        "TypeId": 235,
        "TypeDef": "Sequence"
      },
      "351": {
        "TypeIds": [
          352,
          6
        ],
        "TypeDef": "Tuple"
      },
      "352": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 205
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "353": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 354
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 42
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 236
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "354": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 236
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 37
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 355
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 236
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "355": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "356": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 357
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 360
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 361
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 239
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 360
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 361
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "357": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 359
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 358
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "358": {
        "TypeIds": [
          7,
          38
        ],
        "TypeDef": "Tuple"
      },
      "359": {
        "TypeId": 358,
        "TypeDef": "Sequence"
      },
      "360": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "361": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "362": {
        "TypeIds": [
          236,
          37
        ],
        "TypeDef": "Tuple"
      },
      "363": {
        "TypeIds": [
          4,
          352
        ],
        "TypeDef": "Tuple"
      },
      "364": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "365": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 163
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "366": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 7
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 7
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 205
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 205
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "367": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "368": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 163
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "369": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "370": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 205
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "372": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "373": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 209
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 7
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "374": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "375": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "376": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 127
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "378": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "379": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 380
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 260
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "380": {
        "TypeId": 260,
        "TypeDef": "Sequence"
      },
      "381": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_vesting",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "382": {
        "Variants": [
          {
            "Name": "NotVesting",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account given is not vesting."
            ]
          },
          {
            "Name": "AtMaxVestingSchedules",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "Name": "ScheduleIndexOutOfBounds",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "Name": "InvalidScheduleParams",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the vesting pallet."
        ]
      },
      "383": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 386
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 384
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "384": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 385
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 385
          }
        ],
        "TypeDef": "Variant"
      },
      "385": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 52
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 236
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 262
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 251
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 236
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 251
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "386": {
        "TypeId": 384,
        "TypeDef": "Sequence"
      },
      "387": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "388": {
        "TypeIds": [
          389,
          6
        ],
        "TypeDef": "Tuple"
      },
      "389": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 391
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 390
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "390": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 54
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 54
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "TypeId": 390,
        "TypeDef": "Sequence"
      },
      "392": {
        "TypeIds": [
          393,
          6
        ],
        "TypeDef": "Tuple"
      },
      "393": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 395
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 394
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "394": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 11
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 11
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "395": {
        "TypeId": 394,
        "TypeDef": "Sequence"
      },
      "396": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "397": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 398
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 399
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 240
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "398": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "399": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 398
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 398
          }
        ],
        "TypeDef": "Variant"
      },
      "400": {
        "TypeIds": [
          11,
          7
        ],
        "TypeDef": "Tuple"
      },
      "401": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "402": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "403": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 205
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "404": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "405": {
        "TypeFields": [
          {
            "Name": "reason",
            "TypeName": "Hash",
            "TypeId": 11
          },
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "finder",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "closes",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 406
          },
          {
            "Name": "tips",
            "TypeName": "Vec<(AccountId, Balance)>",
            "TypeId": 407
          },
          {
            "Name": "finders_fee",
            "TypeName": "bool",
            "TypeId": 42
          }
        ],
        "Path": [
          "pallet_tips",
          "OpenTip"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Hash",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "406": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "407": {
        "TypeId": 398,
        "TypeDef": "Sequence"
      },
      "408": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "409": {
        "Variants": [
          {
            "Name": "ReasonTooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The reason given is just too big."
            ]
          },
          {
            "Name": "AlreadyKnown",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The tip was already found/started."
            ]
          },
          {
            "Name": "UnknownTip",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The tip hash is unknown."
            ]
          },
          {
            "Name": "NotFinder",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The account attempting to retract the tip is not the finder of the tip."
            ]
          },
          {
            "Name": "StillOpen",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The tip cannot be claimed/closed because there are not enough tippers yet."
            ]
          },
          {
            "Name": "Premature",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The tip cannot be claimed/closed because it's still in the countdown period."
            ]
          }
        ],
        "Path": [
          "pallet_tips",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "410": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "411": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 60
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 412
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "412": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 205
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "414": {
        "TypeFields": [
          {
            "Name": "creator",
            "TypeName": "Creator",
            "TypeId": 0
          },
          {
            "Name": "created_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "ctype",
          "ctype_entry",
          "CtypeEntry"
        ],
        "TypeParams": [
          {
            "Name": "Creator",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "415": {
        "Variants": [
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There is no CType with the given hash."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The CType already exists."
            ]
          },
          {
            "Name": "UnableToPayFees",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The paying account was unable to pay the fees for creating a ctype."
            ]
          }
        ],
        "Path": [
          "ctype",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "416": {
        "TypeFields": [
          {
            "Name": "ctype_hash",
            "TypeName": "CtypeHash",
            "TypeId": 11
          },
          {
            "Name": "attester",
            "TypeName": "AttesterId",
            "TypeId": 0
          },
          {
            "Name": "authorization_id",
            "TypeName": "Option<AuthorizationId>",
            "TypeId": 63
          },
          {
            "Name": "revoked",
            "TypeName": "bool",
            "TypeId": 42
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 417
          }
        ],
        "Path": [
          "attestation",
          "attestations",
          "AttestationDetails"
        ],
        "TypeParams": [
          {
            "Name": "CtypeHash",
            "TypeId": 11
          },
          {
            "Name": "AttesterId",
            "TypeId": 0
          },
          {
            "Name": "AuthorizationId",
            "TypeId": 64
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "417": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "Account",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "kilt_support",
          "deposit",
          "Deposit"
        ],
        "TypeParams": [
          {
            "Name": "Account",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "418": {
        "TypeIds": [
          64,
          11
        ],
        "TypeDef": "Tuple"
      },
      "419": {
        "Variants": [
          {
            "Name": "AlreadyAttested",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There is already an attestation with the same claim hash stored on",
              "chain."
            ]
          },
          {
            "Name": "AlreadyRevoked",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The attestation has already been revoked."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "No attestation on chain matching the claim hash."
            ]
          },
          {
            "Name": "CTypeMismatch",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The attestation CType does not match the CType specified in the",
              "delegation hierarchy root."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The call origin is not authorized to change the attestation."
            ]
          },
          {
            "Name": "MaxDelegatedAttestationsExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The maximum number of delegated attestations has already been",
              "reached for the corresponding delegation id such that another one",
              "cannot be added."
            ]
          }
        ],
        "Path": [
          "attestation",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "420": {
        "TypeFields": [
          {
            "Name": "hierarchy_root_id",
            "TypeName": "DelegationNodeId",
            "TypeId": 11
          },
          {
            "Name": "parent",
            "TypeName": "Option<DelegationNodeId>",
            "TypeId": 241
          },
          {
            "Name": "children",
            "TypeName": "BoundedBTreeSet<DelegationNodeId, MaxChildren>",
            "TypeId": 423
          },
          {
            "Name": "details",
            "TypeName": "DelegationDetails",
            "TypeId": 422
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 417
          }
        ],
        "Path": [
          "delegation",
          "delegation_hierarchy",
          "DelegationNode"
        ],
        "TypeParams": [
          {
            "Name": "DelegationNodeId",
            "TypeId": 11
          },
          {
            "Name": "MaxChildren",
            "TypeId": 421
          },
          {
            "Name": "DelegationDetails",
            "TypeId": 422
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "421": {
        "Path": [
          "runtime_common",
          "constants",
          "delegation",
          "MaxChildren"
        ],
        "TypeDef": "Composite"
      },
      "422": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "DelegatorId",
            "TypeId": 0
          },
          {
            "Name": "revoked",
            "TypeName": "bool",
            "TypeId": 42
          },
          {
            "Name": "permissions",
            "TypeName": "Permissions",
            "TypeId": 66
          }
        ],
        "Path": [
          "delegation",
          "delegation_hierarchy",
          "DelegationDetails"
        ],
        "TypeParams": [
          {
            "Name": "DelegatorId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "423": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 424
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "424": {
        "TypeFields": [
          {
            "TypeId": 163
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "425": {
        "TypeFields": [
          {
            "Name": "ctype_hash",
            "TypeName": "CtypeHash",
            "TypeId": 11
          }
        ],
        "Path": [
          "delegation",
          "delegation_hierarchy",
          "DelegationHierarchyDetails"
        ],
        "TypeParams": [
          {
            "Name": "CtypeHash",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "426": {
        "Variants": [
          {
            "Name": "DelegationAlreadyExists",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There is already a delegation node with the same ID stored on chain."
            ]
          },
          {
            "Name": "InvalidDelegateSignature",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The delegate's signature for the delegation creation operation is",
              "invalid."
            ]
          },
          {
            "Name": "DelegationNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "No delegation with the given ID stored on chain."
            ]
          },
          {
            "Name": "DelegateNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No delegate with the given ID stored on chain."
            ]
          },
          {
            "Name": "HierarchyAlreadyExists",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is already a hierarchy with the same ID stored on chain."
            ]
          },
          {
            "Name": "HierarchyNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No hierarchy with the given ID stored on chain."
            ]
          },
          {
            "Name": "MaxSearchDepthReached",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Max number of nodes checked without verifying the given condition."
            ]
          },
          {
            "Name": "NotOwnerOfParentDelegation",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The delegation creator is not allowed to write the delegation",
              "because they are not the owner of the delegation parent node."
            ]
          },
          {
            "Name": "NotOwnerOfDelegationHierarchy",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The delegation creator is not allowed to write the delegation",
              "because they are not the owner of the delegation root node."
            ]
          },
          {
            "Name": "ParentDelegationNotFound",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No parent delegation with the given ID stored on chain."
            ]
          },
          {
            "Name": "ParentDelegationRevoked",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The parent delegation has previously been revoked."
            ]
          },
          {
            "Name": "UnauthorizedRevocation",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The delegation revoker is not allowed to revoke the delegation."
            ]
          },
          {
            "Name": "UnauthorizedRemoval",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The call origin is not authorized to remove the delegation."
            ]
          },
          {
            "Name": "UnauthorizedDelegation",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The delegation creator is not allowed to create the delegation."
            ]
          },
          {
            "Name": "AccessDenied",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The operation wasn't allowed because of insufficient rights."
            ]
          },
          {
            "Name": "ExceededRevocationBounds",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Max number of revocations for delegation nodes has been reached for",
              "the operation."
            ]
          },
          {
            "Name": "ExceededRemovalBounds",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Max number of removals for delegation nodes has been reached for the",
              "operation."
            ]
          },
          {
            "Name": "MaxRevocationsTooLarge",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The max number of revocation exceeds the limit for the pallet."
            ]
          },
          {
            "Name": "MaxRemovalsTooLarge",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The max number of removals exceeds the limit for the pallet."
            ]
          },
          {
            "Name": "MaxParentChecksTooLarge",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The max number of parent checks exceeds the limit for the pallet."
            ]
          },
          {
            "Name": "Internal",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "An error that is not supposed to take place, yet it happened."
            ]
          },
          {
            "Name": "MaxChildrenExceeded",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The max number of all children has been reached for the",
              "corresponding delegation node."
            ]
          }
        ],
        "Path": [
          "delegation",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "427": {
        "TypeFields": [
          {
            "Name": "authentication_key",
            "TypeName": "KeyIdOf<T>",
            "TypeId": 11
          },
          {
            "Name": "key_agreement_keys",
            "TypeName": "DidKeyAgreementKeySetOf<T>",
            "TypeId": 428
          },
          {
            "Name": "delegation_key",
            "TypeName": "Option<KeyIdOf<T>>",
            "TypeId": 241
          },
          {
            "Name": "attestation_key",
            "TypeName": "Option<KeyIdOf<T>>",
            "TypeId": 241
          },
          {
            "Name": "public_keys",
            "TypeName": "DidPublicKeyMapOf<T>",
            "TypeId": 429
          },
          {
            "Name": "last_tx_counter",
            "TypeName": "u64",
            "TypeId": 4
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit<AccountIdOf<T>, BalanceOf<T>>",
            "TypeId": 417
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidDetails"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "428": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 424
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "429": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 432
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 11
          },
          {
            "Name": "V",
            "TypeId": 430
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "430": {
        "TypeFields": [
          {
            "Name": "key",
            "TypeName": "DidPublicKey",
            "TypeId": 431
          },
          {
            "Name": "block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidPublicKeyDetails"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "431": {
        "Variants": [
          {
            "Name": "PublicVerificationKey",
            "TypeFields": [
              {
                "TypeName": "DidVerificationKey",
                "TypeId": 299
              }
            ],
            "Index": 0
          },
          {
            "Name": "PublicEncryptionKey",
            "TypeFields": [
              {
                "TypeName": "DidEncryptionKey",
                "TypeId": 295
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "did",
          "did_details",
          "DidPublicKey"
        ],
        "TypeDef": "Variant"
      },
      "432": {
        "TypeFields": [
          {
            "TypeId": 433
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 11
          },
          {
            "Name": "V",
            "TypeId": 430
          }
        ],
        "TypeDef": "Composite"
      },
      "433": {
        "TypeId": 434,
        "TypeDef": "Sequence"
      },
      "434": {
        "TypeIds": [
          11,
          430
        ],
        "TypeDef": "Tuple"
      },
      "435": {
        "TypeIds": [
          0,
          287
        ],
        "TypeDef": "Tuple"
      },
      "436": {
        "Variants": [
          {
            "Name": "InvalidSignatureFormat",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The DID operation signature is not in the format the verification",
              "key expects."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The DID operation signature is invalid for the payload and the",
              "verification key provided."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The DID with the given identifier is already present on chain."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No DID with the given identifier is present on chain."
            ]
          },
          {
            "Name": "VerificationKeyNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One or more verification keys referenced are not stored in the set",
              "of verification keys."
            ]
          },
          {
            "Name": "InvalidNonce",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The DID operation nonce is not equal to the current DID nonce + 1."
            ]
          },
          {
            "Name": "UnsupportedDidAuthorizationCall",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The called extrinsic does not support DID authorisation."
            ]
          },
          {
            "Name": "InvalidDidAuthorizationCall",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The call had parameters that conflicted with each other",
              "or were invalid."
            ]
          },
          {
            "Name": "MaxNewKeyAgreementKeysLimitExceeded",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "A number of new key agreement keys greater than the maximum allowed",
              "has been provided."
            ]
          },
          {
            "Name": "MaxPublicKeysExceeded",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The maximum number of public keys for this DID key identifier has",
              "been reached."
            ]
          },
          {
            "Name": "MaxKeyAgreementKeysExceeded",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The maximum number of key agreements has been reached for the DID",
              "subject."
            ]
          },
          {
            "Name": "BadDidOrigin",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The DID call was submitted by the wrong account"
            ]
          },
          {
            "Name": "TransactionExpired",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The block number provided in a DID-authorized operation is invalid."
            ]
          },
          {
            "Name": "AlreadyDeleted",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The DID has already been previously deleted."
            ]
          },
          {
            "Name": "NotOwnerOfDeposit",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Only the owner of the deposit can reclaim its reserved balance."
            ]
          },
          {
            "Name": "UnableToPayFees",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The origin is unable to reserve the deposit and pay the fee."
            ]
          },
          {
            "Name": "MaxNumberOfServicesExceeded",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The maximum number of service endpoints for a DID has been exceeded."
            ]
          },
          {
            "Name": "MaxServiceIdLengthExceeded",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The service endpoint ID exceeded the maximum allowed length."
            ]
          },
          {
            "Name": "MaxServiceTypeLengthExceeded",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "One of the service endpoint types exceeded the maximum allowed",
              "length."
            ]
          },
          {
            "Name": "MaxNumberOfTypesPerServiceExceeded",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The maximum number of types for a service endpoint has been",
              "exceeded."
            ]
          },
          {
            "Name": "MaxServiceUrlLengthExceeded",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "One of the service endpoint URLs exceeded the maximum allowed",
              "length."
            ]
          },
          {
            "Name": "MaxNumberOfUrlsPerServiceExceeded",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The maximum number of URLs for a service endpoint has been exceeded."
            ]
          },
          {
            "Name": "ServiceAlreadyExists",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "A service with the provided ID is already present for the given DID."
            ]
          },
          {
            "Name": "ServiceNotFound",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "A service with the provided ID is not present under the given DID."
            ]
          },
          {
            "Name": "InvalidServiceEncoding",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "One of the service endpoint details contains non-ASCII characters."
            ]
          },
          {
            "Name": "MaxStoredEndpointsCountExceeded",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The number of service endpoints stored under the DID is larger than",
              "the number of endpoints to delete."
            ]
          },
          {
            "Name": "Internal",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "An error that is not supposed to take place, yet it happened."
            ]
          }
        ],
        "Path": [
          "did",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "437": {
        "TypeFields": [
          {
            "Name": "did",
            "TypeName": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit<Account, Balance>",
            "TypeId": 417
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "connection_record",
          "ConnectionRecord"
        ],
        "TypeParams": [
          {
            "Name": "DidIdentifier",
            "TypeId": 0
          },
          {
            "Name": "Account",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "438": {
        "TypeIds": [
          0,
          69
        ],
        "TypeDef": "Tuple"
      },
      "439": {
        "Variants": [
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The association does not exist."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The origin was not allowed to manage the association between the DID",
              "and the account ID."
            ]
          },
          {
            "Name": "OutdatedProof",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied proof of ownership was outdated."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The account has insufficient funds and can't pay the fees or reserve",
              "the deposit."
            ]
          },
          {
            "Name": "Migration",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The ConnectedAccounts and ConnectedDids storage are out of sync.",
              "",
              "NOTE: this will only be returned if the storage has inconsistencies."
            ]
          }
        ],
        "Path": [
          "pallet_did_lookup",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "440": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "Owner",
            "TypeId": 0
          },
          {
            "Name": "claimed_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit",
            "TypeId": 417
          }
        ],
        "Path": [
          "pallet_web3_names",
          "web3_name",
          "Web3NameOwnership"
        ],
        "TypeParams": [
          {
            "Name": "Owner",
            "TypeId": 0
          },
          {
            "Name": "Deposit",
            "TypeId": 417
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "441": {
        "Variants": [
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The tx submitter does not have enough funds to pay for the deposit."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specified name has already been previously claimed."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The specified name does not exist."
            ]
          },
          {
            "Name": "OwnerAlreadyExists",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The specified owner already owns a name."
            ]
          },
          {
            "Name": "OwnerNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The specified owner does not own any names."
            ]
          },
          {
            "Name": "Banned",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The specified name has been banned and cannot be interacted",
              "with."
            ]
          },
          {
            "Name": "NotBanned",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The specified name is not currently banned."
            ]
          },
          {
            "Name": "AlreadyBanned",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The specified name has already been previously banned."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The actor cannot performed the specified operation."
            ]
          },
          {
            "Name": "TooShort",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "A name that is too short is being claimed."
            ]
          },
          {
            "Name": "TooLong",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A name that is too long is being claimed."
            ]
          },
          {
            "Name": "InvalidCharacter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A name that contains not allowed characters is being claimed."
            ]
          }
        ],
        "Path": [
          "pallet_web3_names",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "442": {
        "TypeIds": [
          76,
          11
        ],
        "TypeDef": "Tuple"
      },
      "443": {
        "TypeFields": [
          {
            "Name": "ctype_hash",
            "TypeName": "CTypeHash",
            "TypeId": 11
          },
          {
            "Name": "attester",
            "TypeName": "Attester",
            "TypeId": 0
          },
          {
            "Name": "revoked",
            "TypeName": "bool",
            "TypeId": 42
          },
          {
            "Name": "block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 417
          },
          {
            "Name": "authorization_id",
            "TypeName": "Option<AuthorizationId>",
            "TypeId": 63
          }
        ],
        "Path": [
          "public_credentials",
          "credentials",
          "CredentialEntry"
        ],
        "TypeParams": [
          {
            "Name": "CTypeHash",
            "TypeId": 11
          },
          {
            "Name": "Attester",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AuthorizationId",
            "TypeId": 64
          }
        ],
        "TypeDef": "Composite"
      },
      "444": {
        "Variants": [
          {
            "Name": "AlreadyAttested",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A credential with the same root hash has already issued to the",
              "specified subject."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No credential with the specified root hash has been issued to the",
              "specified subject."
            ]
          },
          {
            "Name": "UnableToPayFees",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Not enough tokens to pay for the fees or the deposit."
            ]
          },
          {
            "Name": "InvalidInput",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The credential input is invalid."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The caller is not authorized to performed the operation."
            ]
          },
          {
            "Name": "Internal",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Catch-all for any other errors that should not happen, yet it",
              "happened."
            ]
          }
        ],
        "Path": [
          "public_credentials",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "445": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 446
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 446
          }
        ],
        "TypeDef": "Variant"
      },
      "446": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "447": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 11
          },
          {
            "Name": "relay_dispatch_queue_size",
            "TypeName": "(u32, u32)",
            "TypeId": 448
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 449
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 449
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "448": {
        "TypeIds": [
          7,
          7
        ],
        "TypeDef": "Tuple"
      },
      "449": {
        "TypeId": 450,
        "TypeDef": "Sequence"
      },
      "450": {
        "TypeIds": [
          106,
          451
        ],
        "TypeDef": "Tuple"
      },
      "451": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 241
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "452": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 7
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 7
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "453": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 11
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "454": {
        "TypeFields": [
          {
            "TypeId": 455
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 106
          },
          {
            "Name": "V",
            "TypeId": 453
          }
        ],
        "TypeDef": "Composite"
      },
      "455": {
        "TypeId": 456,
        "TypeDef": "Sequence"
      },
      "456": {
        "TypeIds": [
          106,
          453
        ],
        "TypeDef": "Tuple"
      },
      "457": {
        "TypeId": 458,
        "TypeDef": "Sequence"
      },
      "458": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 106
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 106
          }
        ],
        "TypeDef": "Composite"
      },
      "459": {
        "TypeFields": [
          {
            "Name": "code_hash",
            "TypeName": "T::Hash",
            "TypeId": 11
          },
          {
            "Name": "check_version",
            "TypeName": "bool",
            "TypeId": 42
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "CodeUpgradeAuthorization"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "460": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending."
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run."
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block."
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block."
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "461": {
        "TypeId": 462,
        "TypeDef": "Sequence"
      },
      "462": {
        "TypeFields": [
          {
            "Name": "sender",
            "TypeName": "ParaId",
            "TypeId": 106
          },
          {
            "Name": "state",
            "TypeName": "InboundState",
            "TypeId": 463
          },
          {
            "Name": "message_metadata",
            "TypeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
            "TypeId": 464
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "463": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundState"
        ],
        "TypeDef": "Variant"
      },
      "464": {
        "TypeId": 465,
        "TypeDef": "Sequence"
      },
      "465": {
        "TypeIds": [
          7,
          466
        ],
        "TypeDef": "Tuple"
      },
      "466": {
        "Variants": [
          {
            "Name": "ConcatenatedVersionedXcm",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ConcatenatedEncodedBlob",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Signals",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "XcmpMessageFormat"
        ],
        "TypeDef": "Variant"
      },
      "467": {
        "TypeIds": [
          106,
          7
        ],
        "TypeDef": "Tuple"
      },
      "468": {
        "TypeId": 469,
        "TypeDef": "Sequence"
      },
      "469": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 106
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 470
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 42
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 55
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 55
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "470": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "471": {
        "TypeIds": [
          106,
          55
        ],
        "TypeDef": "Tuple"
      },
      "472": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "threshold_weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "weight_restrict_decay",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "xcmp_max_individual_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "473": {
        "TypeIds": [
          106,
          7,
          12
        ],
        "TypeDef": "Tuple"
      },
      "474": {
        "Variants": [
          {
            "Name": "FailedToSend",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to send XCM message."
            ]
          },
          {
            "Name": "BadXcmOrigin",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Bad XCM origin."
            ]
          },
          {
            "Name": "BadXcm",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bad XCM data."
            ]
          },
          {
            "Name": "BadOverweightIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad overweight index."
            ]
          },
          {
            "Name": "WeightOverLimit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Provided weight is possibly not enough to execute the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "475": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
              "a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Invalid asset for the operation."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still users of the lock."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "476": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "477": {
        "TypeFields": [
          {
            "Name": "max_individual",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "ConfigData"
        ],
        "TypeDef": "Composite"
      },
      "478": {
        "TypeFields": [
          {
            "Name": "begin_used",
            "TypeName": "PageCounter",
            "TypeId": 7
          },
          {
            "Name": "end_used",
            "TypeName": "PageCounter",
            "TypeId": 7
          },
          {
            "Name": "overweight_count",
            "TypeName": "OverweightIndex",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "PageIndexData"
        ],
        "TypeDef": "Composite"
      },
      "479": {
        "TypeId": 480,
        "TypeDef": "Sequence"
      },
      "480": {
        "TypeIds": [
          7,
          12
        ],
        "TypeDef": "Tuple"
      },
      "481": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message index given is unknown."
            ]
          },
          {
            "Name": "OverLimit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The amount of weight given is possibly not enough for executing the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "482": {
        "TypeFields": [
          {
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 186
          },
          {
            "Name": "Call",
            "TypeId": 237
          },
          {
            "Name": "Signature",
            "TypeId": 307
          },
          {
            "Name": "Extra",
            "TypeId": 483
          }
        ],
        "TypeDef": "Composite"
      },
      "483": {
        "TypeIds": [
          484,
          485,
          486,
          487,
          488,
          490,
          491,
          492
        ],
        "TypeDef": "Tuple"
      },
      "484": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "485": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "486": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "487": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "488": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 489
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "489": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "490": {
        "TypeFields": [
          {
            "TypeName": "T::Index",
            "TypeId": 10
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "491": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "492": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 115
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 17,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 164
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 165,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 162,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 167
        },
        "Events": {
          "TypeId": 20
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 171,
            "Value": "Yk/XWgAHAIhSanQCAEABAsDNFwABBwACj6VLAgDQAAEHAOa9T1cCAPAAAQAAAsDNFwABBwCkI8BoAgAgAQEHAIhSanQCAEABAQcAopQaHQIAUAACwM0XAAAAAA==",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 175,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "YAkAAAAAAAA=",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 177,
            "Value": "CJ0mAgAAAAAA3OcEAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 178,
            "Value": "OGtpbHQtc3Bpcml0bmV0OGtpbHQtc3Bpcml0bmV0AQAAAGYrAAAAAAAAON9qy2iZB2CbBAAAADfjl/x8kfXkAQAAALydiZBPW5I/AQAAADfIuxNQqaKoAwAAAPP/FNWrUnBZAwAAAED+OtQB+JWaBgAAANK8mJfu0I8VAwAAAPeLJ4vlP0VMAgAAAKs8BXIpH+uLAQAAAN1xjVzFMmLUAQAAAOqT4/FvPWliAgAAACZglVXAZWYDAgAAAKR7fVRJlMmbAQAAAEW/ulGjELIjAQAAAAcAAAAA",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 55,
            "Value": "JgA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 182
        },
        "Index": 0
      },
      "2": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 183
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 4,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 2
      },
      "5": {
        "Name": "Indices",
        "Storage": {
          "Prefix": "Indices",
          "Entries": [
            {
              "Name": "Accounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 184
                }
              },
              "Default": "AA==",
              "Docs": [
                " The lookup from index to account."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 185
        },
        "Events": {
          "TypeId": 29
        },
        "Constants": [
          {
            "Name": "Deposit",
            "TypeId": 6,
            "Value": "ALR88yg1AAAAAAAAAAAAAA==",
            "Docs": [
              " The deposit needed for reserving an index."
            ]
          }
        ],
        "Errors": {
          "TypeId": 188
        },
        "Index": 5
      },
      "6": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 189
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 193
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 196
        },
        "Events": {
          "TypeId": 30
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open."
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 197
        },
        "Index": 6
      },
      "7": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 198,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 199,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 32
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 7
      },
      "23": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 200,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 204,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 23
      },
      "22": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 205,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 206,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 209,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 208
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 210,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 212
        },
        "Events": {
          "TypeId": 33
        },
        "Constants": [],
        "Errors": {
          "TypeId": 213
        },
        "Index": 22
      },
      "21": {
        "Name": "ParachainStaking",
        "Storage": {
          "Prefix": "ParachainStaking",
          "Entries": [
            {
              "Name": "MaxSelectedCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The maximum number of collator candidates selected at each round."
              ]
            },
            {
              "Name": "Round",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 214,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAFAAAAAAAAAA=",
              "Docs": [
                " Current round number and next round scheduled transition."
              ]
            },
            {
              "Name": "LastDelegation",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 215
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Delegation information for the latest session in which a delegator",
                " delegated.",
                "",
                " It maps from an account to the number of delegations in the last",
                " session in which they (re-)delegated."
              ]
            },
            {
              "Name": "DelegatorState",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 216
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delegation staking information.",
                "",
                " It maps from an account to its delegation details."
              ]
            },
            {
              "Name": "CandidatePool",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 217
                }
              },
              "Default": "AA==",
              "Docs": [
                " The staking information for a candidate.",
                "",
                " It maps from an account to its information.",
                " Moreover, it counts the number of candidates."
              ]
            },
            {
              "Name": "CounterForCandidatePool",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "TotalCollatorStake",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 222,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Total funds locked to back the currently selected collators.",
                " The sum of all collator and their delegator stakes.",
                "",
                " Note: There are more funds locked by this pallet, since the backing for",
                " non collating candidates is not included in [TotalCollatorStake]."
              ]
            },
            {
              "Name": "TopCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 223,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The collator candidates with the highest amount of stake.",
                "",
                " Each time the stake of a collator is increased, it is checked whether",
                " this pushes another candidate out of the list. When the stake is",
                " reduced however, it is not checked if another candidate has more stake,",
                " since this would require iterating over the entire [CandidatePool].",
                "",
                " There must always be more candidates than [MaxSelectedCandidates] so",
                " that a collator can drop out of the collator set by reducing their",
                " stake."
              ]
            },
            {
              "Name": "InflationConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 225,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Inflation configuration."
              ]
            },
            {
              "Name": "Unstaking",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 228
                }
              },
              "Default": "AA==",
              "Docs": [
                " The funds waiting to be unstaked.",
                "",
                " It maps from accounts to all the funds addressed to them in the future",
                " blocks."
              ]
            },
            {
              "Name": "MaxCollatorCandidateStake",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The maximum amount a collator candidate can stake."
              ]
            },
            {
              "Name": "LastRewardReduction",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The year in which the last automatic reduction of the reward rates",
                " occurred.",
                "",
                " It starts at zero at genesis and increments by one every BLOCKS_PER_YEAR",
                " many blocks."
              ]
            },
            {
              "Name": "BlocksAuthored",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of authored blocks for collators. It is updated via the",
                " `note_author` hook when authoring a block ."
              ]
            },
            {
              "Name": "BlocksRewarded",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of blocks for which rewards have been claimed by an address.",
                "",
                " For collators, this can be at most BlocksAuthored. It is updated when",
                " incrementing collator rewards, either when calling",
                " `inc_collator_rewards` or updating the `InflationInfo`.",
                "",
                " For delegators, this can be at most BlocksAuthored of the collator.It is",
                " updated when incrementing delegator rewards, either when calling",
                " `inc_delegator_rewards` or updating the `InflationInfo`."
              ]
            },
            {
              "Name": "Rewards",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The accumulated rewards for collator candidates and delegators.",
                "",
                " It maps from accounts to their total rewards since the last payout."
              ]
            },
            {
              "Name": "ForceNewRound",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 232
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [
          {
            "Name": "MinBlocksPerRound",
            "TypeId": 4,
            "Value": "LAEAAAAAAAA=",
            "Docs": [
              " Minimum number of blocks validation rounds can last."
            ]
          },
          {
            "Name": "DefaultBlocksPerRound",
            "TypeId": 4,
            "Value": "WAIAAAAAAAA=",
            "Docs": [
              " Default number of blocks validation rounds last, as set in the",
              " genesis configuration."
            ]
          },
          {
            "Name": "StakeDuration",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " Number of blocks for which unstaked balance will still be locked",
              " before it can be unlocked by actively calling the extrinsic",
              " `unlock_unstaked`."
            ]
          },
          {
            "Name": "ExitQueueDelay",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds a collator has to stay active after submitting a",
              " request to leave the set of collator candidates."
            ]
          },
          {
            "Name": "MinCollators",
            "TypeId": 7,
            "Value": "EAAAAA==",
            "Docs": [
              " Minimum number of collators selected from the set of candidates at",
              " every validation round."
            ]
          },
          {
            "Name": "MinRequiredCollators",
            "TypeId": 7,
            "Value": "BAAAAA==",
            "Docs": [
              " Minimum number of collators which cannot leave the network if there",
              " are no others."
            ]
          },
          {
            "Name": "MaxDelegationsPerRound",
            "TypeId": 7,
            "Value": "AQAAAA==",
            "Docs": [
              " Maximum number of delegations which can be made within the same",
              " round.",
              "",
              " NOTE: To prevent re-delegation-reward attacks, we should keep this",
              " to be one."
            ]
          },
          {
            "Name": "MaxDelegatorsPerCollator",
            "TypeId": 7,
            "Value": "IwAAAA==",
            "Docs": [
              " Maximum number of delegators a single collator can have."
            ]
          },
          {
            "Name": "MaxTopCandidates",
            "TypeId": 7,
            "Value": "SwAAAA==",
            "Docs": [
              " Maximum size of the top candidates set."
            ]
          },
          {
            "Name": "MinCollatorStake",
            "TypeId": 6,
            "Value": "AADoiQQjx4oAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake required for any account to be elected as validator",
              " for a round."
            ]
          },
          {
            "Name": "MinCollatorCandidateStake",
            "TypeId": 6,
            "Value": "AADoiQQjx4oAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake required for any account to be added to the set of",
              " candidates."
            ]
          },
          {
            "Name": "MinDelegatorStake",
            "TypeId": 6,
            "Value": "AACC3+QNRwAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake required for any account to become a delegator."
            ]
          },
          {
            "Name": "MaxUnstakeRequests",
            "TypeId": 7,
            "Value": "CgAAAA==",
            "Docs": [
              " Max number of concurrent active unstaking requests before",
              " unlocking.",
              "",
              " NOTE: To protect against irremovability of a candidate or delegator,",
              " we only allow for MaxUnstakeRequests - 1 many manual unstake",
              " requests. The last one serves as a placeholder for the cases of",
              " calling either `kick_delegator`, force_remove_candidate` or",
              " `execute_leave_candidates`. Otherwise, a user could max out their",
              " unstake requests and prevent themselves from being kicked from the",
              " set of candidates/delegators until they unlock their funds."
            ]
          },
          {
            "Name": "NetworkRewardStart",
            "TypeId": 4,
            "Value": "SKPIAAAAAAA=",
            "Docs": [
              " The starting block number for the network rewards. Once the current",
              " block number exceeds this start, the beneficiary will receive the",
              " configured reward in each block."
            ]
          },
          {
            "Name": "NetworkRewardRate",
            "TypeId": 35,
            "Value": "AACKXXhFYwE=",
            "Docs": [
              " The rate in percent for the network rewards which are based on the",
              " maximum number of collators and the maximum amount a collator can",
              " stake."
            ]
          }
        ],
        "Errors": {
          "TypeId": 233
        },
        "Index": 21
      },
      "20": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 20
      },
      "24": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 200,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will always",
                " be updated to the latest AuRa authorities in `on_finalize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 24
      },
      "30": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 234,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 351
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 353
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 356
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 362,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 363
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 42
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 40,
                  "Value": 11
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information concerning any proposal or referendum.",
                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 238
        },
        "Events": {
          "TypeId": 36
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "IBwAAAAAAAA=",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 42,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "hAMAAAAAAAA=",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 364
        },
        "Index": 30
      },
      "31": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 365,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 237
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 366
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 205,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 242
        },
        "Events": {
          "TypeId": 41
        },
        "Constants": [],
        "Errors": {
          "TypeId": 367
        },
        "Index": 31
      },
      "32": {
        "Name": "TechnicalCommittee",
        "Storage": {
          "Prefix": "TechnicalCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 368,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 237
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 366
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 205,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 246
        },
        "Events": {
          "TypeId": 45
        },
        "Constants": [],
        "Errors": {
          "TypeId": 369
        },
        "Index": 32
      },
      "34": {
        "Name": "TechnicalMembership",
        "Storage": {
          "Prefix": "TechnicalMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 370,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 247
        },
        "Events": {
          "TypeId": 46
        },
        "Constants": [],
        "Errors": {
          "TypeId": 371
        },
        "Index": 34
      },
      "35": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 372
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 373,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 248
        },
        "Events": {
          "TypeId": 47
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 374,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AACC3+QNRwAAAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 375,
            "Value": "AA==",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "wKgAAAAAAAA=",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 374,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 376,
            "Value": "a2lsdC90c3k=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "Errors": {
          "TypeId": 377
        },
        "Index": 35
      },
      "40": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 249
        },
        "Events": {
          "TypeId": 48
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 7,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 378
        },
        "Index": 40
      },
      "41": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "Vesting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 379
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 381,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 259
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "Name": "MaxVestingSchedules",
            "TypeId": 7,
            "Value": "HAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 382
        },
        "Index": 41
      },
      "42": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 383
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 51
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 261
        },
        "Events": {
          "TypeId": 50
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 9,
            "Value": "BwCg2yFdAgAAAQ==",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 387
        },
        "Index": 42
      },
      "43": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 388
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 392
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 263
        },
        "Events": {
          "TypeId": 53
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "ACD3pUszAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "APSpK4ABAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 7,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 7,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "ACD3pUszAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "AOhTVwADAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 396
        },
        "Index": 43
      },
      "44": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 397
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 400,
                  "Value": 401
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 265
        },
        "Events": {
          "TypeId": 56
        },
        "Constants": [],
        "Errors": {
          "TypeId": 402
        },
        "Index": 44
      },
      "45": {
        "Name": "TipsMembership",
        "Storage": {
          "Prefix": "TipsMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 403,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 266
        },
        "Events": {
          "TypeId": 57
        },
        "Constants": [],
        "Errors": {
          "TypeId": 404
        },
        "Index": 45
      },
      "46": {
        "Name": "Tips",
        "Storage": {
          "Prefix": "Tips",
          "Entries": [
            {
              "Name": "Tips",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 405
                }
              },
              "Default": "AA==",
              "Docs": [
                " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                " This has the insecure enumerable hash function since the key itself is already",
                " guaranteed to be a secure hash."
              ]
            },
            {
              "Name": "Reasons",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 267
        },
        "Events": {
          "TypeId": 58
        },
        "Constants": [
          {
            "Name": "MaximumReasonLength",
            "TypeId": 7,
            "Value": "AEAAAA==",
            "Docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          },
          {
            "Name": "DataDepositPerByte",
            "TypeId": 6,
            "Value": "AHQ7pAsAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "Name": "TipCountdown",
            "TypeId": 4,
            "Value": "IBwAAAAAAAA=",
            "Docs": [
              " The period for which a tip remains open after is has achieved threshold tippers."
            ]
          },
          {
            "Name": "TipFindersFee",
            "TypeId": 408,
            "Value": "AA==",
            "Docs": [
              " The percent of the final tip which goes to the original reporter of the tip."
            ]
          },
          {
            "Name": "TipReportDepositBase",
            "TypeId": 6,
            "Value": "APRWKPoyAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for placing a tip report."
            ]
          }
        ],
        "Errors": {
          "TypeId": 409
        },
        "Index": 46
      },
      "47": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 410,
                  "Value": 411
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 268
        },
        "Events": {
          "TypeId": 59
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "AIAbhO4yAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AHQ7pAsAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 7,
            "Value": "QAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 413
        },
        "Index": 47
      },
      "61": {
        "Name": "Ctype",
        "Storage": {
          "Prefix": "Ctype",
          "Entries": [
            {
              "Name": "Ctypes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 414
                }
              },
              "Default": "AA==",
              "Docs": [
                " CTypes stored on chain.",
                "",
                " It maps from a CType hash to its creator and block number in which it",
                " was created."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 270
        },
        "Events": {
          "TypeId": 61
        },
        "Constants": [],
        "Errors": {
          "TypeId": 415
        },
        "Index": 61
      },
      "62": {
        "Name": "Attestation",
        "Storage": {
          "Prefix": "Attestation",
          "Entries": [
            {
              "Name": "Attestations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 416
                }
              },
              "Default": "AA==",
              "Docs": [
                " Attestations stored on chain.",
                "",
                " It maps from a claim hash to the full attestation."
              ]
            },
            {
              "Name": "ExternalAttestations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 418,
                  "Value": 42
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delegated attestations stored on chain.",
                "",
                " It maps from a delegation ID to a vector of claim hashes."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 271
        },
        "Events": {
          "TypeId": 62
        },
        "Constants": [
          {
            "Name": "Deposit",
            "TypeId": 6,
            "Value": "ABzJ3QBuAAAAAAAAAAAAAA==",
            "Docs": [
              " The deposit that is required for storing an attestation."
            ]
          },
          {
            "Name": "MaxDelegatedAttestations",
            "TypeId": 7,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of delegated attestations which can be made by",
              " the same delegation."
            ]
          }
        ],
        "Errors": {
          "TypeId": 419
        },
        "Index": 62
      },
      "63": {
        "Name": "Delegation",
        "Storage": {
          "Prefix": "Delegation",
          "Entries": [
            {
              "Name": "DelegationNodes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 420
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delegation nodes stored on chain.",
                "",
                " It maps from a node ID to the node details."
              ]
            },
            {
              "Name": "DelegationHierarchies",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 425
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delegation hierarchies stored on chain.",
                "",
                " It maps for a (root) node ID to the hierarchy details."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 276
        },
        "Events": {
          "TypeId": 65
        },
        "Constants": [
          {
            "Name": "Deposit",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The deposit that is required for storing a delegation."
            ]
          },
          {
            "Name": "MaxSignatureByteLength",
            "TypeId": 55,
            "Value": "QAA=",
            "Docs": []
          },
          {
            "Name": "MaxRevocations",
            "TypeId": 7,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum number of revocations."
            ]
          },
          {
            "Name": "MaxRemovals",
            "TypeId": 7,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum number of removals. Should be same as MaxRevocations"
            ]
          },
          {
            "Name": "MaxParentChecks",
            "TypeId": 7,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum number of upwards traversals of the delegation tree from a",
              " node to the root and thus the depth of the delegation tree."
            ]
          },
          {
            "Name": "MaxChildren",
            "TypeId": 7,
            "Value": "6AMAAA==",
            "Docs": [
              " Maximum number of all children for a delegation node. For a binary",
              " tree, this should be twice the maximum depth of the tree, i.e.",
              " `2 ^ MaxParentChecks`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 426
        },
        "Index": 63
      },
      "64": {
        "Name": "Did",
        "Storage": {
          "Prefix": "Did",
          "Entries": [
            {
              "Name": "Did",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 427
                }
              },
              "Default": "AA==",
              "Docs": [
                " DIDs stored on chain.",
                "",
                " It maps from a DID identifier to the DID details."
              ]
            },
            {
              "Name": "ServiceEndpoints",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 435,
                  "Value": 286
                }
              },
              "Default": "AA==",
              "Docs": [
                " Service endpoints associated with DIDs.",
                "",
                " It maps from (DID identifier, service ID) to the service details."
              ]
            },
            {
              "Name": "DidEndpointsCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 7
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Counter of service endpoints for each DID.",
                "",
                " It maps from (DID identifier) to a 32-bit counter."
              ]
            },
            {
              "Name": "DidBlacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 44
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of DIDs that have been deleted and cannot therefore be created",
                " again for security reasons.",
                "",
                " It maps from a DID identifier to a unit tuple, for the sake of tracking",
                " DID identifiers."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 283
        },
        "Events": {
          "TypeId": 67
        },
        "Constants": [
          {
            "Name": "BaseDeposit",
            "TypeId": 6,
            "Value": "AACNSf0aBwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance that will be taken for each DID as a deposit",
              " to incentivise fair use of the on chain storage. The deposits",
              " increase by the amount of used keys and service endpoints. The",
              " deposit can be reclaimed when the DID is deleted."
            ]
          },
          {
            "Name": "ServiceEndpointDeposit",
            "TypeId": 6,
            "Value": "ALAVaghKAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance that will be taken for each service endpoint",
              " as a deposit to incentivise fair use of the on chain storage. The",
              " deposit can be reclaimed when the service endpoint is removed or the",
              " DID deleted."
            ]
          },
          {
            "Name": "KeyDeposit",
            "TypeId": 6,
            "Value": "ANwgdJcBAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance that will be taken for each added key as a",
              " deposit to incentivise fair use of the on chain storage."
            ]
          },
          {
            "Name": "Fee",
            "TypeId": 6,
            "Value": "ACA9iHktAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance that will be taken for each DID as a fee to",
              " incentivise fair use of the on chain storage. The fee will not get",
              " refunded when the DID is deleted."
            ]
          },
          {
            "Name": "MaxPublicKeysPerDid",
            "TypeId": 7,
            "Value": "FAAAAA==",
            "Docs": [
              " Maximum number of total public keys which can be stored per DID key",
              " identifier. This includes the ones currently used for",
              " authentication, key agreement, attestation, and delegation."
            ]
          },
          {
            "Name": "MaxNewKeyAgreementKeys",
            "TypeId": 7,
            "Value": "CgAAAA==",
            "Docs": [
              " Maximum number of key agreement keys that can be added in a creation",
              " operation."
            ]
          },
          {
            "Name": "MaxTotalKeyAgreementKeys",
            "TypeId": 7,
            "Value": "EwAAAA==",
            "Docs": [
              " Maximum number of total key agreement keys that can be stored for a",
              " DID subject.",
              "",
              " Should be greater than `MaxNewKeyAgreementKeys`."
            ]
          },
          {
            "Name": "MaxBlocksTxValidity",
            "TypeId": 4,
            "Value": "LAEAAAAAAAA=",
            "Docs": [
              " The maximum number of blocks a DID-authorized operation is",
              " considered valid after its creation."
            ]
          },
          {
            "Name": "MaxNumberOfServicesPerDid",
            "TypeId": 7,
            "Value": "GQAAAA==",
            "Docs": [
              " The maximum number of services that can be stored under a DID."
            ]
          },
          {
            "Name": "MaxServiceIdLength",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum length of a service ID."
            ]
          },
          {
            "Name": "MaxServiceTypeLength",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum length of a service type description."
            ]
          },
          {
            "Name": "MaxNumberOfTypesPerService",
            "TypeId": 7,
            "Value": "AQAAAA==",
            "Docs": [
              " The maximum number of a types description for a service endpoint."
            ]
          },
          {
            "Name": "MaxServiceUrlLength",
            "TypeId": 7,
            "Value": "yAAAAA==",
            "Docs": [
              " The maximum length of a service URL."
            ]
          },
          {
            "Name": "MaxNumberOfUrlsPerService",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " The maximum number of a URLs for a service endpoint."
            ]
          }
        ],
        "Errors": {
          "TypeId": 436
        },
        "Index": 64
      },
      "66": {
        "Name": "Inflation",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "InitialPeriodLength",
            "TypeId": 4,
            "Value": "SKPIAAAAAAA=",
            "Docs": [
              " The length of the initial period in which the constant reward is",
              " minted. Once the current block exceeds this, rewards are no further",
              " issued."
            ]
          },
          {
            "Name": "InitialPeriodReward",
            "TypeId": 6,
            "Value": "NvU5/a6zAgAAAAAAAAAAAA==",
            "Docs": [
              " The amount of newly issued tokens per block during the initial",
              " period."
            ]
          }
        ],
        "Errors": null,
        "Index": 66
      },
      "67": {
        "Name": "DidLookup",
        "Storage": {
          "Prefix": "DidLookup",
          "Entries": [
            {
              "Name": "ConnectedDids",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 69,
                  "Value": 437
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from account identifiers to DIDs."
              ]
            },
            {
              "Name": "ConnectedAccounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 438,
                  "Value": 44
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from (DID + account identifier) -> ().",
                " The empty tuple is used as a sentinel value to simply indicate the",
                " presence of a given tuple in the map."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 305
        },
        "Events": {
          "TypeId": 68
        },
        "Constants": [
          {
            "Name": "Deposit",
            "TypeId": 6,
            "Value": "AMCv1pE2AAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance that will be taken for each DID as a deposit",
              " to incentivise fair use of the on chain storage. The deposit can be",
              " reclaimed when the DID is deleted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 439
        },
        "Index": 67
      },
      "68": {
        "Name": "Web3Names",
        "Storage": {
          "Prefix": "Web3Names",
          "Entries": [
            {
              "Name": "Owner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 73,
                  "Value": 440
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map of name -> ownership details."
              ]
            },
            {
              "Name": "Names",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 73
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map of owner -> name."
              ]
            },
            {
              "Name": "Banned",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 73,
                  "Value": 44
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map of name -> ().",
                "",
                " If a name key is present, the name is currently banned."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 309
        },
        "Events": {
          "TypeId": 72
        },
        "Constants": [
          {
            "Name": "Deposit",
            "TypeId": 6,
            "Value": "ANRQqF1rAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of KILT to deposit to claim a name."
            ]
          },
          {
            "Name": "MinNameLength",
            "TypeId": 7,
            "Value": "AwAAAA==",
            "Docs": [
              " The min encoded length of a name."
            ]
          },
          {
            "Name": "MaxNameLength",
            "TypeId": 7,
            "Value": "IAAAAA==",
            "Docs": [
              " The max encoded length of a name."
            ]
          }
        ],
        "Errors": {
          "TypeId": 441
        },
        "Index": 68
      },
      "69": {
        "Name": "PublicCredentials",
        "Storage": {
          "Prefix": "PublicCredentials",
          "Entries": [
            {
              "Name": "Credentials",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 442,
                  "Value": 443
                }
              },
              "Default": "AA==",
              "Docs": [
                " The map of public credentials already attested.",
                " It maps from a (subject id + credential id) -> the creation",
                " details of the credential."
              ]
            },
            {
              "Name": "CredentialSubjects",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 76
                }
              },
              "Default": "AA==",
              "Docs": [
                " A reverse index mapping from credential ID to the subject the credential",
                " was issued to.",
                "",
                " It it used to perform efficient lookup of credentials given their ID."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 310
        },
        "Events": {
          "TypeId": 75
        },
        "Constants": [
          {
            "Name": "Deposit",
            "TypeId": 6,
            "Value": "AFxqUfxFAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of tokens to reserve when attesting a public credential."
            ]
          },
          {
            "Name": "MaxEncodedClaimsLength",
            "TypeId": 7,
            "Value": "oIYBAA==",
            "Docs": [
              " The maximum length in bytes of the encoded claims of a credential."
            ]
          },
          {
            "Name": "MaxSubjectIdLength",
            "TypeId": 7,
            "Value": "DAEAAA==",
            "Docs": [
              " The maximum length in bytes of the raw credential subject",
              " identifier."
            ]
          }
        ],
        "Errors": {
          "TypeId": 444
        },
        "Index": 69
      },
      "80": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                " which will result the next block process with the new validation code. This concludes the upgrade process.",
                "",
                " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 316,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 445,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 318,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 447,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 452,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 453,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 454,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 457,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 170,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 170,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 459,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The next authorized upgrade, if there is one."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See [`Pallet::set_custom_validation_head_data`] for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 314
        },
        "Events": {
          "TypeId": 103
        },
        "Constants": [],
        "Errors": {
          "TypeId": 460
        },
        "Index": 80
      },
      "81": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 106,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 81
      },
      "82": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 461,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Status of the inbound XCMP channels."
              ]
            },
            {
              "Name": "InboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 467,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 468,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 471,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 106,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 472,
                "Item2": null
              },
              "Default": "AgAAAAUAAAABAAAAghoGAAAIAAcAyBeoBAIABAA=",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 473
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages that exceeded max individual message weight budget.",
                "",
                " These message stay in this storage map until they are manually dispatched via",
                " `service_overweight`."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "OverweightCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                " available free overweight index."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 327
        },
        "Events": {
          "TypeId": 104
        },
        "Constants": [],
        "Errors": {
          "TypeId": 474
        },
        "Index": 82
      },
      "83": {
        "Name": "PolkadotXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 328
        },
        "Events": {
          "TypeId": 107
        },
        "Constants": [],
        "Errors": {
          "TypeId": 475
        },
        "Index": 83
      },
      "84": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": null,
        "Events": {
          "TypeId": 160
        },
        "Constants": [],
        "Errors": {
          "TypeId": 476
        },
        "Index": 84
      },
      "85": {
        "Name": "DmpQueue",
        "Storage": {
          "Prefix": "DmpQueue",
          "Entries": [
            {
              "Name": "Configuration",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 477,
                "Item2": null
              },
              "Default": "BwDkC1QCAgAEAA==",
              "Docs": [
                " The configuration."
              ]
            },
            {
              "Name": "PageIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 478,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The page index."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 7,
                  "Value": 479
                }
              },
              "Default": "AA==",
              "Docs": [
                " The queue pages."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 480
                }
              },
              "Default": "AA==",
              "Docs": [
                " The overweight messages."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 349
        },
        "Events": {
          "TypeId": 161
        },
        "Constants": [],
        "Errors": {
          "TypeId": 481
        },
        "Index": 85
      }
    },
    "Extrinsic": {
      "TypeId": 482,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 484,
          "AddSignedExtType": 44
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 485,
          "AddSignedExtType": 7
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 486,
          "AddSignedExtType": 7
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 487,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 488,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 490,
          "AddSignedExtType": 44
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 491,
          "AddSignedExtType": 44
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 492,
          "AddSignedExtType": 44
        }
      ]
    },
    "TypeId": 275
  }
}