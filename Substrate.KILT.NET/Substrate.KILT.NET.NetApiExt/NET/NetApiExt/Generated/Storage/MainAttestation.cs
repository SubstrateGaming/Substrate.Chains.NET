//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class AttestationStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public AttestationStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Attestation", "Attestations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Attestation", "ExternalAttestations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KILT.NET.NetApiExt.Generated.Model.runtime_common.authorization.EnumAuthorizationId, Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> AttestationsParams
        ///  Attestations stored on chain.
        /// 
        ///  It maps from a claim hash to the full attestation.
        /// </summary>
        public static string AttestationsParams(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Attestation", "Attestations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AttestationsDefault
        /// Default value as hex string
        /// </summary>
        public static string AttestationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Attestations
        ///  Attestations stored on chain.
        /// 
        ///  It maps from a claim hash to the full attestation.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails> Attestations(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 key, CancellationToken token)
        {
            string parameters = AttestationStorage.AttestationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.attestation.attestations.AttestationDetails>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ExternalAttestationsParams
        ///  Delegated attestations stored on chain.
        /// 
        ///  It maps from a delegation ID to a vector of claim hashes.
        /// </summary>
        public static string ExternalAttestationsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KILT.NET.NetApiExt.Generated.Model.runtime_common.authorization.EnumAuthorizationId, Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256> key)
        {
            return RequestGenerator.GetStorage("Attestation", "ExternalAttestations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ExternalAttestationsDefault
        /// Default value as hex string
        /// </summary>
        public static string ExternalAttestationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ExternalAttestations
        ///  Delegated attestations stored on chain.
        /// 
        ///  It maps from a delegation ID to a vector of claim hashes.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> ExternalAttestations(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KILT.NET.NetApiExt.Generated.Model.runtime_common.authorization.EnumAuthorizationId, Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256> key, CancellationToken token)
        {
            string parameters = AttestationStorage.ExternalAttestationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
    }
    
    public sealed class AttestationCalls
    {
        
        /// <summary>
        /// >> add
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Add(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 claim_hash, Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 ctype_hash, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.KILT.NET.NetApiExt.Generated.Model.runtime_common.authorization.EnumPalletAuthorize> authorization)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(claim_hash.Encode());
            byteArray.AddRange(ctype_hash.Encode());
            byteArray.AddRange(authorization.Encode());
            return new Method(62, "Attestation", 0, "add", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> revoke
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Revoke(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 claim_hash, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.KILT.NET.NetApiExt.Generated.Model.runtime_common.authorization.EnumPalletAuthorize> authorization)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(claim_hash.Encode());
            byteArray.AddRange(authorization.Encode());
            return new Method(62, "Attestation", 1, "revoke", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Remove(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 claim_hash, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.KILT.NET.NetApiExt.Generated.Model.runtime_common.authorization.EnumPalletAuthorize> authorization)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(claim_hash.Encode());
            byteArray.AddRange(authorization.Encode());
            return new Method(62, "Attestation", 2, "remove", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reclaim_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReclaimDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 claim_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(claim_hash.Encode());
            return new Method(62, "Attestation", 3, "reclaim_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> change_deposit_owner
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ChangeDepositOwner(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 claim_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(claim_hash.Encode());
            return new Method(62, "Attestation", 4, "change_deposit_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 claim_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(claim_hash.Encode());
            return new Method(62, "Attestation", 5, "update_deposit", byteArray.ToArray());
        }
    }
    
    public sealed class AttestationConstants
    {
        
        /// <summary>
        /// >> Deposit
        ///  The deposit that is required for storing an attestation.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Deposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x001CC9DD006E00000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDelegatedAttestations
        ///  The maximum number of delegated attestations which can be made by
        ///  the same delegation.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDelegatedAttestations()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
    }
    
    public enum AttestationErrors
    {
        
        /// <summary>
        /// >> AlreadyAttested
        /// There is already an attestation with the same claim hash stored on
        /// chain.
        /// </summary>
        AlreadyAttested,
        
        /// <summary>
        /// >> AlreadyRevoked
        /// The attestation has already been revoked.
        /// </summary>
        AlreadyRevoked,
        
        /// <summary>
        /// >> NotFound
        /// No attestation on chain matching the claim hash.
        /// </summary>
        NotFound,
        
        /// <summary>
        /// >> CTypeMismatch
        /// The attestation CType does not match the CType specified in the
        /// delegation hierarchy root.
        /// </summary>
        CTypeMismatch,
        
        /// <summary>
        /// >> NotAuthorized
        /// The call origin is not authorized to change the attestation.
        /// </summary>
        NotAuthorized,
        
        /// <summary>
        /// >> MaxDelegatedAttestationsExceeded
        /// The maximum number of delegated attestations has already been
        /// reached for the corresponding delegation id such that another one
        /// cannot be added.
        /// </summary>
        MaxDelegatedAttestationsExceeded,
    }
}
