//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class DidLookupStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public DidLookupStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DidLookup", "ConnectedDids"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("DidLookup", "ConnectedAccounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> ConnectedDidsParams
        ///  Mapping from account identifiers to DIDs.
        /// </summary>
        public static string ConnectedDidsParams(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId key)
        {
            return RequestGenerator.GetStorage("DidLookup", "ConnectedDids", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ConnectedDidsDefault
        /// Default value as hex string
        /// </summary>
        public static string ConnectedDidsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ConnectedDids
        ///  Mapping from account identifiers to DIDs.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord> ConnectedDids(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId key, CancellationToken token)
        {
            string parameters = DidLookupStorage.ConnectedDidsParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.connection_record.ConnectionRecord>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ConnectedAccountsParams
        ///  Mapping from (DID + account identifier) -> ().
        ///  The empty tuple is used as a sentinel value to simply indicate the
        ///  presence of a given tuple in the map.
        /// </summary>
        public static string ConnectedAccountsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId> key)
        {
            return RequestGenerator.GetStorage("DidLookup", "ConnectedAccounts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ConnectedAccountsDefault
        /// Default value as hex string
        /// </summary>
        public static string ConnectedAccountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ConnectedAccounts
        ///  Mapping from (DID + account identifier) -> ().
        ///  The empty tuple is used as a sentinel value to simply indicate the
        ///  presence of a given tuple in the map.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> ConnectedAccounts(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId> key, CancellationToken token)
        {
            string parameters = DidLookupStorage.ConnectedAccountsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, token);
            return result;
        }
    }
    
    public sealed class DidLookupCalls
    {
        
        /// <summary>
        /// >> associate_account
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AssociateAccount(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.associate_account_request.EnumAssociateAccountRequest req, Substrate.NetApi.Model.Types.Primitive.U64 expiration)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(req.Encode());
            byteArray.AddRange(expiration.Encode());
            return new Method(67, "DidLookup", 0, "associate_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> associate_sender
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AssociateSender()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(67, "DidLookup", 1, "associate_sender", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_sender_association
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveSenderAssociation()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(67, "DidLookup", 2, "remove_sender_association", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_account_association
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveAccountAssociation(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(67, "DidLookup", 3, "remove_account_association", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reclaim_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReclaimDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(67, "DidLookup", 4, "reclaim_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> change_deposit_owner
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ChangeDepositOwner(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(67, "DidLookup", 5, "change_deposit_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_did_lookup.linkable_account.EnumLinkableAccountId account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(67, "DidLookup", 6, "update_deposit", byteArray.ToArray());
        }
    }
    
    public sealed class DidLookupConstants
    {
        
        /// <summary>
        /// >> Deposit
        ///  The amount of balance that will be taken for each DID as a deposit
        ///  to incentivise fair use of the on chain storage. The deposit can be
        ///  reclaimed when the DID is deleted.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Deposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00C0AFD6913600000000000000000000");
            return result;
        }
    }
    
    public enum DidLookupErrors
    {
        
        /// <summary>
        /// >> NotFound
        /// The association does not exist.
        /// </summary>
        NotFound,
        
        /// <summary>
        /// >> NotAuthorized
        /// The origin was not allowed to manage the association between the DID
        /// and the account ID.
        /// </summary>
        NotAuthorized,
        
        /// <summary>
        /// >> OutdatedProof
        /// The supplied proof of ownership was outdated.
        /// </summary>
        OutdatedProof,
        
        /// <summary>
        /// >> InsufficientFunds
        /// The account has insufficient funds and can't pay the fees or reserve
        /// the deposit.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> Migration
        /// The ConnectedAccounts and ConnectedDids storage are out of sync.
        /// 
        /// NOTE: this will only be returned if the storage has inconsistencies.
        /// </summary>
        Migration,
    }
}
