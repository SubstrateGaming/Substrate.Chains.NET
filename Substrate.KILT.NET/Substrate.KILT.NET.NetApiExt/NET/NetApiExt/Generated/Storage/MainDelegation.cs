//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class DelegationStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public DelegationStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Delegation", "DelegationNodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Delegation", "DelegationHierarchies"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails)));
        }
        
        /// <summary>
        /// >> DelegationNodesParams
        ///  Delegation nodes stored on chain.
        /// 
        ///  It maps from a node ID to the node details.
        /// </summary>
        public static string DelegationNodesParams(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Delegation", "DelegationNodes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegationNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegationNodesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegationNodes
        ///  Delegation nodes stored on chain.
        /// 
        ///  It maps from a node ID to the node details.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode> DelegationNodes(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 key, CancellationToken token)
        {
            string parameters = DelegationStorage.DelegationNodesParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationNode>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegationHierarchiesParams
        ///  Delegation hierarchies stored on chain.
        /// 
        ///  It maps for a (root) node ID to the hierarchy details.
        /// </summary>
        public static string DelegationHierarchiesParams(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Delegation", "DelegationHierarchies", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegationHierarchiesDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegationHierarchiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegationHierarchies
        ///  Delegation hierarchies stored on chain.
        /// 
        ///  It maps for a (root) node ID to the hierarchy details.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails> DelegationHierarchies(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 key, CancellationToken token)
        {
            string parameters = DelegationStorage.DelegationHierarchiesParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.DelegationHierarchyDetails>(parameters, token);
            return result;
        }
    }
    
    public sealed class DelegationCalls
    {
        
        /// <summary>
        /// >> create_hierarchy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CreateHierarchy(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 root_node_id, Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 ctype_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(root_node_id.Encode());
            byteArray.AddRange(ctype_hash.Encode());
            return new Method(63, "Delegation", 0, "create_hierarchy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_delegation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddDelegation(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 delegation_id, Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 parent_id, Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 @delegate, Substrate.KILT.NET.NetApiExt.Generated.Model.delegation.delegation_hierarchy.Permissions permissions, Substrate.KILT.NET.NetApiExt.Generated.Model.did.did_details.EnumDidSignature delegate_signature)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegation_id.Encode());
            byteArray.AddRange(parent_id.Encode());
            byteArray.AddRange(@delegate.Encode());
            byteArray.AddRange(permissions.Encode());
            byteArray.AddRange(delegate_signature.Encode());
            return new Method(63, "Delegation", 1, "add_delegation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> revoke_delegation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RevokeDelegation(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 delegation_id, Substrate.NetApi.Model.Types.Primitive.U32 max_parent_checks, Substrate.NetApi.Model.Types.Primitive.U32 max_revocations)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegation_id.Encode());
            byteArray.AddRange(max_parent_checks.Encode());
            byteArray.AddRange(max_revocations.Encode());
            return new Method(63, "Delegation", 2, "revoke_delegation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_delegation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveDelegation(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 delegation_id, Substrate.NetApi.Model.Types.Primitive.U32 max_removals)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegation_id.Encode());
            byteArray.AddRange(max_removals.Encode());
            return new Method(63, "Delegation", 3, "remove_delegation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reclaim_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReclaimDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 delegation_id, Substrate.NetApi.Model.Types.Primitive.U32 max_removals)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegation_id.Encode());
            byteArray.AddRange(max_removals.Encode());
            return new Method(63, "Delegation", 4, "reclaim_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> change_deposit_owner
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ChangeDepositOwner(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 delegation_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegation_id.Encode());
            return new Method(63, "Delegation", 5, "change_deposit_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.primitive_types.H256 delegation_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegation_id.Encode());
            return new Method(63, "Delegation", 6, "update_deposit", byteArray.ToArray());
        }
    }
    
    public sealed class DelegationConstants
    {
        
        /// <summary>
        /// >> Deposit
        ///  The deposit that is required for storing a delegation.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Deposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxSignatureByteLength
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 MaxSignatureByteLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U16();
            result.Create("0x4000");
            return result;
        }
        
        /// <summary>
        /// >> MaxRevocations
        ///  Maximum number of revocations.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxRevocations()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxRemovals
        ///  Maximum number of removals. Should be same as MaxRevocations
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxRemovals()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxParentChecks
        ///  Maximum number of upwards traversals of the delegation tree from a
        ///  node to the root and thus the depth of the delegation tree.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxParentChecks()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxChildren
        ///  Maximum number of all children for a delegation node. For a binary
        ///  tree, this should be twice the maximum depth of the tree, i.e.
        ///  `2 ^ MaxParentChecks`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxChildren()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
    }
    
    public enum DelegationErrors
    {
        
        /// <summary>
        /// >> DelegationAlreadyExists
        /// There is already a delegation node with the same ID stored on chain.
        /// </summary>
        DelegationAlreadyExists,
        
        /// <summary>
        /// >> InvalidDelegateSignature
        /// The delegate's signature for the delegation creation operation is
        /// invalid.
        /// </summary>
        InvalidDelegateSignature,
        
        /// <summary>
        /// >> DelegationNotFound
        /// No delegation with the given ID stored on chain.
        /// </summary>
        DelegationNotFound,
        
        /// <summary>
        /// >> DelegateNotFound
        /// No delegate with the given ID stored on chain.
        /// </summary>
        DelegateNotFound,
        
        /// <summary>
        /// >> HierarchyAlreadyExists
        /// There is already a hierarchy with the same ID stored on chain.
        /// </summary>
        HierarchyAlreadyExists,
        
        /// <summary>
        /// >> HierarchyNotFound
        /// No hierarchy with the given ID stored on chain.
        /// </summary>
        HierarchyNotFound,
        
        /// <summary>
        /// >> MaxSearchDepthReached
        /// Max number of nodes checked without verifying the given condition.
        /// </summary>
        MaxSearchDepthReached,
        
        /// <summary>
        /// >> NotOwnerOfParentDelegation
        /// The delegation creator is not allowed to write the delegation
        /// because they are not the owner of the delegation parent node.
        /// </summary>
        NotOwnerOfParentDelegation,
        
        /// <summary>
        /// >> NotOwnerOfDelegationHierarchy
        /// The delegation creator is not allowed to write the delegation
        /// because they are not the owner of the delegation root node.
        /// </summary>
        NotOwnerOfDelegationHierarchy,
        
        /// <summary>
        /// >> ParentDelegationNotFound
        /// No parent delegation with the given ID stored on chain.
        /// </summary>
        ParentDelegationNotFound,
        
        /// <summary>
        /// >> ParentDelegationRevoked
        /// The parent delegation has previously been revoked.
        /// </summary>
        ParentDelegationRevoked,
        
        /// <summary>
        /// >> UnauthorizedRevocation
        /// The delegation revoker is not allowed to revoke the delegation.
        /// </summary>
        UnauthorizedRevocation,
        
        /// <summary>
        /// >> UnauthorizedRemoval
        /// The call origin is not authorized to remove the delegation.
        /// </summary>
        UnauthorizedRemoval,
        
        /// <summary>
        /// >> UnauthorizedDelegation
        /// The delegation creator is not allowed to create the delegation.
        /// </summary>
        UnauthorizedDelegation,
        
        /// <summary>
        /// >> AccessDenied
        /// The operation wasn't allowed because of insufficient rights.
        /// </summary>
        AccessDenied,
        
        /// <summary>
        /// >> ExceededRevocationBounds
        /// Max number of revocations for delegation nodes has been reached for
        /// the operation.
        /// </summary>
        ExceededRevocationBounds,
        
        /// <summary>
        /// >> ExceededRemovalBounds
        /// Max number of removals for delegation nodes has been reached for the
        /// operation.
        /// </summary>
        ExceededRemovalBounds,
        
        /// <summary>
        /// >> MaxRevocationsTooLarge
        /// The max number of revocation exceeds the limit for the pallet.
        /// </summary>
        MaxRevocationsTooLarge,
        
        /// <summary>
        /// >> MaxRemovalsTooLarge
        /// The max number of removals exceeds the limit for the pallet.
        /// </summary>
        MaxRemovalsTooLarge,
        
        /// <summary>
        /// >> MaxParentChecksTooLarge
        /// The max number of parent checks exceeds the limit for the pallet.
        /// </summary>
        MaxParentChecksTooLarge,
        
        /// <summary>
        /// >> Internal
        /// An error that is not supposed to take place, yet it happened.
        /// </summary>
        Internal,
        
        /// <summary>
        /// >> MaxChildrenExceeded
        /// The max number of all children has been reached for the
        /// corresponding delegation node.
        /// </summary>
        MaxChildrenExceeded,
    }
}
