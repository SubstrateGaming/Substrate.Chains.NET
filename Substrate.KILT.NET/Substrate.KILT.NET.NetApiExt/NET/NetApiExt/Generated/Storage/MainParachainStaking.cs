//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class ParachainStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ParachainStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "MaxSelectedCandidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Round"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "LastDelegation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "DelegatorState"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "CandidatePool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "CounterForCandidatePool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "TotalCollatorStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "TopCandidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "InflationConfig"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Unstaking"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "MaxCollatorCandidateStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "LastRewardReduction"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "BlocksAuthored"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "BlocksRewarded"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Rewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "ForceNewRound"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> MaxSelectedCandidatesParams
        ///  The maximum number of collator candidates selected at each round.
        /// </summary>
        public static string MaxSelectedCandidatesParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "MaxSelectedCandidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxSelectedCandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxSelectedCandidatesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> MaxSelectedCandidates
        ///  The maximum number of collator candidates selected at each round.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MaxSelectedCandidates(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.MaxSelectedCandidatesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> RoundParams
        ///  Current round number and next round scheduled transition.
        /// </summary>
        public static string RoundParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Round", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RoundDefault
        /// Default value as hex string
        /// </summary>
        public static string RoundDefault()
        {
            return "0x0000000000000000000000001400000000000000";
        }
        
        /// <summary>
        /// >> Round
        ///  Current round number and next round scheduled transition.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo> Round(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.RoundParams();
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> LastDelegationParams
        ///  Delegation information for the latest session in which a delegator
        ///  delegated.
        /// 
        ///  It maps from an account to the number of delegations in the last
        ///  session in which they (re-)delegated.
        /// </summary>
        public static string LastDelegationParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "LastDelegation", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LastDelegationDefault
        /// Default value as hex string
        /// </summary>
        public static string LastDelegationDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> LastDelegation
        ///  Delegation information for the latest session in which a delegator
        ///  delegated.
        /// 
        ///  It maps from an account to the number of delegations in the last
        ///  session in which they (re-)delegated.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter> LastDelegation(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.LastDelegationParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorStateParams
        ///  Delegation staking information.
        /// 
        ///  It maps from an account to its delegation details.
        /// </summary>
        public static string DelegatorStateParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "DelegatorState", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegatorStateDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorStateDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorState
        ///  Delegation staking information.
        /// 
        ///  It maps from an account to its delegation details.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake> DelegatorState(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.DelegatorStateParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidatePoolParams
        ///  The staking information for a candidate.
        /// 
        ///  It maps from an account to its information.
        ///  Moreover, it counts the number of candidates.
        /// </summary>
        public static string CandidatePoolParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "CandidatePool", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CandidatePoolDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidatePoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CandidatePool
        ///  The staking information for a candidate.
        /// 
        ///  It maps from an account to its information.
        ///  Moreover, it counts the number of candidates.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate> CandidatePool(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.CandidatePoolParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForCandidatePoolParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForCandidatePoolParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "CounterForCandidatePool", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForCandidatePoolDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForCandidatePoolDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForCandidatePool
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForCandidatePool(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.CounterForCandidatePoolParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalCollatorStakeParams
        ///  Total funds locked to back the currently selected collators.
        ///  The sum of all collator and their delegator stakes.
        /// 
        ///  Note: There are more funds locked by this pallet, since the backing for
        ///  non collating candidates is not included in [TotalCollatorStake].
        /// </summary>
        public static string TotalCollatorStakeParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "TotalCollatorStake", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalCollatorStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalCollatorStakeDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalCollatorStake
        ///  Total funds locked to back the currently selected collators.
        ///  The sum of all collator and their delegator stakes.
        /// 
        ///  Note: There are more funds locked by this pallet, since the backing for
        ///  non collating candidates is not included in [TotalCollatorStake].
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake> TotalCollatorStake(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TotalCollatorStakeParams();
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> TopCandidatesParams
        ///  The collator candidates with the highest amount of stake.
        /// 
        ///  Each time the stake of a collator is increased, it is checked whether
        ///  this pushes another candidate out of the list. When the stake is
        ///  reduced however, it is not checked if another candidate has more stake,
        ///  since this would require iterating over the entire [CandidatePool].
        /// 
        ///  There must always be more candidates than [MaxSelectedCandidates] so
        ///  that a collator can drop out of the collator set by reducing their
        ///  stake.
        /// </summary>
        public static string TopCandidatesParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "TopCandidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TopCandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string TopCandidatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TopCandidates
        ///  The collator candidates with the highest amount of stake.
        /// 
        ///  Each time the stake of a collator is increased, it is checked whether
        ///  this pushes another candidate out of the list. When the stake is
        ///  reduced however, it is not checked if another candidate has more stake,
        ///  since this would require iterating over the entire [CandidatePool].
        /// 
        ///  There must always be more candidates than [MaxSelectedCandidates] so
        ///  that a collator can drop out of the collator set by reducing their
        ///  stake.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2> TopCandidates(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TopCandidatesParams();
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> InflationConfigParams
        ///  Inflation configuration.
        /// </summary>
        public static string InflationConfigParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "InflationConfig", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> InflationConfigDefault
        /// Default value as hex string
        /// </summary>
        public static string InflationConfigDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000";
        }
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo> InflationConfig(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.InflationConfigParams();
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> UnstakingParams
        ///  The funds waiting to be unstaked.
        /// 
        ///  It maps from accounts to all the funds addressed to them in the future
        ///  blocks.
        /// </summary>
        public static string UnstakingParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Unstaking", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnstakingDefault
        /// Default value as hex string
        /// </summary>
        public static string UnstakingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Unstaking
        ///  The funds waiting to be unstaked.
        /// 
        ///  It maps from accounts to all the funds addressed to them in the future
        ///  blocks.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT1> Unstaking(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.UnstakingParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT1>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> MaxCollatorCandidateStakeParams
        ///  The maximum amount a collator candidate can stake.
        /// </summary>
        public static string MaxCollatorCandidateStakeParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "MaxCollatorCandidateStake", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxCollatorCandidateStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxCollatorCandidateStakeDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MaxCollatorCandidateStake
        ///  The maximum amount a collator candidate can stake.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MaxCollatorCandidateStake(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.MaxCollatorCandidateStakeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> LastRewardReductionParams
        ///  The year in which the last automatic reduction of the reward rates
        ///  occurred.
        /// 
        ///  It starts at zero at genesis and increments by one every BLOCKS_PER_YEAR
        ///  many blocks.
        /// </summary>
        public static string LastRewardReductionParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "LastRewardReduction", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastRewardReductionDefault
        /// Default value as hex string
        /// </summary>
        public static string LastRewardReductionDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> LastRewardReduction
        ///  The year in which the last automatic reduction of the reward rates
        ///  occurred.
        /// 
        ///  It starts at zero at genesis and increments by one every BLOCKS_PER_YEAR
        ///  many blocks.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> LastRewardReduction(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.LastRewardReductionParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> BlocksAuthoredParams
        ///  The number of authored blocks for collators. It is updated via the
        ///  `note_author` hook when authoring a block .
        /// </summary>
        public static string BlocksAuthoredParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "BlocksAuthored", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BlocksAuthoredDefault
        /// Default value as hex string
        /// </summary>
        public static string BlocksAuthoredDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> BlocksAuthored
        ///  The number of authored blocks for collators. It is updated via the
        ///  `note_author` hook when authoring a block .
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> BlocksAuthored(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.BlocksAuthoredParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> BlocksRewardedParams
        ///  The number of blocks for which rewards have been claimed by an address.
        /// 
        ///  For collators, this can be at most BlocksAuthored. It is updated when
        ///  incrementing collator rewards, either when calling
        ///  `inc_collator_rewards` or updating the `InflationInfo`.
        /// 
        ///  For delegators, this can be at most BlocksAuthored of the collator.It is
        ///  updated when incrementing delegator rewards, either when calling
        ///  `inc_delegator_rewards` or updating the `InflationInfo`.
        /// </summary>
        public static string BlocksRewardedParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "BlocksRewarded", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BlocksRewardedDefault
        /// Default value as hex string
        /// </summary>
        public static string BlocksRewardedDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> BlocksRewarded
        ///  The number of blocks for which rewards have been claimed by an address.
        /// 
        ///  For collators, this can be at most BlocksAuthored. It is updated when
        ///  incrementing collator rewards, either when calling
        ///  `inc_collator_rewards` or updating the `InflationInfo`.
        /// 
        ///  For delegators, this can be at most BlocksAuthored of the collator.It is
        ///  updated when incrementing delegator rewards, either when calling
        ///  `inc_delegator_rewards` or updating the `InflationInfo`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> BlocksRewarded(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.BlocksRewardedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardsParams
        ///  The accumulated rewards for collator candidates and delegators.
        /// 
        ///  It maps from accounts to their total rewards since the last payout.
        /// </summary>
        public static string RewardsParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Rewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Rewards
        ///  The accumulated rewards for collator candidates and delegators.
        /// 
        ///  It maps from accounts to their total rewards since the last payout.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Rewards(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.RewardsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ForceNewRoundParams
        /// </summary>
        public static string ForceNewRoundParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "ForceNewRound", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ForceNewRoundDefault
        /// Default value as hex string
        /// </summary>
        public static string ForceNewRoundDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForceNewRound
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> ForceNewRound(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.ForceNewRoundParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
    }
    
    public sealed class ParachainStakingCalls
    {
        
        /// <summary>
        /// >> force_new_round
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceNewRound()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 0, "force_new_round", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_inflation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetInflation(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill collator_max_rate_percentage, Substrate.KILT.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill collator_annual_reward_rate_percentage, Substrate.KILT.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill delegator_max_rate_percentage, Substrate.KILT.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill delegator_annual_reward_rate_percentage)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator_max_rate_percentage.Encode());
            byteArray.AddRange(collator_annual_reward_rate_percentage.Encode());
            byteArray.AddRange(delegator_max_rate_percentage.Encode());
            byteArray.AddRange(delegator_annual_reward_rate_percentage.Encode());
            return new Method(21, "ParachainStaking", 1, "set_inflation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_max_selected_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetMaxSelectedCandidates(Substrate.NetApi.Model.Types.Primitive.U32 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(21, "ParachainStaking", 2, "set_max_selected_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_blocks_per_round
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetBlocksPerRound(Substrate.NetApi.Model.Types.Primitive.U64 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(21, "ParachainStaking", 3, "set_blocks_per_round", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_max_candidate_stake
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetMaxCandidateStake(Substrate.NetApi.Model.Types.Primitive.U128 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(21, "ParachainStaking", 4, "set_max_candidate_stake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_remove_candidate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceRemoveCandidate(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            return new Method(21, "ParachainStaking", 5, "force_remove_candidate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> join_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JoinCandidates(Substrate.NetApi.Model.Types.Primitive.U128 stake)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(stake.Encode());
            return new Method(21, "ParachainStaking", 6, "join_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> init_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method InitLeaveCandidates()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 7, "init_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteLeaveCandidates(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            return new Method(21, "ParachainStaking", 8, "execute_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelLeaveCandidates()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 9, "cancel_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> candidate_stake_more
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CandidateStakeMore(Substrate.NetApi.Model.Types.Primitive.U128 more)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(more.Encode());
            return new Method(21, "ParachainStaking", 10, "candidate_stake_more", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> candidate_stake_less
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CandidateStakeLess(Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(less.Encode());
            return new Method(21, "ParachainStaking", 11, "candidate_stake_less", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> join_delegators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JoinDelegators(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress collator, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(21, "ParachainStaking", 12, "join_delegators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> leave_delegators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method LeaveDelegators()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 13, "leave_delegators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegator_stake_more
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DelegatorStakeMore(Substrate.NetApi.Model.Types.Primitive.U128 more)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(more.Encode());
            return new Method(21, "ParachainStaking", 14, "delegator_stake_more", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegator_stake_less
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DelegatorStakeLess(Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(less.Encode());
            return new Method(21, "ParachainStaking", 15, "delegator_stake_less", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_unstaked
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UnlockUnstaked(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress target)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            return new Method(21, "ParachainStaking", 16, "unlock_unstaked", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_rewards
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClaimRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 17, "claim_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increment_collator_rewards
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method IncrementCollatorRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 18, "increment_collator_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> increment_delegator_rewards
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method IncrementDelegatorRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 19, "increment_delegator_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_scheduled_reward_change
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteScheduledRewardChange()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "ParachainStaking", 20, "execute_scheduled_reward_change", byteArray.ToArray());
        }
    }
    
    public sealed class ParachainStakingConstants
    {
        
        /// <summary>
        /// >> MinBlocksPerRound
        ///  Minimum number of blocks validation rounds can last.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MinBlocksPerRound()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x2C01000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DefaultBlocksPerRound
        ///  Default number of blocks validation rounds last, as set in the
        ///  genesis configuration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 DefaultBlocksPerRound()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x5802000000000000");
            return result;
        }
        
        /// <summary>
        /// >> StakeDuration
        ///  Number of blocks for which unstaked balance will still be locked
        ///  before it can be unlocked by actively calling the extrinsic
        ///  `unlock_unstaked`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 StakeDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xE0C4000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ExitQueueDelay
        ///  Number of rounds a collator has to stay active after submitting a
        ///  request to leave the set of collator candidates.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ExitQueueDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> MinCollators
        ///  Minimum number of collators selected from the set of candidates at
        ///  every validation round.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinCollators()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x10000000");
            return result;
        }
        
        /// <summary>
        /// >> MinRequiredCollators
        ///  Minimum number of collators which cannot leave the network if there
        ///  are no others.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinRequiredCollators()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x04000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDelegationsPerRound
        ///  Maximum number of delegations which can be made within the same
        ///  round.
        /// 
        ///  NOTE: To prevent re-delegation-reward attacks, we should keep this
        ///  to be one.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDelegationsPerRound()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x01000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDelegatorsPerCollator
        ///  Maximum number of delegators a single collator can have.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDelegatorsPerCollator()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x23000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTopCandidates
        ///  Maximum size of the top candidates set.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTopCandidates()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x4B000000");
            return result;
        }
        
        /// <summary>
        /// >> MinCollatorStake
        ///  Minimum stake required for any account to be elected as validator
        ///  for a round.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinCollatorStake()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000E8890423C78A0000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinCollatorCandidateStake
        ///  Minimum stake required for any account to be added to the set of
        ///  candidates.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinCollatorCandidateStake()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000E8890423C78A0000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinDelegatorStake
        ///  Minimum stake required for any account to become a delegator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinDelegatorStake()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x000082DFE40D47000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxUnstakeRequests
        ///  Max number of concurrent active unstaking requests before
        ///  unlocking.
        /// 
        ///  NOTE: To protect against irremovability of a candidate or delegator,
        ///  we only allow for MaxUnstakeRequests - 1 many manual unstake
        ///  requests. The last one serves as a placeholder for the cases of
        ///  calling either `kick_delegator`, force_remove_candidate` or
        ///  `execute_leave_candidates`. Otherwise, a user could max out their
        ///  unstake requests and prevent themselves from being kicked from the
        ///  set of candidates/delegators until they unlock their funds.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUnstakeRequests()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> NetworkRewardStart
        ///  The starting block number for the network rewards. Once the current
        ///  block number exceeds this start, the beneficiary will receive the
        ///  configured reward in each block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 NetworkRewardStart()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x48A3C80000000000");
            return result;
        }
        
        /// <summary>
        /// >> NetworkRewardRate
        ///  The rate in percent for the network rewards which are based on the
        ///  maximum number of collators and the maximum amount a collator can
        ///  stake.
        /// </summary>
        public Substrate.KILT.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill NetworkRewardRate()
        {
            var result = new Substrate.KILT.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
            result.Create("0x00008A5D78456301");
            return result;
        }
    }
    
    public enum ParachainStakingErrors
    {
        
        /// <summary>
        /// >> DelegatorNotFound
        /// The account is not part of the delegators set.
        /// </summary>
        DelegatorNotFound,
        
        /// <summary>
        /// >> CandidateNotFound
        /// The account is not part of the collator candidates set.
        /// </summary>
        CandidateNotFound,
        
        /// <summary>
        /// >> DelegatorExists
        /// The account is already part of the delegators set.
        /// </summary>
        DelegatorExists,
        
        /// <summary>
        /// >> CandidateExists
        /// The account is already part of the collator candidates set.
        /// </summary>
        CandidateExists,
        
        /// <summary>
        /// >> ValStakeZero
        /// The account tried to stake more or less with amount zero.
        /// </summary>
        ValStakeZero,
        
        /// <summary>
        /// >> ValStakeBelowMin
        /// The account has not staked enough funds to be added to the collator
        /// candidates set.
        /// </summary>
        ValStakeBelowMin,
        
        /// <summary>
        /// >> ValStakeAboveMax
        /// The account has already staked the maximum amount of funds possible.
        /// </summary>
        ValStakeAboveMax,
        
        /// <summary>
        /// >> DelegationBelowMin
        /// The account has not staked enough funds to delegate a collator
        /// candidate.
        /// </summary>
        DelegationBelowMin,
        
        /// <summary>
        /// >> AlreadyLeaving
        /// The collator candidate has already trigger the process to leave the
        /// set of collator candidates.
        /// </summary>
        AlreadyLeaving,
        
        /// <summary>
        /// >> NotLeaving
        /// The collator candidate wanted to execute the exit but has not
        /// requested to leave before by calling `init_leave_candidates`.
        /// </summary>
        NotLeaving,
        
        /// <summary>
        /// >> CannotLeaveYet
        /// The collator tried to leave before waiting at least for
        /// `ExitQueueDelay` many rounds.
        /// </summary>
        CannotLeaveYet,
        
        /// <summary>
        /// >> CannotJoinBeforeUnlocking
        /// The account has a full list of unstaking requests and needs to
        /// unlock at least one of these before being able to join (again).
        /// NOTE: Can only happen if the account was a candidate or
        /// delegator before and either got kicked or exited voluntarily.
        /// </summary>
        CannotJoinBeforeUnlocking,
        
        /// <summary>
        /// >> AlreadyDelegating
        /// The account is already delegating the collator candidate.
        /// </summary>
        AlreadyDelegating,
        
        /// <summary>
        /// >> NotYetDelegating
        /// The account has not delegated any collator candidate yet, hence it
        /// is not in the set of delegators.
        /// </summary>
        NotYetDelegating,
        
        /// <summary>
        /// >> DelegationsPerRoundExceeded
        /// The delegator has exceeded the number of delegations per round which
        /// is equal to MaxDelegatorsPerCollator.
        /// 
        /// This protects against attacks in which a delegator can re-delegate
        /// from a collator who has already authored a block, to another one
        /// which has not in this round.
        /// </summary>
        DelegationsPerRoundExceeded,
        
        /// <summary>
        /// >> TooManyDelegators
        /// The collator candidate has already reached the maximum number of
        /// delegators.
        /// 
        /// This error is generated in case a new delegation request does not
        /// stake enough funds to replace some other existing delegation.
        /// </summary>
        TooManyDelegators,
        
        /// <summary>
        /// >> TooFewCollatorCandidates
        /// The set of collator candidates would fall below the required minimum
        /// if the collator left.
        /// </summary>
        TooFewCollatorCandidates,
        
        /// <summary>
        /// >> CannotStakeIfLeaving
        /// The collator candidate is in the process of leaving the set of
        /// candidates and cannot perform any other actions in the meantime.
        /// </summary>
        CannotStakeIfLeaving,
        
        /// <summary>
        /// >> CannotDelegateIfLeaving
        /// The collator candidate is in the process of leaving the set of
        /// candidates and thus cannot be delegated to.
        /// </summary>
        CannotDelegateIfLeaving,
        
        /// <summary>
        /// >> MaxCollatorsPerDelegatorExceeded
        /// The delegator has already delegated the maximum number of candidates
        /// allowed.
        /// </summary>
        MaxCollatorsPerDelegatorExceeded,
        
        /// <summary>
        /// >> AlreadyDelegatedCollator
        /// The delegator has already previously delegated the collator
        /// candidate.
        /// </summary>
        AlreadyDelegatedCollator,
        
        /// <summary>
        /// >> DelegationNotFound
        /// The given delegation does not exist in the set of delegations.
        /// </summary>
        DelegationNotFound,
        
        /// <summary>
        /// >> Underflow
        /// The collator delegate or the delegator is trying to un-stake more
        /// funds that are currently staked.
        /// </summary>
        Underflow,
        
        /// <summary>
        /// >> CannotSetAboveMax
        /// The number of selected candidates per staking round is
        /// above the maximum value allowed.
        /// </summary>
        CannotSetAboveMax,
        
        /// <summary>
        /// >> CannotSetBelowMin
        /// The number of selected candidates per staking round is
        /// below the minimum value allowed.
        /// </summary>
        CannotSetBelowMin,
        
        /// <summary>
        /// >> InvalidSchedule
        /// An invalid inflation configuration is trying to be set.
        /// </summary>
        InvalidSchedule,
        
        /// <summary>
        /// >> NoMoreUnstaking
        /// The staking reward being unlocked does not exist.
        /// Max unlocking requests reached.
        /// </summary>
        NoMoreUnstaking,
        
        /// <summary>
        /// >> TooEarly
        /// The reward rate cannot be adjusted yet as an entire year has not
        /// passed.
        /// </summary>
        TooEarly,
        
        /// <summary>
        /// >> StakeNotFound
        /// Provided staked value is zero. Should never be thrown.
        /// </summary>
        StakeNotFound,
        
        /// <summary>
        /// >> UnstakingIsEmpty
        /// Cannot unlock when Unstaked is empty.
        /// </summary>
        UnstakingIsEmpty,
        
        /// <summary>
        /// >> RewardsNotFound
        /// Cannot claim rewards if empty.
        /// </summary>
        RewardsNotFound,
    }
}
