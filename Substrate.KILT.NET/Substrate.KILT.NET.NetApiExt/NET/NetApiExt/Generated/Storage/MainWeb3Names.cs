//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.KILT.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class Web3NamesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public Web3NamesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Web3Names", "Owner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Web3Names", "Names"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Web3Names", "Banned"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> OwnerParams
        ///  Map of name -> ownership details.
        /// </summary>
        public static string OwnerParams(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name key)
        {
            return RequestGenerator.GetStorage("Web3Names", "Owner", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OwnerDefault
        /// Default value as hex string
        /// </summary>
        public static string OwnerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Owner
        ///  Map of name -> ownership details.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership> Owner(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name key, CancellationToken token)
        {
            string parameters = Web3NamesStorage.OwnerParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.Web3NameOwnership>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NamesParams
        ///  Map of owner -> name.
        /// </summary>
        public static string NamesParams(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Web3Names", "Names", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NamesDefault
        /// Default value as hex string
        /// </summary>
        public static string NamesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Names
        ///  Map of owner -> name.
        /// </summary>
        public async Task<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name> Names(Substrate.KILT.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = Web3NamesStorage.NamesParams(key);
            var result = await _client.GetStorageAsync<Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> BannedParams
        ///  Map of name -> ().
        /// 
        ///  If a name key is present, the name is currently banned.
        /// </summary>
        public static string BannedParams(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name key)
        {
            return RequestGenerator.GetStorage("Web3Names", "Banned", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BannedDefault
        /// Default value as hex string
        /// </summary>
        public static string BannedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Banned
        ///  Map of name -> ().
        /// 
        ///  If a name key is present, the name is currently banned.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Banned(Substrate.KILT.NET.NetApiExt.Generated.Model.pallet_web3_names.web3_name.AsciiWeb3Name key, CancellationToken token)
        {
            string parameters = Web3NamesStorage.BannedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, token);
            return result;
        }
    }
    
    public sealed class Web3NamesCalls
    {
        
        /// <summary>
        /// >> claim
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Claim(Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name.Encode());
            return new Method(68, "Web3Names", 0, "claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> release_by_owner
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReleaseByOwner()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(68, "Web3Names", 1, "release_by_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reclaim_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReclaimDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name.Encode());
            return new Method(68, "Web3Names", 2, "reclaim_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ban
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Ban(Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name.Encode());
            return new Method(68, "Web3Names", 3, "ban", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unban
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Unban(Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name.Encode());
            return new Method(68, "Web3Names", 4, "unban", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> change_deposit_owner
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ChangeDepositOwner()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(68, "Web3Names", 5, "change_deposit_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateDeposit(Substrate.KILT.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name_input)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name_input.Encode());
            return new Method(68, "Web3Names", 6, "update_deposit", byteArray.ToArray());
        }
    }
    
    public sealed class Web3NamesConstants
    {
        
        /// <summary>
        /// >> Deposit
        ///  The amount of KILT to deposit to claim a name.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Deposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00D450A85D6B00000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinNameLength
        ///  The min encoded length of a name.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinNameLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x03000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxNameLength
        ///  The max encoded length of a name.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNameLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
    }
    
    public enum Web3NamesErrors
    {
        
        /// <summary>
        /// >> InsufficientFunds
        /// The tx submitter does not have enough funds to pay for the deposit.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> AlreadyExists
        /// The specified name has already been previously claimed.
        /// </summary>
        AlreadyExists,
        
        /// <summary>
        /// >> NotFound
        /// The specified name does not exist.
        /// </summary>
        NotFound,
        
        /// <summary>
        /// >> OwnerAlreadyExists
        /// The specified owner already owns a name.
        /// </summary>
        OwnerAlreadyExists,
        
        /// <summary>
        /// >> OwnerNotFound
        /// The specified owner does not own any names.
        /// </summary>
        OwnerNotFound,
        
        /// <summary>
        /// >> Banned
        /// The specified name has been banned and cannot be interacted
        /// with.
        /// </summary>
        Banned,
        
        /// <summary>
        /// >> NotBanned
        /// The specified name is not currently banned.
        /// </summary>
        NotBanned,
        
        /// <summary>
        /// >> AlreadyBanned
        /// The specified name has already been previously banned.
        /// </summary>
        AlreadyBanned,
        
        /// <summary>
        /// >> NotAuthorized
        /// The actor cannot performed the specified operation.
        /// </summary>
        NotAuthorized,
        
        /// <summary>
        /// >> TooShort
        /// A name that is too short is being claimed.
        /// </summary>
        TooShort,
        
        /// <summary>
        /// >> TooLong
        /// A name that is too long is being claimed.
        /// </summary>
        TooLong,
        
        /// <summary>
        /// >> InvalidCharacter
        /// A name that contains not allowed characters is being claimed.
        /// </summary>
        InvalidCharacter,
    }
}
