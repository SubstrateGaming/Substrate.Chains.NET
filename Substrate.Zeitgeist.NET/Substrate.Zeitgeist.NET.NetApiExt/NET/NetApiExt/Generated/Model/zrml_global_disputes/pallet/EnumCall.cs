//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> add_vote_outcome
        /// Add voting outcome to a global dispute in exchange for a constant fee.
        /// Errors if the voting outcome already exists or
        /// if the global dispute has not started or has already finished.
        /// 
        /// # Arguments
        /// 
        /// - `market_id`: The id of the market.
        /// - `outcome`: The outcome report to add.
        /// 
        /// # Weight
        /// 
        /// Complexity: `O(n)`, where `n` is the number of owner(s) of the winner outcome
        /// in the case that this gets called for an already finished global dispute.
        /// </summary>
        add_vote_outcome = 0,
        
        /// <summary>
        /// >> refund_vote_fees
        /// Return the voting outcome fees in case the global dispute was destroyed.
        /// 
        /// # Arguments
        /// 
        /// - `market_id`: The id of the market.
        /// 
        /// # Weight
        /// 
        /// Complexity: `O(n)`,
        /// where `n` is the number of all existing outcomes for a global dispute.
        /// </summary>
        refund_vote_fees = 5,
        
        /// <summary>
        /// >> purge_outcomes
        /// Purge all outcomes to allow the winning outcome owner(s) to get their reward.
        /// Fails if the global dispute is not concluded yet.
        /// 
        /// # Arguments
        /// 
        /// - `market_id`: The id of the market.
        /// 
        /// # Weight
        /// 
        /// Complexity: `O(n)`,
        /// where `n` is the number of all existing outcomes for a global dispute.
        /// </summary>
        purge_outcomes = 1,
        
        /// <summary>
        /// >> reward_outcome_owner
        /// Reward the collected fees to the owner(s) of a voting outcome.
        /// Fails if outcomes is not already purged.
        /// 
        /// # Arguments
        /// 
        /// - `market_id`: The id of the market.
        /// 
        /// # Weight
        /// 
        /// Complexity: `O(n)`, where `n` is the number of owners for the winning outcome.
        /// </summary>
        reward_outcome_owner = 2,
        
        /// <summary>
        /// >> vote_on_outcome
        /// Vote on existing voting outcomes by locking native tokens.
        /// Fails if the global dispute has not started or has already finished.
        /// 
        /// # Arguments
        /// 
        /// - `market_id`: The id of the market.
        /// - `outcome`: The existing outcome report to vote on.
        /// - `amount`: The amount to vote with.
        /// 
        /// # Weight
        /// 
        /// Complexity: `O(n + m)`, where `n` is the number of all current votes on global disputes,
        /// and `m` is the number of owners for the specified outcome.
        /// </summary>
        vote_on_outcome = 3,
        
        /// <summary>
        /// >> unlock_vote_balance
        /// Return all locked native tokens from a finished or destroyed global dispute.
        /// Fails if the global dispute is not concluded yet.
        /// 
        /// # Arguments
        /// 
        /// - `voter`: The account id lookup to unlock funds for.
        /// 
        /// # Weight
        /// 
        /// Complexity: `O(n + m)`, where `n` is the number of all current votes on global disputes,
        /// and `m` is the number of owners for the winning outcome.
        /// </summary>
        unlock_vote_balance = 4,
    }
    
    /// <summary>
    /// >> 324 - Variant[zrml_global_disputes.pallet.Call]
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class EnumCall : BaseEnumExt<Call, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.outcome_report.EnumOutcomeReport>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, BaseTuple<Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.outcome_report.EnumOutcomeReport, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>
    {
    }
}
