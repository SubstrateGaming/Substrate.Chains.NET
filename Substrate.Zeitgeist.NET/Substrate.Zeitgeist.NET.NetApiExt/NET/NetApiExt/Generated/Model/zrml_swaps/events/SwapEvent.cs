//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.events
{
    
    
    /// <summary>
    /// >> 100 - Composite[zrml_swaps.events.SwapEvent]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class SwapEvent : BaseType
    {
        
        /// <summary>
        /// >> asset_amount_in
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AssetAmountIn { get; set; }
        /// <summary>
        /// >> asset_amount_out
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AssetAmountOut { get; set; }
        /// <summary>
        /// >> asset_bound
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> AssetBound { get; set; }
        /// <summary>
        /// >> asset_in
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset AssetIn { get; set; }
        /// <summary>
        /// >> asset_out
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset AssetOut { get; set; }
        /// <summary>
        /// >> cpep
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.events.CommonPoolEventParams Cpep { get; set; }
        /// <summary>
        /// >> max_price
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> MaxPrice { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "SwapEvent";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(AssetAmountIn.Encode());
            result.AddRange(AssetAmountOut.Encode());
            result.AddRange(AssetBound.Encode());
            result.AddRange(AssetIn.Encode());
            result.AddRange(AssetOut.Encode());
            result.AddRange(Cpep.Encode());
            result.AddRange(MaxPrice.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            AssetAmountIn = new Substrate.NetApi.Model.Types.Primitive.U128();
            AssetAmountIn.Decode(byteArray, ref p);
            AssetAmountOut = new Substrate.NetApi.Model.Types.Primitive.U128();
            AssetAmountOut.Decode(byteArray, ref p);
            AssetBound = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            AssetBound.Decode(byteArray, ref p);
            AssetIn = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset();
            AssetIn.Decode(byteArray, ref p);
            AssetOut = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset();
            AssetOut.Decode(byteArray, ref p);
            Cpep = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.events.CommonPoolEventParams();
            Cpep.Decode(byteArray, ref p);
            MaxPrice = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            MaxPrice.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
