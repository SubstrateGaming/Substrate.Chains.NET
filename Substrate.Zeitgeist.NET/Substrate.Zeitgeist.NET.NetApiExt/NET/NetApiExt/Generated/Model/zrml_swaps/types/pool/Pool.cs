//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool
{
    
    
    /// <summary>
    /// >> 87 - Composite[zrml_swaps.types.pool.Pool]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class Pool : BaseType
    {
        
        /// <summary>
        /// >> assets
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT2 Assets { get; set; }
        /// <summary>
        /// >> status
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.EnumPoolStatus Status { get; set; }
        /// <summary>
        /// >> swap_fee
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SwapFee { get; set; }
        /// <summary>
        /// >> total_weight
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 TotalWeight { get; set; }
        /// <summary>
        /// >> weights
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_btree_map.BoundedBTreeMapT1 Weights { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "Pool";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Assets.Encode());
            result.AddRange(Status.Encode());
            result.AddRange(SwapFee.Encode());
            result.AddRange(TotalWeight.Encode());
            result.AddRange(Weights.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Assets = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT2();
            Assets.Decode(byteArray, ref p);
            Status = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.EnumPoolStatus();
            Status.Decode(byteArray, ref p);
            SwapFee = new Substrate.NetApi.Model.Types.Primitive.U128();
            SwapFee.Decode(byteArray, ref p);
            TotalWeight = new Substrate.NetApi.Model.Types.Primitive.U128();
            TotalWeight.Decode(byteArray, ref p);
            Weights = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_btree_map.BoundedBTreeMapT1();
            Weights.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
