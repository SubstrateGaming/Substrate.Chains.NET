//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.ema_market_volume
{
    
    
    /// <summary>
    /// >> 520 - Composite[zrml_rikiddo.types.ema_market_volume.EmaMarketVolume]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class EmaMarketVolume : BaseType
    {
        
        /// <summary>
        /// >> config
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.ema_market_volume.EmaConfig Config { get; set; }
        /// <summary>
        /// >> ema
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedU128 Ema { get; set; }
        /// <summary>
        /// >> multiplier
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedU128 Multiplier { get; set; }
        /// <summary>
        /// >> last_time
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 LastTime { get; set; }
        /// <summary>
        /// >> state
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.ema_market_volume.EnumMarketVolumeState State { get; set; }
        /// <summary>
        /// >> start_time
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 StartTime { get; set; }
        /// <summary>
        /// >> volumes_per_period
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedU128 VolumesPerPeriod { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "EmaMarketVolume";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Config.Encode());
            result.AddRange(Ema.Encode());
            result.AddRange(Multiplier.Encode());
            result.AddRange(LastTime.Encode());
            result.AddRange(State.Encode());
            result.AddRange(StartTime.Encode());
            result.AddRange(VolumesPerPeriod.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Config = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.ema_market_volume.EmaConfig();
            Config.Decode(byteArray, ref p);
            Ema = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedU128();
            Ema.Decode(byteArray, ref p);
            Multiplier = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedU128();
            Multiplier.Decode(byteArray, ref p);
            LastTime = new Substrate.NetApi.Model.Types.Primitive.U64();
            LastTime.Decode(byteArray, ref p);
            State = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.ema_market_volume.EnumMarketVolumeState();
            State.Decode(byteArray, ref p);
            StartTime = new Substrate.NetApi.Model.Types.Primitive.U64();
            StartTime.Decode(byteArray, ref p);
            VolumesPerPeriod = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedU128();
            VolumesPerPeriod.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
