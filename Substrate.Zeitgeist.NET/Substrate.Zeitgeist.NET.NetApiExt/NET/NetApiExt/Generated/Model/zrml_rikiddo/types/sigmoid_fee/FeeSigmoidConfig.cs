//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.sigmoid_fee
{
    
    
    /// <summary>
    /// >> 519 - Composite[zrml_rikiddo.types.sigmoid_fee.FeeSigmoidConfig]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class FeeSigmoidConfig : BaseType
    {
        
        /// <summary>
        /// >> m
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128 M { get; set; }
        /// <summary>
        /// >> p
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128 P { get; set; }
        /// <summary>
        /// >> n
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128 N { get; set; }
        /// <summary>
        /// >> initial_fee
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128 InitialFee { get; set; }
        /// <summary>
        /// >> min_revenue
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128 MinRevenue { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "FeeSigmoidConfig";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(M.Encode());
            result.AddRange(P.Encode());
            result.AddRange(N.Encode());
            result.AddRange(InitialFee.Encode());
            result.AddRange(MinRevenue.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            M = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128();
            M.Decode(byteArray, ref p);
            P = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128();
            P.Decode(byteArray, ref p);
            N = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128();
            N.Decode(byteArray, ref p);
            InitialFee = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128();
            InitialFee.Decode(byteArray, ref p);
            MinRevenue = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.substrate_fixed.FixedI128();
            MinRevenue.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
