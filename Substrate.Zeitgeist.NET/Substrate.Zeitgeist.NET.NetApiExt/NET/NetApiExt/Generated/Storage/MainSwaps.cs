//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> SwapsStorage
    /// </summary>
    public sealed class SwapsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SwapsStorage Constructor
        /// </summary>
        public SwapsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swaps", "Pools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swaps", "PoolsCachedForArbitrage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swaps", "SubsidyProviders"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swaps", "NextPoolId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> PoolsParams
        /// </summary>
        public static string PoolsParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Swaps", "Pools", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Pools
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool> Pools(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = SwapsStorage.PoolsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PoolsCachedForArbitrageParams
        /// </summary>
        public static string PoolsCachedForArbitrageParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Swaps", "PoolsCachedForArbitrage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolsCachedForArbitrageDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolsCachedForArbitrageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PoolsCachedForArbitrage
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> PoolsCachedForArbitrage(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = SwapsStorage.PoolsCachedForArbitrageParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SubsidyProvidersParams
        /// </summary>
        public static string SubsidyProvidersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Swaps", "SubsidyProviders", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> SubsidyProvidersDefault
        /// Default value as hex string
        /// </summary>
        public static string SubsidyProvidersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SubsidyProviders
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> SubsidyProviders(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = SwapsStorage.SubsidyProvidersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextPoolIdParams
        /// </summary>
        public static string NextPoolIdParams()
        {
            return RequestGenerator.GetStorage("Swaps", "NextPoolId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextPoolIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextPoolIdDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> NextPoolId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NextPoolId(string blockhash, CancellationToken token)
        {
            string parameters = SwapsStorage.NextPoolIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SwapsCalls
    /// </summary>
    public sealed class SwapsCalls
    {
        
        /// <summary>
        /// >> pool_exit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PoolExit(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_amount, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> min_assets_out)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(pool_amount.Encode());
            byteArray.AddRange(min_assets_out.Encode());
            return new Method(56, "Swaps", 1, "pool_exit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool_exit_with_exact_asset_amount
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PoolExitWithExactAssetAmount(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> asset_amount, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> max_pool_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(asset_amount.Encode());
            byteArray.AddRange(max_pool_amount.Encode());
            return new Method(56, "Swaps", 3, "pool_exit_with_exact_asset_amount", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool_exit_with_exact_pool_amount
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PoolExitWithExactPoolAmount(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_amount, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> min_asset_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(pool_amount.Encode());
            byteArray.AddRange(min_asset_amount.Encode());
            return new Method(56, "Swaps", 4, "pool_exit_with_exact_pool_amount", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool_join
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PoolJoin(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_amount, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> max_assets_in)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(pool_amount.Encode());
            byteArray.AddRange(max_assets_in.Encode());
            return new Method(56, "Swaps", 5, "pool_join", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool_join_with_exact_asset_amount
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PoolJoinWithExactAssetAmount(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset_in, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> asset_amount, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> min_pool_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_amount.Encode());
            byteArray.AddRange(min_pool_amount.Encode());
            return new Method(56, "Swaps", 7, "pool_join_with_exact_asset_amount", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool_join_with_exact_pool_amount
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PoolJoinWithExactPoolAmount(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_amount, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> max_asset_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(pool_amount.Encode());
            byteArray.AddRange(max_asset_amount.Encode());
            return new Method(56, "Swaps", 8, "pool_join_with_exact_pool_amount", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> swap_exact_amount_in
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SwapExactAmountIn(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset_in, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> asset_amount_in, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset_out, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> min_asset_amount_out, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> max_price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_amount_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(min_asset_amount_out.Encode());
            byteArray.AddRange(max_price.Encode());
            return new Method(56, "Swaps", 9, "swap_exact_amount_in", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> swap_exact_amount_out
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SwapExactAmountOut(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset_in, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> max_asset_amount_in, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset_out, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> asset_amount_out, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> max_price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(max_asset_amount_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(asset_amount_out.Encode());
            byteArray.AddRange(max_price.Encode());
            return new Method(56, "Swaps", 10, "swap_exact_amount_out", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_pool_exit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForcePoolExit(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 who, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> pool_amount, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> min_assets_out)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(pool_amount.Encode());
            byteArray.AddRange(min_assets_out.Encode());
            return new Method(56, "Swaps", 11, "force_pool_exit", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SwapsConstants
    /// </summary>
    public sealed class SwapsConstants
    {
        
        /// <summary>
        /// >> ExitFee
        ///  The fee for exiting a pool.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ExitFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x40420F00000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxAssets
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 MaxAssets()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U16();
            result.Create("0x4100");
            return result;
        }
        
        /// <summary>
        /// >> MaxInRatio
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxInRatio()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x56A1AEC6000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxOutRatio
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxOutRatio()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x56A1AEC6000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxSwapFee
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxSwapFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00CA9A3B000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTotalWeight
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxTotalWeight()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000F2052A0100000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxWeight
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MaxWeight()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000F902950000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinAssets
        ///  The minimum amount of assets in a pool.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 MinAssets()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U16();
            result.Create("0x0200");
            return result;
        }
        
        /// <summary>
        /// >> MinWeight
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinWeight()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00E40B54020000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  The module identifier.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x7A67652F73776170");
            return result;
        }
    }
    
    /// <summary>
    /// >> SwapsErrors
    /// </summary>
    public enum SwapsErrors
    {
        
        /// <summary>
        /// >> AboveMaximumWeight
        /// The weight of an asset in a CPMM swap pool is greather than the upper weight cap.
        /// </summary>
        AboveMaximumWeight,
        
        /// <summary>
        /// >> AssetNotBound
        /// The weight of an asset in a CPMM swap pool could not be found.
        /// </summary>
        AssetNotBound,
        
        /// <summary>
        /// >> AssetNotInPool
        /// The asset in question could not be found within the pool.
        /// </summary>
        AssetNotInPool,
        
        /// <summary>
        /// >> BaseAssetNotFound
        /// The base asset of the swaps pool was None although a value was expected.
        /// </summary>
        BaseAssetNotFound,
        
        /// <summary>
        /// >> BadLimitPrice
        /// The spot price of an asset pair was greater than the specified limit.
        /// </summary>
        BadLimitPrice,
        
        /// <summary>
        /// >> BelowMinimumWeight
        /// The weight of an asset in a CPMM swap pool is lower than the upper weight cap.
        /// </summary>
        BelowMinimumWeight,
        
        /// <summary>
        /// >> InsufficientBalance
        /// Some funds could not be transferred due to a too low balance.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> InsufficientLiquidity
        /// Liquidity provided to new CPMM pool is less than the minimum allowed balance.
        /// </summary>
        InsufficientLiquidity,
        
        /// <summary>
        /// >> InvalidAmountArgument
        /// Could not create CPMM pool since no amount was specified.
        /// </summary>
        InvalidAmountArgument,
        
        /// <summary>
        /// >> InvalidFeeArgument
        /// Could not create CPMM pool since no fee was supplied.
        /// </summary>
        InvalidFeeArgument,
        
        /// <summary>
        /// >> InvalidPoolStatus
        /// Dispatch called on pool with invalid status.
        /// </summary>
        InvalidPoolStatus,
        
        /// <summary>
        /// >> InvalidStateTransition
        /// A function was called for a swaps pool that does not fulfill the state requirement.
        /// </summary>
        InvalidStateTransition,
        
        /// <summary>
        /// >> InvalidWeightArgument
        /// Could not create CPMM pool since no weights were supplied.
        /// </summary>
        InvalidWeightArgument,
        
        /// <summary>
        /// >> LimitIn
        /// A transferal of funds into a swaps pool was above a threshhold specified by the sender.
        /// </summary>
        LimitIn,
        
        /// <summary>
        /// >> InvalidSubsidyAmount
        /// Subsidy amount is too small.
        /// </summary>
        InvalidSubsidyAmount,
        
        /// <summary>
        /// >> LimitMissing
        /// No limit was specified for a swap.
        /// </summary>
        LimitMissing,
        
        /// <summary>
        /// >> LimitOut
        /// A transferal of funds out of a swaps pool was below a threshhold specified by the
        /// receiver.
        /// </summary>
        LimitOut,
        
        /// <summary>
        /// >> MathApproximation
        /// The custom math library yielded an invalid result (most times unexpected zero value).
        /// </summary>
        MathApproximation,
        
        /// <summary>
        /// >> MaxInRatio
        /// The proportion of an asset added into a pool in comparison to the amount
        /// of that asset in the pool is above the threshhold specified by a constant.
        /// </summary>
        MaxInRatio,
        
        /// <summary>
        /// >> MaxOutRatio
        /// The proportion of an asset taken from a pool in comparison to the amount
        /// of that asset in the pool is above the threshhold specified by a constant.
        /// </summary>
        MaxOutRatio,
        
        /// <summary>
        /// >> MaxTotalWeight
        /// The total weight of all assets within a CPMM pool is above a treshhold specified
        /// by a constant.
        /// </summary>
        MaxTotalWeight,
        
        /// <summary>
        /// >> PoolDoesNotExist
        /// The pool in question does not exist.
        /// </summary>
        PoolDoesNotExist,
        
        /// <summary>
        /// >> PoolDrain
        /// A pool balance dropped below the allowed minimum.
        /// </summary>
        PoolDrain,
        
        /// <summary>
        /// >> PoolIsNotActive
        /// The pool in question is inactive.
        /// </summary>
        PoolIsNotActive,
        
        /// <summary>
        /// >> PoolMissingFee
        /// The CPMM pool in question does not have a fee, although it should.
        /// </summary>
        PoolMissingFee,
        
        /// <summary>
        /// >> PoolMissingSubsidy
        /// The Rikiddo pool in question does not have subsidy, although it should.
        /// </summary>
        PoolMissingSubsidy,
        
        /// <summary>
        /// >> PoolMissingWeight
        /// The CPPM pool in question does not have weights, although it should.
        /// </summary>
        PoolMissingWeight,
        
        /// <summary>
        /// >> ProvidedValuesLenMustEqualAssetsLen
        /// Two vectors do not have the same length (usually CPMM pool assets and weights).
        /// </summary>
        ProvidedValuesLenMustEqualAssetsLen,
        
        /// <summary>
        /// >> SwapFeeMissing
        /// No swap fee information found for CPMM pool
        /// </summary>
        SwapFeeMissing,
        
        /// <summary>
        /// >> SwapFeeTooHigh
        /// The swap fee is higher than the allowed maximum.
        /// </summary>
        SwapFeeTooHigh,
        
        /// <summary>
        /// >> TooFewAssets
        /// Tried to create a pool that has less assets than the lower threshhold specified by
        /// a constant.
        /// </summary>
        TooFewAssets,
        
        /// <summary>
        /// >> TooManyAssets
        /// Tried to create a pool that has more assets than the upper threshhold specified by
        /// a constant.
        /// </summary>
        TooManyAssets,
        
        /// <summary>
        /// >> SomeIdenticalAssets
        /// Tried to create a pool with at least two identical assets.
        /// </summary>
        SomeIdenticalAssets,
        
        /// <summary>
        /// >> UnsupportedTrade
        /// The pool does not support swapping the assets in question.
        /// </summary>
        UnsupportedTrade,
        
        /// <summary>
        /// >> WinningAssetNotFound
        /// The outcome asset specified as the winning asset was not found in the pool.
        /// </summary>
        WinningAssetNotFound,
        
        /// <summary>
        /// >> ZeroAmount
        /// Some amount in a transaction equals zero.
        /// </summary>
        ZeroAmount,
        
        /// <summary>
        /// >> Unexpected
        /// An unexpected error occurred. This is the result of faulty pallet logic and should be
        /// reported to the pallet maintainers.
        /// </summary>
        Unexpected,
    }
}
