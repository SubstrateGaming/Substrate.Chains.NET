//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> ParimutuelStorage
    /// </summary>
    public sealed class ParimutuelStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ParimutuelStorage Constructor
        /// </summary>
        public ParimutuelStorage(SubstrateClientExt client)
        {
            this._client = client;
        }
    }
    
    /// <summary>
    /// >> ParimutuelCalls
    /// </summary>
    public sealed class ParimutuelCalls
    {
        
        /// <summary>
        /// >> buy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Buy(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset asset, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(62, "Parimutuel", 0, "buy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_rewards
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClaimRewards(Substrate.NetApi.Model.Types.Primitive.U128 market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(62, "Parimutuel", 1, "claim_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_refunds
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClaimRefunds(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset refund_asset)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(refund_asset.Encode());
            return new Method(62, "Parimutuel", 2, "claim_refunds", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ParimutuelConstants
    /// </summary>
    public sealed class ParimutuelConstants
    {
        
        /// <summary>
        /// >> MinBetSize
        ///  The minimum amount each bet must be. Must be larger than or equal to the existential
        ///  deposit of parimutuel shares.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinBetSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00F2052A010000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x7A67652F70726D74");
            return result;
        }
    }
    
    /// <summary>
    /// >> ParimutuelErrors
    /// </summary>
    public enum ParimutuelErrors
    {
        
        /// <summary>
        /// >> NoRewardShareOutstanding
        /// There was no buyer for the winning outcome or all winners already claimed their rewards.
        /// Use the `refund` extrinsic to get the initial bet back,
        /// in case there was no buyer for the winning outcome.
        /// </summary>
        NoRewardShareOutstanding,
        
        /// <summary>
        /// >> MarketIsNotActive
        /// The market is not active.
        /// </summary>
        MarketIsNotActive,
        
        /// <summary>
        /// >> AmountBelowMinimumBetSize
        /// The specified amount is below the minimum bet size.
        /// </summary>
        AmountBelowMinimumBetSize,
        
        /// <summary>
        /// >> NotParimutuelOutcome
        /// The specified asset is not a parimutuel share.
        /// </summary>
        NotParimutuelOutcome,
        
        /// <summary>
        /// >> InvalidOutcomeAsset
        /// The specified asset was not found in the market assets.
        /// </summary>
        InvalidOutcomeAsset,
        
        /// <summary>
        /// >> InvalidScoringRule
        /// The scoring rule is not parimutuel.
        /// </summary>
        InvalidScoringRule,
        
        /// <summary>
        /// >> InsufficientBalance
        /// The specified amount can not be transferred.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> MarketIsNotResolvedYet
        /// The market is not resolved yet.
        /// </summary>
        MarketIsNotResolvedYet,
        
        /// <summary>
        /// >> Unexpected
        /// An unexpected error occured. This should never happen!
        /// There was an internal coding mistake.
        /// </summary>
        Unexpected,
        
        /// <summary>
        /// >> NoResolvedOutcome
        /// There is no resolved outcome present for the market.
        /// </summary>
        NoResolvedOutcome,
        
        /// <summary>
        /// >> RefundNotAllowed
        /// The refund is not allowed.
        /// </summary>
        RefundNotAllowed,
        
        /// <summary>
        /// >> RefundableBalanceIsZero
        /// There is no balance to refund.
        /// </summary>
        RefundableBalanceIsZero,
        
        /// <summary>
        /// >> NoWinningShares
        /// There is no reward, because there are no winning shares.
        /// </summary>
        NoWinningShares,
        
        /// <summary>
        /// >> NotCategorical
        /// Only categorical markets are allowed for parimutuels.
        /// </summary>
        NotCategorical,
        
        /// <summary>
        /// >> NoRewardToDistribute
        /// There is no reward to distribute.
        /// </summary>
        NoRewardToDistribute,
        
        /// <summary>
        /// >> InconsistentState
        /// Action cannot be completed because an unexpected error has occurred. This should be
        /// reported to protocol maintainers.
        /// </summary>
        InconsistentState,
    }
}
