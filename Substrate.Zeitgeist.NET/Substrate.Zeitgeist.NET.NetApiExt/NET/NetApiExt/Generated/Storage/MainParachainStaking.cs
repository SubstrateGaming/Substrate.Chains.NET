//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> ParachainStakingStorage
    /// </summary>
    public sealed class ParachainStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ParachainStakingStorage Constructor
        /// </summary>
        public ParachainStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "CollatorCommission"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "TotalSelected"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "ParachainBondInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Round"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "DelegatorState"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "CandidateInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "DelegationScheduledRequests"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "AutoCompoundingDelegations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "TopDelegations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "BottomDelegations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "SelectedCandidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Total"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "CandidatePool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "AtStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "DelayedPayouts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Staked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "InflationConfig"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Points"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "AwardedPts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> CollatorCommissionParams
        ///  Commission percent taken off of rewards for all collators
        /// </summary>
        public static string CollatorCommissionParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "CollatorCommission", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CollatorCommissionDefault
        /// Default value as hex string
        /// </summary>
        public static string CollatorCommissionDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CollatorCommission
        ///  Commission percent taken off of rewards for all collators
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> CollatorCommission(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.CollatorCommissionParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalSelectedParams
        ///  The total candidates selected every round
        /// </summary>
        public static string TotalSelectedParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "TotalSelected", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalSelectedDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalSelectedDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> TotalSelected
        ///  The total candidates selected every round
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> TotalSelected(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TotalSelectedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ParachainBondInfoParams
        ///  Parachain bond config info { account, percent_of_inflation }
        /// </summary>
        public static string ParachainBondInfoParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "ParachainBondInfo", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ParachainBondInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string ParachainBondInfoDefault()
        {
            return "0x000000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ParachainBondInfo
        ///  Parachain bond config info { account, percent_of_inflation }
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig> ParachainBondInfo(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.ParachainBondInfoParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RoundParams
        ///  Current round index and next round scheduled transition
        /// </summary>
        public static string RoundParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Round", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RoundDefault
        /// Default value as hex string
        /// </summary>
        public static string RoundDefault()
        {
            return "0x01000000010000000000000014000000";
        }
        
        /// <summary>
        /// >> Round
        ///  Current round index and next round scheduled transition
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo> Round(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.RoundParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegatorStateParams
        ///  Get delegator state associated with an account if account is delegating else None
        /// </summary>
        public static string DelegatorStateParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "DelegatorState", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegatorStateDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegatorStateDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegatorState
        ///  Get delegator state associated with an account if account is delegating else None
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator> DelegatorState(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.DelegatorStateParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidateInfoParams
        ///  Get collator candidate info associated with an account if account is candidate else None
        /// </summary>
        public static string CandidateInfoParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "CandidateInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CandidateInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidateInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CandidateInfo
        ///  Get collator candidate info associated with an account if account is candidate else None
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata> CandidateInfo(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.CandidateInfoParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelegationScheduledRequestsParams
        ///  Stores outstanding delegation requests per collator.
        /// </summary>
        public static string DelegationScheduledRequestsParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "DelegationScheduledRequests", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelegationScheduledRequestsDefault
        /// Default value as hex string
        /// </summary>
        public static string DelegationScheduledRequestsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelegationScheduledRequests
        ///  Stores outstanding delegation requests per collator.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest>> DelegationScheduledRequests(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.DelegationScheduledRequestsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AutoCompoundingDelegationsParams
        ///  Stores auto-compounding configuration per collator.
        /// </summary>
        public static string AutoCompoundingDelegationsParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "AutoCompoundingDelegations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AutoCompoundingDelegationsDefault
        /// Default value as hex string
        /// </summary>
        public static string AutoCompoundingDelegationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AutoCompoundingDelegations
        ///  Stores auto-compounding configuration per collator.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig>> AutoCompoundingDelegations(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.AutoCompoundingDelegationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TopDelegationsParams
        ///  Top delegations for collator candidate
        /// </summary>
        public static string TopDelegationsParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "TopDelegations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TopDelegationsDefault
        /// Default value as hex string
        /// </summary>
        public static string TopDelegationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TopDelegations
        ///  Top delegations for collator candidate
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations> TopDelegations(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TopDelegationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BottomDelegationsParams
        ///  Bottom delegations for collator candidate
        /// </summary>
        public static string BottomDelegationsParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "BottomDelegations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BottomDelegationsDefault
        /// Default value as hex string
        /// </summary>
        public static string BottomDelegationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BottomDelegations
        ///  Bottom delegations for collator candidate
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations> BottomDelegations(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.BottomDelegationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SelectedCandidatesParams
        ///  The collator candidates selected for the current round
        /// </summary>
        public static string SelectedCandidatesParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "SelectedCandidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SelectedCandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string SelectedCandidatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SelectedCandidates
        ///  The collator candidates selected for the current round
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> SelectedCandidates(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.SelectedCandidatesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalParams
        ///  Total capital locked by this staking pallet
        /// </summary>
        public static string TotalParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Total", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Total
        ///  Total capital locked by this staking pallet
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Total(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TotalParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidatePoolParams
        ///  The pool of collator candidates, each with their total backing stake
        /// </summary>
        public static string CandidatePoolParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "CandidatePool", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CandidatePoolDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidatePoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CandidatePool
        ///  The pool of collator candidates, each with their total backing stake
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet> CandidatePool(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.CandidatePoolParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AtStakeParams
        ///  Snapshot of collator delegation stake at the start of the round
        /// </summary>
        public static string AtStakeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "AtStake", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AtStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string AtStakeDefault()
        {
            return "0x000000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AtStake
        ///  Snapshot of collator delegation stake at the start of the round
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot> AtStake(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.AtStakeParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DelayedPayoutsParams
        ///  Delayed payouts
        /// </summary>
        public static string DelayedPayoutsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "DelayedPayouts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelayedPayoutsDefault
        /// Default value as hex string
        /// </summary>
        public static string DelayedPayoutsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelayedPayouts
        ///  Delayed payouts
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout> DelayedPayouts(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.DelayedPayoutsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> StakedParams
        ///  Total counted stake for selected candidates in the round
        /// </summary>
        public static string StakedParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Staked", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> StakedDefault
        /// Default value as hex string
        /// </summary>
        public static string StakedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Staked
        ///  Total counted stake for selected candidates in the round
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Staked(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.StakedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InflationConfigParams
        ///  Inflation configuration
        /// </summary>
        public static string InflationConfigParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "InflationConfig", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> InflationConfigDefault
        /// Default value as hex string
        /// </summary>
        public static string InflationConfigDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo> InflationConfig(string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.InflationConfigParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PointsParams
        ///  Total points awarded to collators for block production in the round
        /// </summary>
        public static string PointsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Points", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PointsDefault
        /// Default value as hex string
        /// </summary>
        public static string PointsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> Points
        ///  Total points awarded to collators for block production in the round
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Points(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.PointsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AwardedPtsParams
        ///  Points for each collator per round
        /// </summary>
        public static string AwardedPtsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "AwardedPts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AwardedPtsDefault
        /// Default value as hex string
        /// </summary>
        public static string AwardedPtsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> AwardedPts
        ///  Points for each collator per round
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AwardedPts(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.AwardedPtsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ParachainStakingCalls
    /// </summary>
    public sealed class ParachainStakingCalls
    {
        
        /// <summary>
        /// >> set_staking_expectations
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetStakingExpectations(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.RangeT1 expectations)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(expectations.Encode());
            return new Method(110, "ParachainStaking", 0, "set_staking_expectations", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_inflation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetInflation(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.RangeT2 schedule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(schedule.Encode());
            return new Method(110, "ParachainStaking", 1, "set_inflation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_parachain_bond_account
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetParachainBondAccount(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(110, "ParachainStaking", 2, "set_parachain_bond_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_parachain_bond_reserve_percent
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetParachainBondReservePercent(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(110, "ParachainStaking", 3, "set_parachain_bond_reserve_percent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_total_selected
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetTotalSelected(Substrate.NetApi.Model.Types.Primitive.U32 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(110, "ParachainStaking", 4, "set_total_selected", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collator_commission
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetCollatorCommission(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(110, "ParachainStaking", 5, "set_collator_commission", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_blocks_per_round
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetBlocksPerRound(Substrate.NetApi.Model.Types.Primitive.U32 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(110, "ParachainStaking", 6, "set_blocks_per_round", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> join_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JoinCandidates(Substrate.NetApi.Model.Types.Primitive.U128 bond, Substrate.NetApi.Model.Types.Primitive.U32 candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bond.Encode());
            byteArray.AddRange(candidate_count.Encode());
            return new Method(110, "ParachainStaking", 7, "join_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleLeaveCandidates(Substrate.NetApi.Model.Types.Primitive.U32 candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate_count.Encode());
            return new Method(110, "ParachainStaking", 8, "schedule_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteLeaveCandidates(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U32 candidate_delegation_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(candidate_delegation_count.Encode());
            return new Method(110, "ParachainStaking", 9, "execute_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelLeaveCandidates(Substrate.NetApi.Model.Types.Primitive.U32 candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate_count.Encode());
            return new Method(110, "ParachainStaking", 10, "cancel_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> go_offline
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method GoOffline()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(110, "ParachainStaking", 11, "go_offline", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> go_online
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method GoOnline()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(110, "ParachainStaking", 12, "go_online", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> candidate_bond_more
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CandidateBondMore(Substrate.NetApi.Model.Types.Primitive.U128 more)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(more.Encode());
            return new Method(110, "ParachainStaking", 13, "candidate_bond_more", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_candidate_bond_less
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleCandidateBondLess(Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(less.Encode());
            return new Method(110, "ParachainStaking", 14, "schedule_candidate_bond_less", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_candidate_bond_less
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteCandidateBondLess(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            return new Method(110, "ParachainStaking", 15, "execute_candidate_bond_less", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_candidate_bond_less
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelCandidateBondLess()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(110, "ParachainStaking", 16, "cancel_candidate_bond_less", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Delegate(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U32 candidate_delegation_count, Substrate.NetApi.Model.Types.Primitive.U32 delegation_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(candidate_delegation_count.Encode());
            byteArray.AddRange(delegation_count.Encode());
            return new Method(110, "ParachainStaking", 17, "delegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegate_with_auto_compound
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DelegateWithAutoCompound(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent auto_compound, Substrate.NetApi.Model.Types.Primitive.U32 candidate_delegation_count, Substrate.NetApi.Model.Types.Primitive.U32 candidate_auto_compounding_delegation_count, Substrate.NetApi.Model.Types.Primitive.U32 delegation_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(auto_compound.Encode());
            byteArray.AddRange(candidate_delegation_count.Encode());
            byteArray.AddRange(candidate_auto_compounding_delegation_count.Encode());
            byteArray.AddRange(delegation_count.Encode());
            return new Method(110, "ParachainStaking", 18, "delegate_with_auto_compound", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_leave_delegators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleLeaveDelegators()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(110, "ParachainStaking", 19, "schedule_leave_delegators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_leave_delegators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteLeaveDelegators(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 delegator, Substrate.NetApi.Model.Types.Primitive.U32 delegation_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(delegation_count.Encode());
            return new Method(110, "ParachainStaking", 20, "execute_leave_delegators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_leave_delegators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelLeaveDelegators()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(110, "ParachainStaking", 21, "cancel_leave_delegators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_revoke_delegation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleRevokeDelegation(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            return new Method(110, "ParachainStaking", 22, "schedule_revoke_delegation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegator_bond_more
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DelegatorBondMore(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U128 more)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(more.Encode());
            return new Method(110, "ParachainStaking", 23, "delegator_bond_more", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_delegator_bond_less
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleDelegatorBondLess(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(less.Encode());
            return new Method(110, "ParachainStaking", 24, "schedule_delegator_bond_less", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_delegation_request
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteDelegationRequest(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 delegator, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delegator.Encode());
            byteArray.AddRange(candidate.Encode());
            return new Method(110, "ParachainStaking", 25, "execute_delegation_request", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_delegation_request
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelDelegationRequest(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            return new Method(110, "ParachainStaking", 26, "cancel_delegation_request", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_auto_compound
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAutoCompound(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent value, Substrate.NetApi.Model.Types.Primitive.U32 candidate_auto_compounding_delegation_count_hint, Substrate.NetApi.Model.Types.Primitive.U32 delegation_count_hint)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(candidate_auto_compounding_delegation_count_hint.Encode());
            byteArray.AddRange(delegation_count_hint.Encode());
            return new Method(110, "ParachainStaking", 27, "set_auto_compound", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> hotfix_remove_delegation_requests_exited_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method HotfixRemoveDelegationRequestsExitedCandidates(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> candidates)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidates.Encode());
            return new Method(110, "ParachainStaking", 28, "hotfix_remove_delegation_requests_exited_candidates", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ParachainStakingConstants
    /// </summary>
    public sealed class ParachainStakingConstants
    {
        
        /// <summary>
        /// >> MinBlocksPerRound
        ///  Minimum number of blocks per round
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinBlocksPerRound()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> LeaveCandidatesDelay
        ///  Number of rounds that candidates remain bonded before exit request is executable
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LeaveCandidatesDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> CandidateBondLessDelay
        ///  Number of rounds candidate requests to decrease self-bond must wait to be executable
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CandidateBondLessDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> LeaveDelegatorsDelay
        ///  Number of rounds that delegators remain bonded before exit request is executable
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 LeaveDelegatorsDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> RevokeDelegationDelay
        ///  Number of rounds that delegations remain bonded before revocation request is executable
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RevokeDelegationDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> DelegationBondLessDelay
        ///  Number of rounds that delegation less requests must wait before executable
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 DelegationBondLessDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> RewardPaymentDelay
        ///  Number of rounds after which block authors are rewarded
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RewardPaymentDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> MinSelectedCandidates
        ///  Minimum number of selected candidates every round
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinSelectedCandidates()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x08000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTopDelegationsPerCandidate
        ///  Maximum top delegations counted per candidate
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTopDelegationsPerCandidate()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x2C010000");
            return result;
        }
        
        /// <summary>
        /// >> MaxBottomDelegationsPerCandidate
        ///  Maximum bottom delegations (not counted) per candidate
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxBottomDelegationsPerCandidate()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDelegationsPerDelegator
        ///  Maximum delegations per delegator
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDelegationsPerDelegator()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MinCollatorStk
        ///  Minimum stake required for any candidate to be in `SelectedCandidates` for the round
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinCollatorStk()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000F902950000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinCandidateStk
        ///  Minimum stake required for any account to be a collator candidate
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinCandidateStk()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000F902950000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinDelegation
        ///  Minimum stake for any registered on-chain account to delegate
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinDelegation()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00F2052A010000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinDelegatorStk
        ///  Minimum stake for any registered on-chain account to be a delegator
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinDelegatorStk()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00F2052A010000000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> ParachainStakingErrors
    /// </summary>
    public enum ParachainStakingErrors
    {
        
        /// <summary>
        /// >> DelegatorDNE
        /// </summary>
        DelegatorDNE,
        
        /// <summary>
        /// >> DelegatorDNEinTopNorBottom
        /// </summary>
        DelegatorDNEinTopNorBottom,
        
        /// <summary>
        /// >> DelegatorDNEInDelegatorSet
        /// </summary>
        DelegatorDNEInDelegatorSet,
        
        /// <summary>
        /// >> CandidateDNE
        /// </summary>
        CandidateDNE,
        
        /// <summary>
        /// >> DelegationDNE
        /// </summary>
        DelegationDNE,
        
        /// <summary>
        /// >> DelegatorExists
        /// </summary>
        DelegatorExists,
        
        /// <summary>
        /// >> CandidateExists
        /// </summary>
        CandidateExists,
        
        /// <summary>
        /// >> CandidateBondBelowMin
        /// </summary>
        CandidateBondBelowMin,
        
        /// <summary>
        /// >> InsufficientBalance
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> DelegatorBondBelowMin
        /// </summary>
        DelegatorBondBelowMin,
        
        /// <summary>
        /// >> DelegationBelowMin
        /// </summary>
        DelegationBelowMin,
        
        /// <summary>
        /// >> AlreadyOffline
        /// </summary>
        AlreadyOffline,
        
        /// <summary>
        /// >> AlreadyActive
        /// </summary>
        AlreadyActive,
        
        /// <summary>
        /// >> DelegatorAlreadyLeaving
        /// </summary>
        DelegatorAlreadyLeaving,
        
        /// <summary>
        /// >> DelegatorNotLeaving
        /// </summary>
        DelegatorNotLeaving,
        
        /// <summary>
        /// >> DelegatorCannotLeaveYet
        /// </summary>
        DelegatorCannotLeaveYet,
        
        /// <summary>
        /// >> CannotDelegateIfLeaving
        /// </summary>
        CannotDelegateIfLeaving,
        
        /// <summary>
        /// >> CandidateAlreadyLeaving
        /// </summary>
        CandidateAlreadyLeaving,
        
        /// <summary>
        /// >> CandidateNotLeaving
        /// </summary>
        CandidateNotLeaving,
        
        /// <summary>
        /// >> CandidateCannotLeaveYet
        /// </summary>
        CandidateCannotLeaveYet,
        
        /// <summary>
        /// >> CannotGoOnlineIfLeaving
        /// </summary>
        CannotGoOnlineIfLeaving,
        
        /// <summary>
        /// >> ExceedMaxDelegationsPerDelegator
        /// </summary>
        ExceedMaxDelegationsPerDelegator,
        
        /// <summary>
        /// >> AlreadyDelegatedCandidate
        /// </summary>
        AlreadyDelegatedCandidate,
        
        /// <summary>
        /// >> InvalidSchedule
        /// </summary>
        InvalidSchedule,
        
        /// <summary>
        /// >> CannotSetBelowMin
        /// </summary>
        CannotSetBelowMin,
        
        /// <summary>
        /// >> RoundLengthMustBeGreaterThanTotalSelectedCollators
        /// </summary>
        RoundLengthMustBeGreaterThanTotalSelectedCollators,
        
        /// <summary>
        /// >> NoWritingSameValue
        /// </summary>
        NoWritingSameValue,
        
        /// <summary>
        /// >> TooLowCandidateCountWeightHintJoinCandidates
        /// </summary>
        TooLowCandidateCountWeightHintJoinCandidates,
        
        /// <summary>
        /// >> TooLowCandidateCountWeightHintCancelLeaveCandidates
        /// </summary>
        TooLowCandidateCountWeightHintCancelLeaveCandidates,
        
        /// <summary>
        /// >> TooLowCandidateCountToLeaveCandidates
        /// </summary>
        TooLowCandidateCountToLeaveCandidates,
        
        /// <summary>
        /// >> TooLowDelegationCountToDelegate
        /// </summary>
        TooLowDelegationCountToDelegate,
        
        /// <summary>
        /// >> TooLowCandidateDelegationCountToDelegate
        /// </summary>
        TooLowCandidateDelegationCountToDelegate,
        
        /// <summary>
        /// >> TooLowCandidateDelegationCountToLeaveCandidates
        /// </summary>
        TooLowCandidateDelegationCountToLeaveCandidates,
        
        /// <summary>
        /// >> TooLowDelegationCountToLeaveDelegators
        /// </summary>
        TooLowDelegationCountToLeaveDelegators,
        
        /// <summary>
        /// >> PendingCandidateRequestsDNE
        /// </summary>
        PendingCandidateRequestsDNE,
        
        /// <summary>
        /// >> PendingCandidateRequestAlreadyExists
        /// </summary>
        PendingCandidateRequestAlreadyExists,
        
        /// <summary>
        /// >> PendingCandidateRequestNotDueYet
        /// </summary>
        PendingCandidateRequestNotDueYet,
        
        /// <summary>
        /// >> PendingDelegationRequestDNE
        /// </summary>
        PendingDelegationRequestDNE,
        
        /// <summary>
        /// >> PendingDelegationRequestAlreadyExists
        /// </summary>
        PendingDelegationRequestAlreadyExists,
        
        /// <summary>
        /// >> PendingDelegationRequestNotDueYet
        /// </summary>
        PendingDelegationRequestNotDueYet,
        
        /// <summary>
        /// >> CannotDelegateLessThanOrEqualToLowestBottomWhenFull
        /// </summary>
        CannotDelegateLessThanOrEqualToLowestBottomWhenFull,
        
        /// <summary>
        /// >> PendingDelegationRevoke
        /// </summary>
        PendingDelegationRevoke,
        
        /// <summary>
        /// >> TooLowDelegationCountToAutoCompound
        /// </summary>
        TooLowDelegationCountToAutoCompound,
        
        /// <summary>
        /// >> TooLowCandidateAutoCompoundingDelegationCountToAutoCompound
        /// </summary>
        TooLowCandidateAutoCompoundingDelegationCountToAutoCompound,
        
        /// <summary>
        /// >> TooLowCandidateAutoCompoundingDelegationCountToDelegate
        /// </summary>
        TooLowCandidateAutoCompoundingDelegationCountToDelegate,
    }
}
