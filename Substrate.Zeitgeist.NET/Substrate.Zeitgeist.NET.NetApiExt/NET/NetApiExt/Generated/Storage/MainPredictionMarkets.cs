//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> PredictionMarketsStorage
    /// </summary>
    public sealed class PredictionMarketsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> PredictionMarketsStorage Constructor
        /// </summary>
        public PredictionMarketsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketIdsPerOpenBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketIdsPerOpenTimeFrame"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketIdsPerCloseBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketIdsPerCloseTimeFrame"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "LastTimeFrame"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketIdsPerDisputeBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketIdsPerReportBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketIdsForEdit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PredictionMarkets", "MarketsCollectingSubsidy"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38)));
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenBlockParams
        /// </summary>
        public static string MarketIdsPerOpenBlockParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketIdsPerOpenBlock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdsPerOpenBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenBlock
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerOpenBlock(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketIdsPerOpenBlockParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenTimeFrameParams
        /// </summary>
        public static string MarketIdsPerOpenTimeFrameParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketIdsPerOpenTimeFrame", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenTimeFrameDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdsPerOpenTimeFrameDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenTimeFrame
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerOpenTimeFrame(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketIdsPerOpenTimeFrameParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseBlockParams
        ///  A mapping of market identifiers to the block their market ends on.
        /// </summary>
        public static string MarketIdsPerCloseBlockParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketIdsPerCloseBlock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdsPerCloseBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseBlock
        ///  A mapping of market identifiers to the block their market ends on.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerCloseBlock(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketIdsPerCloseBlockParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseTimeFrameParams
        ///  A mapping of market identifiers to the time frame their market ends in.
        /// </summary>
        public static string MarketIdsPerCloseTimeFrameParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketIdsPerCloseTimeFrame", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseTimeFrameDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdsPerCloseTimeFrameDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseTimeFrame
        ///  A mapping of market identifiers to the time frame their market ends in.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerCloseTimeFrame(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketIdsPerCloseTimeFrameParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastTimeFrameParams
        ///  The last time frame that was checked for markets to close.
        /// </summary>
        public static string LastTimeFrameParams()
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "LastTimeFrame", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastTimeFrameDefault
        /// Default value as hex string
        /// </summary>
        public static string LastTimeFrameDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LastTimeFrame
        ///  The last time frame that was checked for markets to close.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> LastTimeFrame(string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.LastTimeFrameParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketIdsPerDisputeBlockParams
        ///  A mapping of market identifiers to the block they were disputed at.
        ///  A market only ends up here if it was disputed.
        /// </summary>
        public static string MarketIdsPerDisputeBlockParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketIdsPerDisputeBlock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdsPerDisputeBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdsPerDisputeBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdsPerDisputeBlock
        ///  A mapping of market identifiers to the block they were disputed at.
        ///  A market only ends up here if it was disputed.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerDisputeBlock(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketIdsPerDisputeBlockParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketIdsPerReportBlockParams
        ///  A mapping of market identifiers to the block that they were reported on.
        /// </summary>
        public static string MarketIdsPerReportBlockParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketIdsPerReportBlock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdsPerReportBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdsPerReportBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdsPerReportBlock
        ///  A mapping of market identifiers to the block that they were reported on.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerReportBlock(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketIdsPerReportBlockParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketIdsForEditParams
        ///  Contains market_ids for which advisor has requested edit.
        ///  Value for given market_id represents the reason for the edit.
        /// </summary>
        public static string MarketIdsForEditParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketIdsForEdit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdsForEditDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdsForEditDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdsForEdit
        ///  Contains market_ids for which advisor has requested edit.
        ///  Value for given market_id represents the reason for the edit.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4> MarketIdsForEdit(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketIdsForEditParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketsCollectingSubsidyParams
        ///  Contains a list of all markets that are currently collecting subsidy and the deadline.
        /// </summary>
        public static string MarketsCollectingSubsidyParams()
        {
            return RequestGenerator.GetStorage("PredictionMarkets", "MarketsCollectingSubsidy", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MarketsCollectingSubsidyDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketsCollectingSubsidyDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketsCollectingSubsidy
        ///  Contains a list of all markets that are currently collecting subsidy and the deadline.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38> MarketsCollectingSubsidy(string blockhash, CancellationToken token)
        {
            string parameters = PredictionMarketsStorage.MarketsCollectingSubsidyParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> PredictionMarketsCalls
    /// </summary>
    public sealed class PredictionMarketsCalls
    {
        
        /// <summary>
        /// >> admin_move_market_to_closed
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AdminMoveMarketToClosed(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 1, "admin_move_market_to_closed", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> admin_move_market_to_resolved
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AdminMoveMarketToResolved(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 2, "admin_move_market_to_resolved", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_market
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ApproveMarket(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 3, "approve_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> request_edit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RequestEdit(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> edit_reason)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(edit_reason.Encode());
            return new Method(57, "PredictionMarkets", 4, "request_edit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy_complete_set
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method BuyCompleteSet(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(57, "PredictionMarkets", 5, "buy_complete_set", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dispute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Dispute(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 6, "dispute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_market
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CreateMarket(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset base_asset, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill creator_fee, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 oracle, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketPeriod period, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Deadlines deadlines, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.types.EnumMultiHash metadata, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketCreation creation, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketType market_type, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketDisputeMechanism> dispute_mechanism, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumScoringRule scoring_rule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(base_asset.Encode());
            byteArray.AddRange(creator_fee.Encode());
            byteArray.AddRange(oracle.Encode());
            byteArray.AddRange(period.Encode());
            byteArray.AddRange(deadlines.Encode());
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(creation.Encode());
            byteArray.AddRange(market_type.Encode());
            byteArray.AddRange(dispute_mechanism.Encode());
            byteArray.AddRange(scoring_rule.Encode());
            return new Method(57, "PredictionMarkets", 8, "create_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> edit_market
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method EditMarket(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset base_asset, Substrate.NetApi.Model.Types.Primitive.U128 market_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 oracle, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketPeriod period, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Deadlines deadlines, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.types.EnumMultiHash metadata, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketType market_type, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketDisputeMechanism> dispute_mechanism, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumScoringRule scoring_rule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(base_asset.Encode());
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(oracle.Encode());
            byteArray.AddRange(period.Encode());
            byteArray.AddRange(deadlines.Encode());
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(market_type.Encode());
            byteArray.AddRange(dispute_mechanism.Encode());
            byteArray.AddRange(scoring_rule.Encode());
            return new Method(57, "PredictionMarkets", 9, "edit_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeem_shares
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RedeemShares(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 12, "redeem_shares", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reject_market
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RejectMarket(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> reject_reason)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(reject_reason.Encode());
            return new Method(57, "PredictionMarkets", 13, "reject_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> report
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Report(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.outcome_report.EnumOutcomeReport outcome)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(outcome.Encode());
            return new Method(57, "PredictionMarkets", 14, "report", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sell_complete_set
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SellCompleteSet(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(57, "PredictionMarkets", 15, "sell_complete_set", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> start_global_dispute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method StartGlobalDispute(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 16, "start_global_dispute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_market_and_deploy_pool
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CreateMarketAndDeployPool(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset base_asset, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill creator_fee, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 oracle, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketPeriod period, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Deadlines deadlines, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.types.EnumMultiHash metadata, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketType market_type, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.EnumMarketDisputeMechanism> dispute_mechanism, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> spot_prices, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> swap_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(base_asset.Encode());
            byteArray.AddRange(creator_fee.Encode());
            byteArray.AddRange(oracle.Encode());
            byteArray.AddRange(period.Encode());
            byteArray.AddRange(deadlines.Encode());
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(market_type.Encode());
            byteArray.AddRange(dispute_mechanism.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(spot_prices.Encode());
            byteArray.AddRange(swap_fee.Encode());
            return new Method(57, "PredictionMarkets", 17, "create_market_and_deploy_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_early_close
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleEarlyClose(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 18, "schedule_early_close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dispute_early_close
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DisputeEarlyClose(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 19, "dispute_early_close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reject_early_close
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RejectEarlyClose(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 20, "reject_early_close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close_trusted_market
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CloseTrustedMarket(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 21, "close_trusted_market", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> manually_close_market
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ManuallyCloseMarket(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            return new Method(57, "PredictionMarkets", 22, "manually_close_market", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> PredictionMarketsConstants
    /// </summary>
    public sealed class PredictionMarketsConstants
    {
        
        /// <summary>
        /// >> AdvisoryBond
        ///  The base amount of currency that must be bonded for a market approved by the
        ///   advisory committee.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AdvisoryBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00204AA9D10100000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AdvisoryBondSlashPercentage
        ///  The percentage of the advisory bond that gets slashed when a market is rejected.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent AdvisoryBondSlashPercentage()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent();
            result.Create("0x00");
            return result;
        }
        
        /// <summary>
        /// >> CloseEarlyDisputeBond
        ///  The base amount of currency that must be bonded
        ///  by the disputant in order to dispute an early market closure of the market creator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 CloseEarlyDisputeBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0040E59C301200000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> CloseEarlyProtectionTimeFramePeriod
        ///  The milliseconds to wait for the `CloseMarketsEarlyOrigin`
        ///  before the early market close actually happens (fat-finger protection).
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 CloseEarlyProtectionTimeFramePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x002E930200000000");
            return result;
        }
        
        /// <summary>
        /// >> CloseEarlyProtectionBlockPeriod
        ///  The block time to wait for the `CloseMarketsEarlyOrigin`
        ///  before the early market close actually happens (fat-finger protection).
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 CloseEarlyProtectionBlockPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x100E000000000000");
            return result;
        }
        
        /// <summary>
        /// >> CloseEarlyRequestBond
        ///  The base amount of currency that must be bonded
        ///  by the market creator in order to schedule an early market closure.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 CloseEarlyRequestBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0040E59C301200000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DisputeBond
        ///  The base amount of currency that must be bonded in order to create a dispute.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DisputeBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0040E59C301200000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxCategories
        ///  The maximum number of categories available for categorical markets.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 MaxCategories()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U16();
            result.Create("0x4000");
            return result;
        }
        
        /// <summary>
        /// >> MinCategories
        ///  The minimum number of categories available for categorical markets.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 MinCategories()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U16();
            result.Create("0x0200");
            return result;
        }
        
        /// <summary>
        /// >> MaxCreatorFee
        ///  A upper bound for the fee that is charged each trade and given to the market creator.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill MaxCreatorFee()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
            result.Create("0x80969800");
            return result;
        }
        
        /// <summary>
        /// >> MaxDisputes
        ///  The maximum number of disputes allowed on any single market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDisputes()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x01000000");
            return result;
        }
        
        /// <summary>
        /// >> MinDisputeDuration
        ///  The minimum number of blocks allowed to be specified as dispute_duration
        ///  in create_market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MinDisputeDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x100E000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MinOracleDuration
        ///  The minimum number of blocks allowed to be specified as oracle_duration
        ///  in create_market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MinOracleDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x2C01000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxGracePeriod
        ///  The maximum number of blocks allowed to be specified as grace_period
        ///  in create_market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MaxGracePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xA820280000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxOracleDuration
        ///  The maximum number of blocks allowed to be specified as oracle_duration
        ///  in create_market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MaxOracleDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xC089010000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDisputeDuration
        ///  The maximum number of blocks allowed to be specified as dispute_duration
        ///  in create_market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MaxDisputeDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xC04B030000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxRejectReasonLen
        ///  The maximum length of reject reason string.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxRejectReasonLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00040000");
            return result;
        }
        
        /// <summary>
        /// >> MaxMarketLifetime
        ///  The maximum allowed duration of a market from creation to market close in blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MaxMarketLifetime()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xA082A00000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxEditReasonLen
        ///  The maximum number of bytes allowed as edit reason.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxEditReasonLen()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00040000");
            return result;
        }
        
        /// <summary>
        /// >> OutsiderBond
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 OutsiderBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00409452A30300000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  The module identifier.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x7A67652F70726564");
            return result;
        }
        
        /// <summary>
        /// >> CloseEarlyBlockPeriod
        ///  The block time to wait for the market creator
        ///  before the early market close actually happens.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 CloseEarlyBlockPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xA08C000000000000");
            return result;
        }
        
        /// <summary>
        /// >> CloseEarlyTimeFramePeriod
        ///  The milliseconds to wait for the market creator
        ///  before the early market close actually happens.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 CloseEarlyTimeFramePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x00CCBF1900000000");
            return result;
        }
        
        /// <summary>
        /// >> OracleBond
        ///  The base amount of currency that must be bonded to ensure the oracle reports
        ///   in a timely manner.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 OracleBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00204AA9D10100000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ValidityBond
        ///  The base amount of currency that must be bonded for a permissionless market,
        ///  guaranteeing that it will resolve as anything but `Invalid`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ValidityBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00A0724E180900000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> PredictionMarketsErrors
    /// </summary>
    public enum PredictionMarketsErrors
    {
        
        /// <summary>
        /// >> CannotDisputeSameOutcome
        /// Someone is trying to call `dispute` with the same outcome that is currently
        /// registered on-chain.
        /// </summary>
        CannotDisputeSameOutcome,
        
        /// <summary>
        /// >> EditorNotCreator
        /// Only creator is able to edit the market.
        /// </summary>
        EditorNotCreator,
        
        /// <summary>
        /// >> EditReasonLengthExceedsMaxEditReasonLen
        /// EditReason's length greater than MaxEditReasonLen.
        /// </summary>
        EditReasonLengthExceedsMaxEditReasonLen,
        
        /// <summary>
        /// >> InsufficientFundsInMarketAccount
        /// Market account does not have enough funds to pay out.
        /// </summary>
        InsufficientFundsInMarketAccount,
        
        /// <summary>
        /// >> InsufficientShareBalance
        /// Sender does not have enough share balance.
        /// </summary>
        InsufficientShareBalance,
        
        /// <summary>
        /// >> InvalidMultihash
        /// An invalid Hash was included in a multihash parameter.
        /// </summary>
        InvalidMultihash,
        
        /// <summary>
        /// >> InvalidMarketType
        /// An invalid market type was found.
        /// </summary>
        InvalidMarketType,
        
        /// <summary>
        /// >> InvalidScoringRule
        /// An operation is requested that is unsupported for the given scoring rule.
        /// </summary>
        InvalidScoringRule,
        
        /// <summary>
        /// >> NotEnoughBalance
        /// Sender does not have enough balance to buy shares.
        /// </summary>
        NotEnoughBalance,
        
        /// <summary>
        /// >> MarketAlreadyReported
        /// Market is already reported on.
        /// </summary>
        MarketAlreadyReported,
        
        /// <summary>
        /// >> MarketDurationTooLong
        /// The market duration is longer than allowed.
        /// </summary>
        MarketDurationTooLong,
        
        /// <summary>
        /// >> MarketEditRequestAlreadyInProgress
        /// Market edit request is already in progress.
        /// </summary>
        MarketEditRequestAlreadyInProgress,
        
        /// <summary>
        /// >> MarketEditNotRequested
        /// Market is not requested for edit.
        /// </summary>
        MarketEditNotRequested,
        
        /// <summary>
        /// >> MarketIsNotActive
        /// Market was expected to be active.
        /// </summary>
        MarketIsNotActive,
        
        /// <summary>
        /// >> MarketIsNotClosed
        /// Market was expected to be closed.
        /// </summary>
        MarketIsNotClosed,
        
        /// <summary>
        /// >> MarketIsNotCollectingSubsidy
        /// A market in subsidy collection phase was expected.
        /// </summary>
        MarketIsNotCollectingSubsidy,
        
        /// <summary>
        /// >> MarketIsNotProposed
        /// A proposed market was expected.
        /// </summary>
        MarketIsNotProposed,
        
        /// <summary>
        /// >> MarketIsNotReported
        /// A reported market was expected.
        /// </summary>
        MarketIsNotReported,
        
        /// <summary>
        /// >> MarketIsNotDisputed
        /// A disputed market was expected.
        /// </summary>
        MarketIsNotDisputed,
        
        /// <summary>
        /// >> MarketIsNotResolved
        /// A resolved market was expected.
        /// </summary>
        MarketIsNotResolved,
        
        /// <summary>
        /// >> MarketStartTooSoon
        /// The point in time when the market becomes active is too soon.
        /// </summary>
        MarketStartTooSoon,
        
        /// <summary>
        /// >> MarketStartTooLate
        /// The point in time when the market becomes active is too late.
        /// </summary>
        MarketStartTooLate,
        
        /// <summary>
        /// >> MarketDisputeMechanismNotFailed
        /// The market dispute mechanism has not failed.
        /// </summary>
        MarketDisputeMechanismNotFailed,
        
        /// <summary>
        /// >> MissingBond
        /// Tried to settle missing bond.
        /// </summary>
        MissingBond,
        
        /// <summary>
        /// >> NotEnoughCategories
        /// The number of categories for a categorical market is too low.
        /// </summary>
        NotEnoughCategories,
        
        /// <summary>
        /// >> NoWinningBalance
        /// The user has no winning balance.
        /// </summary>
        NoWinningBalance,
        
        /// <summary>
        /// >> OutcomeMismatch
        /// Submitted outcome does not match market type.
        /// </summary>
        OutcomeMismatch,
        
        /// <summary>
        /// >> RejectReasonLengthExceedsMaxRejectReasonLen
        /// RejectReason's length greater than MaxRejectReasonLen.
        /// </summary>
        RejectReasonLengthExceedsMaxRejectReasonLen,
        
        /// <summary>
        /// >> ReporterNotOracle
        /// The report is not coming from designated oracle.
        /// </summary>
        ReporterNotOracle,
        
        /// <summary>
        /// >> StorageOverflow
        /// It was tried to append an item to storage beyond the boundaries.
        /// </summary>
        StorageOverflow,
        
        /// <summary>
        /// >> TooManyCategories
        /// Too many categories for a categorical market.
        /// </summary>
        TooManyCategories,
        
        /// <summary>
        /// >> InvalidDisputeMechanism
        /// The action requires another market dispute mechanism.
        /// </summary>
        InvalidDisputeMechanism,
        
        /// <summary>
        /// >> InvalidMarketStatus
        /// Catch-all error for invalid market status.
        /// </summary>
        InvalidMarketStatus,
        
        /// <summary>
        /// >> UnexpectedNoneInPostInfo
        /// The post dispatch should never be None.
        /// </summary>
        UnexpectedNoneInPostInfo,
        
        /// <summary>
        /// >> ZeroAmount
        /// An amount was illegally specified as zero.
        /// </summary>
        ZeroAmount,
        
        /// <summary>
        /// >> InvalidMarketPeriod
        /// Market period is faulty (too short, outside of limits)
        /// </summary>
        InvalidMarketPeriod,
        
        /// <summary>
        /// >> InvalidOutcomeRange
        /// The outcome range of the scalar market is invalid.
        /// </summary>
        InvalidOutcomeRange,
        
        /// <summary>
        /// >> NotAllowedToReportYet
        /// Can not report before market.deadlines.grace_period is ended.
        /// </summary>
        NotAllowedToReportYet,
        
        /// <summary>
        /// >> DisputeDurationSmallerThanMinDisputeDuration
        /// Specified dispute_duration is smaller than MinDisputeDuration.
        /// </summary>
        DisputeDurationSmallerThanMinDisputeDuration,
        
        /// <summary>
        /// >> OracleDurationSmallerThanMinOracleDuration
        /// Specified oracle_duration is smaller than MinOracleDuration.
        /// </summary>
        OracleDurationSmallerThanMinOracleDuration,
        
        /// <summary>
        /// >> DisputeDurationGreaterThanMaxDisputeDuration
        /// Specified dispute_duration is greater than MaxDisputeDuration.
        /// </summary>
        DisputeDurationGreaterThanMaxDisputeDuration,
        
        /// <summary>
        /// >> GracePeriodGreaterThanMaxGracePeriod
        /// Specified grace_period is greater than MaxGracePeriod.
        /// </summary>
        GracePeriodGreaterThanMaxGracePeriod,
        
        /// <summary>
        /// >> OracleDurationGreaterThanMaxOracleDuration
        /// Specified oracle_duration is greater than MaxOracleDuration.
        /// </summary>
        OracleDurationGreaterThanMaxOracleDuration,
        
        /// <summary>
        /// >> WeightsLenMustEqualAssetsLen
        /// The weights length has to be equal to the assets length.
        /// </summary>
        WeightsLenMustEqualAssetsLen,
        
        /// <summary>
        /// >> InvalidBaseAsset
        /// Provided base_asset is not allowed to be used as base_asset.
        /// </summary>
        InvalidBaseAsset,
        
        /// <summary>
        /// >> UnregisteredForeignAsset
        /// A foreign asset in not registered in AssetRegistry.
        /// </summary>
        UnregisteredForeignAsset,
        
        /// <summary>
        /// >> GlobalDisputeExistsAlready
        /// The start of the global dispute for this market happened already.
        /// </summary>
        GlobalDisputeExistsAlready,
        
        /// <summary>
        /// >> NoDisputeMechanism
        /// The market has no dispute mechanism.
        /// </summary>
        NoDisputeMechanism,
        
        /// <summary>
        /// >> NonZeroDisputePeriodOnTrustedMarket
        /// The dispute duration is positive but the market has dispute period.
        /// </summary>
        NonZeroDisputePeriodOnTrustedMarket,
        
        /// <summary>
        /// >> FeeTooHigh
        /// The fee is too high.
        /// </summary>
        FeeTooHigh,
        
        /// <summary>
        /// >> InvalidResolutionMechanism
        /// The resolution mechanism resulting from the scoring rule is not supported.
        /// </summary>
        InvalidResolutionMechanism,
        
        /// <summary>
        /// >> RequesterNotCreator
        /// The early market close operation was not requested by the market creator.
        /// </summary>
        RequesterNotCreator,
        
        /// <summary>
        /// >> EarlyCloseRequestTooLate
        /// The early close would be scheduled after the original market period end.
        /// </summary>
        EarlyCloseRequestTooLate,
        
        /// <summary>
        /// >> InvalidEarlyCloseState
        /// This early close state is not valid.
        /// </summary>
        InvalidEarlyCloseState,
        
        /// <summary>
        /// >> NoEarlyCloseScheduled
        /// There is no early close scheduled.
        /// </summary>
        NoEarlyCloseScheduled,
        
        /// <summary>
        /// >> OnlyAuthorizedCanScheduleEarlyClose
        /// After there was an early close already scheduled,
        /// only the `CloseMarketsEarlyOrigin` can schedule another one.
        /// </summary>
        OnlyAuthorizedCanScheduleEarlyClose,
        
        /// <summary>
        /// >> CallerNotMarketCreator
        /// The caller is not the market creator.
        /// </summary>
        CallerNotMarketCreator,
        
        /// <summary>
        /// >> MarketIsNotTrusted
        /// The market is not trusted.
        /// </summary>
        MarketIsNotTrusted,
        
        /// <summary>
        /// >> NotAllowedForBlockBasedMarkets
        /// The operation is not allowed for market with a block period.
        /// </summary>
        NotAllowedForBlockBasedMarkets,
        
        /// <summary>
        /// >> MarketNotInCloseTimeFrameList
        /// The market is not in the close time frame list.
        /// </summary>
        MarketNotInCloseTimeFrameList,
        
        /// <summary>
        /// >> MarketPeriodEndNotAlreadyReachedYet
        /// The market period end was not already reached yet.
        /// </summary>
        MarketPeriodEndNotAlreadyReachedYet,
    }
}
