//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> AuthorFilterStorage
    /// </summary>
    public sealed class AuthorFilterStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AuthorFilterStorage Constructor
        /// </summary>
        public AuthorFilterStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AuthorFilter", "EligibleRatio"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AuthorFilter", "EligibleCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32)));
        }
        
        /// <summary>
        /// >> EligibleRatioParams
        /// </summary>
        public static string EligibleRatioParams()
        {
            return RequestGenerator.GetStorage("AuthorFilter", "EligibleRatio", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EligibleRatioDefault
        /// Default value as hex string
        /// </summary>
        public static string EligibleRatioDefault()
        {
            return "0x32";
        }
        
        /// <summary>
        /// >> EligibleRatio
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> EligibleRatio(string blockhash, CancellationToken token)
        {
            string parameters = AuthorFilterStorage.EligibleRatioParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EligibleCountParams
        ///  The number of active authors that will be eligible at each height.
        /// </summary>
        public static string EligibleCountParams()
        {
            return RequestGenerator.GetStorage("AuthorFilter", "EligibleCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EligibleCountDefault
        /// Default value as hex string
        /// </summary>
        public static string EligibleCountDefault()
        {
            return "0x32000000";
        }
        
        /// <summary>
        /// >> EligibleCount
        ///  The number of active authors that will be eligible at each height.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32> EligibleCount(string blockhash, CancellationToken token)
        {
            string parameters = AuthorFilterStorage.EligibleCountParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AuthorFilterCalls
    /// </summary>
    public sealed class AuthorFilterCalls
    {
        
        /// <summary>
        /// >> set_eligible
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetEligible(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(112, "AuthorFilter", 0, "set_eligible", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AuthorFilterConstants
    /// </summary>
    public sealed class AuthorFilterConstants
    {
    }
}
