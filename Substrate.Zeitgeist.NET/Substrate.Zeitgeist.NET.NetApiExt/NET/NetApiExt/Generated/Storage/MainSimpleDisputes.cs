//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> SimpleDisputesStorage
    /// </summary>
    public sealed class SimpleDisputesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SimpleDisputesStorage Constructor
        /// </summary>
        public SimpleDisputesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SimpleDisputes", "Disputes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36)));
        }
        
        /// <summary>
        /// >> DisputesParams
        ///  For each market, this holds the dispute information for each dispute that's
        ///  been issued.
        /// </summary>
        public static string DisputesParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("SimpleDisputes", "Disputes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DisputesDefault
        /// Default value as hex string
        /// </summary>
        public static string DisputesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Disputes
        ///  For each market, this holds the dispute information for each dispute that's
        ///  been issued.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36> Disputes(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = SimpleDisputesStorage.DisputesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SimpleDisputesCalls
    /// </summary>
    public sealed class SimpleDisputesCalls
    {
        
        /// <summary>
        /// >> suggest_outcome
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SuggestOutcome(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> market_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.outcome_report.EnumOutcomeReport outcome)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(outcome.Encode());
            return new Method(55, "SimpleDisputes", 0, "suggest_outcome", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SimpleDisputesConstants
    /// </summary>
    public sealed class SimpleDisputesConstants
    {
        
        /// <summary>
        /// >> OutcomeBond
        ///  The base amount of currency that must be bonded in order to create a dispute.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 OutcomeBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0040E59C301200000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> OutcomeFactor
        ///  The additional amount of currency that must be bonded when creating a subsequent
        ///  dispute.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 OutcomeFactor()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00C817A8040000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDisputes
        ///  The maximum number of disputes allowed on any single market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDisputes()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x01000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  The pallet identifier.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x7A67652F73656470");
            return result;
        }
    }
    
    /// <summary>
    /// >> SimpleDisputesErrors
    /// </summary>
    public enum SimpleDisputesErrors
    {
        
        /// <summary>
        /// >> InvalidMarketStatus
        /// 1. Any resolution must either have a `Disputed` or `Reported` market status
        /// 2. If status is `Disputed`, then at least one dispute must exist
        /// </summary>
        InvalidMarketStatus,
        
        /// <summary>
        /// >> MarketDoesNotHaveSimpleDisputesMechanism
        /// On dispute or resolution, someone tried to pass a non-simple-disputes market type
        /// </summary>
        MarketDoesNotHaveSimpleDisputesMechanism,
        
        /// <summary>
        /// >> StorageOverflow
        /// </summary>
        StorageOverflow,
        
        /// <summary>
        /// >> OutcomeMismatch
        /// </summary>
        OutcomeMismatch,
        
        /// <summary>
        /// >> CannotDisputeSameOutcome
        /// </summary>
        CannotDisputeSameOutcome,
        
        /// <summary>
        /// >> MarketIsNotReported
        /// </summary>
        MarketIsNotReported,
        
        /// <summary>
        /// >> MaxDisputesReached
        /// The maximum number of disputes has been reached.
        /// </summary>
        MaxDisputesReached,
    }
}
