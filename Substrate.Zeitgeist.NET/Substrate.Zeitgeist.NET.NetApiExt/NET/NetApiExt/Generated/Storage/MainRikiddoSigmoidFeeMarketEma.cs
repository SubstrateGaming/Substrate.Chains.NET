//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> RikiddoSigmoidFeeMarketEmaStorage
    /// </summary>
    public sealed class RikiddoSigmoidFeeMarketEmaStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> RikiddoSigmoidFeeMarketEmaStorage Constructor
        /// </summary>
        public RikiddoSigmoidFeeMarketEmaStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("RikiddoSigmoidFeeMarketEma", "RikiddoPerPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV)));
        }
        
        /// <summary>
        /// >> RikiddoPerPoolParams
        ///  Storage that maps pool ids to Rikiddo instances.
        /// </summary>
        public static string RikiddoPerPoolParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("RikiddoSigmoidFeeMarketEma", "RikiddoPerPool", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RikiddoPerPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string RikiddoPerPoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RikiddoPerPool
        ///  Storage that maps pool ids to Rikiddo instances.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV> RikiddoPerPool(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = RikiddoSigmoidFeeMarketEmaStorage.RikiddoPerPoolParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> RikiddoSigmoidFeeMarketEmaCalls
    /// </summary>
    public sealed class RikiddoSigmoidFeeMarketEmaCalls
    {
    }
    
    /// <summary>
    /// >> RikiddoSigmoidFeeMarketEmaConstants
    /// </summary>
    public sealed class RikiddoSigmoidFeeMarketEmaConstants
    {
        
        /// <summary>
        /// >> BalanceFractionalDecimals
        ///  Number of fractional decimal places for one unit of currency.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 BalanceFractionalDecimals()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0A");
            return result;
        }
    }
    
    /// <summary>
    /// >> RikiddoSigmoidFeeMarketEmaErrors
    /// </summary>
    public enum RikiddoSigmoidFeeMarketEmaErrors
    {
        
        /// <summary>
        /// >> FixedConversionImpossible
        /// Conversion between the `Balance` and the internal Rikiddo core type failed.
        /// </summary>
        FixedConversionImpossible,
        
        /// <summary>
        /// >> RikiddoNotFoundForPool
        /// For a given `poolid`, no Rikiddo instance could be found.
        /// </summary>
        RikiddoNotFoundForPool,
        
        /// <summary>
        /// >> RikiddoAlreadyExistsForPool
        /// Trying to create a Rikiddo instance for a `poolid` that already has a Rikiddo instance.
        /// </summary>
        RikiddoAlreadyExistsForPool,
    }
}
