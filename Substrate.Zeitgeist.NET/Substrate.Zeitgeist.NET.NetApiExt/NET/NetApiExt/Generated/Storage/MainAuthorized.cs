//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> AuthorizedStorage
    /// </summary>
    public sealed class AuthorizedStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AuthorizedStorage Constructor
        /// </summary>
        public AuthorizedStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Authorized", "AuthorizedOutcomeReports"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.AuthorityReport)));
        }
        
        /// <summary>
        /// >> AuthorizedOutcomeReportsParams
        ///  Maps the market id to the outcome reported by the authorized account.    
        /// </summary>
        public static string AuthorizedOutcomeReportsParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Authorized", "AuthorizedOutcomeReports", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AuthorizedOutcomeReportsDefault
        /// Default value as hex string
        /// </summary>
        public static string AuthorizedOutcomeReportsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AuthorizedOutcomeReports
        ///  Maps the market id to the outcome reported by the authorized account.    
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.AuthorityReport> AuthorizedOutcomeReports(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = AuthorizedStorage.AuthorizedOutcomeReportsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.AuthorityReport>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AuthorizedCalls
    /// </summary>
    public sealed class AuthorizedCalls
    {
        
        /// <summary>
        /// >> authorize_market_outcome
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AuthorizeMarketOutcome(Substrate.NetApi.Model.Types.Primitive.U128 market_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.outcome_report.EnumOutcomeReport outcome)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(market_id.Encode());
            byteArray.AddRange(outcome.Encode());
            return new Method(51, "Authorized", 0, "authorize_market_outcome", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AuthorizedConstants
    /// </summary>
    public sealed class AuthorizedConstants
    {
        
        /// <summary>
        /// >> CorrectionPeriod
        ///  The period, in which the authority can correct the outcome of a market.
        ///  This value must not be zero.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 CorrectionPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x201C000000000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  Identifier of this pallet
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x7A67652F61747A64");
            return result;
        }
    }
    
    /// <summary>
    /// >> AuthorizedErrors
    /// </summary>
    public enum AuthorizedErrors
    {
        
        /// <summary>
        /// >> MarketDoesNotHaveDisputeMechanismAuthorized
        /// The market unexpectedly has the incorrect dispute mechanism.
        /// </summary>
        MarketDoesNotHaveDisputeMechanismAuthorized,
        
        /// <summary>
        /// >> MarketIsNotDisputed
        /// An account attempts to submit a report to an undisputed market.
        /// </summary>
        MarketIsNotDisputed,
        
        /// <summary>
        /// >> OutcomeMismatch
        /// The report does not match the market's type.
        /// </summary>
        OutcomeMismatch,
    }
}
