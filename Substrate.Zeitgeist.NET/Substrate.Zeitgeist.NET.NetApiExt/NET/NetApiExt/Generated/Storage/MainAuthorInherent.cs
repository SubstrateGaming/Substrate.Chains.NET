//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> AuthorInherentStorage
    /// </summary>
    public sealed class AuthorInherentStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AuthorInherentStorage Constructor
        /// </summary>
        public AuthorInherentStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AuthorInherent", "Author"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AuthorInherent", "HighestSlotSeen"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> AuthorParams
        ///  Author of current block.
        /// </summary>
        public static string AuthorParams()
        {
            return RequestGenerator.GetStorage("AuthorInherent", "Author", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuthorDefault
        /// Default value as hex string
        /// </summary>
        public static string AuthorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Author
        ///  Author of current block.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> Author(string blockhash, CancellationToken token)
        {
            string parameters = AuthorInherentStorage.AuthorParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HighestSlotSeenParams
        ///  The highest slot that has been seen in the history of this chain.
        ///  This is a strictly-increasing value.
        /// </summary>
        public static string HighestSlotSeenParams()
        {
            return RequestGenerator.GetStorage("AuthorInherent", "HighestSlotSeen", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HighestSlotSeenDefault
        /// Default value as hex string
        /// </summary>
        public static string HighestSlotSeenDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> HighestSlotSeen
        ///  The highest slot that has been seen in the history of this chain.
        ///  This is a strictly-increasing value.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> HighestSlotSeen(string blockhash, CancellationToken token)
        {
            string parameters = AuthorInherentStorage.HighestSlotSeenParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AuthorInherentCalls
    /// </summary>
    public sealed class AuthorInherentCalls
    {
        
        /// <summary>
        /// >> kick_off_authorship_validation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method KickOffAuthorshipValidation()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(111, "AuthorInherent", 0, "kick_off_authorship_validation", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AuthorInherentConstants
    /// </summary>
    public sealed class AuthorInherentConstants
    {
    }
    
    /// <summary>
    /// >> AuthorInherentErrors
    /// </summary>
    public enum AuthorInherentErrors
    {
        
        /// <summary>
        /// >> AuthorAlreadySet
        /// Author already set in block.
        /// </summary>
        AuthorAlreadySet,
        
        /// <summary>
        /// >> NoAccountId
        /// No AccountId was found to be associated with this author
        /// </summary>
        NoAccountId,
        
        /// <summary>
        /// >> CannotBeAuthor
        /// The author in the inherent is not an eligible author.
        /// </summary>
        CannotBeAuthor,
    }
}
