//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> CourtStorage
    /// </summary>
    public sealed class CourtStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CourtStorage Constructor
        /// </summary>
        public CourtStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "CourtPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "Participants"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "SelectionNonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "SelectedDraws"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "Courts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "NextCourtId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "MarketIdToCourtId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "CourtIdToMarketId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "RequestBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Court", "YearlyInflation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill)));
        }
        
        /// <summary>
        /// >> CourtPoolParams
        ///  The pool of jurors and delegators who can get randomly selected according to their stake.
        ///  The pool is sorted by `stake` in ascending order [min, ..., max].
        /// </summary>
        public static string CourtPoolParams()
        {
            return RequestGenerator.GetStorage("Court", "CourtPool", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CourtPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string CourtPoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CourtPool
        ///  The pool of jurors and delegators who can get randomly selected according to their stake.
        ///  The pool is sorted by `stake` in ascending order [min, ..., max].
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32> CourtPool(string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.CourtPoolParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ParticipantsParams
        ///  The general information about each juror and delegator.
        /// </summary>
        public static string ParticipantsParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Court", "Participants", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ParticipantsDefault
        /// Default value as hex string
        /// </summary>
        public static string ParticipantsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Participants
        ///  The general information about each juror and delegator.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo> Participants(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.ParticipantsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SelectionNonceParams
        ///  An extra layer of pseudo randomness so that we can generate a new random seed with it.
        /// </summary>
        public static string SelectionNonceParams()
        {
            return RequestGenerator.GetStorage("Court", "SelectionNonce", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SelectionNonceDefault
        /// Default value as hex string
        /// </summary>
        public static string SelectionNonceDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> SelectionNonce
        ///  An extra layer of pseudo randomness so that we can generate a new random seed with it.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> SelectionNonce(string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.SelectionNonceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SelectedDrawsParams
        ///  The randomly selected jurors and delegators, their vote weight,
        ///  the status about their vote and their selected and risked funds.
        /// </summary>
        public static string SelectedDrawsParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Court", "SelectedDraws", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SelectedDrawsDefault
        /// Default value as hex string
        /// </summary>
        public static string SelectedDrawsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SelectedDraws
        ///  The randomly selected jurors and delegators, their vote weight,
        ///  the status about their vote and their selected and risked funds.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34> SelectedDraws(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.SelectedDrawsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CourtsParams
        ///  The general information about each court.
        /// </summary>
        public static string CourtsParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Court", "Courts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CourtsDefault
        /// Default value as hex string
        /// </summary>
        public static string CourtsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Courts
        ///  The general information about each court.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo> Courts(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.CourtsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextCourtIdParams
        ///  The next identifier for a new court.
        /// </summary>
        public static string NextCourtIdParams()
        {
            return RequestGenerator.GetStorage("Court", "NextCourtId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextCourtIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextCourtIdDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> NextCourtId
        ///  The next identifier for a new court.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NextCourtId(string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.NextCourtIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketIdToCourtIdParams
        ///  Mapping from market id to court id.
        /// </summary>
        public static string MarketIdToCourtIdParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Court", "MarketIdToCourtId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketIdToCourtIdDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketIdToCourtIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketIdToCourtId
        ///  Mapping from market id to court id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MarketIdToCourtId(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.MarketIdToCourtIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CourtIdToMarketIdParams
        ///  Mapping from court id to market id.
        /// </summary>
        public static string CourtIdToMarketIdParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("Court", "CourtIdToMarketId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CourtIdToMarketIdDefault
        /// Default value as hex string
        /// </summary>
        public static string CourtIdToMarketIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CourtIdToMarketId
        ///  Mapping from court id to market id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> CourtIdToMarketId(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.CourtIdToMarketIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RequestBlockParams
        ///  The future block number when jurors should start voting.
        ///  This is useful for the user experience of the jurors to vote for multiple courts at once.
        /// </summary>
        public static string RequestBlockParams()
        {
            return RequestGenerator.GetStorage("Court", "RequestBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RequestBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string RequestBlockDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> RequestBlock
        ///  The future block number when jurors should start voting.
        ///  This is useful for the user experience of the jurors to vote for multiple courts at once.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> RequestBlock(string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.RequestBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> YearlyInflationParams
        ///  The current inflation rate.
        /// </summary>
        public static string YearlyInflationParams()
        {
            return RequestGenerator.GetStorage("Court", "YearlyInflation", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> YearlyInflationDefault
        /// Default value as hex string
        /// </summary>
        public static string YearlyInflationDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> YearlyInflation
        ///  The current inflation rate.
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> YearlyInflation(string blockhash, CancellationToken token)
        {
            string parameters = CourtStorage.YearlyInflationParams();
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CourtCalls
    /// </summary>
    public sealed class CourtCalls
    {
        
        /// <summary>
        /// >> join_court
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JoinCourt(Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            return new Method(52, "Court", 0, "join_court", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Delegate(Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> delegations)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(delegations.Encode());
            return new Method(52, "Court", 1, "delegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> prepare_exit_court
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PrepareExitCourt()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(52, "Court", 2, "prepare_exit_court", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> exit_court
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExitCourt(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress court_participant)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(court_participant.Encode());
            return new Method(52, "Court", 3, "exit_court", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vote(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> court_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.primitive_types.H256 commitment_vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(court_id.Encode());
            byteArray.AddRange(commitment_vote.Encode());
            return new Method(52, "Court", 4, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> denounce_vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DenounceVote(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> court_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress juror, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.EnumVoteItem vote_item, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.primitive_types.H256 salt)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(court_id.Encode());
            byteArray.AddRange(juror.Encode());
            byteArray.AddRange(vote_item.Encode());
            byteArray.AddRange(salt.Encode());
            return new Method(52, "Court", 5, "denounce_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reveal_vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RevealVote(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> court_id, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.EnumVoteItem vote_item, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.primitive_types.H256 salt)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(court_id.Encode());
            byteArray.AddRange(vote_item.Encode());
            byteArray.AddRange(salt.Encode());
            return new Method(52, "Court", 6, "reveal_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> appeal
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Appeal(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> court_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(court_id.Encode());
            return new Method(52, "Court", 7, "appeal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reassign_court_stakes
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReassignCourtStakes(Substrate.NetApi.Model.Types.Primitive.U128 court_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(court_id.Encode());
            return new Method(52, "Court", 8, "reassign_court_stakes", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_inflation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetInflation(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill inflation)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(inflation.Encode());
            return new Method(52, "Court", 9, "set_inflation", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CourtConstants
    /// </summary>
    public sealed class CourtConstants
    {
        
        /// <summary>
        /// >> AppealBond
        ///  The required base bond in order to get an appeal initiated.
        ///  This bond increases exponentially with the number of appeals.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AppealBond()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0040E59C301200000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> BlocksPerYear
        ///  The expected blocks per year to calculate the inflation emission.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 BlocksPerYear()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xA820280000000000");
            return result;
        }
        
        /// <summary>
        /// >> VotePeriod
        ///  The time in which the jurors can cast their commitment vote.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 VotePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x6054000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AggregationPeriod
        ///  The time in which the jurors should reveal their commitment vote.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 AggregationPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x6054000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AppealPeriod
        ///  The time in which a court case can get appealed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 AppealPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x201C000000000000");
            return result;
        }
        
        /// <summary>
        /// >> LockId
        ///  The court lock identifier.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Types.Base.Arr8U8 LockId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Types.Base.Arr8U8();
            result.Create("0x7A67652F636F6C6B");
            return result;
        }
        
        /// <summary>
        /// >> PalletId
        ///  Identifier of this pallet
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x7A67652F636F7574");
            return result;
        }
        
        /// <summary>
        /// >> InflationPeriod
        ///  The inflation period in which new tokens are minted.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 InflationPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xC04B030000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxAppeals
        ///  The maximum number of appeals until a court fails.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxAppeals()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x04000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxSelectedDraws
        ///  The maximum number of randomly selected n * `MinJurorStake` (n equals all draw weights)
        ///  out of all jurors and delegators stake. This configuration parameter should be
        ///  the maximum necessary_draws_weight multiplied by 2.
        ///  Each `MinJurorStake` (draw weight) out of `n * MinJurorStake` belongs
        ///  to one juror or one delegator.
        ///  (necessary_draws_weight = 2^(appeals_len) * 31 + 2^(appeals_len) - 1)
        ///  Assume MaxAppeals - 1 (= 3), example: 2^3 * 31 + 2^3 - 1 = 255
        ///  => 2 * 255 = 510 = `MaxSelectedDraws`.
        ///  Why the multiplication by two?
        ///  Because each draw weight is associated with one juror account id and
        ///  potentially a delegator account id.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxSelectedDraws()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xFE010000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDelegations
        ///  The maximum number of possible delegations.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDelegations()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x05000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxCourtParticipants
        ///  The maximum number of jurors and delegators that can be registered.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxCourtParticipants()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
        
        /// <summary>
        /// >> MaxYearlyInflation
        ///  The maximum yearly inflation rate.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill MaxYearlyInflation()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
            result.Create("0x00E1F505");
            return result;
        }
        
        /// <summary>
        /// >> MinJurorStake
        ///  The minimum stake a user needs to lock to become a juror.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinJurorStake()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x005039278C0400000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> RequestInterval
        ///  The global interval which schedules the start of new court vote periods.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 RequestInterval()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xE0C4000000000000");
            return result;
        }
        
        /// <summary>
        /// >> TreasuryPalletId
        ///  The treasury pallet identifier.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId TreasuryPalletId()
        {
            var result = new Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x7A67652F74737279");
            return result;
        }
    }
    
    /// <summary>
    /// >> CourtErrors
    /// </summary>
    public enum CourtErrors
    {
        
        /// <summary>
        /// >> JurorDoesNotExist
        /// An account id does not exist on the jurors storage.
        /// </summary>
        JurorDoesNotExist,
        
        /// <summary>
        /// >> MarketDoesNotHaveCourtMechanism
        /// On dispute or resolution, someone tried to pass a non-court market type.
        /// </summary>
        MarketDoesNotHaveCourtMechanism,
        
        /// <summary>
        /// >> MarketIsNotDisputed
        /// The market is not in a state where it can be disputed.
        /// </summary>
        MarketIsNotDisputed,
        
        /// <summary>
        /// >> CallerIsNotACourtParticipant
        /// This operation requires the caller to be a juror or delegator.
        /// </summary>
        CallerIsNotACourtParticipant,
        
        /// <summary>
        /// >> VoteAlreadyRevealed
        /// The vote is not commitment.
        /// </summary>
        VoteAlreadyRevealed,
        
        /// <summary>
        /// >> CommitmentHashMismatch
        /// The vote item and salt reveal do not match the commitment vote.
        /// </summary>
        CommitmentHashMismatch,
        
        /// <summary>
        /// >> CourtNotFound
        /// No court for this market id was found.
        /// </summary>
        CourtNotFound,
        
        /// <summary>
        /// >> NotInVotingPeriod
        /// This operation is only allowed in the voting period.
        /// </summary>
        NotInVotingPeriod,
        
        /// <summary>
        /// >> NotInAggregationPeriod
        /// This operation is only allowed in the aggregation period.
        /// </summary>
        NotInAggregationPeriod,
        
        /// <summary>
        /// >> MaxAppealsReached
        /// The maximum number of appeals has been reached.
        /// </summary>
        MaxAppealsReached,
        
        /// <summary>
        /// >> NotInAppealPeriod
        /// This operation is only allowed in the appeal period.
        /// </summary>
        NotInAppealPeriod,
        
        /// <summary>
        /// >> InvalidVoteState
        /// The caller of this extrinsic needs to be drawn or in the commitment vote state.
        /// </summary>
        InvalidVoteState,
        
        /// <summary>
        /// >> BelowMinJurorStake
        /// The amount is below the minimum required stake.
        /// </summary>
        BelowMinJurorStake,
        
        /// <summary>
        /// >> MaxCourtParticipantsReached
        /// The maximum number of possible jurors has been reached.
        /// </summary>
        MaxCourtParticipantsReached,
        
        /// <summary>
        /// >> AlreadyPreparedExit
        /// In order to exit the court the juror has to exit
        /// the pool first with `prepare_exit_court`.
        /// </summary>
        AlreadyPreparedExit,
        
        /// <summary>
        /// >> JurorNotDrawn
        /// The juror was not randomly selected for the court.
        /// </summary>
        JurorNotDrawn,
        
        /// <summary>
        /// >> JurorDidNotVote
        /// The juror was drawn but did not manage to commitmently vote within the court.
        /// </summary>
        JurorDidNotVote,
        
        /// <summary>
        /// >> VoteAlreadyDenounced
        /// The juror was already denounced.
        /// </summary>
        VoteAlreadyDenounced,
        
        /// <summary>
        /// >> CallerDenouncedItself
        /// A juror tried to denounce herself.
        /// </summary>
        CallerDenouncedItself,
        
        /// <summary>
        /// >> CourtNotClosed
        /// The court is not in the closed state.
        /// </summary>
        CourtNotClosed,
        
        /// <summary>
        /// >> CourtAlreadyReassigned
        /// The juror stakes of the court already got reassigned.
        /// </summary>
        CourtAlreadyReassigned,
        
        /// <summary>
        /// >> NotEnoughJurorsAndDelegatorsStake
        /// There are not enough jurors in the pool.
        /// </summary>
        NotEnoughJurorsAndDelegatorsStake,
        
        /// <summary>
        /// >> MarketReportNotFound
        /// The report of the market was not found.
        /// </summary>
        MarketReportNotFound,
        
        /// <summary>
        /// >> MaxCourtIdReached
        /// The maximum number of court ids is reached.
        /// </summary>
        MaxCourtIdReached,
        
        /// <summary>
        /// >> AmountExceedsBalance
        /// The caller has not enough funds to join the court with the specified amount.
        /// </summary>
        AmountExceedsBalance,
        
        /// <summary>
        /// >> AmountBelowLastJoin
        /// After the first join of the court the amount has to be equal or higher than the current stake.
        /// This is to ensure the slashable amount in active court rounds
        /// is still smaller or equal to the stake.
        /// It is also necessary to calculate the `unconsumed` stake properly.
        /// Otherwise a juror could just reduce the probability to get selected whenever they want.
        /// But this has to be done by `prepare_exit_court` and `exit_court`.
        /// Additionally, the `join_court` and `delegate` extrinsics
        /// use `extend_lock` and not `set_lock` or `remove_lock`.
        /// This means those extrinsics are not meant to get out, but only to get into the court.
        /// </summary>
        AmountBelowLastJoin,
        
        /// <summary>
        /// >> AmountBelowLowestJuror
        /// The amount is too low to kick the lowest juror out of the stake-weighted pool.
        /// </summary>
        AmountBelowLowestJuror,
        
        /// <summary>
        /// >> CourtParticipantTwiceInPool
        /// This should not happen, because the juror account should only be once in a pool.
        /// </summary>
        CourtParticipantTwiceInPool,
        
        /// <summary>
        /// >> CallerNotInSelectedDraws
        /// The caller of this function is not part of the juror draws.
        /// </summary>
        CallerNotInSelectedDraws,
        
        /// <summary>
        /// >> AppealBondExceedsBalance
        /// The callers balance is lower than the appeal bond.
        /// </summary>
        AppealBondExceedsBalance,
        
        /// <summary>
        /// >> PrematureExit
        /// The juror should at least wait one inflation period after the funds can be unstaked.
        /// Otherwise hopping in and out for inflation rewards is possible.
        /// </summary>
        PrematureExit,
        
        /// <summary>
        /// >> PrepareExitAtNotPresent
        /// The `prepare_exit_at` field is not present.
        /// </summary>
        PrepareExitAtNotPresent,
        
        /// <summary>
        /// >> MaxDelegationsReached
        /// The maximum number of delegations is reached for this account.
        /// </summary>
        MaxDelegationsReached,
        
        /// <summary>
        /// >> JurorDelegated
        /// The juror decided to be a delegator.
        /// </summary>
        JurorDelegated,
        
        /// <summary>
        /// >> SelfDelegationNotAllowed
        /// A delegation to the own account is not possible.
        /// </summary>
        SelfDelegationNotAllowed,
        
        /// <summary>
        /// >> IdenticalDelegationsNotAllowed
        /// The set of delegations has to be distinct.
        /// </summary>
        IdenticalDelegationsNotAllowed,
        
        /// <summary>
        /// >> NoDelegations
        /// The call to `delegate` is not valid if no delegations are provided.
        /// </summary>
        NoDelegations,
        
        /// <summary>
        /// >> DelegatedToInvalidJuror
        /// The set of delegations should contain only valid and active juror accounts.
        /// </summary>
        DelegatedToInvalidJuror,
        
        /// <summary>
        /// >> MarketIdToCourtIdNotFound
        /// The market id to court id mapping was not found.
        /// </summary>
        MarketIdToCourtIdNotFound,
        
        /// <summary>
        /// >> CourtIdToMarketIdNotFound
        /// The court id to market id mapping was not found.
        /// </summary>
        CourtIdToMarketIdNotFound,
        
        /// <summary>
        /// >> InvalidVoteItemForOutcomeCourt
        /// The vote item is not valid for this (outcome) court.
        /// </summary>
        InvalidVoteItemForOutcomeCourt,
        
        /// <summary>
        /// >> InvalidVoteItemForBinaryCourt
        /// The vote item is not valid for this (binary) court.
        /// </summary>
        InvalidVoteItemForBinaryCourt,
        
        /// <summary>
        /// >> AppealedVoteItemIsNoOutcome
        /// The appealed vote item is not an outcome.
        /// </summary>
        AppealedVoteItemIsNoOutcome,
        
        /// <summary>
        /// >> WinnerVoteItemIsNoOutcome
        /// The winner vote item is not an outcome.
        /// </summary>
        WinnerVoteItemIsNoOutcome,
        
        /// <summary>
        /// >> OutcomeMismatch
        /// The outcome does not match the market outcomes.
        /// </summary>
        OutcomeMismatch,
        
        /// <summary>
        /// >> VoteItemIsNoOutcome
        /// The vote item was expected to be an outcome, but is actually not an outcome.
        /// </summary>
        VoteItemIsNoOutcome,
        
        /// <summary>
        /// >> Unexpected
        /// Action cannot be completed because an unexpected error has occurred. This should be
        /// reported to protocol maintainers.
        /// </summary>
        Unexpected,
        
        /// <summary>
        /// >> InflationExceedsMaxYearlyInflation
        /// The inflation rate is too high.
        /// </summary>
        InflationExceedsMaxYearlyInflation,
    }
}
