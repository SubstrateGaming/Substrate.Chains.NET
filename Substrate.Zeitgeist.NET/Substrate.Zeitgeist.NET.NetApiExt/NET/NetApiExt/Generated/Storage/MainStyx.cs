//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> StyxStorage
    /// </summary>
    public sealed class StyxStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> StyxStorage Constructor
        /// </summary>
        public StyxStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Styx", "Crossings"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Styx", "BurnAmount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> CrossingsParams
        ///  Keep track of crossings. Accounts are only able to cross once.
        /// </summary>
        public static string CrossingsParams(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Styx", "Crossings", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CrossingsDefault
        /// Default value as hex string
        /// </summary>
        public static string CrossingsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Crossings
        ///  Keep track of crossings. Accounts are only able to cross once.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Crossings(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = StyxStorage.CrossingsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BurnAmountParams
        ///  An extra layer of pseudo randomness.
        /// </summary>
        public static string BurnAmountParams()
        {
            return RequestGenerator.GetStorage("Styx", "BurnAmount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BurnAmountDefault
        /// Default value as hex string
        /// </summary>
        public static string BurnAmountDefault()
        {
            return "0x00204AA9D10100000000000000000000";
        }
        
        /// <summary>
        /// >> BurnAmount
        ///  An extra layer of pseudo randomness.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> BurnAmount(string blockhash, CancellationToken token)
        {
            string parameters = StyxStorage.BurnAmountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> StyxCalls
    /// </summary>
    public sealed class StyxCalls
    {
        
        /// <summary>
        /// >> cross
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Cross()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(58, "Styx", 0, "cross", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_burn_amount
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetBurnAmount(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            return new Method(58, "Styx", 1, "set_burn_amount", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> StyxConstants
    /// </summary>
    public sealed class StyxConstants
    {
    }
    
    /// <summary>
    /// >> StyxErrors
    /// </summary>
    public enum StyxErrors
    {
        
        /// <summary>
        /// >> FundDoesNotHaveEnoughFreeBalance
        /// Account does not have enough balance to cross.
        /// </summary>
        FundDoesNotHaveEnoughFreeBalance,
        
        /// <summary>
        /// >> HasAlreadyCrossed
        /// Account has already crossed.
        /// </summary>
        HasAlreadyCrossed,
    }
}
