//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> MarketCommonsStorage
    /// </summary>
    public sealed class MarketCommonsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MarketCommonsStorage Constructor
        /// </summary>
        public MarketCommonsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MarketCommons", "Markets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MarketCommons", "MarketCounter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MarketCommons", "MarketPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> MarketsParams
        ///  Holds all markets
        /// </summary>
        public static string MarketsParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("MarketCommons", "Markets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketsDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Markets
        ///  Holds all markets
        /// </summary>
        public async Task<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market> Markets(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = MarketCommonsStorage.MarketsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketCounterParams
        ///  The number of markets that have been created (including removed markets) and the next
        ///  identifier for a created market.
        /// </summary>
        public static string MarketCounterParams()
        {
            return RequestGenerator.GetStorage("MarketCommons", "MarketCounter", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MarketCounterDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketCounterDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MarketCounter
        ///  The number of markets that have been created (including removed markets) and the next
        ///  identifier for a created market.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MarketCounter(string blockhash, CancellationToken token)
        {
            string parameters = MarketCommonsStorage.MarketCounterParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MarketPoolParams
        ///  Maps a market ID to a related pool ID. It is up to the caller to keep and sync valid
        ///  existent markets with valid existent pools.
        /// 
        ///  Beware! DEPRECATED as of v0.5.0.
        /// </summary>
        public static string MarketPoolParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("MarketCommons", "MarketPool", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MarketPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string MarketPoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MarketPool
        ///  Maps a market ID to a related pool ID. It is up to the caller to keep and sync valid
        ///  existent markets with valid existent pools.
        /// 
        ///  Beware! DEPRECATED as of v0.5.0.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MarketPool(Substrate.NetApi.Model.Types.Primitive.U128 key, string blockhash, CancellationToken token)
        {
            string parameters = MarketCommonsStorage.MarketPoolParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MarketCommonsCalls
    /// </summary>
    public sealed class MarketCommonsCalls
    {
    }
    
    /// <summary>
    /// >> MarketCommonsConstants
    /// </summary>
    public sealed class MarketCommonsConstants
    {
    }
    
    /// <summary>
    /// >> MarketCommonsErrors
    /// </summary>
    public enum MarketCommonsErrors
    {
        
        /// <summary>
        /// >> MarketDoesNotExist
        /// A market with the provided ID does not exist.
        /// </summary>
        MarketDoesNotExist,
        
        /// <summary>
        /// >> MarketPoolDoesNotExist
        /// Market does not have an stored associated pool id.
        /// </summary>
        MarketPoolDoesNotExist,
        
        /// <summary>
        /// >> NoMarketHasBeenCreated
        /// It is not possible to fetch the latest market ID when
        /// no market has been created.
        /// </summary>
        NoMarketHasBeenCreated,
        
        /// <summary>
        /// >> NoReport
        /// Market does not have a report
        /// </summary>
        NoReport,
        
        /// <summary>
        /// >> PoolAlreadyExists
        /// There's a pool registered for this market already.
        /// </summary>
        PoolAlreadyExists,
    }
}
