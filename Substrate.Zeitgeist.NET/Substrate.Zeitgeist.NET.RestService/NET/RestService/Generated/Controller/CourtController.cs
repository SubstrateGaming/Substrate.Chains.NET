//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Zeitgeist.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// CourtController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class CourtController : ControllerBase
    {
        
        private ICourtStorage _courtStorage;
        
        /// <summary>
        /// CourtController constructor.
        /// </summary>
        public CourtController(ICourtStorage courtStorage)
        {
            _courtStorage = courtStorage;
        }
        
        /// <summary>
        /// >> CourtPool
        ///  The pool of jurors and delegators who can get randomly selected according to their stake.
        ///  The pool is sorted by `stake` in ascending order [min, ..., max].
        /// </summary>
        [HttpGet("CourtPool")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "CourtPoolParams")]
        public IActionResult GetCourtPool()
        {
            return this.Ok(_courtStorage.GetCourtPool());
        }
        
        /// <summary>
        /// >> Participants
        ///  The general information about each juror and delegator.
        /// </summary>
        [HttpGet("Participants")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "ParticipantsParams", typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetParticipants(string key)
        {
            return this.Ok(_courtStorage.GetParticipants(key));
        }
        
        /// <summary>
        /// >> SelectionNonce
        ///  An extra layer of pseudo randomness so that we can generate a new random seed with it.
        /// </summary>
        [HttpGet("SelectionNonce")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U64), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "SelectionNonceParams")]
        public IActionResult GetSelectionNonce()
        {
            return this.Ok(_courtStorage.GetSelectionNonce());
        }
        
        /// <summary>
        /// >> SelectedDraws
        ///  The randomly selected jurors and delegators, their vote weight,
        ///  the status about their vote and their selected and risked funds.
        /// </summary>
        [HttpGet("SelectedDraws")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "SelectedDrawsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetSelectedDraws(string key)
        {
            return this.Ok(_courtStorage.GetSelectedDraws(key));
        }
        
        /// <summary>
        /// >> Courts
        ///  The general information about each court.
        /// </summary>
        [HttpGet("Courts")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "CourtsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetCourts(string key)
        {
            return this.Ok(_courtStorage.GetCourts(key));
        }
        
        /// <summary>
        /// >> NextCourtId
        ///  The next identifier for a new court.
        /// </summary>
        [HttpGet("NextCourtId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "NextCourtIdParams")]
        public IActionResult GetNextCourtId()
        {
            return this.Ok(_courtStorage.GetNextCourtId());
        }
        
        /// <summary>
        /// >> MarketIdToCourtId
        ///  Mapping from market id to court id.
        /// </summary>
        [HttpGet("MarketIdToCourtId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "MarketIdToCourtIdParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetMarketIdToCourtId(string key)
        {
            return this.Ok(_courtStorage.GetMarketIdToCourtId(key));
        }
        
        /// <summary>
        /// >> CourtIdToMarketId
        ///  Mapping from court id to market id.
        /// </summary>
        [HttpGet("CourtIdToMarketId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "CourtIdToMarketIdParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetCourtIdToMarketId(string key)
        {
            return this.Ok(_courtStorage.GetCourtIdToMarketId(key));
        }
        
        /// <summary>
        /// >> RequestBlock
        ///  The future block number when jurors should start voting.
        ///  This is useful for the user experience of the jurors to vote for multiple courts at once.
        /// </summary>
        [HttpGet("RequestBlock")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U64), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "RequestBlockParams")]
        public IActionResult GetRequestBlock()
        {
            return this.Ok(_courtStorage.GetRequestBlock());
        }
        
        /// <summary>
        /// >> YearlyInflation
        ///  The current inflation rate.
        /// </summary>
        [HttpGet("YearlyInflation")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.CourtStorage), "YearlyInflationParams")]
        public IActionResult GetYearlyInflation()
        {
            return this.Ok(_courtStorage.GetYearlyInflation());
        }
    }
}
