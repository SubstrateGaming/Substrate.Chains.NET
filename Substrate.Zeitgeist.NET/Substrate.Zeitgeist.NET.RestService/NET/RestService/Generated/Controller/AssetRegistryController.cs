//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Zeitgeist.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// AssetRegistryController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class AssetRegistryController : ControllerBase
    {
        
        private IAssetRegistryStorage _assetRegistryStorage;
        
        /// <summary>
        /// AssetRegistryController constructor.
        /// </summary>
        public AssetRegistryController(IAssetRegistryStorage assetRegistryStorage)
        {
            _assetRegistryStorage = assetRegistryStorage;
        }
        
        /// <summary>
        /// >> Metadata
        ///  The metadata of an asset, indexed by asset id.
        /// </summary>
        [HttpGet("Metadata")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.orml_traits.asset_registry.AssetMetadata), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.AssetRegistryStorage), "MetadataParams", typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset))]
        public IActionResult GetMetadata(string key)
        {
            return this.Ok(_assetRegistryStorage.GetMetadata(key));
        }
        
        /// <summary>
        /// >> LocationToAssetId
        ///  Maps a multilocation to an asset id - useful when processing xcm
        ///  messages.
        /// </summary>
        [HttpGet("LocationToAssetId")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.AssetRegistryStorage), "LocationToAssetIdParams", typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation))]
        public IActionResult GetLocationToAssetId(string key)
        {
            return this.Ok(_assetRegistryStorage.GetLocationToAssetId(key));
        }
        
        /// <summary>
        /// >> LastAssetId
        ///  The last processed asset id - used when assigning a sequential id.
        /// </summary>
        [HttpGet("LastAssetId")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.AssetRegistryStorage), "LastAssetIdParams")]
        public IActionResult GetLastAssetId()
        {
            return this.Ok(_assetRegistryStorage.GetLastAssetId());
        }
    }
}
