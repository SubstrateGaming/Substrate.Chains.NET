//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Zeitgeist.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// GlobalDisputesController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class GlobalDisputesController : ControllerBase
    {
        
        private IGlobalDisputesStorage _globalDisputesStorage;
        
        /// <summary>
        /// GlobalDisputesController constructor.
        /// </summary>
        public GlobalDisputesController(IGlobalDisputesStorage globalDisputesStorage)
        {
            _globalDisputesStorage = globalDisputesStorage;
        }
        
        /// <summary>
        /// >> Locks
        ///  All highest lock information (vote id, outcome index and locked balance)
        ///  for a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        [HttpGet("Locks")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT39), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.GlobalDisputesStorage), "LocksParams", typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetLocks(string key)
        {
            return this.Ok(_globalDisputesStorage.GetLocks(key));
        }
        
        /// <summary>
        /// >> Outcomes
        ///  Maps the market id to the outcome and providing information about the outcome.
        /// </summary>
        [HttpGet("Outcomes")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OutcomeInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.GlobalDisputesStorage), "OutcomesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.outcome_report.EnumOutcomeReport>))]
        public IActionResult GetOutcomes(string key)
        {
            return this.Ok(_globalDisputesStorage.GetOutcomes(key));
        }
        
        /// <summary>
        /// >> GlobalDisputesInfo
        ///  Maps the market id to all information
        ///  about the global dispute.
        /// </summary>
        [HttpGet("GlobalDisputesInfo")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.GlobalDisputeInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.GlobalDisputesStorage), "GlobalDisputesInfoParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetGlobalDisputesInfo(string key)
        {
            return this.Ok(_globalDisputesStorage.GetGlobalDisputesInfo(key));
        }
        
        /// <summary>
        /// >> Winners
        /// </summary>
        [HttpGet("Winners")]
        [ProducesResponseType(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OldWinnerInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Zeitgeist.NET.NetApiExt.Generated.Storage.GlobalDisputesStorage), "WinnersParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetWinners(string key)
        {
            return this.Ok(_globalDisputesStorage.GetWinners(key));
        }
    }
}
