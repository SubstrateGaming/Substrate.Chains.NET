//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ILiquidityMiningStorage interface definition.
    /// </summary>
    public interface ILiquidityMiningStorage : IStorage
    {
        
        /// <summary>
        /// >> BlockBoughtShares
        ///  Shares bought in the current block being constructed. Automatically *erased* after each finalized block.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetBlockBoughtShares(string key);
        
        /// <summary>
        /// >> BlockSoldShares
        ///  Shares sold in the current block being constructed. Automatically *erased* after each finalized block.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetBlockSoldShares(string key);
        
        /// <summary>
        /// >> OwnedValues
        ///  Owned balances (not shares) that are going to be distributed as incentives. Automatically
        ///  *updated* after each finalized block.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_liquidity_mining.owned_values_params.OwnedValuesParams GetOwnedValues(string key);
        
        /// <summary>
        /// >> PerBlockIncentive
        ///  Per block distribution. How much each block will distribute across bought shares.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetPerBlockIncentive();
    }
    
    /// <summary>
    /// LiquidityMiningStorage class definition.
    /// </summary>
    public sealed class LiquidityMiningStorage : ILiquidityMiningStorage
    {
        
        /// <summary>
        /// _blockBoughtSharesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _blockBoughtSharesTypedStorage;
        
        /// <summary>
        /// _blockSoldSharesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _blockSoldSharesTypedStorage;
        
        /// <summary>
        /// _ownedValuesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_liquidity_mining.owned_values_params.OwnedValuesParams> _ownedValuesTypedStorage;
        
        /// <summary>
        /// _perBlockIncentiveTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _perBlockIncentiveTypedStorage;
        
        /// <summary>
        /// LiquidityMiningStorage constructor.
        /// </summary>
        public LiquidityMiningStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.BlockBoughtSharesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("LiquidityMining.BlockBoughtShares", storageDataProvider, storageChangeDelegates);
            this.BlockSoldSharesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("LiquidityMining.BlockSoldShares", storageDataProvider, storageChangeDelegates);
            this.OwnedValuesTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_liquidity_mining.owned_values_params.OwnedValuesParams>("LiquidityMining.OwnedValues", storageDataProvider, storageChangeDelegates);
            this.PerBlockIncentiveTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("LiquidityMining.PerBlockIncentive", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _blockBoughtSharesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> BlockBoughtSharesTypedStorage
        {
            get
            {
                return _blockBoughtSharesTypedStorage;
            }
            set
            {
                _blockBoughtSharesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _blockSoldSharesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> BlockSoldSharesTypedStorage
        {
            get
            {
                return _blockSoldSharesTypedStorage;
            }
            set
            {
                _blockSoldSharesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ownedValuesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_liquidity_mining.owned_values_params.OwnedValuesParams> OwnedValuesTypedStorage
        {
            get
            {
                return _ownedValuesTypedStorage;
            }
            set
            {
                _ownedValuesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _perBlockIncentiveTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> PerBlockIncentiveTypedStorage
        {
            get
            {
                return _perBlockIncentiveTypedStorage;
            }
            set
            {
                _perBlockIncentiveTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await BlockBoughtSharesTypedStorage.InitializeAsync("LiquidityMining", "BlockBoughtShares");
            await BlockSoldSharesTypedStorage.InitializeAsync("LiquidityMining", "BlockSoldShares");
            await OwnedValuesTypedStorage.InitializeAsync("LiquidityMining", "OwnedValues");
            await PerBlockIncentiveTypedStorage.InitializeAsync("LiquidityMining", "PerBlockIncentive");
        }
        
        /// <summary>
        /// Implements any storage change for LiquidityMining.BlockBoughtShares
        /// </summary>
        [StorageChange("LiquidityMining", "BlockBoughtShares")]
        public void OnUpdateBlockBoughtShares(string key, string data)
        {
            BlockBoughtSharesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BlockBoughtShares
        ///  Shares bought in the current block being constructed. Automatically *erased* after each finalized block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetBlockBoughtShares(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BlockBoughtSharesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for LiquidityMining.BlockSoldShares
        /// </summary>
        [StorageChange("LiquidityMining", "BlockSoldShares")]
        public void OnUpdateBlockSoldShares(string key, string data)
        {
            BlockSoldSharesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BlockSoldShares
        ///  Shares sold in the current block being constructed. Automatically *erased* after each finalized block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetBlockSoldShares(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BlockSoldSharesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for LiquidityMining.OwnedValues
        /// </summary>
        [StorageChange("LiquidityMining", "OwnedValues")]
        public void OnUpdateOwnedValues(string key, string data)
        {
            OwnedValuesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OwnedValues
        ///  Owned balances (not shares) that are going to be distributed as incentives. Automatically
        ///  *updated* after each finalized block.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_liquidity_mining.owned_values_params.OwnedValuesParams GetOwnedValues(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OwnedValuesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_liquidity_mining.owned_values_params.OwnedValuesParams result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for LiquidityMining.PerBlockIncentive
        /// </summary>
        [StorageChange("LiquidityMining", "PerBlockIncentive")]
        public void OnUpdatePerBlockIncentive(string data)
        {
            PerBlockIncentiveTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PerBlockIncentive
        ///  Per block distribution. How much each block will distribute across bought shares.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetPerBlockIncentive()
        {
            return PerBlockIncentiveTypedStorage.Get();
        }
    }
}
