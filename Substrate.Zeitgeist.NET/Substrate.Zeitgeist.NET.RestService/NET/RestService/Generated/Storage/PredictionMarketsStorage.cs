//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IPredictionMarketsStorage interface definition.
    /// </summary>
    public interface IPredictionMarketsStorage : IStorage
    {
        
        /// <summary>
        /// >> MarketIdsPerOpenBlock
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerOpenBlock(string key);
        
        /// <summary>
        /// >> MarketIdsPerOpenTimeFrame
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerOpenTimeFrame(string key);
        
        /// <summary>
        /// >> MarketIdsPerCloseBlock
        ///  A mapping of market identifiers to the block their market ends on.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerCloseBlock(string key);
        
        /// <summary>
        /// >> MarketIdsPerCloseTimeFrame
        ///  A mapping of market identifiers to the time frame their market ends in.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerCloseTimeFrame(string key);
        
        /// <summary>
        /// >> LastTimeFrame
        ///  The last time frame that was checked for markets to close.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetLastTimeFrame();
        
        /// <summary>
        /// >> MarketIdsPerDisputeBlock
        ///  A mapping of market identifiers to the block they were disputed at.
        ///  A market only ends up here if it was disputed.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerDisputeBlock(string key);
        
        /// <summary>
        /// >> MarketIdsPerReportBlock
        ///  A mapping of market identifiers to the block that they were reported on.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerReportBlock(string key);
        
        /// <summary>
        /// >> MarketIdsForEdit
        ///  Contains market_ids for which advisor has requested edit.
        ///  Value for given market_id represents the reason for the edit.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4 GetMarketIdsForEdit(string key);
        
        /// <summary>
        /// >> MarketsCollectingSubsidy
        ///  Contains a list of all markets that are currently collecting subsidy and the deadline.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38 GetMarketsCollectingSubsidy();
    }
    
    /// <summary>
    /// PredictionMarketsStorage class definition.
    /// </summary>
    public sealed class PredictionMarketsStorage : IPredictionMarketsStorage
    {
        
        /// <summary>
        /// _marketIdsPerOpenBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> _marketIdsPerOpenBlockTypedStorage;
        
        /// <summary>
        /// _marketIdsPerOpenTimeFrameTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> _marketIdsPerOpenTimeFrameTypedStorage;
        
        /// <summary>
        /// _marketIdsPerCloseBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> _marketIdsPerCloseBlockTypedStorage;
        
        /// <summary>
        /// _marketIdsPerCloseTimeFrameTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> _marketIdsPerCloseTimeFrameTypedStorage;
        
        /// <summary>
        /// _lastTimeFrameTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> _lastTimeFrameTypedStorage;
        
        /// <summary>
        /// _marketIdsPerDisputeBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> _marketIdsPerDisputeBlockTypedStorage;
        
        /// <summary>
        /// _marketIdsPerReportBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> _marketIdsPerReportBlockTypedStorage;
        
        /// <summary>
        /// _marketIdsForEditTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4> _marketIdsForEditTypedStorage;
        
        /// <summary>
        /// _marketsCollectingSubsidyTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38> _marketsCollectingSubsidyTypedStorage;
        
        /// <summary>
        /// PredictionMarketsStorage constructor.
        /// </summary>
        public PredictionMarketsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.MarketIdsPerOpenBlockTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>("PredictionMarkets.MarketIdsPerOpenBlock", storageDataProvider, storageChangeDelegates);
            this.MarketIdsPerOpenTimeFrameTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>("PredictionMarkets.MarketIdsPerOpenTimeFrame", storageDataProvider, storageChangeDelegates);
            this.MarketIdsPerCloseBlockTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>("PredictionMarkets.MarketIdsPerCloseBlock", storageDataProvider, storageChangeDelegates);
            this.MarketIdsPerCloseTimeFrameTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>("PredictionMarkets.MarketIdsPerCloseTimeFrame", storageDataProvider, storageChangeDelegates);
            this.LastTimeFrameTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64>("PredictionMarkets.LastTimeFrame", storageDataProvider, storageChangeDelegates);
            this.MarketIdsPerDisputeBlockTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>("PredictionMarkets.MarketIdsPerDisputeBlock", storageDataProvider, storageChangeDelegates);
            this.MarketIdsPerReportBlockTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37>("PredictionMarkets.MarketIdsPerReportBlock", storageDataProvider, storageChangeDelegates);
            this.MarketIdsForEditTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4>("PredictionMarkets.MarketIdsForEdit", storageDataProvider, storageChangeDelegates);
            this.MarketsCollectingSubsidyTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38>("PredictionMarkets.MarketsCollectingSubsidy", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _marketIdsPerOpenBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerOpenBlockTypedStorage
        {
            get
            {
                return _marketIdsPerOpenBlockTypedStorage;
            }
            set
            {
                _marketIdsPerOpenBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketIdsPerOpenTimeFrameTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerOpenTimeFrameTypedStorage
        {
            get
            {
                return _marketIdsPerOpenTimeFrameTypedStorage;
            }
            set
            {
                _marketIdsPerOpenTimeFrameTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketIdsPerCloseBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerCloseBlockTypedStorage
        {
            get
            {
                return _marketIdsPerCloseBlockTypedStorage;
            }
            set
            {
                _marketIdsPerCloseBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketIdsPerCloseTimeFrameTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerCloseTimeFrameTypedStorage
        {
            get
            {
                return _marketIdsPerCloseTimeFrameTypedStorage;
            }
            set
            {
                _marketIdsPerCloseTimeFrameTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _lastTimeFrameTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> LastTimeFrameTypedStorage
        {
            get
            {
                return _lastTimeFrameTypedStorage;
            }
            set
            {
                _lastTimeFrameTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketIdsPerDisputeBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerDisputeBlockTypedStorage
        {
            get
            {
                return _marketIdsPerDisputeBlockTypedStorage;
            }
            set
            {
                _marketIdsPerDisputeBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketIdsPerReportBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37> MarketIdsPerReportBlockTypedStorage
        {
            get
            {
                return _marketIdsPerReportBlockTypedStorage;
            }
            set
            {
                _marketIdsPerReportBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketIdsForEditTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4> MarketIdsForEditTypedStorage
        {
            get
            {
                return _marketIdsForEditTypedStorage;
            }
            set
            {
                _marketIdsForEditTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketsCollectingSubsidyTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38> MarketsCollectingSubsidyTypedStorage
        {
            get
            {
                return _marketsCollectingSubsidyTypedStorage;
            }
            set
            {
                _marketsCollectingSubsidyTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MarketIdsPerOpenBlockTypedStorage.InitializeAsync("PredictionMarkets", "MarketIdsPerOpenBlock");
            await MarketIdsPerOpenTimeFrameTypedStorage.InitializeAsync("PredictionMarkets", "MarketIdsPerOpenTimeFrame");
            await MarketIdsPerCloseBlockTypedStorage.InitializeAsync("PredictionMarkets", "MarketIdsPerCloseBlock");
            await MarketIdsPerCloseTimeFrameTypedStorage.InitializeAsync("PredictionMarkets", "MarketIdsPerCloseTimeFrame");
            await LastTimeFrameTypedStorage.InitializeAsync("PredictionMarkets", "LastTimeFrame");
            await MarketIdsPerDisputeBlockTypedStorage.InitializeAsync("PredictionMarkets", "MarketIdsPerDisputeBlock");
            await MarketIdsPerReportBlockTypedStorage.InitializeAsync("PredictionMarkets", "MarketIdsPerReportBlock");
            await MarketIdsForEditTypedStorage.InitializeAsync("PredictionMarkets", "MarketIdsForEdit");
            await MarketsCollectingSubsidyTypedStorage.InitializeAsync("PredictionMarkets", "MarketsCollectingSubsidy");
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketIdsPerOpenBlock
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketIdsPerOpenBlock")]
        public void OnUpdateMarketIdsPerOpenBlock(string key, string data)
        {
            MarketIdsPerOpenBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenBlock
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerOpenBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdsPerOpenBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketIdsPerOpenTimeFrame
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketIdsPerOpenTimeFrame")]
        public void OnUpdateMarketIdsPerOpenTimeFrame(string key, string data)
        {
            MarketIdsPerOpenTimeFrameTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdsPerOpenTimeFrame
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerOpenTimeFrame(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdsPerOpenTimeFrameTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketIdsPerCloseBlock
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketIdsPerCloseBlock")]
        public void OnUpdateMarketIdsPerCloseBlock(string key, string data)
        {
            MarketIdsPerCloseBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseBlock
        ///  A mapping of market identifiers to the block their market ends on.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerCloseBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdsPerCloseBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketIdsPerCloseTimeFrame
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketIdsPerCloseTimeFrame")]
        public void OnUpdateMarketIdsPerCloseTimeFrame(string key, string data)
        {
            MarketIdsPerCloseTimeFrameTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdsPerCloseTimeFrame
        ///  A mapping of market identifiers to the time frame their market ends in.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerCloseTimeFrame(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdsPerCloseTimeFrameTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.LastTimeFrame
        /// </summary>
        [StorageChange("PredictionMarkets", "LastTimeFrame")]
        public void OnUpdateLastTimeFrame(string data)
        {
            LastTimeFrameTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LastTimeFrame
        ///  The last time frame that was checked for markets to close.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetLastTimeFrame()
        {
            return LastTimeFrameTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketIdsPerDisputeBlock
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketIdsPerDisputeBlock")]
        public void OnUpdateMarketIdsPerDisputeBlock(string key, string data)
        {
            MarketIdsPerDisputeBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdsPerDisputeBlock
        ///  A mapping of market identifiers to the block they were disputed at.
        ///  A market only ends up here if it was disputed.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerDisputeBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdsPerDisputeBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketIdsPerReportBlock
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketIdsPerReportBlock")]
        public void OnUpdateMarketIdsPerReportBlock(string key, string data)
        {
            MarketIdsPerReportBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdsPerReportBlock
        ///  A mapping of market identifiers to the block that they were reported on.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 GetMarketIdsPerReportBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdsPerReportBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT37 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketIdsForEdit
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketIdsForEdit")]
        public void OnUpdateMarketIdsForEdit(string key, string data)
        {
            MarketIdsForEditTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdsForEdit
        ///  Contains market_ids for which advisor has requested edit.
        ///  Value for given market_id represents the reason for the edit.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4 GetMarketIdsForEdit(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdsForEditTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT4 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PredictionMarkets.MarketsCollectingSubsidy
        /// </summary>
        [StorageChange("PredictionMarkets", "MarketsCollectingSubsidy")]
        public void OnUpdateMarketsCollectingSubsidy(string data)
        {
            MarketsCollectingSubsidyTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MarketsCollectingSubsidy
        ///  Contains a list of all markets that are currently collecting subsidy and the deadline.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT38 GetMarketsCollectingSubsidy()
        {
            return MarketsCollectingSubsidyTypedStorage.Get();
        }
    }
}
