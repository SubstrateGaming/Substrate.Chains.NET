//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IRikiddoSigmoidFeeMarketEmaStorage interface definition.
    /// </summary>
    public interface IRikiddoSigmoidFeeMarketEmaStorage : IStorage
    {
        
        /// <summary>
        /// >> RikiddoPerPool
        ///  Storage that maps pool ids to Rikiddo instances.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV GetRikiddoPerPool(string key);
    }
    
    /// <summary>
    /// RikiddoSigmoidFeeMarketEmaStorage class definition.
    /// </summary>
    public sealed class RikiddoSigmoidFeeMarketEmaStorage : IRikiddoSigmoidFeeMarketEmaStorage
    {
        
        /// <summary>
        /// _rikiddoPerPoolTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV> _rikiddoPerPoolTypedStorage;
        
        /// <summary>
        /// RikiddoSigmoidFeeMarketEmaStorage constructor.
        /// </summary>
        public RikiddoSigmoidFeeMarketEmaStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.RikiddoPerPoolTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV>("RikiddoSigmoidFeeMarketEma.RikiddoPerPool", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _rikiddoPerPoolTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV> RikiddoPerPoolTypedStorage
        {
            get
            {
                return _rikiddoPerPoolTypedStorage;
            }
            set
            {
                _rikiddoPerPoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await RikiddoPerPoolTypedStorage.InitializeAsync("RikiddoSigmoidFeeMarketEma", "RikiddoPerPool");
        }
        
        /// <summary>
        /// Implements any storage change for RikiddoSigmoidFeeMarketEma.RikiddoPerPool
        /// </summary>
        [StorageChange("RikiddoSigmoidFeeMarketEma", "RikiddoPerPool")]
        public void OnUpdateRikiddoPerPool(string key, string data)
        {
            RikiddoPerPoolTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RikiddoPerPool
        ///  Storage that maps pool ids to Rikiddo instances.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV GetRikiddoPerPool(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RikiddoPerPoolTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_rikiddo.types.rikiddo_sigmoid_mv.RikiddoSigmoidMV result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
