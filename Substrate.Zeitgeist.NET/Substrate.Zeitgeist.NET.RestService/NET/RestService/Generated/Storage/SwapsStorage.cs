//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ISwapsStorage interface definition.
    /// </summary>
    public interface ISwapsStorage : IStorage
    {
        
        /// <summary>
        /// >> Pools
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool GetPools(string key);
        
        /// <summary>
        /// >> PoolsCachedForArbitrage
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetPoolsCachedForArbitrage(string key);
        
        /// <summary>
        /// >> SubsidyProviders
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetSubsidyProviders(string key);
        
        /// <summary>
        /// >> NextPoolId
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextPoolId();
    }
    
    /// <summary>
    /// SwapsStorage class definition.
    /// </summary>
    public sealed class SwapsStorage : ISwapsStorage
    {
        
        /// <summary>
        /// _poolsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool> _poolsTypedStorage;
        
        /// <summary>
        /// _poolsCachedForArbitrageTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _poolsCachedForArbitrageTypedStorage;
        
        /// <summary>
        /// _subsidyProvidersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _subsidyProvidersTypedStorage;
        
        /// <summary>
        /// _nextPoolIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextPoolIdTypedStorage;
        
        /// <summary>
        /// SwapsStorage constructor.
        /// </summary>
        public SwapsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PoolsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool>("Swaps.Pools", storageDataProvider, storageChangeDelegates);
            this.PoolsCachedForArbitrageTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("Swaps.PoolsCachedForArbitrage", storageDataProvider, storageChangeDelegates);
            this.SubsidyProvidersTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Swaps.SubsidyProviders", storageDataProvider, storageChangeDelegates);
            this.NextPoolIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Swaps.NextPoolId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _poolsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool> PoolsTypedStorage
        {
            get
            {
                return _poolsTypedStorage;
            }
            set
            {
                _poolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _poolsCachedForArbitrageTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> PoolsCachedForArbitrageTypedStorage
        {
            get
            {
                return _poolsCachedForArbitrageTypedStorage;
            }
            set
            {
                _poolsCachedForArbitrageTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _subsidyProvidersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> SubsidyProvidersTypedStorage
        {
            get
            {
                return _subsidyProvidersTypedStorage;
            }
            set
            {
                _subsidyProvidersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextPoolIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextPoolIdTypedStorage
        {
            get
            {
                return _nextPoolIdTypedStorage;
            }
            set
            {
                _nextPoolIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PoolsTypedStorage.InitializeAsync("Swaps", "Pools");
            await PoolsCachedForArbitrageTypedStorage.InitializeAsync("Swaps", "PoolsCachedForArbitrage");
            await SubsidyProvidersTypedStorage.InitializeAsync("Swaps", "SubsidyProviders");
            await NextPoolIdTypedStorage.InitializeAsync("Swaps", "NextPoolId");
        }
        
        /// <summary>
        /// Implements any storage change for Swaps.Pools
        /// </summary>
        [StorageChange("Swaps", "Pools")]
        public void OnUpdatePools(string key, string data)
        {
            PoolsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Pools
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool GetPools(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_swaps.types.pool.Pool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Swaps.PoolsCachedForArbitrage
        /// </summary>
        [StorageChange("Swaps", "PoolsCachedForArbitrage")]
        public void OnUpdatePoolsCachedForArbitrage(string key, string data)
        {
            PoolsCachedForArbitrageTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PoolsCachedForArbitrage
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetPoolsCachedForArbitrage(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolsCachedForArbitrageTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Swaps.SubsidyProviders
        /// </summary>
        [StorageChange("Swaps", "SubsidyProviders")]
        public void OnUpdateSubsidyProviders(string key, string data)
        {
            SubsidyProvidersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SubsidyProviders
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetSubsidyProviders(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SubsidyProvidersTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Swaps.NextPoolId
        /// </summary>
        [StorageChange("Swaps", "NextPoolId")]
        public void OnUpdateNextPoolId(string data)
        {
            NextPoolIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextPoolId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextPoolId()
        {
            return NextPoolIdTypedStorage.Get();
        }
    }
}
