//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ISimpleDisputesStorage interface definition.
    /// </summary>
    public interface ISimpleDisputesStorage : IStorage
    {
        
        /// <summary>
        /// >> Disputes
        ///  For each market, this holds the dispute information for each dispute that's
        ///  been issued.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36 GetDisputes(string key);
    }
    
    /// <summary>
    /// SimpleDisputesStorage class definition.
    /// </summary>
    public sealed class SimpleDisputesStorage : ISimpleDisputesStorage
    {
        
        /// <summary>
        /// _disputesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36> _disputesTypedStorage;
        
        /// <summary>
        /// SimpleDisputesStorage constructor.
        /// </summary>
        public SimpleDisputesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.DisputesTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36>("SimpleDisputes.Disputes", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _disputesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36> DisputesTypedStorage
        {
            get
            {
                return _disputesTypedStorage;
            }
            set
            {
                _disputesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await DisputesTypedStorage.InitializeAsync("SimpleDisputes", "Disputes");
        }
        
        /// <summary>
        /// Implements any storage change for SimpleDisputes.Disputes
        /// </summary>
        [StorageChange("SimpleDisputes", "Disputes")]
        public void OnUpdateDisputes(string key, string data)
        {
            DisputesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Disputes
        ///  For each market, this holds the dispute information for each dispute that's
        ///  been issued.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36 GetDisputes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DisputesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT36 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
