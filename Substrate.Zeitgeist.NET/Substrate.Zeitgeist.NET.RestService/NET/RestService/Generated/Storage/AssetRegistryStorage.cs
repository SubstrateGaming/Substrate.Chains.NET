//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAssetRegistryStorage interface definition.
    /// </summary>
    public interface IAssetRegistryStorage : IStorage
    {
        
        /// <summary>
        /// >> Metadata
        ///  The metadata of an asset, indexed by asset id.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.orml_traits.asset_registry.AssetMetadata GetMetadata(string key);
        
        /// <summary>
        /// >> LocationToAssetId
        ///  Maps a multilocation to an asset id - useful when processing xcm
        ///  messages.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset GetLocationToAssetId(string key);
        
        /// <summary>
        /// >> LastAssetId
        ///  The last processed asset id - used when assigning a sequential id.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset GetLastAssetId();
    }
    
    /// <summary>
    /// AssetRegistryStorage class definition.
    /// </summary>
    public sealed class AssetRegistryStorage : IAssetRegistryStorage
    {
        
        /// <summary>
        /// _metadataTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.orml_traits.asset_registry.AssetMetadata> _metadataTypedStorage;
        
        /// <summary>
        /// _locationToAssetIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset> _locationToAssetIdTypedStorage;
        
        /// <summary>
        /// _lastAssetIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset> _lastAssetIdTypedStorage;
        
        /// <summary>
        /// AssetRegistryStorage constructor.
        /// </summary>
        public AssetRegistryStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.MetadataTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.orml_traits.asset_registry.AssetMetadata>("AssetRegistry.Metadata", storageDataProvider, storageChangeDelegates);
            this.LocationToAssetIdTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset>("AssetRegistry.LocationToAssetId", storageDataProvider, storageChangeDelegates);
            this.LastAssetIdTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset>("AssetRegistry.LastAssetId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _metadataTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.orml_traits.asset_registry.AssetMetadata> MetadataTypedStorage
        {
            get
            {
                return _metadataTypedStorage;
            }
            set
            {
                _metadataTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _locationToAssetIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset> LocationToAssetIdTypedStorage
        {
            get
            {
                return _locationToAssetIdTypedStorage;
            }
            set
            {
                _locationToAssetIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _lastAssetIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset> LastAssetIdTypedStorage
        {
            get
            {
                return _lastAssetIdTypedStorage;
            }
            set
            {
                _lastAssetIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MetadataTypedStorage.InitializeAsync("AssetRegistry", "Metadata");
            await LocationToAssetIdTypedStorage.InitializeAsync("AssetRegistry", "LocationToAssetId");
            await LastAssetIdTypedStorage.InitializeAsync("AssetRegistry", "LastAssetId");
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.Metadata
        /// </summary>
        [StorageChange("AssetRegistry", "Metadata")]
        public void OnUpdateMetadata(string key, string data)
        {
            MetadataTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Metadata
        ///  The metadata of an asset, indexed by asset id.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.orml_traits.asset_registry.AssetMetadata GetMetadata(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MetadataTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.orml_traits.asset_registry.AssetMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.LocationToAssetId
        /// </summary>
        [StorageChange("AssetRegistry", "LocationToAssetId")]
        public void OnUpdateLocationToAssetId(string key, string data)
        {
            LocationToAssetIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LocationToAssetId
        ///  Maps a multilocation to an asset id - useful when processing xcm
        ///  messages.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset GetLocationToAssetId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LocationToAssetIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.LastAssetId
        /// </summary>
        [StorageChange("AssetRegistry", "LastAssetId")]
        public void OnUpdateLastAssetId(string data)
        {
            LastAssetIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LastAssetId
        ///  The last processed asset id - used when assigning a sequential id.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.asset.EnumAsset GetLastAssetId()
        {
            return LastAssetIdTypedStorage.Get();
        }
    }
}
