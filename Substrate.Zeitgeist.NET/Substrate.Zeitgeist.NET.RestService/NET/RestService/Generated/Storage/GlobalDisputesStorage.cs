//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IGlobalDisputesStorage interface definition.
    /// </summary>
    public interface IGlobalDisputesStorage : IStorage
    {
        
        /// <summary>
        /// >> Locks
        ///  All highest lock information (vote id, outcome index and locked balance)
        ///  for a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT39 GetLocks(string key);
        
        /// <summary>
        /// >> Outcomes
        ///  Maps the market id to the outcome and providing information about the outcome.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OutcomeInfo GetOutcomes(string key);
        
        /// <summary>
        /// >> GlobalDisputesInfo
        ///  Maps the market id to all information
        ///  about the global dispute.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.GlobalDisputeInfo GetGlobalDisputesInfo(string key);
        
        /// <summary>
        /// >> Winners
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OldWinnerInfo GetWinners(string key);
    }
    
    /// <summary>
    /// GlobalDisputesStorage class definition.
    /// </summary>
    public sealed class GlobalDisputesStorage : IGlobalDisputesStorage
    {
        
        /// <summary>
        /// _locksTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT39> _locksTypedStorage;
        
        /// <summary>
        /// _outcomesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OutcomeInfo> _outcomesTypedStorage;
        
        /// <summary>
        /// _globalDisputesInfoTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.GlobalDisputeInfo> _globalDisputesInfoTypedStorage;
        
        /// <summary>
        /// _winnersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OldWinnerInfo> _winnersTypedStorage;
        
        /// <summary>
        /// GlobalDisputesStorage constructor.
        /// </summary>
        public GlobalDisputesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.LocksTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT39>("GlobalDisputes.Locks", storageDataProvider, storageChangeDelegates);
            this.OutcomesTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OutcomeInfo>("GlobalDisputes.Outcomes", storageDataProvider, storageChangeDelegates);
            this.GlobalDisputesInfoTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.GlobalDisputeInfo>("GlobalDisputes.GlobalDisputesInfo", storageDataProvider, storageChangeDelegates);
            this.WinnersTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OldWinnerInfo>("GlobalDisputes.Winners", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _locksTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT39> LocksTypedStorage
        {
            get
            {
                return _locksTypedStorage;
            }
            set
            {
                _locksTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _outcomesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OutcomeInfo> OutcomesTypedStorage
        {
            get
            {
                return _outcomesTypedStorage;
            }
            set
            {
                _outcomesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _globalDisputesInfoTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.GlobalDisputeInfo> GlobalDisputesInfoTypedStorage
        {
            get
            {
                return _globalDisputesInfoTypedStorage;
            }
            set
            {
                _globalDisputesInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _winnersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OldWinnerInfo> WinnersTypedStorage
        {
            get
            {
                return _winnersTypedStorage;
            }
            set
            {
                _winnersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await LocksTypedStorage.InitializeAsync("GlobalDisputes", "Locks");
            await OutcomesTypedStorage.InitializeAsync("GlobalDisputes", "Outcomes");
            await GlobalDisputesInfoTypedStorage.InitializeAsync("GlobalDisputes", "GlobalDisputesInfo");
            await WinnersTypedStorage.InitializeAsync("GlobalDisputes", "Winners");
        }
        
        /// <summary>
        /// Implements any storage change for GlobalDisputes.Locks
        /// </summary>
        [StorageChange("GlobalDisputes", "Locks")]
        public void OnUpdateLocks(string key, string data)
        {
            LocksTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Locks
        ///  All highest lock information (vote id, outcome index and locked balance)
        ///  for a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT39 GetLocks(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LocksTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT39 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for GlobalDisputes.Outcomes
        /// </summary>
        [StorageChange("GlobalDisputes", "Outcomes")]
        public void OnUpdateOutcomes(string key, string data)
        {
            OutcomesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Outcomes
        ///  Maps the market id to the outcome and providing information about the outcome.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OutcomeInfo GetOutcomes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OutcomesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OutcomeInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for GlobalDisputes.GlobalDisputesInfo
        /// </summary>
        [StorageChange("GlobalDisputes", "GlobalDisputesInfo")]
        public void OnUpdateGlobalDisputesInfo(string key, string data)
        {
            GlobalDisputesInfoTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> GlobalDisputesInfo
        ///  Maps the market id to all information
        ///  about the global dispute.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.GlobalDisputeInfo GetGlobalDisputesInfo(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (GlobalDisputesInfoTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.GlobalDisputeInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for GlobalDisputes.Winners
        /// </summary>
        [StorageChange("GlobalDisputes", "Winners")]
        public void OnUpdateWinners(string key, string data)
        {
            WinnersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Winners
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OldWinnerInfo GetWinners(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (WinnersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_global_disputes.types.OldWinnerInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
