//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ICourtStorage interface definition.
    /// </summary>
    public interface ICourtStorage : IStorage
    {
        
        /// <summary>
        /// >> CourtPool
        ///  The pool of jurors and delegators who can get randomly selected according to their stake.
        ///  The pool is sorted by `stake` in ascending order [min, ..., max].
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32 GetCourtPool();
        
        /// <summary>
        /// >> Participants
        ///  The general information about each juror and delegator.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo GetParticipants(string key);
        
        /// <summary>
        /// >> SelectionNonce
        ///  An extra layer of pseudo randomness so that we can generate a new random seed with it.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetSelectionNonce();
        
        /// <summary>
        /// >> SelectedDraws
        ///  The randomly selected jurors and delegators, their vote weight,
        ///  the status about their vote and their selected and risked funds.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34 GetSelectedDraws(string key);
        
        /// <summary>
        /// >> Courts
        ///  The general information about each court.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo GetCourts(string key);
        
        /// <summary>
        /// >> NextCourtId
        ///  The next identifier for a new court.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextCourtId();
        
        /// <summary>
        /// >> MarketIdToCourtId
        ///  Mapping from market id to court id.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMarketIdToCourtId(string key);
        
        /// <summary>
        /// >> CourtIdToMarketId
        ///  Mapping from court id to market id.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetCourtIdToMarketId(string key);
        
        /// <summary>
        /// >> RequestBlock
        ///  The future block number when jurors should start voting.
        ///  This is useful for the user experience of the jurors to vote for multiple courts at once.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetRequestBlock();
        
        /// <summary>
        /// >> YearlyInflation
        ///  The current inflation rate.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetYearlyInflation();
    }
    
    /// <summary>
    /// CourtStorage class definition.
    /// </summary>
    public sealed class CourtStorage : ICourtStorage
    {
        
        /// <summary>
        /// _courtPoolTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32> _courtPoolTypedStorage;
        
        /// <summary>
        /// _participantsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo> _participantsTypedStorage;
        
        /// <summary>
        /// _selectionNonceTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> _selectionNonceTypedStorage;
        
        /// <summary>
        /// _selectedDrawsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34> _selectedDrawsTypedStorage;
        
        /// <summary>
        /// _courtsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo> _courtsTypedStorage;
        
        /// <summary>
        /// _nextCourtIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextCourtIdTypedStorage;
        
        /// <summary>
        /// _marketIdToCourtIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _marketIdToCourtIdTypedStorage;
        
        /// <summary>
        /// _courtIdToMarketIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _courtIdToMarketIdTypedStorage;
        
        /// <summary>
        /// _requestBlockTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> _requestBlockTypedStorage;
        
        /// <summary>
        /// _yearlyInflationTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> _yearlyInflationTypedStorage;
        
        /// <summary>
        /// CourtStorage constructor.
        /// </summary>
        public CourtStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.CourtPoolTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32>("Court.CourtPool", storageDataProvider, storageChangeDelegates);
            this.ParticipantsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo>("Court.Participants", storageDataProvider, storageChangeDelegates);
            this.SelectionNonceTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64>("Court.SelectionNonce", storageDataProvider, storageChangeDelegates);
            this.SelectedDrawsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34>("Court.SelectedDraws", storageDataProvider, storageChangeDelegates);
            this.CourtsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo>("Court.Courts", storageDataProvider, storageChangeDelegates);
            this.NextCourtIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Court.NextCourtId", storageDataProvider, storageChangeDelegates);
            this.MarketIdToCourtIdTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Court.MarketIdToCourtId", storageDataProvider, storageChangeDelegates);
            this.CourtIdToMarketIdTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Court.CourtIdToMarketId", storageDataProvider, storageChangeDelegates);
            this.RequestBlockTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64>("Court.RequestBlock", storageDataProvider, storageChangeDelegates);
            this.YearlyInflationTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill>("Court.YearlyInflation", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _courtPoolTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32> CourtPoolTypedStorage
        {
            get
            {
                return _courtPoolTypedStorage;
            }
            set
            {
                _courtPoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _participantsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo> ParticipantsTypedStorage
        {
            get
            {
                return _participantsTypedStorage;
            }
            set
            {
                _participantsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _selectionNonceTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> SelectionNonceTypedStorage
        {
            get
            {
                return _selectionNonceTypedStorage;
            }
            set
            {
                _selectionNonceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _selectedDrawsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34> SelectedDrawsTypedStorage
        {
            get
            {
                return _selectedDrawsTypedStorage;
            }
            set
            {
                _selectedDrawsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _courtsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo> CourtsTypedStorage
        {
            get
            {
                return _courtsTypedStorage;
            }
            set
            {
                _courtsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextCourtIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextCourtIdTypedStorage
        {
            get
            {
                return _nextCourtIdTypedStorage;
            }
            set
            {
                _nextCourtIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketIdToCourtIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> MarketIdToCourtIdTypedStorage
        {
            get
            {
                return _marketIdToCourtIdTypedStorage;
            }
            set
            {
                _marketIdToCourtIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _courtIdToMarketIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> CourtIdToMarketIdTypedStorage
        {
            get
            {
                return _courtIdToMarketIdTypedStorage;
            }
            set
            {
                _courtIdToMarketIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _requestBlockTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> RequestBlockTypedStorage
        {
            get
            {
                return _requestBlockTypedStorage;
            }
            set
            {
                _requestBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _yearlyInflationTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> YearlyInflationTypedStorage
        {
            get
            {
                return _yearlyInflationTypedStorage;
            }
            set
            {
                _yearlyInflationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await CourtPoolTypedStorage.InitializeAsync("Court", "CourtPool");
            await ParticipantsTypedStorage.InitializeAsync("Court", "Participants");
            await SelectionNonceTypedStorage.InitializeAsync("Court", "SelectionNonce");
            await SelectedDrawsTypedStorage.InitializeAsync("Court", "SelectedDraws");
            await CourtsTypedStorage.InitializeAsync("Court", "Courts");
            await NextCourtIdTypedStorage.InitializeAsync("Court", "NextCourtId");
            await MarketIdToCourtIdTypedStorage.InitializeAsync("Court", "MarketIdToCourtId");
            await CourtIdToMarketIdTypedStorage.InitializeAsync("Court", "CourtIdToMarketId");
            await RequestBlockTypedStorage.InitializeAsync("Court", "RequestBlock");
            await YearlyInflationTypedStorage.InitializeAsync("Court", "YearlyInflation");
        }
        
        /// <summary>
        /// Implements any storage change for Court.CourtPool
        /// </summary>
        [StorageChange("Court", "CourtPool")]
        public void OnUpdateCourtPool(string data)
        {
            CourtPoolTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CourtPool
        ///  The pool of jurors and delegators who can get randomly selected according to their stake.
        ///  The pool is sorted by `stake` in ascending order [min, ..., max].
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT32 GetCourtPool()
        {
            return CourtPoolTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Court.Participants
        /// </summary>
        [StorageChange("Court", "Participants")]
        public void OnUpdateParticipants(string key, string data)
        {
            ParticipantsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Participants
        ///  The general information about each juror and delegator.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo GetParticipants(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ParticipantsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtParticipantInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Court.SelectionNonce
        /// </summary>
        [StorageChange("Court", "SelectionNonce")]
        public void OnUpdateSelectionNonce(string data)
        {
            SelectionNonceTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SelectionNonce
        ///  An extra layer of pseudo randomness so that we can generate a new random seed with it.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetSelectionNonce()
        {
            return SelectionNonceTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Court.SelectedDraws
        /// </summary>
        [StorageChange("Court", "SelectedDraws")]
        public void OnUpdateSelectedDraws(string key, string data)
        {
            SelectedDrawsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SelectedDraws
        ///  The randomly selected jurors and delegators, their vote weight,
        ///  the status about their vote and their selected and risked funds.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34 GetSelectedDraws(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SelectedDrawsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT34 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Court.Courts
        /// </summary>
        [StorageChange("Court", "Courts")]
        public void OnUpdateCourts(string key, string data)
        {
            CourtsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Courts
        ///  The general information about each court.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo GetCourts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CourtsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_court.types.CourtInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Court.NextCourtId
        /// </summary>
        [StorageChange("Court", "NextCourtId")]
        public void OnUpdateNextCourtId(string data)
        {
            NextCourtIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextCourtId
        ///  The next identifier for a new court.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextCourtId()
        {
            return NextCourtIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Court.MarketIdToCourtId
        /// </summary>
        [StorageChange("Court", "MarketIdToCourtId")]
        public void OnUpdateMarketIdToCourtId(string key, string data)
        {
            MarketIdToCourtIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketIdToCourtId
        ///  Mapping from market id to court id.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMarketIdToCourtId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketIdToCourtIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Court.CourtIdToMarketId
        /// </summary>
        [StorageChange("Court", "CourtIdToMarketId")]
        public void OnUpdateCourtIdToMarketId(string key, string data)
        {
            CourtIdToMarketIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CourtIdToMarketId
        ///  Mapping from court id to market id.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetCourtIdToMarketId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CourtIdToMarketIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Court.RequestBlock
        /// </summary>
        [StorageChange("Court", "RequestBlock")]
        public void OnUpdateRequestBlock(string data)
        {
            RequestBlockTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> RequestBlock
        ///  The future block number when jurors should start voting.
        ///  This is useful for the user experience of the jurors to vote for multiple courts at once.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetRequestBlock()
        {
            return RequestBlockTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Court.YearlyInflation
        /// </summary>
        [StorageChange("Court", "YearlyInflation")]
        public void OnUpdateYearlyInflation(string data)
        {
            YearlyInflationTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> YearlyInflation
        ///  The current inflation rate.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetYearlyInflation()
        {
            return YearlyInflationTypedStorage.Get();
        }
    }
}
