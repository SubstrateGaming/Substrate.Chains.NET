//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMarketCommonsStorage interface definition.
    /// </summary>
    public interface IMarketCommonsStorage : IStorage
    {
        
        /// <summary>
        /// >> Markets
        ///  Holds all markets
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market GetMarkets(string key);
        
        /// <summary>
        /// >> MarketCounter
        ///  The number of markets that have been created (including removed markets) and the next
        ///  identifier for a created market.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMarketCounter();
        
        /// <summary>
        /// >> MarketPool
        ///  Maps a market ID to a related pool ID. It is up to the caller to keep and sync valid
        ///  existent markets with valid existent pools.
        /// 
        ///  Beware! DEPRECATED as of v0.5.0.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMarketPool(string key);
    }
    
    /// <summary>
    /// MarketCommonsStorage class definition.
    /// </summary>
    public sealed class MarketCommonsStorage : IMarketCommonsStorage
    {
        
        /// <summary>
        /// _marketsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market> _marketsTypedStorage;
        
        /// <summary>
        /// _marketCounterTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _marketCounterTypedStorage;
        
        /// <summary>
        /// _marketPoolTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _marketPoolTypedStorage;
        
        /// <summary>
        /// MarketCommonsStorage constructor.
        /// </summary>
        public MarketCommonsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.MarketsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market>("MarketCommons.Markets", storageDataProvider, storageChangeDelegates);
            this.MarketCounterTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("MarketCommons.MarketCounter", storageDataProvider, storageChangeDelegates);
            this.MarketPoolTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("MarketCommons.MarketPool", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _marketsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market> MarketsTypedStorage
        {
            get
            {
                return _marketsTypedStorage;
            }
            set
            {
                _marketsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketCounterTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> MarketCounterTypedStorage
        {
            get
            {
                return _marketCounterTypedStorage;
            }
            set
            {
                _marketCounterTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _marketPoolTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> MarketPoolTypedStorage
        {
            get
            {
                return _marketPoolTypedStorage;
            }
            set
            {
                _marketPoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MarketsTypedStorage.InitializeAsync("MarketCommons", "Markets");
            await MarketCounterTypedStorage.InitializeAsync("MarketCommons", "MarketCounter");
            await MarketPoolTypedStorage.InitializeAsync("MarketCommons", "MarketPool");
        }
        
        /// <summary>
        /// Implements any storage change for MarketCommons.Markets
        /// </summary>
        [StorageChange("MarketCommons", "Markets")]
        public void OnUpdateMarkets(string key, string data)
        {
            MarketsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Markets
        ///  Holds all markets
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market GetMarkets(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zeitgeist_primitives.market.Market result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MarketCommons.MarketCounter
        /// </summary>
        [StorageChange("MarketCommons", "MarketCounter")]
        public void OnUpdateMarketCounter(string data)
        {
            MarketCounterTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MarketCounter
        ///  The number of markets that have been created (including removed markets) and the next
        ///  identifier for a created market.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMarketCounter()
        {
            return MarketCounterTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for MarketCommons.MarketPool
        /// </summary>
        [StorageChange("MarketCommons", "MarketPool")]
        public void OnUpdateMarketPool(string key, string data)
        {
            MarketPoolTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MarketPool
        ///  Maps a market ID to a related pool ID. It is up to the caller to keep and sync valid
        ///  existent markets with valid existent pools.
        /// 
        ///  Beware! DEPRECATED as of v0.5.0.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMarketPool(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MarketPoolTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
