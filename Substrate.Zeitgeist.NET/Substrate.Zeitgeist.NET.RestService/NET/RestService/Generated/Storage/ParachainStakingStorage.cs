//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IParachainStakingStorage interface definition.
    /// </summary>
    public interface IParachainStakingStorage : IStorage
    {
        
        /// <summary>
        /// >> CollatorCommission
        ///  Commission percent taken off of rewards for all collators
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetCollatorCommission();
        
        /// <summary>
        /// >> TotalSelected
        ///  The total candidates selected every round
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetTotalSelected();
        
        /// <summary>
        /// >> ParachainBondInfo
        ///  Parachain bond config info { account, percent_of_inflation }
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig GetParachainBondInfo();
        
        /// <summary>
        /// >> Round
        ///  Current round index and next round scheduled transition
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo GetRound();
        
        /// <summary>
        /// >> DelegatorState
        ///  Get delegator state associated with an account if account is delegating else None
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator GetDelegatorState(string key);
        
        /// <summary>
        /// >> CandidateInfo
        ///  Get collator candidate info associated with an account if account is candidate else None
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata GetCandidateInfo(string key);
        
        /// <summary>
        /// >> DelegationScheduledRequests
        ///  Stores outstanding delegation requests per collator.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest> GetDelegationScheduledRequests(string key);
        
        /// <summary>
        /// >> AutoCompoundingDelegations
        ///  Stores auto-compounding configuration per collator.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig> GetAutoCompoundingDelegations(string key);
        
        /// <summary>
        /// >> TopDelegations
        ///  Top delegations for collator candidate
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations GetTopDelegations(string key);
        
        /// <summary>
        /// >> BottomDelegations
        ///  Bottom delegations for collator candidate
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations GetBottomDelegations(string key);
        
        /// <summary>
        /// >> SelectedCandidates
        ///  The collator candidates selected for the current round
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetSelectedCandidates();
        
        /// <summary>
        /// >> Total
        ///  Total capital locked by this staking pallet
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetTotal();
        
        /// <summary>
        /// >> CandidatePool
        ///  The pool of collator candidates, each with their total backing stake
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet GetCandidatePool();
        
        /// <summary>
        /// >> AtStake
        ///  Snapshot of collator delegation stake at the start of the round
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot GetAtStake(string key);
        
        /// <summary>
        /// >> DelayedPayouts
        ///  Delayed payouts
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout GetDelayedPayouts(string key);
        
        /// <summary>
        /// >> Staked
        ///  Total counted stake for selected candidates in the round
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetStaked(string key);
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo GetInflationConfig();
        
        /// <summary>
        /// >> Points
        ///  Total points awarded to collators for block production in the round
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetPoints(string key);
        
        /// <summary>
        /// >> AwardedPts
        ///  Points for each collator per round
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetAwardedPts(string key);
    }
    
    /// <summary>
    /// ParachainStakingStorage class definition.
    /// </summary>
    public sealed class ParachainStakingStorage : IParachainStakingStorage
    {
        
        /// <summary>
        /// _collatorCommissionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> _collatorCommissionTypedStorage;
        
        /// <summary>
        /// _totalSelectedTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _totalSelectedTypedStorage;
        
        /// <summary>
        /// _parachainBondInfoTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig> _parachainBondInfoTypedStorage;
        
        /// <summary>
        /// _roundTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo> _roundTypedStorage;
        
        /// <summary>
        /// _delegatorStateTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator> _delegatorStateTypedStorage;
        
        /// <summary>
        /// _candidateInfoTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata> _candidateInfoTypedStorage;
        
        /// <summary>
        /// _delegationScheduledRequestsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest>> _delegationScheduledRequestsTypedStorage;
        
        /// <summary>
        /// _autoCompoundingDelegationsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig>> _autoCompoundingDelegationsTypedStorage;
        
        /// <summary>
        /// _topDelegationsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations> _topDelegationsTypedStorage;
        
        /// <summary>
        /// _bottomDelegationsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations> _bottomDelegationsTypedStorage;
        
        /// <summary>
        /// _selectedCandidatesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> _selectedCandidatesTypedStorage;
        
        /// <summary>
        /// _totalTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _totalTypedStorage;
        
        /// <summary>
        /// _candidatePoolTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet> _candidatePoolTypedStorage;
        
        /// <summary>
        /// _atStakeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot> _atStakeTypedStorage;
        
        /// <summary>
        /// _delayedPayoutsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout> _delayedPayoutsTypedStorage;
        
        /// <summary>
        /// _stakedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _stakedTypedStorage;
        
        /// <summary>
        /// _inflationConfigTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo> _inflationConfigTypedStorage;
        
        /// <summary>
        /// _pointsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _pointsTypedStorage;
        
        /// <summary>
        /// _awardedPtsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _awardedPtsTypedStorage;
        
        /// <summary>
        /// ParachainStakingStorage constructor.
        /// </summary>
        public ParachainStakingStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.CollatorCommissionTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill>("ParachainStaking.CollatorCommission", storageDataProvider, storageChangeDelegates);
            this.TotalSelectedTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.TotalSelected", storageDataProvider, storageChangeDelegates);
            this.ParachainBondInfoTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig>("ParachainStaking.ParachainBondInfo", storageDataProvider, storageChangeDelegates);
            this.RoundTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo>("ParachainStaking.Round", storageDataProvider, storageChangeDelegates);
            this.DelegatorStateTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator>("ParachainStaking.DelegatorState", storageDataProvider, storageChangeDelegates);
            this.CandidateInfoTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata>("ParachainStaking.CandidateInfo", storageDataProvider, storageChangeDelegates);
            this.DelegationScheduledRequestsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest>>("ParachainStaking.DelegationScheduledRequests", storageDataProvider, storageChangeDelegates);
            this.AutoCompoundingDelegationsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig>>("ParachainStaking.AutoCompoundingDelegations", storageDataProvider, storageChangeDelegates);
            this.TopDelegationsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations>("ParachainStaking.TopDelegations", storageDataProvider, storageChangeDelegates);
            this.BottomDelegationsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations>("ParachainStaking.BottomDelegations", storageDataProvider, storageChangeDelegates);
            this.SelectedCandidatesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>("ParachainStaking.SelectedCandidates", storageDataProvider, storageChangeDelegates);
            this.TotalTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("ParachainStaking.Total", storageDataProvider, storageChangeDelegates);
            this.CandidatePoolTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet>("ParachainStaking.CandidatePool", storageDataProvider, storageChangeDelegates);
            this.AtStakeTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot>("ParachainStaking.AtStake", storageDataProvider, storageChangeDelegates);
            this.DelayedPayoutsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout>("ParachainStaking.DelayedPayouts", storageDataProvider, storageChangeDelegates);
            this.StakedTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("ParachainStaking.Staked", storageDataProvider, storageChangeDelegates);
            this.InflationConfigTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo>("ParachainStaking.InflationConfig", storageDataProvider, storageChangeDelegates);
            this.PointsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.Points", storageDataProvider, storageChangeDelegates);
            this.AwardedPtsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.AwardedPts", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _collatorCommissionTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill> CollatorCommissionTypedStorage
        {
            get
            {
                return _collatorCommissionTypedStorage;
            }
            set
            {
                _collatorCommissionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _totalSelectedTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> TotalSelectedTypedStorage
        {
            get
            {
                return _totalSelectedTypedStorage;
            }
            set
            {
                _totalSelectedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _parachainBondInfoTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig> ParachainBondInfoTypedStorage
        {
            get
            {
                return _parachainBondInfoTypedStorage;
            }
            set
            {
                _parachainBondInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _roundTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo> RoundTypedStorage
        {
            get
            {
                return _roundTypedStorage;
            }
            set
            {
                _roundTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _delegatorStateTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator> DelegatorStateTypedStorage
        {
            get
            {
                return _delegatorStateTypedStorage;
            }
            set
            {
                _delegatorStateTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidateInfoTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata> CandidateInfoTypedStorage
        {
            get
            {
                return _candidateInfoTypedStorage;
            }
            set
            {
                _candidateInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _delegationScheduledRequestsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest>> DelegationScheduledRequestsTypedStorage
        {
            get
            {
                return _delegationScheduledRequestsTypedStorage;
            }
            set
            {
                _delegationScheduledRequestsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _autoCompoundingDelegationsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig>> AutoCompoundingDelegationsTypedStorage
        {
            get
            {
                return _autoCompoundingDelegationsTypedStorage;
            }
            set
            {
                _autoCompoundingDelegationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _topDelegationsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations> TopDelegationsTypedStorage
        {
            get
            {
                return _topDelegationsTypedStorage;
            }
            set
            {
                _topDelegationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bottomDelegationsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations> BottomDelegationsTypedStorage
        {
            get
            {
                return _bottomDelegationsTypedStorage;
            }
            set
            {
                _bottomDelegationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _selectedCandidatesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> SelectedCandidatesTypedStorage
        {
            get
            {
                return _selectedCandidatesTypedStorage;
            }
            set
            {
                _selectedCandidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _totalTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> TotalTypedStorage
        {
            get
            {
                return _totalTypedStorage;
            }
            set
            {
                _totalTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidatePoolTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet> CandidatePoolTypedStorage
        {
            get
            {
                return _candidatePoolTypedStorage;
            }
            set
            {
                _candidatePoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _atStakeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot> AtStakeTypedStorage
        {
            get
            {
                return _atStakeTypedStorage;
            }
            set
            {
                _atStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _delayedPayoutsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout> DelayedPayoutsTypedStorage
        {
            get
            {
                return _delayedPayoutsTypedStorage;
            }
            set
            {
                _delayedPayoutsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _stakedTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> StakedTypedStorage
        {
            get
            {
                return _stakedTypedStorage;
            }
            set
            {
                _stakedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _inflationConfigTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo> InflationConfigTypedStorage
        {
            get
            {
                return _inflationConfigTypedStorage;
            }
            set
            {
                _inflationConfigTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _pointsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> PointsTypedStorage
        {
            get
            {
                return _pointsTypedStorage;
            }
            set
            {
                _pointsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _awardedPtsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> AwardedPtsTypedStorage
        {
            get
            {
                return _awardedPtsTypedStorage;
            }
            set
            {
                _awardedPtsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await CollatorCommissionTypedStorage.InitializeAsync("ParachainStaking", "CollatorCommission");
            await TotalSelectedTypedStorage.InitializeAsync("ParachainStaking", "TotalSelected");
            await ParachainBondInfoTypedStorage.InitializeAsync("ParachainStaking", "ParachainBondInfo");
            await RoundTypedStorage.InitializeAsync("ParachainStaking", "Round");
            await DelegatorStateTypedStorage.InitializeAsync("ParachainStaking", "DelegatorState");
            await CandidateInfoTypedStorage.InitializeAsync("ParachainStaking", "CandidateInfo");
            await DelegationScheduledRequestsTypedStorage.InitializeAsync("ParachainStaking", "DelegationScheduledRequests");
            await AutoCompoundingDelegationsTypedStorage.InitializeAsync("ParachainStaking", "AutoCompoundingDelegations");
            await TopDelegationsTypedStorage.InitializeAsync("ParachainStaking", "TopDelegations");
            await BottomDelegationsTypedStorage.InitializeAsync("ParachainStaking", "BottomDelegations");
            await SelectedCandidatesTypedStorage.InitializeAsync("ParachainStaking", "SelectedCandidates");
            await TotalTypedStorage.InitializeAsync("ParachainStaking", "Total");
            await CandidatePoolTypedStorage.InitializeAsync("ParachainStaking", "CandidatePool");
            await AtStakeTypedStorage.InitializeAsync("ParachainStaking", "AtStake");
            await DelayedPayoutsTypedStorage.InitializeAsync("ParachainStaking", "DelayedPayouts");
            await StakedTypedStorage.InitializeAsync("ParachainStaking", "Staked");
            await InflationConfigTypedStorage.InitializeAsync("ParachainStaking", "InflationConfig");
            await PointsTypedStorage.InitializeAsync("ParachainStaking", "Points");
            await AwardedPtsTypedStorage.InitializeAsync("ParachainStaking", "AwardedPts");
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.CollatorCommission
        /// </summary>
        [StorageChange("ParachainStaking", "CollatorCommission")]
        public void OnUpdateCollatorCommission(string data)
        {
            CollatorCommissionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CollatorCommission
        ///  Commission percent taken off of rewards for all collators
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetCollatorCommission()
        {
            return CollatorCommissionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.TotalSelected
        /// </summary>
        [StorageChange("ParachainStaking", "TotalSelected")]
        public void OnUpdateTotalSelected(string data)
        {
            TotalSelectedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TotalSelected
        ///  The total candidates selected every round
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetTotalSelected()
        {
            return TotalSelectedTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.ParachainBondInfo
        /// </summary>
        [StorageChange("ParachainStaking", "ParachainBondInfo")]
        public void OnUpdateParachainBondInfo(string data)
        {
            ParachainBondInfoTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ParachainBondInfo
        ///  Parachain bond config info { account, percent_of_inflation }
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig GetParachainBondInfo()
        {
            return ParachainBondInfoTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.Round
        /// </summary>
        [StorageChange("ParachainStaking", "Round")]
        public void OnUpdateRound(string data)
        {
            RoundTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Round
        ///  Current round index and next round scheduled transition
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo GetRound()
        {
            return RoundTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.DelegatorState
        /// </summary>
        [StorageChange("ParachainStaking", "DelegatorState")]
        public void OnUpdateDelegatorState(string key, string data)
        {
            DelegatorStateTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DelegatorState
        ///  Get delegator state associated with an account if account is delegating else None
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator GetDelegatorState(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DelegatorStateTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.CandidateInfo
        /// </summary>
        [StorageChange("ParachainStaking", "CandidateInfo")]
        public void OnUpdateCandidateInfo(string key, string data)
        {
            CandidateInfoTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CandidateInfo
        ///  Get collator candidate info associated with an account if account is candidate else None
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata GetCandidateInfo(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CandidateInfoTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.DelegationScheduledRequests
        /// </summary>
        [StorageChange("ParachainStaking", "DelegationScheduledRequests")]
        public void OnUpdateDelegationScheduledRequests(string key, string data)
        {
            DelegationScheduledRequestsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DelegationScheduledRequests
        ///  Stores outstanding delegation requests per collator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest> GetDelegationScheduledRequests(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DelegationScheduledRequestsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.AutoCompoundingDelegations
        /// </summary>
        [StorageChange("ParachainStaking", "AutoCompoundingDelegations")]
        public void OnUpdateAutoCompoundingDelegations(string key, string data)
        {
            AutoCompoundingDelegationsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AutoCompoundingDelegations
        ///  Stores auto-compounding configuration per collator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig> GetAutoCompoundingDelegations(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AutoCompoundingDelegationsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.TopDelegations
        /// </summary>
        [StorageChange("ParachainStaking", "TopDelegations")]
        public void OnUpdateTopDelegations(string key, string data)
        {
            TopDelegationsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TopDelegations
        ///  Top delegations for collator candidate
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations GetTopDelegations(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TopDelegationsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.BottomDelegations
        /// </summary>
        [StorageChange("ParachainStaking", "BottomDelegations")]
        public void OnUpdateBottomDelegations(string key, string data)
        {
            BottomDelegationsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BottomDelegations
        ///  Bottom delegations for collator candidate
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations GetBottomDelegations(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BottomDelegationsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.SelectedCandidates
        /// </summary>
        [StorageChange("ParachainStaking", "SelectedCandidates")]
        public void OnUpdateSelectedCandidates(string data)
        {
            SelectedCandidatesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SelectedCandidates
        ///  The collator candidates selected for the current round
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetSelectedCandidates()
        {
            return SelectedCandidatesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.Total
        /// </summary>
        [StorageChange("ParachainStaking", "Total")]
        public void OnUpdateTotal(string data)
        {
            TotalTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Total
        ///  Total capital locked by this staking pallet
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetTotal()
        {
            return TotalTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.CandidatePool
        /// </summary>
        [StorageChange("ParachainStaking", "CandidatePool")]
        public void OnUpdateCandidatePool(string data)
        {
            CandidatePoolTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CandidatePool
        ///  The pool of collator candidates, each with their total backing stake
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet GetCandidatePool()
        {
            return CandidatePoolTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.AtStake
        /// </summary>
        [StorageChange("ParachainStaking", "AtStake")]
        public void OnUpdateAtStake(string key, string data)
        {
            AtStakeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AtStake
        ///  Snapshot of collator delegation stake at the start of the round
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot GetAtStake(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AtStakeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.DelayedPayouts
        /// </summary>
        [StorageChange("ParachainStaking", "DelayedPayouts")]
        public void OnUpdateDelayedPayouts(string key, string data)
        {
            DelayedPayoutsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DelayedPayouts
        ///  Delayed payouts
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout GetDelayedPayouts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DelayedPayoutsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.Staked
        /// </summary>
        [StorageChange("ParachainStaking", "Staked")]
        public void OnUpdateStaked(string key, string data)
        {
            StakedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Staked
        ///  Total counted stake for selected candidates in the round
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetStaked(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (StakedTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.InflationConfig
        /// </summary>
        [StorageChange("ParachainStaking", "InflationConfig")]
        public void OnUpdateInflationConfig(string data)
        {
            InflationConfigTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo GetInflationConfig()
        {
            return InflationConfigTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.Points
        /// </summary>
        [StorageChange("ParachainStaking", "Points")]
        public void OnUpdatePoints(string key, string data)
        {
            PointsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Points
        ///  Total points awarded to collators for block production in the round
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetPoints(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PointsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.AwardedPts
        /// </summary>
        [StorageChange("ParachainStaking", "AwardedPts")]
        public void OnUpdateAwardedPts(string key, string data)
        {
            AwardedPtsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AwardedPts
        ///  Points for each collator per round
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetAwardedPts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AwardedPtsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
