//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAuthorFilterStorage interface definition.
    /// </summary>
    public interface IAuthorFilterStorage : IStorage
    {
        
        /// <summary>
        /// >> EligibleRatio
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent GetEligibleRatio();
        
        /// <summary>
        /// >> EligibleCount
        ///  The number of active authors that will be eligible at each height.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32 GetEligibleCount();
    }
    
    /// <summary>
    /// AuthorFilterStorage class definition.
    /// </summary>
    public sealed class AuthorFilterStorage : IAuthorFilterStorage
    {
        
        /// <summary>
        /// _eligibleRatioTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> _eligibleRatioTypedStorage;
        
        /// <summary>
        /// _eligibleCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32> _eligibleCountTypedStorage;
        
        /// <summary>
        /// AuthorFilterStorage constructor.
        /// </summary>
        public AuthorFilterStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.EligibleRatioTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>("AuthorFilter.EligibleRatio", storageDataProvider, storageChangeDelegates);
            this.EligibleCountTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32>("AuthorFilter.EligibleCount", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _eligibleRatioTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> EligibleRatioTypedStorage
        {
            get
            {
                return _eligibleRatioTypedStorage;
            }
            set
            {
                _eligibleRatioTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _eligibleCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32> EligibleCountTypedStorage
        {
            get
            {
                return _eligibleCountTypedStorage;
            }
            set
            {
                _eligibleCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await EligibleRatioTypedStorage.InitializeAsync("AuthorFilter", "EligibleRatio");
            await EligibleCountTypedStorage.InitializeAsync("AuthorFilter", "EligibleCount");
        }
        
        /// <summary>
        /// Implements any storage change for AuthorFilter.EligibleRatio
        /// </summary>
        [StorageChange("AuthorFilter", "EligibleRatio")]
        public void OnUpdateEligibleRatio(string data)
        {
            EligibleRatioTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EligibleRatio
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent GetEligibleRatio()
        {
            return EligibleRatioTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for AuthorFilter.EligibleCount
        /// </summary>
        [StorageChange("AuthorFilter", "EligibleCount")]
        public void OnUpdateEligibleCount(string data)
        {
            EligibleCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EligibleCount
        ///  The number of active authors that will be eligible at each height.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.pallet_author_slot_filter.num.NonZeroU32 GetEligibleCount()
        {
            return EligibleCountTypedStorage.Get();
        }
    }
}
