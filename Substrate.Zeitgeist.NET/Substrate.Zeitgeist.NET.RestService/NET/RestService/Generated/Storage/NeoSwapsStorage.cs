//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// INeoSwapsStorage interface definition.
    /// </summary>
    public interface INeoSwapsStorage : IStorage
    {
        
        /// <summary>
        /// >> Pools
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_neo_swaps.types.pool.Pool GetPools(string key);
    }
    
    /// <summary>
    /// NeoSwapsStorage class definition.
    /// </summary>
    public sealed class NeoSwapsStorage : INeoSwapsStorage
    {
        
        /// <summary>
        /// _poolsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_neo_swaps.types.pool.Pool> _poolsTypedStorage;
        
        /// <summary>
        /// NeoSwapsStorage constructor.
        /// </summary>
        public NeoSwapsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PoolsTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_neo_swaps.types.pool.Pool>("NeoSwaps.Pools", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _poolsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_neo_swaps.types.pool.Pool> PoolsTypedStorage
        {
            get
            {
                return _poolsTypedStorage;
            }
            set
            {
                _poolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PoolsTypedStorage.InitializeAsync("NeoSwaps", "Pools");
        }
        
        /// <summary>
        /// Implements any storage change for NeoSwaps.Pools
        /// </summary>
        [StorageChange("NeoSwaps", "Pools")]
        public void OnUpdatePools(string key, string data)
        {
            PoolsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Pools
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_neo_swaps.types.pool.Pool GetPools(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_neo_swaps.types.pool.Pool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
