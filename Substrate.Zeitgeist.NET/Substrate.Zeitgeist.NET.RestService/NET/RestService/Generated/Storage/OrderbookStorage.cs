//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IOrderbookStorage interface definition.
    /// </summary>
    public interface IOrderbookStorage : IStorage
    {
        
        /// <summary>
        /// >> NextOrderId
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextOrderId();
        
        /// <summary>
        /// >> Orders
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_orderbook.types.Order GetOrders(string key);
    }
    
    /// <summary>
    /// OrderbookStorage class definition.
    /// </summary>
    public sealed class OrderbookStorage : IOrderbookStorage
    {
        
        /// <summary>
        /// _nextOrderIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextOrderIdTypedStorage;
        
        /// <summary>
        /// _ordersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_orderbook.types.Order> _ordersTypedStorage;
        
        /// <summary>
        /// OrderbookStorage constructor.
        /// </summary>
        public OrderbookStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.NextOrderIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Orderbook.NextOrderId", storageDataProvider, storageChangeDelegates);
            this.OrdersTypedStorage = new TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_orderbook.types.Order>("Orderbook.Orders", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _nextOrderIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextOrderIdTypedStorage
        {
            get
            {
                return _nextOrderIdTypedStorage;
            }
            set
            {
                _nextOrderIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ordersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_orderbook.types.Order> OrdersTypedStorage
        {
            get
            {
                return _ordersTypedStorage;
            }
            set
            {
                _ordersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await NextOrderIdTypedStorage.InitializeAsync("Orderbook", "NextOrderId");
            await OrdersTypedStorage.InitializeAsync("Orderbook", "Orders");
        }
        
        /// <summary>
        /// Implements any storage change for Orderbook.NextOrderId
        /// </summary>
        [StorageChange("Orderbook", "NextOrderId")]
        public void OnUpdateNextOrderId(string data)
        {
            NextOrderIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextOrderId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextOrderId()
        {
            return NextOrderIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Orderbook.Orders
        /// </summary>
        [StorageChange("Orderbook", "Orders")]
        public void OnUpdateOrders(string key, string data)
        {
            OrdersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Orders
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_orderbook.types.Order GetOrders(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OrdersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.zrml_orderbook.types.Order result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
