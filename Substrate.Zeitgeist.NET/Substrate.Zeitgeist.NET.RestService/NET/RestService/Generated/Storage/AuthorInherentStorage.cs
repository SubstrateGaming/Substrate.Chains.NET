//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAuthorInherentStorage interface definition.
    /// </summary>
    public interface IAuthorInherentStorage : IStorage
    {
        
        /// <summary>
        /// >> Author
        ///  Author of current block.
        /// </summary>
        Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetAuthor();
        
        /// <summary>
        /// >> HighestSlotSeen
        ///  The highest slot that has been seen in the history of this chain.
        ///  This is a strictly-increasing value.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetHighestSlotSeen();
    }
    
    /// <summary>
    /// AuthorInherentStorage class definition.
    /// </summary>
    public sealed class AuthorInherentStorage : IAuthorInherentStorage
    {
        
        /// <summary>
        /// _authorTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _authorTypedStorage;
        
        /// <summary>
        /// _highestSlotSeenTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _highestSlotSeenTypedStorage;
        
        /// <summary>
        /// AuthorInherentStorage constructor.
        /// </summary>
        public AuthorInherentStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AuthorTypedStorage = new TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("AuthorInherent.Author", storageDataProvider, storageChangeDelegates);
            this.HighestSlotSeenTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AuthorInherent.HighestSlotSeen", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _authorTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> AuthorTypedStorage
        {
            get
            {
                return _authorTypedStorage;
            }
            set
            {
                _authorTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _highestSlotSeenTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> HighestSlotSeenTypedStorage
        {
            get
            {
                return _highestSlotSeenTypedStorage;
            }
            set
            {
                _highestSlotSeenTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AuthorTypedStorage.InitializeAsync("AuthorInherent", "Author");
            await HighestSlotSeenTypedStorage.InitializeAsync("AuthorInherent", "HighestSlotSeen");
        }
        
        /// <summary>
        /// Implements any storage change for AuthorInherent.Author
        /// </summary>
        [StorageChange("AuthorInherent", "Author")]
        public void OnUpdateAuthor(string data)
        {
            AuthorTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Author
        ///  Author of current block.
        /// </summary>
        public Substrate.Zeitgeist.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetAuthor()
        {
            return AuthorTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for AuthorInherent.HighestSlotSeen
        /// </summary>
        [StorageChange("AuthorInherent", "HighestSlotSeen")]
        public void OnUpdateHighestSlotSeen(string data)
        {
            HighestSlotSeenTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> HighestSlotSeen
        ///  The highest slot that has been seen in the history of this chain.
        ///  This is a strictly-increasing value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetHighestSlotSeen()
        {
            return HighestSlotSeenTypedStorage.Get();
        }
    }
}
