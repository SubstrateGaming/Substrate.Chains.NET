//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IStyxStorage interface definition.
    /// </summary>
    public interface IStyxStorage : IStorage
    {
        
        /// <summary>
        /// >> Crossings
        ///  Keep track of crossings. Accounts are only able to cross once.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetCrossings(string key);
        
        /// <summary>
        /// >> BurnAmount
        ///  An extra layer of pseudo randomness.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetBurnAmount();
    }
    
    /// <summary>
    /// StyxStorage class definition.
    /// </summary>
    public sealed class StyxStorage : IStyxStorage
    {
        
        /// <summary>
        /// _crossingsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _crossingsTypedStorage;
        
        /// <summary>
        /// _burnAmountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _burnAmountTypedStorage;
        
        /// <summary>
        /// StyxStorage constructor.
        /// </summary>
        public StyxStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.CrossingsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("Styx.Crossings", storageDataProvider, storageChangeDelegates);
            this.BurnAmountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Styx.BurnAmount", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _crossingsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> CrossingsTypedStorage
        {
            get
            {
                return _crossingsTypedStorage;
            }
            set
            {
                _crossingsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _burnAmountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> BurnAmountTypedStorage
        {
            get
            {
                return _burnAmountTypedStorage;
            }
            set
            {
                _burnAmountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await CrossingsTypedStorage.InitializeAsync("Styx", "Crossings");
            await BurnAmountTypedStorage.InitializeAsync("Styx", "BurnAmount");
        }
        
        /// <summary>
        /// Implements any storage change for Styx.Crossings
        /// </summary>
        [StorageChange("Styx", "Crossings")]
        public void OnUpdateCrossings(string key, string data)
        {
            CrossingsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Crossings
        ///  Keep track of crossings. Accounts are only able to cross once.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetCrossings(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CrossingsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Styx.BurnAmount
        /// </summary>
        [StorageChange("Styx", "BurnAmount")]
        public void OnUpdateBurnAmount(string data)
        {
            BurnAmountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> BurnAmount
        ///  An extra layer of pseudo randomness.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetBurnAmount()
        {
            return BurnAmountTypedStorage.Get();
        }
    }
}
