//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Zeitgeist.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IUnknownTokensStorage interface definition.
    /// </summary>
    public interface IUnknownTokensStorage : IStorage
    {
        
        /// <summary>
        /// >> ConcreteFungibleBalances
        ///  Concrete fungible balances under a given location and a concrete
        ///  fungible id.
        /// 
        ///  double_map: who, asset_id => u128
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetConcreteFungibleBalances(string key);
        
        /// <summary>
        /// >> AbstractFungibleBalances
        ///  Abstract fungible balances under a given location and a abstract
        ///  fungible id.
        /// 
        ///  double_map: who, asset_id => u128
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetAbstractFungibleBalances(string key);
    }
    
    /// <summary>
    /// UnknownTokensStorage class definition.
    /// </summary>
    public sealed class UnknownTokensStorage : IUnknownTokensStorage
    {
        
        /// <summary>
        /// _concreteFungibleBalancesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _concreteFungibleBalancesTypedStorage;
        
        /// <summary>
        /// _abstractFungibleBalancesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _abstractFungibleBalancesTypedStorage;
        
        /// <summary>
        /// UnknownTokensStorage constructor.
        /// </summary>
        public UnknownTokensStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ConcreteFungibleBalancesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("UnknownTokens.ConcreteFungibleBalances", storageDataProvider, storageChangeDelegates);
            this.AbstractFungibleBalancesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("UnknownTokens.AbstractFungibleBalances", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _concreteFungibleBalancesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> ConcreteFungibleBalancesTypedStorage
        {
            get
            {
                return _concreteFungibleBalancesTypedStorage;
            }
            set
            {
                _concreteFungibleBalancesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _abstractFungibleBalancesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> AbstractFungibleBalancesTypedStorage
        {
            get
            {
                return _abstractFungibleBalancesTypedStorage;
            }
            set
            {
                _abstractFungibleBalancesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ConcreteFungibleBalancesTypedStorage.InitializeAsync("UnknownTokens", "ConcreteFungibleBalances");
            await AbstractFungibleBalancesTypedStorage.InitializeAsync("UnknownTokens", "AbstractFungibleBalances");
        }
        
        /// <summary>
        /// Implements any storage change for UnknownTokens.ConcreteFungibleBalances
        /// </summary>
        [StorageChange("UnknownTokens", "ConcreteFungibleBalances")]
        public void OnUpdateConcreteFungibleBalances(string key, string data)
        {
            ConcreteFungibleBalancesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ConcreteFungibleBalances
        ///  Concrete fungible balances under a given location and a concrete
        ///  fungible id.
        /// 
        ///  double_map: who, asset_id => u128
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetConcreteFungibleBalances(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ConcreteFungibleBalancesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for UnknownTokens.AbstractFungibleBalances
        /// </summary>
        [StorageChange("UnknownTokens", "AbstractFungibleBalances")]
        public void OnUpdateAbstractFungibleBalances(string key, string data)
        {
            AbstractFungibleBalancesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AbstractFungibleBalances
        ///  Abstract fungible balances under a given location and a abstract
        ///  fungible id.
        /// 
        ///  double_map: who, asset_id => u128
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetAbstractFungibleBalances(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AbstractFungibleBalancesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
