{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Index",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 7
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 7
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 7
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Index",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "misc_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 9
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "11": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "12": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "13": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 15,
        "TypeDef": "Sequence"
      },
      "15": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "16": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "17": {
        "TypeId": 18,
        "TypeDef": "Sequence"
      },
      "18": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 207
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 19
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 208
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 19
          },
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "19": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 20
              }
            ],
            "Index": 0
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 29
              }
            ],
            "Index": 3
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 34
              }
            ],
            "Index": 4
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 35
              }
            ],
            "Index": 10
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 37
              }
            ],
            "Index": 11
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 38
              }
            ],
            "Index": 12
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "pallet_vesting::Event<Runtime>",
                "TypeId": 39
              }
            ],
            "Index": 13
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 40
              }
            ],
            "Index": 14
          },
          {
            "Name": "Bounties",
            "TypeFields": [
              {
                "TypeName": "pallet_bounties::Event<Runtime>",
                "TypeId": 42
              }
            ],
            "Index": 15
          },
          {
            "Name": "AssetTxPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_asset_tx_payment::Event<Runtime>",
                "TypeId": 43
              }
            ],
            "Index": 16
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 45
              }
            ],
            "Index": 20
          },
          {
            "Name": "AdvisoryCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 49
              }
            ],
            "Index": 21
          },
          {
            "Name": "AdvisoryCommitteeMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                "TypeId": 51
              }
            ],
            "Index": 22
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                "TypeId": 52
              }
            ],
            "Index": 23
          },
          {
            "Name": "CouncilMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>",
                "TypeId": 53
              }
            ],
            "Index": 24
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance3>",
                "TypeId": 54
              }
            ],
            "Index": 25
          },
          {
            "Name": "TechnicalCommitteeMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance3>",
                "TypeId": 55
              }
            ],
            "Index": 26
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 56
              }
            ],
            "Index": 30
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 57
              }
            ],
            "Index": 31
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 58
              }
            ],
            "Index": 32
          },
          {
            "Name": "Contracts",
            "TypeFields": [
              {
                "TypeName": "pallet_contracts::Event<Runtime>",
                "TypeId": 61
              }
            ],
            "Index": 33
          },
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "orml_tokens::Event<Runtime>",
                "TypeId": 62
              }
            ],
            "Index": 41
          },
          {
            "Name": "Authorized",
            "TypeFields": [
              {
                "TypeName": "zrml_authorized::Event<Runtime>",
                "TypeId": 67
              }
            ],
            "Index": 51
          },
          {
            "Name": "Court",
            "TypeFields": [
              {
                "TypeName": "zrml_court::Event<Runtime>",
                "TypeId": 69
              }
            ],
            "Index": 52
          },
          {
            "Name": "LiquidityMining",
            "TypeFields": [
              {
                "TypeName": "zrml_liquidity_mining::Event<Runtime>",
                "TypeId": 81
              }
            ],
            "Index": 53
          },
          {
            "Name": "SimpleDisputes",
            "TypeFields": [
              {
                "TypeName": "zrml_simple_disputes::Event<Runtime>",
                "TypeId": 83
              }
            ],
            "Index": 55
          },
          {
            "Name": "Swaps",
            "TypeFields": [
              {
                "TypeName": "zrml_swaps::Event<Runtime>",
                "TypeId": 85
              }
            ],
            "Index": 56
          },
          {
            "Name": "PredictionMarkets",
            "TypeFields": [
              {
                "TypeName": "zrml_prediction_markets::Event<Runtime>",
                "TypeId": 102
              }
            ],
            "Index": 57
          },
          {
            "Name": "Styx",
            "TypeFields": [
              {
                "TypeName": "zrml_styx::Event<Runtime>",
                "TypeId": 125
              }
            ],
            "Index": 58
          },
          {
            "Name": "GlobalDisputes",
            "TypeFields": [
              {
                "TypeName": "zrml_global_disputes::Event<Runtime>",
                "TypeId": 126
              }
            ],
            "Index": 59
          },
          {
            "Name": "NeoSwaps",
            "TypeFields": [
              {
                "TypeName": "zrml_neo_swaps::Event<Runtime>",
                "TypeId": 127
              }
            ],
            "Index": 60
          },
          {
            "Name": "Orderbook",
            "TypeFields": [
              {
                "TypeName": "zrml_orderbook::Event<Runtime>",
                "TypeId": 128
              }
            ],
            "Index": 61
          },
          {
            "Name": "Parimutuel",
            "TypeFields": [
              {
                "TypeName": "zrml_parimutuel::Event<Runtime>",
                "TypeId": 130
              }
            ],
            "Index": 62
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 131
              }
            ],
            "Index": 100
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "pallet_parachain_staking::Event<Runtime>",
                "TypeId": 132
              }
            ],
            "Index": 110
          },
          {
            "Name": "AuthorFilter",
            "TypeFields": [
              {
                "TypeName": "pallet_author_slot_filter::Event",
                "TypeId": 137
              }
            ],
            "Index": 112
          },
          {
            "Name": "AuthorMapping",
            "TypeFields": [
              {
                "TypeName": "pallet_author_mapping::Event<Runtime>",
                "TypeId": 139
              }
            ],
            "Index": 113
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 143
              }
            ],
            "Index": 120
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                "TypeId": 146
              }
            ],
            "Index": 121
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 147
              }
            ],
            "Index": 122
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 198
              }
            ],
            "Index": 123
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "orml_asset_registry::Event<Runtime>",
                "TypeId": 200
              }
            ],
            "Index": 124
          },
          {
            "Name": "UnknownTokens",
            "TypeFields": [
              {
                "TypeName": "orml_unknown_tokens::Event",
                "TypeId": 205
              }
            ],
            "Index": 125
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "orml_xtokens::Event<Runtime>",
                "TypeId": 206
              }
            ],
            "Index": 126
          }
        ],
        "Path": [
          "zeitgeist_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "20": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 24
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "21": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 22
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 23
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "22": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "23": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 25
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 26
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 27
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 28
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "26": {
        "Variants": [
          {
            "Name": "NoFunds",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 30
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 31
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 30
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 31
              }
            ],
            "Index": 3,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 30
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 31
              }
            ],
            "Index": 4,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<T::BlockNumber>",
                "TypeId": 30
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 31
              }
            ],
            "Index": 5,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "30": {
        "TypeIds": [
          4,
          7
        ],
        "TypeDef": "Tuple"
      },
      "31": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "32": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 33
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 24
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 33
          },
          {
            "Name": "E",
            "TypeId": 24
          }
        ],
        "TypeDef": "Variant"
      },
      "33": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "34": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "35": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 36
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "36": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "37": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "39": {
        "Variants": [
          {
            "Name": "VestingUpdated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unvested",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ]
          },
          {
            "Name": "VestingCompleted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has become fully vested."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "40": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 41
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 41
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 41
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "41": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "42": {
        "Variants": [
          {
            "Name": "BountyProposed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "New bounty proposal."
            ]
          },
          {
            "Name": "BountyRejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 7
              },
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A bounty proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "BountyBecameActive",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 7
              }
            ],
            "Index": 2,
            "Docs": [
              "A bounty proposal is funded and became active."
            ]
          },
          {
            "Name": "BountyAwarded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 7
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A bounty is awarded to a beneficiary."
            ]
          },
          {
            "Name": "BountyClaimed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 7
              },
              {
                "Name": "payout",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "A bounty is claimed by beneficiary."
            ]
          },
          {
            "Name": "BountyCanceled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "A bounty is cancelled."
            ]
          },
          {
            "Name": "BountyExtended",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A bounty expiry is extended."
            ]
          }
        ],
        "Path": [
          "pallet_bounties",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "43": {
        "Variants": [
          {
            "Name": "AssetTxFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "asset_id",
                "TypeName": "Option<ChargeAssetIdOf<T>>",
                "TypeId": 44
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who` in an asset `asset_id`."
            ]
          }
        ],
        "Path": [
          "pallet_asset_tx_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "44": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 7
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 7
          }
        ],
        "TypeDef": "Variant"
      },
      "45": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 46
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "until",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 47
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has secconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 7
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "46": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "47": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 48
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "48": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "49": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 50
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "50": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "51": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "52": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 50
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "53": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "54": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 7
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 50
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "55": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "56": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 7
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "57": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "58": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 32
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 59
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 60
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 59
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 59
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "59": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Governance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Staking",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "CreateEditMarket",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ReportOutcome",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Dispute",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "ProvideLiquidity",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "BuySellCompleteSets",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Trading",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "HandleAssets",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "proxy_type",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "60": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "61": {
        "Variants": [
          {
            "Name": "Instantiated",
            "TypeFields": [
              {
                "Name": "deployer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Contract deployed by address at the specified address."
            ]
          },
          {
            "Name": "Terminated",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that was terminated."
                ]
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that received the contracts remaining balance"
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Contract has been removed.",
              "",
              "# Note",
              "",
              "The only way for a contract to be removed and emitting this event is by calling",
              "`seal_terminate`."
            ]
          },
          {
            "Name": "CodeStored",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "Code with the specified hash has been stored."
            ]
          },
          {
            "Name": "ContractEmitted",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that emitted the event."
                ]
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12,
                "Docs": [
                  "Data supplied by the contract. Metadata generated during contract compilation",
                  "is needed to decode it."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A custom event emitted by the contract."
            ]
          },
          {
            "Name": "CodeRemoved",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "A code with the specified hash was removed."
            ]
          },
          {
            "Name": "ContractCodeUpdated",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that has been updated."
                ]
              },
              {
                "Name": "new_code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11,
                "Docs": [
                  "New code hash that was set for the contract."
                ]
              },
              {
                "Name": "old_code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11,
                "Docs": [
                  "Previous code hash of the contract."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "A contract's code was updated."
            ]
          },
          {
            "Name": "Called",
            "TypeFields": [
              {
                "Name": "caller",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account that called the `contract`."
                ]
              },
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that was called."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A contract was called either by a plain account or another contract.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ]
          },
          {
            "Name": "DelegateCalled",
            "TypeFields": [
              {
                "Name": "contract",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The contract that performed the delegate call and hence in whose context",
                  "the `code_hash` is executed."
                ]
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11,
                "Docs": [
                  "The code hash that was delegate called."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A contract delegate called a code hash.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ]
          }
        ],
        "Path": [
          "pallet_contracts",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "62": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below",
              "ExistentialDeposit, resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "status",
                "TypeName": "BalanceStatus",
                "TypeId": 36
              }
            ],
            "Index": 5,
            "Docs": [
              "Some reserved balance was repatriated (moved from reserved to",
              "another account)."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "TotalIssuanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "The total issuance of an currency has been set"
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some balances were withdrawn (e.g. pay for transaction fee)"
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some balances were slashed (e.g. due to mis-behavior)"
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Deposited some balance into an account"
            ]
          },
          {
            "Name": "LockSet",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 66
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some funds are locked"
            ]
          },
          {
            "Name": "LockRemoved",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 66
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "Some locked funds were unlocked"
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some free balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Some locked balance was freed."
            ]
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "63": {
        "Variants": [
          {
            "Name": "CategoricalOutcome",
            "TypeFields": [
              {
                "TypeName": "MI",
                "TypeId": 6
              },
              {
                "TypeName": "CategoryIndex",
                "TypeId": 60
              }
            ],
            "Index": 0
          },
          {
            "Name": "ScalarOutcome",
            "TypeFields": [
              {
                "TypeName": "MI",
                "TypeId": 6
              },
              {
                "TypeName": "ScalarPosition",
                "TypeId": 64
              }
            ],
            "Index": 1
          },
          {
            "Name": "CombinatorialOutcome",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "PoolShare",
            "TypeFields": [
              {
                "TypeName": "SerdeWrapper<PoolId>",
                "TypeId": 65
              }
            ],
            "Index": 3
          },
          {
            "Name": "Ztg",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ForeignAsset",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 5
          },
          {
            "Name": "ParimutuelShare",
            "TypeFields": [
              {
                "TypeName": "MI",
                "TypeId": 6
              },
              {
                "TypeName": "CategoryIndex",
                "TypeId": 60
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "asset",
          "Asset"
        ],
        "TypeParams": [
          {
            "Name": "MI",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "64": {
        "Variants": [
          {
            "Name": "Long",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Short",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "asset",
          "ScalarPosition"
        ],
        "TypeDef": "Variant"
      },
      "65": {
        "TypeFields": [
          {
            "TypeName": "B",
            "TypeId": 6
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "serde_wrapper",
          "SerdeWrapper"
        ],
        "TypeParams": [
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "66": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "67": {
        "Variants": [
          {
            "Name": "AuthorityReported",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 0,
            "Docs": [
              "The Authority reported."
            ]
          }
        ],
        "Path": [
          "zrml_authorized",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "68": {
        "Variants": [
          {
            "Name": "Categorical",
            "TypeFields": [
              {
                "TypeName": "CategoryIndex",
                "TypeId": 60
              }
            ],
            "Index": 0
          },
          {
            "Name": "Scalar",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "outcome_report",
          "OutcomeReport"
        ],
        "TypeDef": "Variant"
      },
      "69": {
        "Variants": [
          {
            "Name": "CourtOpened",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "court_info",
                "TypeName": "CourtOf<T>",
                "TypeId": 70
              }
            ],
            "Index": 0,
            "Docs": [
              "A court case was opened."
            ]
          },
          {
            "Name": "JurorJoined",
            "TypeFields": [
              {
                "Name": "juror",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "stake",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A juror has been added to the court."
            ]
          },
          {
            "Name": "ExitPrepared",
            "TypeFields": [
              {
                "Name": "court_participant",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "A court participant prepared to exit the court."
            ]
          },
          {
            "Name": "ExitedCourt",
            "TypeFields": [
              {
                "Name": "court_participant",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "exit_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "active_lock",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A court participant has been removed from the court."
            ]
          },
          {
            "Name": "JurorVoted",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 6
              },
              {
                "Name": "juror",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "commitment",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "A juror has voted in a court."
            ]
          },
          {
            "Name": "JurorRevealedVote",
            "TypeFields": [
              {
                "Name": "juror",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 6
              },
              {
                "Name": "vote_item",
                "TypeName": "VoteItem",
                "TypeId": 73
              },
              {
                "Name": "salt",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "slashable_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "draw_weight",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "A juror has revealed their vote."
            ]
          },
          {
            "Name": "DenouncedJurorVote",
            "TypeFields": [
              {
                "Name": "denouncer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "juror",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 6
              },
              {
                "Name": "vote_item",
                "TypeName": "VoteItem",
                "TypeId": 73
              },
              {
                "Name": "salt",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "A juror vote has been denounced."
            ]
          },
          {
            "Name": "DelegatorJoined",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "stake",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "delegated_jurors",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              }
            ],
            "Index": 7,
            "Docs": [
              "A delegator has delegated their stake to jurors."
            ]
          },
          {
            "Name": "CourtAppealed",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 6
              },
              {
                "Name": "appeal_info",
                "TypeName": "AppealOf<T>",
                "TypeId": 72
              },
              {
                "Name": "new_round_ends",
                "TypeName": "Option<RoundTimingOf<T>>",
                "TypeId": 79
              }
            ],
            "Index": 8,
            "Docs": [
              "A market has been appealed."
            ]
          },
          {
            "Name": "MintedInCourt",
            "TypeFields": [
              {
                "Name": "court_participant",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A new token amount was minted for a court participant."
            ]
          },
          {
            "Name": "StakesReassigned",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "The juror and delegator stakes have been reassigned. The losing jurors have been slashed.",
              "The winning jurors have been rewarded by the losers.",
              "The losing jurors are those, who did not vote,",
              "were denounced or did not reveal their vote."
            ]
          },
          {
            "Name": "InflationSet",
            "TypeFields": [
              {
                "Name": "inflation",
                "TypeName": "Perbill",
                "TypeId": 80
              }
            ],
            "Index": 11,
            "Docs": [
              "The yearly inflation rate has been set."
            ]
          }
        ],
        "Path": [
          "zrml_court",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "70": {
        "TypeFields": [
          {
            "Name": "status",
            "TypeName": "CourtStatus",
            "TypeId": 75
          },
          {
            "Name": "appeals",
            "TypeName": "Appeals",
            "TypeId": 71
          },
          {
            "Name": "round_ends",
            "TypeName": "RoundTiming<BlockNumber>",
            "TypeId": 76
          },
          {
            "Name": "vote_item_type",
            "TypeName": "VoteItemType",
            "TypeId": 77
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "CourtInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Appeals",
            "TypeId": 71
          }
        ],
        "TypeDef": "Composite"
      },
      "71": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 74
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 72
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "72": {
        "TypeFields": [
          {
            "Name": "backer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "appealed_vote_item",
            "TypeName": "VoteItem",
            "TypeId": 73
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "AppealInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "73": {
        "Variants": [
          {
            "Name": "Outcome",
            "TypeFields": [
              {
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 0
          },
          {
            "Name": "Binary",
            "TypeFields": [
              {
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "VoteItem"
        ],
        "TypeDef": "Variant"
      },
      "74": {
        "TypeId": 72,
        "TypeDef": "Sequence"
      },
      "75": {
        "Variants": [
          {
            "Name": "Open",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "winner",
                "TypeName": "VoteItem",
                "TypeId": 73
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reassigned",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "CourtStatus"
        ],
        "TypeDef": "Variant"
      },
      "76": {
        "TypeFields": [
          {
            "Name": "pre_vote",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "vote",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "aggregation",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "appeal",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "RoundTiming"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "77": {
        "Variants": [
          {
            "Name": "Outcome",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Binary",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "VoteItemType"
        ],
        "TypeDef": "Variant"
      },
      "78": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "79": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 76
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 76
          }
        ],
        "TypeDef": "Variant"
      },
      "80": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "81": {
        "Variants": [
          {
            "Name": "AddedIncentives",
            "TypeFields": [
              {
                "TypeName": "MaxRuntimeUsize",
                "TypeId": 82
              }
            ],
            "Index": 0,
            "Docs": [
              "The number of markets that received incentives in a block"
            ]
          },
          {
            "Name": "DistributedIncentives",
            "TypeFields": [
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "MaxRuntimeUsize",
                "TypeId": 82
              }
            ],
            "Index": 1,
            "Docs": [
              "The total amount of incentives distributed to accounts along side the number",
              "of accounts that received these incentives."
            ]
          },
          {
            "Name": "SubtractedIncentives",
            "TypeFields": [
              {
                "TypeName": "MaxRuntimeUsize",
                "TypeId": 82
              }
            ],
            "Index": 2,
            "Docs": [
              "The number of markets that subtracted incentives in a block"
            ]
          }
        ],
        "Path": [
          "zrml_liquidity_mining",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "82": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 4
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "max_runtime_usize",
          "MaxRuntimeUsize"
        ],
        "TypeDef": "Composite"
      },
      "83": {
        "Variants": [
          {
            "Name": "OutcomeReserved",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "dispute",
                "TypeName": "MarketDispute<T::AccountId, T::BlockNumber, BalanceOf<T>>",
                "TypeId": 84
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "zrml_simple_disputes",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "84": {
        "TypeFields": [
          {
            "Name": "at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "by",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "outcome",
            "TypeName": "OutcomeReport",
            "TypeId": 68
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "MarketDispute"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "85": {
        "Variants": [
          {
            "Name": "DistributeShareHolderRewards",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 6
              },
              {
                "TypeName": "u64",
                "TypeId": 4
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Share holder rewards were distributed. \\[pool_id, num_accounts_rewarded, amount\\]"
            ]
          },
          {
            "Name": "PoolCreate",
            "TypeFields": [
              {
                "TypeName": "CommonPoolEventParams<<T as frame_system::Config>::AccountId>",
                "TypeId": 86
              },
              {
                "TypeName": "PoolOf<T>",
                "TypeId": 87
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A new pool has been created. \\[CommonPoolEventParams, pool, pool_amount, pool_account\\]"
            ]
          },
          {
            "Name": "PoolClosed",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A pool was closed. \\[pool_id\\]"
            ]
          },
          {
            "Name": "PoolCleanedUp",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A pool was cleaned up. \\[pool_id\\]"
            ]
          },
          {
            "Name": "PoolActive",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A pool was opened. \\[pool_id\\]"
            ]
          },
          {
            "Name": "PoolExit",
            "TypeFields": [
              {
                "TypeName": "PoolAssetsEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 95
              }
            ],
            "Index": 5,
            "Docs": [
              "Someone has exited a pool. \\[PoolAssetsEvent\\]"
            ]
          },
          {
            "Name": "PoolExitWithExactAssetAmount",
            "TypeFields": [
              {
                "TypeName": "PoolAssetEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 97
              }
            ],
            "Index": 6,
            "Docs": [
              "Exits a pool given an exact amount of an asset. \\[PoolAssetEvent\\]"
            ]
          },
          {
            "Name": "PoolExitWithExactPoolAmount",
            "TypeFields": [
              {
                "TypeName": "PoolAssetEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 97
              }
            ],
            "Index": 7,
            "Docs": [
              "Exits a pool given an exact pool's amount. \\[PoolAssetEvent\\]"
            ]
          },
          {
            "Name": "PoolJoin",
            "TypeFields": [
              {
                "TypeName": "PoolAssetsEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 95
              }
            ],
            "Index": 8,
            "Docs": [
              "Someone has joined a pool. \\[PoolAssetsEvent\\]"
            ]
          },
          {
            "Name": "PoolJoinWithExactAssetAmount",
            "TypeFields": [
              {
                "TypeName": "PoolAssetEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 97
              }
            ],
            "Index": 9,
            "Docs": [
              "Joins a pool given an exact amount of an asset. \\[PoolAssetEvent\\]"
            ]
          },
          {
            "Name": "PoolJoinWithExactPoolAmount",
            "TypeFields": [
              {
                "TypeName": "PoolAssetEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 97
              }
            ],
            "Index": 10,
            "Docs": [
              "Joins a pool given an exact pool's amount. \\[PoolAssetEvent\\]"
            ]
          },
          {
            "Name": "PoolDestroyed",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Pool was manually destroyed. \\[pool_id\\]"
            ]
          },
          {
            "Name": "PoolDestroyedInSubsidyPhase",
            "TypeFields": [
              {
                "TypeName": "PoolId",
                "TypeId": 6
              },
              {
                "TypeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                "TypeId": 98
              }
            ],
            "Index": 12,
            "Docs": [
              "Pool destroyed due to insufficient subsidy. \\[pool_id, \\[(provider, subsidy), ...\\]\\]"
            ]
          },
          {
            "Name": "SwapExactAmountIn",
            "TypeFields": [
              {
                "TypeName": "SwapEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 100
              }
            ],
            "Index": 13,
            "Docs": [
              "An exact amount of an asset is entering the pool. \\[SwapEvent\\]"
            ]
          },
          {
            "Name": "SwapExactAmountOut",
            "TypeFields": [
              {
                "TypeName": "SwapEvent<<T as frame_system::Config>::AccountId, AssetOf<T>,\nBalanceOf<T>>",
                "TypeId": 100
              }
            ],
            "Index": 14,
            "Docs": [
              "An exact amount of an asset is leaving the pool. \\[SwapEvent\\]"
            ]
          }
        ],
        "Path": [
          "zrml_swaps",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "86": {
        "TypeFields": [
          {
            "Name": "pool_id",
            "TypeName": "PoolId",
            "TypeId": 6
          },
          {
            "Name": "who",
            "TypeName": "AI",
            "TypeId": 0
          }
        ],
        "Path": [
          "zrml_swaps",
          "events",
          "CommonPoolEventParams"
        ],
        "TypeParams": [
          {
            "Name": "AI",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "87": {
        "TypeFields": [
          {
            "Name": "assets",
            "TypeName": "BoundedVec<Asset, MaxAssets>",
            "TypeId": 88
          },
          {
            "Name": "status",
            "TypeName": "PoolStatus",
            "TypeId": 90
          },
          {
            "Name": "swap_fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_weight",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "weights",
            "TypeName": "BoundedBTreeMap<Asset, u128, MaxAssets>",
            "TypeId": 91
          }
        ],
        "Path": [
          "zrml_swaps",
          "types",
          "pool",
          "Pool"
        ],
        "TypeParams": [
          {
            "Name": "Asset",
            "TypeId": 63
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "88": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 89
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 63
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "89": {
        "TypeId": 63,
        "TypeDef": "Sequence"
      },
      "90": {
        "Variants": [
          {
            "Name": "Open",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Closed",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "zrml_swaps",
          "types",
          "pool",
          "PoolStatus"
        ],
        "TypeDef": "Variant"
      },
      "91": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 92
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 63
          },
          {
            "Name": "V",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "92": {
        "TypeFields": [
          {
            "TypeId": 93
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 63
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "93": {
        "TypeId": 94,
        "TypeDef": "Sequence"
      },
      "94": {
        "TypeIds": [
          63,
          6
        ],
        "TypeDef": "Tuple"
      },
      "95": {
        "TypeFields": [
          {
            "Name": "assets",
            "TypeName": "Vec<AS>",
            "TypeId": 89
          },
          {
            "Name": "bounds",
            "TypeName": "Vec<B>",
            "TypeId": 96
          },
          {
            "Name": "cpep",
            "TypeName": "CommonPoolEventParams<AI>",
            "TypeId": 86
          },
          {
            "Name": "transferred",
            "TypeName": "Vec<B>",
            "TypeId": 96
          },
          {
            "Name": "pool_amount",
            "TypeName": "B",
            "TypeId": 6
          }
        ],
        "Path": [
          "zrml_swaps",
          "events",
          "PoolAssetsEvent"
        ],
        "TypeParams": [
          {
            "Name": "AI",
            "TypeId": 0
          },
          {
            "Name": "AS",
            "TypeId": 63
          },
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "96": {
        "TypeId": 6,
        "TypeDef": "Sequence"
      },
      "97": {
        "TypeFields": [
          {
            "Name": "asset",
            "TypeName": "AS",
            "TypeId": 63
          },
          {
            "Name": "bound",
            "TypeName": "B",
            "TypeId": 6
          },
          {
            "Name": "cpep",
            "TypeName": "CommonPoolEventParams<AI>",
            "TypeId": 86
          },
          {
            "Name": "transferred",
            "TypeName": "B",
            "TypeId": 6
          },
          {
            "Name": "pool_amount",
            "TypeName": "B",
            "TypeId": 6
          }
        ],
        "Path": [
          "zrml_swaps",
          "events",
          "PoolAssetEvent"
        ],
        "TypeParams": [
          {
            "Name": "AI",
            "TypeId": 0
          },
          {
            "Name": "AS",
            "TypeId": 63
          },
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "98": {
        "TypeId": 99,
        "TypeDef": "Sequence"
      },
      "99": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "100": {
        "TypeFields": [
          {
            "Name": "asset_amount_in",
            "TypeName": "B",
            "TypeId": 6
          },
          {
            "Name": "asset_amount_out",
            "TypeName": "B",
            "TypeId": 6
          },
          {
            "Name": "asset_bound",
            "TypeName": "Option<B>",
            "TypeId": 101
          },
          {
            "Name": "asset_in",
            "TypeName": "AS",
            "TypeId": 63
          },
          {
            "Name": "asset_out",
            "TypeName": "AS",
            "TypeId": 63
          },
          {
            "Name": "cpep",
            "TypeName": "CommonPoolEventParams<AI>",
            "TypeId": 86
          },
          {
            "Name": "max_price",
            "TypeName": "Option<B>",
            "TypeId": 101
          }
        ],
        "Path": [
          "zrml_swaps",
          "events",
          "SwapEvent"
        ],
        "TypeParams": [
          {
            "Name": "AI",
            "TypeId": 0
          },
          {
            "Name": "AS",
            "TypeId": 63
          },
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "101": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "Variants": [
          {
            "Name": "BadOnInitialize",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Custom addition block initialization logic wasn't successful."
            ]
          },
          {
            "Name": "BoughtCompleteSet",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A complete set of assets has been bought. \\[market_id, amount_per_asset, buyer\\]"
            ]
          },
          {
            "Name": "MarketApproved",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "MarketStatus",
                "TypeId": 103
              }
            ],
            "Index": 2,
            "Docs": [
              "A market has been approved. \\[market_id, new_market_status\\]"
            ]
          },
          {
            "Name": "MarketCreated",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "MarketOf<T>",
                "TypeId": 104
              }
            ],
            "Index": 3,
            "Docs": [
              "A market has been created. \\[market_id, market_account, market\\]"
            ]
          },
          {
            "Name": "MarketDestroyed",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A market has been destroyed. \\[market_id\\]"
            ]
          },
          {
            "Name": "MarketClosed",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "A market has been closed. \\[market_id\\]"
            ]
          },
          {
            "Name": "MarketEarlyCloseScheduled",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_period",
                "TypeName": "MarketPeriod<T::BlockNumber, MomentOf<T>>",
                "TypeId": 108
              },
              {
                "Name": "state",
                "TypeName": "EarlyCloseState",
                "TypeId": 122
              }
            ],
            "Index": 6,
            "Docs": [
              "A market has been scheduled to close early."
            ]
          },
          {
            "Name": "MarketEarlyCloseDisputed",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A market early close request has been disputed."
            ]
          },
          {
            "Name": "MarketEarlyCloseRejected",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A market early close request has been rejected."
            ]
          },
          {
            "Name": "MarketDisputed",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "MarketStatus",
                "TypeId": 103
              },
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "A market has been disputed \\[market_id, new_market_status, disputant\\]"
            ]
          },
          {
            "Name": "MarketExpired",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "An advised market has ended before it was approved or rejected. \\[market_id\\]"
            ]
          },
          {
            "Name": "MarketRejected",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "RejectReason<T>",
                "TypeId": 123
              }
            ],
            "Index": 11,
            "Docs": [
              "A pending market has been rejected as invalid with a reason.",
              "\\[market_id, reject_reason\\]"
            ]
          },
          {
            "Name": "MarketReported",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "MarketStatus",
                "TypeId": 103
              },
              {
                "TypeName": "ReportOf<T>",
                "TypeId": 113
              }
            ],
            "Index": 12,
            "Docs": [
              "A market has been reported on. \\[market_id, new_market_status, reported_outcome\\]"
            ]
          },
          {
            "Name": "MarketResolved",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "MarketStatus",
                "TypeId": 103
              },
              {
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 13,
            "Docs": [
              "A market has been resolved. \\[market_id, new_market_status, real_outcome\\]"
            ]
          },
          {
            "Name": "MarketRequestedEdit",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "EditReason<T>",
                "TypeId": 124
              }
            ],
            "Index": 14,
            "Docs": [
              "A proposed market has been requested edit by advisor. \\[market_id, edit_reason\\]"
            ]
          },
          {
            "Name": "MarketEdited",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "MarketOf<T>",
                "TypeId": 104
              }
            ],
            "Index": 15,
            "Docs": [
              "A proposed market has been edited by the market creator. \\[market_id, new_market\\]"
            ]
          },
          {
            "Name": "SoldCompleteSet",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 16,
            "Docs": [
              "A complete set of assets has been sold. \\[market_id, amount_per_asset, seller\\]"
            ]
          },
          {
            "Name": "TokensRedeemed",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "Asset<MarketIdOf<T>>",
                "TypeId": 63
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 17,
            "Docs": [
              "An amount of winning outcomes have been redeemed.",
              "\\[market_id, currency_id, amount_redeemed, payout, who\\]"
            ]
          },
          {
            "Name": "GlobalDisputeStarted",
            "TypeFields": [
              {
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "The global dispute was started. \\[market_id\\]"
            ]
          },
          {
            "Name": "RecoveryLimitReached",
            "TypeFields": [
              {
                "Name": "last_time_frame",
                "TypeName": "TimeFrame",
                "TypeId": 4
              },
              {
                "Name": "limit_time_frame",
                "TypeName": "TimeFrame",
                "TypeId": 4
              }
            ],
            "Index": 19,
            "Docs": [
              "The recovery limit for timestamp based markets was reached due to a prolonged chain stall."
            ]
          }
        ],
        "Path": [
          "zrml_prediction_markets",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "103": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Closed",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Reported",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Disputed",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Resolved",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "MarketStatus"
        ],
        "TypeDef": "Variant"
      },
      "104": {
        "TypeFields": [
          {
            "Name": "base_asset",
            "TypeName": "A",
            "TypeId": 63
          },
          {
            "Name": "creator",
            "TypeName": "AI",
            "TypeId": 0
          },
          {
            "Name": "creation",
            "TypeName": "MarketCreation",
            "TypeId": 105
          },
          {
            "Name": "creator_fee",
            "TypeName": "Perbill",
            "TypeId": 80
          },
          {
            "Name": "oracle",
            "TypeName": "AI",
            "TypeId": 0
          },
          {
            "Name": "metadata",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "market_type",
            "TypeName": "MarketType",
            "TypeId": 106
          },
          {
            "Name": "period",
            "TypeName": "MarketPeriod<BN, M>",
            "TypeId": 108
          },
          {
            "Name": "deadlines",
            "TypeName": "Deadlines<BN>",
            "TypeId": 110
          },
          {
            "Name": "scoring_rule",
            "TypeName": "ScoringRule",
            "TypeId": 111
          },
          {
            "Name": "status",
            "TypeName": "MarketStatus",
            "TypeId": 103
          },
          {
            "Name": "report",
            "TypeName": "Option<Report<AI, BN>>",
            "TypeId": 112
          },
          {
            "Name": "resolved_outcome",
            "TypeName": "Option<OutcomeReport>",
            "TypeId": 114
          },
          {
            "Name": "dispute_mechanism",
            "TypeName": "Option<MarketDisputeMechanism>",
            "TypeId": 115
          },
          {
            "Name": "bonds",
            "TypeName": "MarketBonds<AI, BA>",
            "TypeId": 117
          },
          {
            "Name": "early_close",
            "TypeName": "Option<EarlyClose<BN, M>>",
            "TypeId": 120
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "Market"
        ],
        "TypeParams": [
          {
            "Name": "AI",
            "TypeId": 0
          },
          {
            "Name": "BA",
            "TypeId": 6
          },
          {
            "Name": "BN",
            "TypeId": 4
          },
          {
            "Name": "M",
            "TypeId": 4
          },
          {
            "Name": "A",
            "TypeId": 63
          }
        ],
        "TypeDef": "Composite"
      },
      "105": {
        "Variants": [
          {
            "Name": "Permissionless",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Advised",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "MarketCreation"
        ],
        "TypeDef": "Variant"
      },
      "106": {
        "Variants": [
          {
            "Name": "Categorical",
            "TypeFields": [
              {
                "TypeName": "u16",
                "TypeId": 60
              }
            ],
            "Index": 0
          },
          {
            "Name": "Scalar",
            "TypeFields": [
              {
                "TypeName": "RangeInclusive<u128>",
                "TypeId": 107
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "MarketType"
        ],
        "TypeDef": "Variant"
      },
      "107": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "Idx",
            "TypeId": 6
          },
          {
            "Name": "end",
            "TypeName": "Idx",
            "TypeId": 6
          }
        ],
        "Path": [
          "RangeInclusive"
        ],
        "TypeParams": [
          {
            "Name": "Idx",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "108": {
        "Variants": [
          {
            "Name": "Block",
            "TypeFields": [
              {
                "TypeName": "Range<BN>",
                "TypeId": 109
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "Range<M>",
                "TypeId": 109
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "MarketPeriod"
        ],
        "TypeParams": [
          {
            "Name": "BN",
            "TypeId": 4
          },
          {
            "Name": "M",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "109": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "Idx",
            "TypeId": 4
          },
          {
            "Name": "end",
            "TypeName": "Idx",
            "TypeId": 4
          }
        ],
        "Path": [
          "Range"
        ],
        "TypeParams": [
          {
            "Name": "Idx",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "110": {
        "TypeFields": [
          {
            "Name": "grace_period",
            "TypeName": "BN",
            "TypeId": 4
          },
          {
            "Name": "oracle_duration",
            "TypeName": "BN",
            "TypeId": 4
          },
          {
            "Name": "dispute_duration",
            "TypeName": "BN",
            "TypeId": 4
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "Deadlines"
        ],
        "TypeParams": [
          {
            "Name": "BN",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "111": {
        "Variants": [
          {
            "Name": "Lmsr",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Orderbook",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Parimutuel",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "ScoringRule"
        ],
        "TypeDef": "Variant"
      },
      "112": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 113
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 113
          }
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "TypeFields": [
          {
            "Name": "at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "by",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "outcome",
            "TypeName": "OutcomeReport",
            "TypeId": 68
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "Report"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "114": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 68
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 68
          }
        ],
        "TypeDef": "Variant"
      },
      "115": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 116
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 116
          }
        ],
        "TypeDef": "Variant"
      },
      "116": {
        "Variants": [
          {
            "Name": "Authorized",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Court",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleDisputes",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "MarketDisputeMechanism"
        ],
        "TypeDef": "Variant"
      },
      "117": {
        "TypeFields": [
          {
            "Name": "creation",
            "TypeName": "Option<Bond<AI, BA>>",
            "TypeId": 118
          },
          {
            "Name": "oracle",
            "TypeName": "Option<Bond<AI, BA>>",
            "TypeId": 118
          },
          {
            "Name": "outsider",
            "TypeName": "Option<Bond<AI, BA>>",
            "TypeId": 118
          },
          {
            "Name": "dispute",
            "TypeName": "Option<Bond<AI, BA>>",
            "TypeId": 118
          },
          {
            "Name": "close_request",
            "TypeName": "Option<Bond<AI, BA>>",
            "TypeId": 118
          },
          {
            "Name": "close_dispute",
            "TypeName": "Option<Bond<AI, BA>>",
            "TypeId": 118
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "MarketBonds"
        ],
        "TypeParams": [
          {
            "Name": "AI",
            "TypeId": 0
          },
          {
            "Name": "BA",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "118": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 119
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 119
          }
        ],
        "TypeDef": "Variant"
      },
      "119": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AI",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "BA",
            "TypeId": 6
          },
          {
            "Name": "is_settled",
            "TypeName": "bool",
            "TypeId": 50
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "Bond"
        ],
        "TypeParams": [
          {
            "Name": "AI",
            "TypeId": 0
          },
          {
            "Name": "BA",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "120": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 121
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 121
          }
        ],
        "TypeDef": "Variant"
      },
      "121": {
        "TypeFields": [
          {
            "Name": "old",
            "TypeName": "MarketPeriod<BN, M>",
            "TypeId": 108
          },
          {
            "Name": "new",
            "TypeName": "MarketPeriod<BN, M>",
            "TypeId": 108
          },
          {
            "Name": "state",
            "TypeName": "EarlyCloseState",
            "TypeId": 122
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "EarlyClose"
        ],
        "TypeParams": [
          {
            "Name": "BN",
            "TypeId": 4
          },
          {
            "Name": "M",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "122": {
        "Variants": [
          {
            "Name": "ScheduledAsMarketCreator",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ScheduledAsOther",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Disputed",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Rejected",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "EarlyCloseState"
        ],
        "TypeDef": "Variant"
      },
      "123": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "124": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "125": {
        "Variants": [
          {
            "Name": "AccountCrossed",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A account crossed and claimed their right to create their avatar."
            ]
          },
          {
            "Name": "CrossingFeeChanged",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "The crossing fee was changed."
            ]
          }
        ],
        "Path": [
          "zrml_styx",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "126": {
        "Variants": [
          {
            "Name": "AddedVotingOutcome",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 0,
            "Docs": [
              "A new voting outcome has been added."
            ]
          },
          {
            "Name": "GlobalDisputeWinnerDetermined",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "The winner of the global dispute system is determined."
            ]
          },
          {
            "Name": "OutcomeOwnersRewarded",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "owners",
                "TypeName": "Vec<AccountIdOf<T>>",
                "TypeId": 78
              }
            ],
            "Index": 2,
            "Docs": [
              "The outcome owners have been rewarded."
            ]
          },
          {
            "Name": "OutcomeOwnerRewarded",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "The outcome owner has been rewarded."
            ]
          },
          {
            "Name": "OutcomesPartiallyCleaned",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "The outcomes storage item is partially cleaned."
            ]
          },
          {
            "Name": "OutcomesFullyCleaned",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "The outcomes storage item is fully cleaned."
            ]
          },
          {
            "Name": "VotedOnOutcome",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              },
              {
                "Name": "vote_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "A vote happened on an outcome."
            ]
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "127": {
        "Variants": [
          {
            "Name": "BuyExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "amount_in",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "swap_fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "external_fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Informant bought a position. `amount_in` is the amount of collateral paid by `who`,",
              "including swap and external fees."
            ]
          },
          {
            "Name": "SellExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "amount_in",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "swap_fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "external_fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Informant sold a position. `amount_out` is the amount of collateral received by `who`,",
              "including swap and external fees."
            ]
          },
          {
            "Name": "FeesWithdrawn",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Liquidity provider withdrew fees."
            ]
          },
          {
            "Name": "JoinExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pool_shares_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amounts_in",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              },
              {
                "Name": "new_liquidity_parameter",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Liquidity provider joined the pool."
            ]
          },
          {
            "Name": "ExitExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pool_shares_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amounts_out",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              },
              {
                "Name": "new_liquidity_parameter",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Liquidity provider left the pool."
            ]
          },
          {
            "Name": "PoolDeployed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "reserves",
                "TypeName": "BTreeMap<AssetOf<T>, BalanceOf<T>>",
                "TypeId": 92
              },
              {
                "Name": "collateral",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "liquidity_parameter",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "pool_shares_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "swap_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Pool was createed."
            ]
          },
          {
            "Name": "PoolDestroyed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amounts_out",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              }
            ],
            "Index": 6,
            "Docs": [
              "Pool was destroyed."
            ]
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "128": {
        "Variants": [
          {
            "Name": "OrderFilled",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 6
              },
              {
                "Name": "maker",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "taker",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "filled_maker_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "filled_taker_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "unfilled_maker_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "unfilled_taker_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "OrderPlaced",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 6
              },
              {
                "Name": "order",
                "TypeName": "OrderOf<T>",
                "TypeId": 129
              }
            ],
            "Index": 1
          },
          {
            "Name": "OrderRemoved",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 6
              },
              {
                "Name": "maker",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "zrml_orderbook",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "129": {
        "TypeFields": [
          {
            "Name": "market_id",
            "TypeName": "MarketId",
            "TypeId": 6
          },
          {
            "Name": "maker",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "maker_asset",
            "TypeName": "Asset<MarketId>",
            "TypeId": 63
          },
          {
            "Name": "maker_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "taker_asset",
            "TypeName": "Asset<MarketId>",
            "TypeId": 63
          },
          {
            "Name": "taker_amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "zrml_orderbook",
          "types",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MarketId",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "130": {
        "Variants": [
          {
            "Name": "OutcomeBought",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "buyer",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "amount_minus_fees",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "fees",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An outcome was bought."
            ]
          },
          {
            "Name": "RewardsClaimed",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "withdrawn_asset_balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "base_asset_payoff",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "sender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Rewards of the pot were claimed."
            ]
          },
          {
            "Name": "BalanceRefunded",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "refunded_balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "sender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "A market base asset was refunded."
            ]
          }
        ],
        "Path": [
          "zrml_parimutuel",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "131": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "An upgrade has been authorized."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 31
              }
            ],
            "Index": 6,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "132": {
        "Variants": [
          {
            "Name": "NewRound",
            "TypeFields": [
              {
                "Name": "starting_block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              },
              {
                "Name": "selected_collators_number",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "total_balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Started new round."
            ]
          },
          {
            "Name": "JoinedCollatorCandidates",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_amt_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Account joined the set of collator candidates."
            ]
          },
          {
            "Name": "CollatorChosen",
            "TypeFields": [
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              },
              {
                "Name": "collator_account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "total_exposed_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Candidate selected for collators. Total Exposed Amount includes all delegations."
            ]
          },
          {
            "Name": "CandidateBondLessRequested",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_to_decrease",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 3,
            "Docs": [
              "Candidate requested to decrease a self bond."
            ]
          },
          {
            "Name": "CandidateBondedMore",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Candidate has increased a self bond."
            ]
          },
          {
            "Name": "CandidateBondedLess",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Candidate has decreased a self bond."
            ]
          },
          {
            "Name": "CandidateWentOffline",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Candidate temporarily leave the set of collator candidates without unbonding."
            ]
          },
          {
            "Name": "CandidateBackOnline",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Candidate rejoins the set of collator candidates."
            ]
          },
          {
            "Name": "CandidateScheduledExit",
            "TypeFields": [
              {
                "Name": "exit_allowed_round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 8,
            "Docs": [
              "Candidate has requested to leave the set of candidates."
            ]
          },
          {
            "Name": "CancelledCandidateExit",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "Cancelled request to leave the set of candidates."
            ]
          },
          {
            "Name": "CancelledCandidateBondLess",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 10,
            "Docs": [
              "Cancelled request to decrease candidate's bond."
            ]
          },
          {
            "Name": "CandidateLeft",
            "TypeFields": [
              {
                "Name": "ex_candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unlocked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_amt_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Candidate has left the set of candidates."
            ]
          },
          {
            "Name": "DelegationDecreaseScheduled",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_to_decrease",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 12,
            "Docs": [
              "Delegator requested to decrease a bond for the collator candidate."
            ]
          },
          {
            "Name": "DelegationIncreased",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "in_top",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 13
          },
          {
            "Name": "DelegationDecreased",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "in_top",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 14
          },
          {
            "Name": "DelegatorExitScheduled",
            "TypeFields": [
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              },
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 15,
            "Docs": [
              "Delegator requested to leave the set of delegators."
            ]
          },
          {
            "Name": "DelegationRevocationScheduled",
            "TypeFields": [
              {
                "Name": "round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              },
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 16,
            "Docs": [
              "Delegator requested to revoke delegation."
            ]
          },
          {
            "Name": "DelegatorLeft",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Delegator has left the set of delegators."
            ]
          },
          {
            "Name": "DelegationRevoked",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Delegation revoked."
            ]
          },
          {
            "Name": "DelegationKicked",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Delegation kicked."
            ]
          },
          {
            "Name": "DelegatorExitCancelled",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 20,
            "Docs": [
              "Cancelled a pending request to exit the set of delegators."
            ]
          },
          {
            "Name": "CancelledDelegationRequest",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "cancelled_request",
                "TypeName": "CancelledScheduledRequest<BalanceOf<T>>",
                "TypeId": 133
              },
              {
                "Name": "collator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 21,
            "Docs": [
              "Cancelled request to change an existing delegation."
            ]
          },
          {
            "Name": "Delegation",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "locked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegator_position",
                "TypeName": "DelegatorAdded<BalanceOf<T>>",
                "TypeId": 135
              },
              {
                "Name": "auto_compound",
                "TypeName": "Percent",
                "TypeId": 136
              }
            ],
            "Index": 22,
            "Docs": [
              "New delegation (increase of the existing one)."
            ]
          },
          {
            "Name": "DelegatorLeftCandidate",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "total_candidate_staked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 23,
            "Docs": [
              "Delegation from candidate state has been remove."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rewards",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Paid the account (delegator or collator) the balance as liquid rewards."
            ]
          },
          {
            "Name": "ReservedForParachainBond",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "Transferred to account which holds funds reserved for parachain bond."
            ]
          },
          {
            "Name": "ParachainBondAccountSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 26,
            "Docs": [
              "Account (re)set for parachain bond treasury."
            ]
          },
          {
            "Name": "ParachainBondReservePercentSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "Percent",
                "TypeId": 136
              },
              {
                "Name": "new",
                "TypeName": "Percent",
                "TypeId": 136
              }
            ],
            "Index": 27,
            "Docs": [
              "Percent of inflation reserved for parachain bond (re)set."
            ]
          },
          {
            "Name": "InflationSet",
            "TypeFields": [
              {
                "Name": "annual_min",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "annual_ideal",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "annual_max",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "round_min",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "round_ideal",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "round_max",
                "TypeName": "Perbill",
                "TypeId": 80
              }
            ],
            "Index": 28,
            "Docs": [
              "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"
            ]
          },
          {
            "Name": "StakeExpectationsSet",
            "TypeFields": [
              {
                "Name": "expect_min",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "expect_ideal",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "expect_max",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 29,
            "Docs": [
              "Staking expectations set."
            ]
          },
          {
            "Name": "TotalSelectedSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 30,
            "Docs": [
              "Set total selected candidates to this value."
            ]
          },
          {
            "Name": "CollatorCommissionSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "new",
                "TypeName": "Perbill",
                "TypeId": 80
              }
            ],
            "Index": 31,
            "Docs": [
              "Set collator commission to this value."
            ]
          },
          {
            "Name": "BlocksPerRoundSet",
            "TypeFields": [
              {
                "Name": "current_round",
                "TypeName": "RoundIndex",
                "TypeId": 7
              },
              {
                "Name": "first_block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "old",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "new_per_round_inflation_min",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "new_per_round_inflation_ideal",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "new_per_round_inflation_max",
                "TypeName": "Perbill",
                "TypeId": 80
              }
            ],
            "Index": 32,
            "Docs": [
              "Set blocks per round"
            ]
          },
          {
            "Name": "AutoCompoundSet",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "Percent",
                "TypeId": 136
              }
            ],
            "Index": 33,
            "Docs": [
              "Auto-compounding reward percent was set for a delegation."
            ]
          },
          {
            "Name": "Compounded",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 34,
            "Docs": [
              "Compounded a portion of rewards towards the delegation."
            ]
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "133": {
        "TypeFields": [
          {
            "Name": "when_executable",
            "TypeName": "RoundIndex",
            "TypeId": 7
          },
          {
            "Name": "action",
            "TypeName": "DelegationAction<Balance>",
            "TypeId": 134
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "delegation_requests",
          "CancelledScheduledRequest"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "134": {
        "Variants": [
          {
            "Name": "Revoke",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "delegation_requests",
          "DelegationAction"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "135": {
        "Variants": [
          {
            "Name": "AddedToTop",
            "TypeFields": [
              {
                "Name": "new_total",
                "TypeName": "B",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "AddedToBottom",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "DelegatorAdded"
        ],
        "TypeParams": [
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "136": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "137": {
        "Variants": [
          {
            "Name": "EligibleUpdated",
            "TypeFields": [
              {
                "TypeName": "EligibilityValue",
                "TypeId": 138
              }
            ],
            "Index": 0,
            "Docs": [
              "The amount of eligible authors for the filter to select has been changed."
            ]
          }
        ],
        "Path": [
          "pallet_author_slot_filter",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "138": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_author_slot_filter",
          "num",
          "NonZeroU32"
        ],
        "TypeDef": "Composite"
      },
      "139": {
        "Variants": [
          {
            "Name": "KeysRegistered",
            "TypeFields": [
              {
                "Name": "nimbus_id",
                "TypeName": "NimbusId",
                "TypeId": 140
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 142
              }
            ],
            "Index": 0,
            "Docs": [
              "A NimbusId has been registered and mapped to an AccountId."
            ]
          },
          {
            "Name": "KeysRemoved",
            "TypeFields": [
              {
                "Name": "nimbus_id",
                "TypeName": "NimbusId",
                "TypeId": 140
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 142
              }
            ],
            "Index": 1,
            "Docs": [
              "An NimbusId has been de-registered, and its AccountId mapping removed."
            ]
          },
          {
            "Name": "KeysRotated",
            "TypeFields": [
              {
                "Name": "new_nimbus_id",
                "TypeName": "NimbusId",
                "TypeId": 140
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new_keys",
                "TypeName": "T::Keys",
                "TypeId": 142
              }
            ],
            "Index": 2,
            "Docs": [
              "An NimbusId has been registered, replacing a previous registration and its mapping."
            ]
          }
        ],
        "Path": [
          "pallet_author_mapping",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "140": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 141
          }
        ],
        "Path": [
          "nimbus_primitives",
          "nimbus_crypto",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "141": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "142": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 141
          }
        ],
        "Path": [
          "session_keys_primitives",
          "vrf",
          "vrf_crypto",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "143": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "TypeName": "Outcome",
                "TypeId": 144
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "144": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "TypeName": "Error",
                "TypeId": 145
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Error",
                "TypeId": 145
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "145": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 4
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "146": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM."
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM."
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "outcome",
                "TypeName": "Outcome",
                "TypeId": 144
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome."
            ]
          },
          {
            "Name": "WeightExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "remaining_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3,
            "Docs": [
              "The weight limit for handling downward messages was reached."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward message is overweight and was placed in the overweight queue."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward message from the overweight queue was executed."
            ]
          },
          {
            "Name": "MaxMessagesExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 6,
            "Docs": [
              "The maximum number of downward messages was."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "147": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 144
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted.",
              "",
              "\\[ outcome \\]"
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent.",
              "",
              "\\[ origin, destination, message \\]"
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "Response",
                "TypeId": 168
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call.",
              "",
              "\\[ id, response \\]"
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification could",
              "not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result.",
              "",
              "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected location \\]"
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed.",
              "",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 183
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap.",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 7
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included.",
              "",
              "\\[ destination, result, cost \\]"
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 7
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention.",
              "",
              "\\[ location, XCM version \\]"
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "XcmError",
                "TypeId": 145
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it.",
              "",
              "\\[ location, query ID, error \\]"
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "TypeName": "VersionedMultiLocation",
                "TypeId": 197
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format.",
              "",
              "\\[ location, query ID \\]"
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "QueryId",
                "TypeId": 4
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected querier, maybe actual querier \\]"
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain sends us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`).",
              "",
              "\\[ paying location, fees \\]"
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 183
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "148": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 149
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "149": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              },
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "150": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 152
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 152
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 152
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 154
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 155
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 156
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 157
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 153
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "151": {
        "TypeId": 7,
        "TypeDef": "Compact"
      },
      "152": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 153
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 153
          }
        ],
        "TypeDef": "Variant"
      },
      "153": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 4
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "154": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "155": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "156": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "157": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "158": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 159
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "159": {
        "TypeId": 160,
        "TypeDef": "Sequence"
      },
      "160": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 168
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 177
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 149
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 158
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 158
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 169
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 174
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 153
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 149
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "161": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 162
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "TypeId": 163,
        "TypeDef": "Sequence"
      },
      "163": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 164
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 165
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "164": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "165": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 155
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 166
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "166": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 155
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 66
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 167
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "167": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "168": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 169
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 7
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "VecPalletInfo",
                "TypeId": 171
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 174
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "169": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 170
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 170
          }
        ],
        "TypeDef": "Variant"
      },
      "170": {
        "TypeIds": [
          7,
          145
        ],
        "TypeDef": "Tuple"
      },
      "171": {
        "TypeFields": [
          {
            "TypeName": "Vec<PalletInfo>",
            "TypeId": 172
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "VecPalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "172": {
        "TypeId": 173,
        "TypeDef": "Sequence"
      },
      "173": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 151
          },
          {
            "Name": "name",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "module_name",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 151
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 151
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 151
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "174": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "175": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 148
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 148
          }
        ],
        "TypeDef": "Variant"
      },
      "176": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "177": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "178": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 148
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 10
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "179": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 180
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "180": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 164
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 181
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 164
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 181
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "181": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "182": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "183": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAssets"
        ],
        "TypeDef": "Variant"
      },
      "184": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 185
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "185": {
        "TypeId": 186,
        "TypeDef": "Sequence"
      },
      "186": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 187
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 195
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "187": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "188": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 189
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "189": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "190": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 191
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 191
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 191
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 154
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 155
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 192
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 193
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 194
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "191": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 192
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "192": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "193": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 192
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "194": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "195": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 155
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 196
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "196": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 155
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 66
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 167
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "197": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "198": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 31
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Some XCM was executed ok."
            ]
          },
          {
            "Name": "Fail",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 31
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 145
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Some XCM failed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 31
              }
            ],
            "Index": 2,
            "Docs": [
              "Bad XCM version used."
            ]
          },
          {
            "Name": "BadFormat",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 31
              }
            ],
            "Index": 3,
            "Docs": [
              "Bad XCM format used."
            ]
          },
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 31
              }
            ],
            "Index": 4,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 199
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 7
              },
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "required",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "An XCM exceeded the individual message weight budget."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 6,
            "Docs": [
              "An XCM from the overweight queue was executed with the given actual weight used."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "199": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "200": {
        "Variants": [
          {
            "Name": "RegisteredAsset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 63
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<T::Balance, T::CustomMetadata>",
                "TypeId": 201
              }
            ],
            "Index": 0
          },
          {
            "Name": "UpdatedAsset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 63
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<T::Balance, T::CustomMetadata>",
                "TypeId": 201
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "orml_asset_registry",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "201": {
        "TypeFields": [
          {
            "Name": "decimals",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "name",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "symbol",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "existential_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "location",
            "TypeName": "Option<VersionedMultiLocation>",
            "TypeId": 204
          },
          {
            "Name": "additional",
            "TypeName": "CustomMetadata",
            "TypeId": 202
          }
        ],
        "Path": [
          "orml_traits",
          "asset_registry",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "CustomMetadata",
            "TypeId": 202
          }
        ],
        "TypeDef": "Composite"
      },
      "202": {
        "TypeFields": [
          {
            "Name": "xcm",
            "TypeName": "XcmMetadata",
            "TypeId": 203
          },
          {
            "Name": "allow_as_base_asset",
            "TypeName": "bool",
            "TypeId": 50
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "types",
          "CustomMetadata"
        ],
        "TypeDef": "Composite"
      },
      "203": {
        "TypeFields": [
          {
            "Name": "fee_factor",
            "TypeName": "Option<Balance>",
            "TypeId": 101
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "types",
          "XcmMetadata"
        ],
        "TypeDef": "Composite"
      },
      "204": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 197
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 197
          }
        ],
        "TypeDef": "Variant"
      },
      "205": {
        "Variants": [
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 0,
            "Docs": [
              "Deposit success."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 1,
            "Docs": [
              "Withdraw success."
            ]
          }
        ],
        "Path": [
          "orml_unknown_tokens",
          "module",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "206": {
        "Variants": [
          {
            "Name": "TransferredMultiAssets",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "fee",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 0,
            "Docs": [
              "Transferred `MultiAsset` with fee."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "207": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "208": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "209": {
        "TypeId": 30,
        "TypeDef": "Sequence"
      },
      "210": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 151
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 211
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "211": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "212": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "# <weight>",
              "- `O(1)`",
              "# </weight>"
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code.",
              "",
              "# <weight>",
              "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
              "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
              "  expensive).",
              "- 1 storage write (codec `O(C)`).",
              "- 1 digest item.",
              "- 1 event.",
              "The weight of this function is dependent on the runtime, but generally this is very",
              "expensive. We will treat this as a full block.",
              "# </weight>"
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "# <weight>",
              "- `O(C)` where `C` length of `code`",
              "- 1 storage write (codec `O(C)`).",
              "- 1 digest item.",
              "- 1 event.",
              "The weight of this function is dependent on the runtime. We will treat this as a full",
              "block. # </weight>"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 213
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 215
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 12
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "213": {
        "TypeId": 214,
        "TypeDef": "Sequence"
      },
      "214": {
        "TypeIds": [
          12,
          12
        ],
        "TypeDef": "Tuple"
      },
      "215": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "216": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 217
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "217": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 218
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 218
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 218
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 218
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 219
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 219
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 219
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "219": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Variant"
      },
      "220": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 221
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "221": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 7
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 7
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 7
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "222": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 4
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "223": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 211
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 211
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 224
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "224": {
        "TypeFields": [
          {
            "TypeId": 225
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 225
          }
        ],
        "TypeDef": "Composite"
      },
      "225": {
        "TypeId": 226,
        "TypeDef": "Sequence"
      },
      "226": {
        "TypeIds": [
          66,
          7
        ],
        "TypeDef": "Tuple"
      },
      "227": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "228": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "# <weight>",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "229": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 208
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "230": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 378
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 231
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "231": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 232
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 232
          }
        ],
        "TypeDef": "Variant"
      },
      "232": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 31
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 233
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 236
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 300
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 233
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 300
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "233": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 11
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 377
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 11
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 234
          }
        ],
        "TypeDef": "Variant"
      },
      "234": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 212
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 228
              }
            ],
            "Index": 1
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 235
              }
            ],
            "Index": 3
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 237
              }
            ],
            "Index": 4
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 238
              }
            ],
            "Index": 10
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 241
              }
            ],
            "Index": 12
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 242
              }
            ],
            "Index": 13
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 244
              }
            ],
            "Index": 14
          },
          {
            "Name": "Bounties",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                "TypeId": 246
              }
            ],
            "Index": 15
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 247
              }
            ],
            "Index": 20
          },
          {
            "Name": "AdvisoryCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AdvisoryCommittee, Runtime>",
                "TypeId": 249
              }
            ],
            "Index": 21
          },
          {
            "Name": "AdvisoryCommitteeMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AdvisoryCommitteeMembership, Runtime>",
                "TypeId": 253
              }
            ],
            "Index": 22
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 254
              }
            ],
            "Index": 23
          },
          {
            "Name": "CouncilMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CouncilMembership, Runtime>",
                "TypeId": 255
              }
            ],
            "Index": 24
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                "TypeId": 256
              }
            ],
            "Index": 25
          },
          {
            "Name": "TechnicalCommitteeMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommitteeMembership, Runtime>",
                "TypeId": 257
              }
            ],
            "Index": 26
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 258
              }
            ],
            "Index": 30
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 298
              }
            ],
            "Index": 31
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 308
              }
            ],
            "Index": 32
          },
          {
            "Name": "Contracts",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>",
                "TypeId": 310
              }
            ],
            "Index": 33
          },
          {
            "Name": "AssetManager",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetManager, Runtime>",
                "TypeId": 313
              }
            ],
            "Index": 40
          },
          {
            "Name": "Authorized",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorized, Runtime>",
                "TypeId": 315
              }
            ],
            "Index": 51
          },
          {
            "Name": "Court",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Court, Runtime>",
                "TypeId": 316
              }
            ],
            "Index": 52
          },
          {
            "Name": "LiquidityMining",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LiquidityMining, Runtime>",
                "TypeId": 317
              }
            ],
            "Index": 53
          },
          {
            "Name": "SimpleDisputes",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SimpleDisputes, Runtime>",
                "TypeId": 318
              }
            ],
            "Index": 55
          },
          {
            "Name": "Swaps",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Swaps, Runtime>",
                "TypeId": 319
              }
            ],
            "Index": 56
          },
          {
            "Name": "PredictionMarkets",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PredictionMarkets, Runtime>",
                "TypeId": 320
              }
            ],
            "Index": 57
          },
          {
            "Name": "Styx",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Styx, Runtime>",
                "TypeId": 323
              }
            ],
            "Index": 58
          },
          {
            "Name": "GlobalDisputes",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GlobalDisputes, Runtime>",
                "TypeId": 324
              }
            ],
            "Index": 59
          },
          {
            "Name": "NeoSwaps",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NeoSwaps, Runtime>",
                "TypeId": 325
              }
            ],
            "Index": 60
          },
          {
            "Name": "Orderbook",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Orderbook, Runtime>",
                "TypeId": 326
              }
            ],
            "Index": 61
          },
          {
            "Name": "Parimutuel",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Parimutuel, Runtime>",
                "TypeId": 327
              }
            ],
            "Index": 62
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 328
              }
            ],
            "Index": 100
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>",
                "TypeId": 341
              }
            ],
            "Index": 110
          },
          {
            "Name": "AuthorInherent",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorInherent, Runtime>",
                "TypeId": 344
              }
            ],
            "Index": 111
          },
          {
            "Name": "AuthorFilter",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorFilter, Runtime>",
                "TypeId": 345
              }
            ],
            "Index": 112
          },
          {
            "Name": "AuthorMapping",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorMapping, Runtime>",
                "TypeId": 346
              }
            ],
            "Index": 113
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                "TypeId": 347
              }
            ],
            "Index": 121
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 348
              }
            ],
            "Index": 122
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 369
              }
            ],
            "Index": 123
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>",
                "TypeId": 370
              }
            ],
            "Index": 124
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                "TypeId": 375
              }
            ],
            "Index": 126
          }
        ],
        "Path": [
          "zeitgeist_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "235": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 236
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 236
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 236
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay.",
              "",
              "# <weight>",
              "Same as [`schedule`].",
              "# </weight>"
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<T::BlockNumber>>",
                "TypeId": 236
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay.",
              "",
              "# <weight>",
              "Same as [`schedule_named`](Self::schedule_named).",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "236": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 30
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 30
          }
        ],
        "TypeDef": "Variant"
      },
      "237": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "238": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 155
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor.",
              "",
              "# <weight>",
              "- Dependent on arguments but not critical, given proper implementations for input config",
              "  types. See related functions below.",
              "- It contains a limited number of reads and writes internally and no complex",
              "  computation.",
              "",
              "Related functions:",
              "",
              "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
              "  - Transferring balances to accounts that did not exist before will cause",
              "    `T::OnNewAccount::on_new_account` to be called.",
              "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
              "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
              "    that the transfer will not kill the origin account.",
              "---------------------------------",
              "- Origin account is already in memory, so no DB operations for them.",
              "# </weight>"
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 155
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 155
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
              "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
              "If the new free or reserved balance is below the existential deposit,",
              "it will reset the account nonce (`frame_system::AccountNonce`).",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 155
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source account may be",
              "specified.",
              "# <weight>",
              "- Same as transfer, but additional read and write because the source account is not",
              "  assumed to be in the overlay.",
              "# </weight>"
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 155
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
              "origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "[`transfer`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true). # <weight>",
              "- O(1). Just like transfer, but reading the user's transferable balance first.",
              "  #</weight>"
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "239": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 240
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 154
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 33
          }
        ],
        "TypeDef": "Variant"
      },
      "240": {
        "TypeId": 33,
        "TypeDef": "Compact"
      },
      "241": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 155
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 0,
            "Docs": [
              "Put forward a suggestion for spending. A deposit proportional to the value",
              "is reserved and slashed if the proposal is rejected. It is returned once the",
              "proposal is awarded.",
              "",
              "# <weight>",
              "- Complexity: O(1)",
              "- DbReads: `ProposalCount`, `origin account`",
              "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
              "# </weight>"
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              }
            ],
            "Index": 1,
            "Docs": [
              "Reject a proposed spend. The original deposit will be slashed.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "# <weight>",
              "- Complexity: O(1)",
              "- DbReads: `Proposals`, `rejected proposer account`",
              "- DbWrites: `Proposals`, `rejected proposer account`",
              "# </weight>"
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              }
            ],
            "Index": 2,
            "Docs": [
              "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::ApproveOrigin`.",
              "",
              "# <weight>",
              "- Complexity: O(1).",
              "- DbReads: `Proposals`, `Approvals`",
              "- DbWrite: `Approvals`",
              "# </weight>"
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 155
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "The original deposit will no longer be returned.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "- `proposal_id`: The index of a proposal",
              "",
              "# <weight>",
              "- Complexity: O(A) where `A` is the number of approvals",
              "- Db reads and writes: `Approvals`",
              "# </weight>",
              "",
              "Errors:",
              "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
              "i.e., the proposal has not been approved. This could also mean the proposal does not",
              "exist altogether, thus there is no way it would have been approved in the first place."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "242": {
        "Variants": [
          {
            "Name": "vest",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unlock any vested funds of the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "# <weight>",
              "- `O(1)`.",
              "- DbWeight: 2 Reads, 2 Writes",
              "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
              "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
              "# </weight>"
            ]
          },
          {
            "Name": "vest_other",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 1,
            "Docs": [
              "Unlock any vested funds of a `target` account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account whose vested funds should be unlocked. Must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "# <weight>",
              "- `O(1)`.",
              "- DbWeight: 3 Reads, 3 Writes",
              "    - Reads: Vesting Storage, Balances Locks, Target Account",
              "    - Writes: Vesting Storage, Balances Locks, Target Account",
              "# </weight>"
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "TypeId": 243
              }
            ],
            "Index": 2,
            "Docs": [
              "Create a vested transfer.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account receiving the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "# <weight>",
              "- `O(1)`.",
              "- DbWeight: 3 Reads, 3 Writes",
              "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
              "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
              "# </weight>"
            ]
          },
          {
            "Name": "force_vested_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "TypeId": 243
              }
            ],
            "Index": 3,
            "Docs": [
              "Force a vested transfer.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The account whose funds should be transferred.",
              "- `target`: The account that should be transferred the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "# <weight>",
              "- `O(1)`.",
              "- DbWeight: 4 Reads, 4 Writes",
              "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
              "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
              "# </weight>"
            ]
          },
          {
            "Name": "merge_schedules",
            "TypeFields": [
              {
                "Name": "schedule1_index",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "schedule2_index",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
              "the highest possible start and end blocks. If both schedules have already started the",
              "current block will be used as the schedule start; with the caveat that if one schedule",
              "is finished by the current block, the other will be treated as the new merged schedule,",
              "unmodified.",
              "",
              "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
              "NOTE: This will unlock all schedules through the current block prior to merging.",
              "NOTE: If both schedules have ended by the current block, no new schedule will be created",
              "and both will be removed.",
              "",
              "Merged schedule attributes:",
              "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
              "  current_block)`.",
              "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
              "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `schedule1_index`: index of the first schedule to merge.",
              "- `schedule2_index`: index of the second schedule to merge."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "243": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "per_block",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "starting_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_vesting",
          "vesting_info",
          "VestingInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "244": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "# <weight>",
              "O(Z + C) where Z is the length of the call and C its execution weight.",
              "-------------------------------",
              "- DB Weight: None",
              "- Plus Call Weight",
              "# </weight>"
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 60
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 245
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "# <weight>",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
              "-------------------------------",
              "- DB Weight:",
              "    - Reads: Multisig Storage, [Caller Account]",
              "    - Writes: Multisig Storage, [Caller Account]",
              "- Plus Call Weight",
              "# </weight>"
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 60
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<T::BlockNumber>>",
                "TypeId": 245
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "# <weight>",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
              "----------------------------------",
              "- DB Weight:",
              "    - Read: Multisig Storage, [Caller Account]",
              "    - Write: Multisig Storage, [Caller Account]",
              "# </weight>"
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 60
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<T::BlockNumber>",
                "TypeId": 41
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "# <weight>",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item.",
              "----------------------------------",
              "- DB Weight:",
              "    - Read: Multisig Storage, [Caller Account], Refund Account",
              "    - Write: Multisig Storage, [Caller Account], Refund Account",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "245": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 41
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 41
          }
        ],
        "TypeDef": "Variant"
      },
      "246": {
        "Variants": [
          {
            "Name": "propose_bounty",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 155
              },
              {
                "Name": "description",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a new bounty.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
              "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
              "or slashed when rejected.",
              "",
              "- `curator`: The curator account whom will manage this bounty.",
              "- `fee`: The curator fee.",
              "- `value`: The total payment amount of this bounty, curator fee included.",
              "- `description`: The description of this bounty."
            ]
          },
          {
            "Name": "approve_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              }
            ],
            "Index": 1,
            "Docs": [
              "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::SpendOrigin`.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          },
          {
            "Name": "propose_curator",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              },
              {
                "Name": "curator",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 155
              }
            ],
            "Index": 2,
            "Docs": [
              "Assign a curator to a funded bounty.",
              "",
              "May only be called from `T::SpendOrigin`.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          },
          {
            "Name": "unassign_curator",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              }
            ],
            "Index": 3,
            "Docs": [
              "Unassign curator from a bounty.",
              "",
              "This function can only be called by the `RejectOrigin` a signed origin.",
              "",
              "If this function is called by the `RejectOrigin`, we assume that the curator is",
              "malicious or inactive. As a result, we will slash the curator when possible.",
              "",
              "If the origin is the curator, we take this as a sign they are unable to do their job and",
              "they willingly give up. We could slash them, but for now we allow them to recover their",
              "deposit and exit without issue. (We may want to change this if it is abused.)",
              "",
              "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
              "anyone in the community to call out that a curator is not doing their due diligence, and",
              "we should pick a new curator. In this case the curator should also be slashed.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          },
          {
            "Name": "accept_curator",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              }
            ],
            "Index": 4,
            "Docs": [
              "Accept the curator role for a bounty.",
              "A deposit will be reserved from curator and refund upon successful payout.",
              "",
              "May only be called from the curator.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          },
          {
            "Name": "award_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 5,
            "Docs": [
              "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
              "after a delay.",
              "",
              "The dispatch origin for this call must be the curator of this bounty.",
              "",
              "- `bounty_id`: Bounty ID to award.",
              "- `beneficiary`: The beneficiary account whom will receive the payout.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          },
          {
            "Name": "claim_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              }
            ],
            "Index": 6,
            "Docs": [
              "Claim the payout from an awarded bounty after payout delay.",
              "",
              "The dispatch origin for this call must be the beneficiary of this bounty.",
              "",
              "- `bounty_id`: Bounty ID to claim.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          },
          {
            "Name": "close_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              }
            ],
            "Index": 7,
            "Docs": [
              "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
              "the curator deposit will be unreserved if possible.",
              "",
              "Only `T::RejectOrigin` is able to cancel a bounty.",
              "",
              "- `bounty_id`: Bounty ID to cancel.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          },
          {
            "Name": "extend_bounty_expiry",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 151
              },
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "Extend the expiry time of an active bounty.",
              "",
              "The dispatch origin for this call must be the curator of this bounty.",
              "",
              "- `bounty_id`: Bounty ID to extend.",
              "- `remark`: additional information.",
              "",
              "# <weight>",
              "- O(1).",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_bounties",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "247": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 233
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a sensitive action to be taken.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender must",
              "have funds to cover the deposit.",
              "",
              "- `proposal_hash`: The hash of the proposal preimage.",
              "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
              "",
              "Emits `Proposed`."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 151
              }
            ],
            "Index": 1,
            "Docs": [
              "Signals agreement with a particular proposal.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender",
              "must have funds to cover the deposit, equal to the original deposit.",
              "",
              "- `proposal`: The index of the proposal to second."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 151
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 47
              }
            ],
            "Index": 2,
            "Docs": [
              "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `ref_index`: The index of the referendum to vote for.",
              "- `vote`: The vote configuration."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 3,
            "Docs": [
              "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
              "referendum.",
              "",
              "The dispatch origin of this call must be `CancellationOrigin`.",
              "",
              "-`ref_index`: The index of the referendum to cancel.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 233
              }
            ],
            "Index": 4,
            "Docs": [
              "Schedule a referendum to be tabled once it is legal to schedule an external",
              "referendum.",
              "",
              "The dispatch origin of this call must be `ExternalOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 233
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
              "an external referendum.",
              "",
              "The dispatch of this call must be `ExternalMajorityOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 233
              }
            ],
            "Index": 6,
            "Docs": [
              "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
              "schedule an external referendum.",
              "",
              "The dispatch of this call must be `ExternalDefaultOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "voting_period",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Schedule the currently externally-proposed majority-carries referendum to be tabled",
              "immediately. If there is no externally-proposed referendum currently, or if there is one",
              "but it is not a majority-carries referendum then it fails.",
              "",
              "The dispatch of this call must be `FastTrackOrigin`.",
              "",
              "- `proposal_hash`: The hash of the current external proposal.",
              "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
              "\tMust be always greater than zero.",
              "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
              "- `delay`: The number of block after voting has ended in approval and this should be",
              "  enacted. This doesn't have a minimum amount.",
              "",
              "Emits `Started`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Veto and blacklist the external proposal hash.",
              "",
              "The dispatch origin of this call must be `VetoOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
              "",
              "Emits `Vetoed`.",
              "",
              "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 151
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove a referendum.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "- `ref_index`: The index of the referendum to cancel.",
              "",
              "# Weight: `O(1)`."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 248
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Undelegate the voting power of the sending account.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Clears all public proposals.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 13,
            "Docs": [
              "Unlock tokens that have an expired lock.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 14,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If:",
              "- the referendum was cancelled, or",
              "- the referendum is ongoing, or",
              "- the referendum has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the referendum has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for referendum `index`.",
              "",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 7
              }
            ],
            "Index": 15,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the referendum was cancelled, because the voter lost the referendum or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for",
              "  referendum `index`.",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 44
              }
            ],
            "Index": 16,
            "Docs": [
              "Permanently place a proposal into the blacklist. This prevents it from ever being",
              "proposed again.",
              "",
              "If called on a queued public or external proposal, then this will result in it being",
              "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
              "then it will be cancelled.",
              "",
              "The dispatch origin of this call must be `BlacklistOrigin`.",
              "",
              "- `proposal_hash`: The proposal hash to blacklist permanently.",
              "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
              "cancelled.",
              "",
              "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
              "  reasonable value)."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 151
              }
            ],
            "Index": 17,
            "Docs": [
              "Remove a proposal.",
              "",
              "The dispatch origin of this call must be `CancelProposalOrigin`.",
              "",
              "- `prop_index`: The index of the proposal to cancel.",
              "",
              "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "248": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "249": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 250
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "Requires root origin.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)",
              "- DB:",
              "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
              "    members",
              "  - 1 storage read (codec `O(P)`) for reading the proposals",
              "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
              "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
              "# </weight>"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 234
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
              "  `proposal`",
              "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
              "- 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 151
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 234
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
              "- DB:",
              "  - 1 storage read `is_member` (codec `O(M)`)",
              "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
              "  - DB accesses influenced by `threshold`:",
              "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
              "    - OR proposal insertion (`threshold <= 2`)",
              "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
              "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
              "      - 1 storage write `ProposalOf` (codec `O(B)`)",
              "      - 1 storage write `Voting` (codec `O(M)`)",
              "  - 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "# <weight>",
              "## Weight",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)",
              "- DB:",
              "  - 1 storage read `Members` (codec `O(M)`)",
              "  - 1 storage mutation `Voting` (codec `O(M)`)",
              "- 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "close_old_weight",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "OldWeight",
                "TypeId": 251
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 4,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)",
              "- DB:",
              " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
              " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
              "   `O(P2)`)",
              " - any mutations done while executing `proposal` (`P1`)",
              "- up to 3 events",
              "# </weight>"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "# <weight>",
              "Complexity: O(P) where P is the number of max proposals",
              "DB Weight:",
              "* Reads: Proposals",
              "* Writes: Voting, Proposals, ProposalOf",
              "# </weight>"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)",
              "- DB:",
              " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
              " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
              "   `O(P2)`)",
              " - any mutations done while executing `proposal` (`P1`)",
              "- up to 3 events",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "250": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "251": {
        "TypeId": 252,
        "TypeDef": "Compact"
      },
      "252": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_weights",
          "OldWeight"
        ],
        "TypeDef": "Composite"
      },
      "253": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "254": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 250
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "Requires root origin.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)",
              "- DB:",
              "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
              "    members",
              "  - 1 storage read (codec `O(P)`) for reading the proposals",
              "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
              "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
              "# </weight>"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 234
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
              "  `proposal`",
              "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
              "- 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 151
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 234
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
              "- DB:",
              "  - 1 storage read `is_member` (codec `O(M)`)",
              "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
              "  - DB accesses influenced by `threshold`:",
              "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
              "    - OR proposal insertion (`threshold <= 2`)",
              "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
              "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
              "      - 1 storage write `ProposalOf` (codec `O(B)`)",
              "      - 1 storage write `Voting` (codec `O(M)`)",
              "  - 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "# <weight>",
              "## Weight",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)",
              "- DB:",
              "  - 1 storage read `Members` (codec `O(M)`)",
              "  - 1 storage mutation `Voting` (codec `O(M)`)",
              "- 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "close_old_weight",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "OldWeight",
                "TypeId": 251
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 4,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)",
              "- DB:",
              " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
              " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
              "   `O(P2)`)",
              " - any mutations done while executing `proposal` (`P1`)",
              "- up to 3 events",
              "# </weight>"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "# <weight>",
              "Complexity: O(P) where P is the number of max proposals",
              "DB Weight:",
              "* Reads: Proposals",
              "* Writes: Voting, Proposals, ProposalOf",
              "# </weight>"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)",
              "- DB:",
              " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
              " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
              "   `O(P2)`)",
              " - any mutations done while executing `proposal` (`P1`)",
              "- up to 3 events",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "255": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "256": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 250
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "Requires root origin.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)",
              "- DB:",
              "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
              "    members",
              "  - 1 storage read (codec `O(P)`) for reading the proposals",
              "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
              "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
              "# </weight>"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 234
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
              "  `proposal`",
              "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
              "- 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 151
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 234
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
              "- DB:",
              "  - 1 storage read `is_member` (codec `O(M)`)",
              "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
              "  - DB accesses influenced by `threshold`:",
              "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
              "    - OR proposal insertion (`threshold <= 2`)",
              "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
              "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
              "      - 1 storage write `ProposalOf` (codec `O(B)`)",
              "      - 1 storage write `Voting` (codec `O(M)`)",
              "  - 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "# <weight>",
              "## Weight",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)",
              "- DB:",
              "  - 1 storage read `Members` (codec `O(M)`)",
              "  - 1 storage mutation `Voting` (codec `O(M)`)",
              "- 1 event",
              "# </weight>"
            ]
          },
          {
            "Name": "close_old_weight",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "OldWeight",
                "TypeId": 251
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 4,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)",
              "- DB:",
              " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
              " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
              "   `O(P2)`)",
              " - any mutations done while executing `proposal` (`P1`)",
              "- up to 3 events",
              "# </weight>"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "# <weight>",
              "Complexity: O(P) where P is the number of max proposals",
              "DB Weight:",
              "* Reads: Proposals",
              "* Writes: Voting, Proposals, ProposalOf",
              "# </weight>"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 151
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "# <weight>",
              "## Weight",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)",
              "- DB:",
              " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
              " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
              "   `O(P2)`)",
              " - any mutations done while executing `proposal` (`P1`)",
              "- up to 3 events",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "257": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "258": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a registrar to the system.",
              "",
              "The dispatch origin for this call must be `T::RegistrarOrigin`.",
              "",
              "- `account`: the account of the registrar.",
              "",
              "Emits `RegistrarAdded` if successful.",
              "",
              "# <weight>",
              "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
              "- One storage mutation (codec `O(R)`).",
              "- One event.",
              "# </weight>"
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                "TypeId": 259
              }
            ],
            "Index": 1,
            "Docs": [
              "Set an account's identity information and reserve the appropriate deposit.",
              "",
              "If the account already has identity information, the deposit is taken as part payment",
              "for the new deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `info`: The identity information.",
              "",
              "Emits `IdentitySet` if successful.",
              "",
              "# <weight>",
              "- `O(X + X' + R)`",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
              "  - where `R` judgements-count (registrar-count-bounded)",
              "- One balance reserve operation.",
              "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
              "- One event.",
              "# </weight>"
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 293
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the sub-accounts of the sender.",
              "",
              "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
              "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "- `subs`: The identity's (new) sub-accounts.",
              "",
              "# <weight>",
              "- `O(P + S)`",
              "  - where `P` old-subs-count (hard- and deposit-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "- At most one balance operations.",
              "- DB:",
              "  - `P + S` storage mutations (codec complexity `O(1)`)",
              "  - One storage read (codec complexity `O(P)`).",
              "  - One storage write (codec complexity `O(S)`).",
              "  - One storage-exists (`IdentityOf::contains_key`).",
              "# </weight>"
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Clear an account's identity info and all sub-accounts and return all deposits.",
              "",
              "Payment: All reserved balances on the account are returned.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "Emits `IdentityCleared` if successful.",
              "",
              "# <weight>",
              "- `O(R + S + X)`",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
              "- One balance-unreserve operation.",
              "- `2` storage reads and `S + 2` storage deletions.",
              "- One event.",
              "# </weight>"
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 151
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 4,
            "Docs": [
              "Request a judgement from a registrar.",
              "",
              "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
              "given.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is requested.",
              "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
              "",
              "```nocompile",
              "Self::registrars().get(reg_index).unwrap().fee",
              "```",
              "",
              "Emits `JudgementRequested` if successful.",
              "",
              "# <weight>",
              "- `O(R + X)`.",
              "- One balance-reserve operation.",
              "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
              "- One event.",
              "# </weight>"
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel a previous request.",
              "",
              "Payment: A previously reserved deposit is returned on success.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
              "",
              "Emits `JudgementUnrequested` if successful.",
              "",
              "# <weight>",
              "- `O(R + X)`.",
              "- One balance-reserve operation.",
              "- One storage mutation `O(R + X)`.",
              "- One event",
              "# </weight>"
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 151
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the fee required for a judgement to be requested from a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fee`: the new fee.",
              "",
              "# <weight>",
              "- `O(R)`.",
              "- One storage mutation `O(R)`.",
              "- Benchmark: 7.315 + R * 0.329 ��s (min squares analysis)",
              "# </weight>"
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 151
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 7,
            "Docs": [
              "Change the account associated with a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `new`: the new account ID.",
              "",
              "# <weight>",
              "- `O(R)`.",
              "- One storage mutation `O(R)`.",
              "- Benchmark: 8.823 + R * 0.32 ��s (min squares analysis)",
              "# </weight>"
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 151
              },
              {
                "Name": "fields",
                "TypeName": "IdentityFields",
                "TypeId": 295
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the field information for a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fields`: the fields that the registrar concerns themselves with.",
              "",
              "# <weight>",
              "- `O(R)`.",
              "- One storage mutation `O(R)`.",
              "- Benchmark: 7.464 + R * 0.325 ��s (min squares analysis)",
              "# </weight>"
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 151
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 297
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 9,
            "Docs": [
              "Provide a judgement for an account's identity.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `reg_index`.",
              "",
              "- `reg_index`: the index of the registrar whose judgement is being made.",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
              "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
              "",
              "Emits `JudgementGiven` if successful.",
              "",
              "# <weight>",
              "- `O(R + X)`.",
              "- One balance-transfer operation.",
              "- Up to one account-lookup operation.",
              "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
              "- One event.",
              "# </weight>"
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 10,
            "Docs": [
              "Remove an account's identity and sub-account information and slash the deposits.",
              "",
              "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
              "`Slash`. Verification request deposits are not returned; they should be cancelled",
              "manually using `cancel_request`.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`.",
              "",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "",
              "Emits `IdentityKilled` if successful.",
              "",
              "# <weight>",
              "- `O(R + S + X)`.",
              "- One balance-reserve operation.",
              "- `S + 2` storage mutations.",
              "- One event.",
              "# </weight>"
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 262
              }
            ],
            "Index": 11,
            "Docs": [
              "Add the given account to the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 262
              }
            ],
            "Index": 12,
            "Docs": [
              "Alter the associated name of the given sub-account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 13,
            "Docs": [
              "Remove the given account from the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Remove the sender as a sub-account.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender (*not* the original depositor).",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "super-identity.",
              "",
              "NOTE: This should not normally be used, but is provided in the case that the non-",
              "controller of an account is maliciously registered as a sub-account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "259": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 260
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 262
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 262
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 262
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 262
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 262
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 292
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 262
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 262
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "260": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 291
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 261
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "261": {
        "TypeIds": [
          262,
          262
        ],
        "TypeDef": "Tuple"
      },
      "262": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 263
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 264
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 265
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 266
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 16
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 267
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 268
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 269
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 66
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 270
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 271
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 272
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 273
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 274
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 275
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 276
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 167
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 277
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 278
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 279
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 154
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 280
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 281
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 282
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 283
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 284
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 285
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 286
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 287
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 288
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 289
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 290
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "263": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "264": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "265": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "266": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "267": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "268": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "269": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "270": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "271": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "272": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "273": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "274": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "275": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "276": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "277": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "278": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "279": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "280": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "281": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "282": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "283": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "284": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "285": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "286": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "287": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "288": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "289": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "290": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "291": {
        "TypeId": 261,
        "TypeDef": "Sequence"
      },
      "292": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 154
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 154
          }
        ],
        "TypeDef": "Variant"
      },
      "293": {
        "TypeId": 294,
        "TypeDef": "Sequence"
      },
      "294": {
        "TypeIds": [
          0,
          262
        ],
        "TypeDef": "Tuple"
      },
      "295": {
        "TypeFields": [
          {
            "TypeName": "IdentityField",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 296
          }
        ],
        "TypeDef": "Composite"
      },
      "296": {
        "Variants": [
          {
            "Name": "Display",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Legal",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Web",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Riot",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Email",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "PgpFingerprint",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Image",
            "TypeFields": null,
            "Index": 64
          },
          {
            "Name": "Twitter",
            "TypeFields": null,
            "Index": 128
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityField"
        ],
        "TypeDef": "Variant"
      },
      "297": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "298": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 299
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "# <weight>",
              "- Complexity: O(C) where C is the number of calls to be batched.",
              "# </weight>",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 60
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 299
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "# <weight>",
              "- Complexity: O(C) where C is the number of calls to be batched.",
              "# </weight>"
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 300
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "# <weight>",
              "- O(1).",
              "- Limited storage reads.",
              "- One DB write (event).",
              "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
              "# </weight>"
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 299
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "# <weight>",
              "- Complexity: O(C) where C is the number of calls to be batched.",
              "# </weight>"
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "299": {
        "TypeId": 234,
        "TypeDef": "Sequence"
      },
      "300": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 301
              }
            ],
            "Index": 0
          },
          {
            "Name": "AdvisoryCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 302
              }
            ],
            "Index": 21
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                "TypeId": 303
              }
            ],
            "Index": 23
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance3>",
                "TypeId": 304
              }
            ],
            "Index": 25
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 305
              }
            ],
            "Index": 120
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 306
              }
            ],
            "Index": 122
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                "TypeId": 307
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "zeitgeist_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "301": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "302": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "303": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "304": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "305": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 199
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "306": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "307": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "308": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 309
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 59
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 59
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 59
              },
              {
                "Name": "delay",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 60
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 59
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 60
              },
              {
                "Name": "height",
                "TypeName": "T::BlockNumber",
                "TypeId": 10
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 309
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 234
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "309": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 59
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 59
          }
        ],
        "TypeDef": "Variant"
      },
      "310": {
        "Variants": [
          {
            "Name": "call_old_weight",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "gas_limit",
                "TypeName": "OldWeight",
                "TypeId": 251
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 311
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Deprecated version if [`Self::call`] for use in an in-storage `Call`."
            ]
          },
          {
            "Name": "instantiate_with_code_old_weight",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "gas_limit",
                "TypeName": "OldWeight",
                "TypeId": 251
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 311
              },
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`."
            ]
          },
          {
            "Name": "instantiate_old_weight",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "gas_limit",
                "TypeName": "OldWeight",
                "TypeId": 251
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 311
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`."
            ]
          },
          {
            "Name": "upload_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 311
              },
              {
                "Name": "determinism",
                "TypeName": "Determinism",
                "TypeId": 312
              }
            ],
            "Index": 3,
            "Docs": [
              "Upload new `code` without instantiating a contract from it.",
              "",
              "If the code does not already exist a deposit is reserved from the caller",
              "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
              "depends on the instrumented size of the the supplied `code`.",
              "",
              "If the code already exists in storage it will still return `Ok` and upgrades",
              "the in storage version to the current",
              "[`InstructionWeights::version`](InstructionWeights).",
              "",
              "- `determinism`: If this is set to any other value but [`Determinism::Deterministic`]",
              "  then the only way to use this code is to delegate call into it from an offchain",
              "  execution. Set to [`Determinism::Deterministic`] if in doubt.",
              "",
              "# Note",
              "",
              "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
              "To avoid this situation a constructor could employ access control so that it can",
              "only be instantiated by permissioned entities. The same is true when uploading",
              "through [`Self::instantiate_with_code`]."
            ]
          },
          {
            "Name": "remove_code",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove the code stored under `code_hash` and refund the deposit to its owner.",
              "",
              "A code can only be removed by its original uploader (its owner) and only if it is",
              "not used by any contract."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Privileged function that changes the code of an existing contract.",
              "",
              "This takes care of updating refcounts and all other necessary operations. Returns",
              "an error if either the `code_hash` or `dest` do not exist.",
              "",
              "# Note",
              "",
              "This does **not** change the address of the contract in question. This means",
              "that the contract address is no longer derived from its code hash after calling",
              "this dispatchable."
            ]
          },
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "gas_limit",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 311
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "Makes a call to an account, optionally transferring some balance.",
              "",
              "# Parameters",
              "",
              "* `dest`: Address of the contract to call.",
              "* `value`: The balance to transfer from the `origin` to `dest`.",
              "* `gas_limit`: The gas limit enforced when executing the constructor.",
              "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
              "  caller to pay for the storage consumed.",
              "* `data`: The input data to pass to the contract.",
              "",
              "* If the account is a smart-contract account, the associated code will be",
              "executed and any value will be transferred.",
              "* If the account is a regular account, any value will be transferred.",
              "* If no account exists and the call value is not less than `existential_deposit`,",
              "a regular account will be created and any value will be transferred."
            ]
          },
          {
            "Name": "instantiate_with_code",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "gas_limit",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 311
              },
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Instantiates a new contract from the supplied `code` optionally transferring",
              "some balance.",
              "",
              "This dispatchable has the same effect as calling [`Self::upload_code`] +",
              "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
              "also check the documentation of [`Self::upload_code`].",
              "",
              "# Parameters",
              "",
              "* `value`: The balance to transfer from the `origin` to the newly created contract.",
              "* `gas_limit`: The gas limit enforced when executing the constructor.",
              "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
              "  from the caller to pay for the storage consumed.",
              "* `code`: The contract code to deploy in raw bytes.",
              "* `data`: The input data to pass to the contract constructor.",
              "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
              "",
              "Instantiation is executed as follows:",
              "",
              "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that",
              "  code.",
              "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
              "- The destination address is computed based on the sender, code_hash and the salt.",
              "- The smart-contract account is created at the computed address.",
              "- The `value` is transferred to the new account.",
              "- The `deploy` function is executed in the context of the newly-created account."
            ]
          },
          {
            "Name": "instantiate",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "gas_limit",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "storage_deposit_limit",
                "TypeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                "TypeId": 311
              },
              {
                "Name": "code_hash",
                "TypeName": "CodeHash<T>",
                "TypeId": 11
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "Instantiates a contract from a previously deployed wasm binary.",
              "",
              "This function is identical to [`Self::instantiate_with_code`] but without the",
              "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
              "must be supplied."
            ]
          }
        ],
        "Path": [
          "pallet_contracts",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "311": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 155
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 155
          }
        ],
        "TypeDef": "Variant"
      },
      "312": {
        "Variants": [
          {
            "Name": "Deterministic",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllowIndeterminism",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_contracts",
          "wasm",
          "Determinism"
        ],
        "TypeDef": "Variant"
      },
      "313": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 239
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some balance to another account under `currency_id`.",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor."
            ]
          },
          {
            "Name": "transfer_native_currency",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 239
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer some native currency to another account.",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor."
            ]
          },
          {
            "Name": "update_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 239
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "AmountOf<T>",
                "TypeId": 314
              }
            ],
            "Index": 2,
            "Docs": [
              "update amount of account `who` under `currency_id`.",
              "",
              "The dispatch origin of this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "orml_currencies",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "314": {
        "Primitive": "I128",
        "TypeDef": "Primitive"
      },
      "315": {
        "Variants": [
          {
            "Name": "authorize_market_outcome",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 0,
            "Docs": [
              "Overwrites already provided outcomes for the same market and account."
            ]
          }
        ],
        "Path": [
          "zrml_authorized",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "316": {
        "Variants": [
          {
            "Name": "join_court",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Join to become a juror, who is able to get randomly selected",
              "for court cases according to the provided stake.",
              "If the juror is already part of the court,",
              "the `amount` needs to be higher than the previous amount to update the juror stake.",
              "If the juror gets selected for a court case, the juror has to vote and reveal the vote.",
              "If the juror does not vote or reveal the vote, the juror gets slashed",
              "by the selected multiple of `MinJurorStake` for the court.",
              "The risked amount depends on the juror random selection algorithm,",
              "but is at most (`MaxSelectedDraws` / 2) mulitplied by the `MinJurorStake`",
              "for all jurors and delegators in one court.",
              "Assume you get randomly selected on one of these `MinJurorStake`'s.",
              "Then you risk at most `MinJurorStake` for this court.",
              "The probability to get selected is higher the more funds are staked.",
              "The `amount` of this call represents the total stake of the juror.",
              "If the pool is full, the lowest staked court participant is removed from the court pool.",
              "If the `amount` is lower than the lowest staked court participant, the call fails.",
              "",
              "# Arguments",
              "",
              "- `amount`: The total stake associated with the joining juror.",
              "",
              "# Weight",
              "",
              "Complexity: `O(log(n))`, where `n` is the number of jurors in the stake-weighted pool."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "delegations",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              }
            ],
            "Index": 1,
            "Docs": [
              "Join the court to become a delegator.",
              "If the random selection algorithm chooses a delegators stake,",
              "the caller delegates the vote power to the drawn delegated juror.",
              "The delegator gets slashed or rewarded according to the delegated juror's decisions.",
              "If the delegator is already part of the court,",
              "the `amount` needs to be higher than the previous amount to update the delegators stake.",
              "The `amount` of this call represents the total stake of the delegator.",
              "If the pool is full, the lowest staked court participant is removed from the court pool.",
              "If the `amount` is lower than the lowest staked court participant, the call fails.",
              "",
              "# Arguments",
              "",
              "- `amount`: The total stake associated with the joining delegator.",
              "- `delegations`: The list of jurors to delegate the vote power to.",
              "",
              "# Weight",
              "",
              "Complexity: `O(log(n))`, where `n` is the number of jurors in the stake-weighted pool."
            ]
          },
          {
            "Name": "prepare_exit_court",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Prepare as a court participant (juror or delegator) to exit the court.",
              "When this is called the court participant is not anymore able to get drawn for new cases.",
              "The court participant gets removed from the stake-weighted pool.",
              "After that the court participant can exit the court.",
              "",
              "# Weight",
              "",
              "Complexity: `O(log(n))`, where `n` is the number of jurors in the stake-weighted pool."
            ]
          },
          {
            "Name": "exit_court",
            "TypeFields": [
              {
                "Name": "court_participant",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 3,
            "Docs": [
              "Exit the court.",
              "The stake which is not locked by any court case is unlocked.",
              "`prepare_exit_court` must be called before",
              "to remove the court participant (juror or delegator) from the stake-weighted pool.",
              "",
              "# Arguments",
              "",
              "- `court_participant`: The court participant,",
              "who is assumed not to be part of the pool anymore.",
              "",
              "# Weight",
              "",
              "Complexity: `O(log(n))`, where `n` is the number of jurors in the stake-weighted pool."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 155
              },
              {
                "Name": "commitment_vote",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "Vote as a randomly selected juror for a specific court case.",
              "",
              "# Arguments",
              "",
              "- `court_id`: The identifier of the court.",
              "- `commitment_vote`: A hash which consists of `juror ++ vote_item ++ salt`.",
              "",
              "# Weight",
              "",
              "Complexity: `O(log(n))`, where `n` is the number of participants",
              "in the list of random selections (draws)."
            ]
          },
          {
            "Name": "denounce_vote",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 155
              },
              {
                "Name": "juror",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              },
              {
                "Name": "vote_item",
                "TypeName": "VoteItem",
                "TypeId": 73
              },
              {
                "Name": "salt",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Denounce a juror during the voting period for which the commitment vote is known.",
              "This is useful to punish the behaviour that jurors reveal",
              "their commitments to others before the voting period ends.",
              "A check of `commitment_hash == hash(juror ++ vote_item ++ salt)`",
              "is performed for validation.",
              "",
              "# Arguments",
              "",
              "- `court_id`: The identifier of the court.",
              "- `juror`: The juror whose commitment vote might be known.",
              "- `vote_item`: The raw vote item which should match with the commitment of the juror.",
              "- `salt`: The hash which is used to proof that the juror did reveal",
              "her vote during the voting period.",
              "",
              "# Weight",
              "",
              "Complexity: `O(log(n))`, where `n` is the number of selected draws",
              "in the specified court."
            ]
          },
          {
            "Name": "reveal_vote",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 155
              },
              {
                "Name": "vote_item",
                "TypeName": "VoteItem",
                "TypeId": 73
              },
              {
                "Name": "salt",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 6,
            "Docs": [
              "Reveal the commitment vote of the caller, who is a selected juror.",
              "A check of `commitment_hash == hash(juror ++ vote_item ++ salt)`",
              "is performed for validation.",
              "",
              "# Arguments",
              "",
              "- `court_id`: The identifier of the court.",
              "- `vote_item`: The raw vote item which should match with the commitment of the juror.",
              "- `salt`: The hash which is used for the validation.",
              "",
              "# Weight",
              "",
              "Complexity: `O(log(n))`, where `n` is the number of selected draws",
              "in the specified court."
            ]
          },
          {
            "Name": "appeal",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 155
              }
            ],
            "Index": 7,
            "Docs": [
              "Initiate an appeal for a court",
              "if the presumptive winner of the last vote round is believed to be incorrect.",
              "The last appeal does not trigger a new court round",
              "but instead it marks the court mechanism for this market as failed.",
              "If the court failed, the prediction markets pallet takes over the dispute resolution.",
              "The prediction markets pallet might allow to trigger a global token holder vote.",
              "",
              "# Arguments",
              "",
              "- `court_id`: The identifier of the court.",
              "",
              "# Weight",
              "",
              "Complexity: It depends heavily on the complexity of `select_participants`."
            ]
          },
          {
            "Name": "reassign_court_stakes",
            "TypeFields": [
              {
                "Name": "court_id",
                "TypeName": "CourtId",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Reassign the stakes of the jurors and delegators",
              "for the selected draws of the specified court.",
              "The losing jurors and delegators get slashed and",
              "pay for the winning jurors and delegators.",
              "The tardy (juror did not reveal or did not vote) or denounced jurors",
              "and associated delegators get slashed and reward the winners.",
              "",
              "# Arguments",
              "",
              "- `court_id`: The identifier of the court.",
              "",
              "# Weight",
              "",
              "Complexity: O(N + M), with `N` being the number of draws and `M` being the total number of valid winners and losers."
            ]
          },
          {
            "Name": "set_inflation",
            "TypeFields": [
              {
                "Name": "inflation",
                "TypeName": "Perbill",
                "TypeId": 80
              }
            ],
            "Index": 9,
            "Docs": [
              "Set the yearly inflation rate of the court system.",
              "This is only allowed to be called by the `MonetaryGovernanceOrigin`.",
              "",
              "# Arguments",
              "",
              "- `inflation`: The desired yearly inflation rate.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          }
        ],
        "Path": [
          "zrml_court",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "317": {
        "Variants": [
          {
            "Name": "set_per_block_distribution",
            "TypeFields": [
              {
                "Name": "per_block_distribution",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "zrml_liquidity_mining",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "318": {
        "Variants": [
          {
            "Name": "suggest_outcome",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "zrml_simple_disputes",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "319": {
        "Variants": [
          {
            "Name": "pool_exit",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "pool_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "min_assets_out",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              }
            ],
            "Index": 1,
            "Docs": [
              "Pool - Exit",
              "",
              "Retrieves a given set of assets from `pool_id` to `origin`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be received.",
              "* `pool_id`: Unique pool identifier.",
              "* `pool_amount`: The amount of LP shares of this pool being burned based on the",
              "retrieved assets.",
              "* `min_assets_out`: List of asset lower bounds. No asset should be lower than the",
              "provided values.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)` where `n` is the number of assets in the specified pool"
            ]
          },
          {
            "Name": "pool_exit_with_exact_asset_amount",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "asset_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "max_pool_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 3,
            "Docs": [
              "Pool - Exit with exact pool amount",
              "",
              "Takes an asset from `pool_id` and transfers to `origin`. Differently from `pool_exit`,",
              "this method injects the exactly amount of `asset_amount` to `origin`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be received.",
              "* `pool_id`: Unique pool identifier.",
              "* `asset`: Asset leaving the pool.",
              "* `asset_amount`: Asset amount that is leaving the pool.",
              "* `max_pool_amount`: The calculated amount of assets for the pool must be equal or",
              "greater than the given value.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "pool_exit_with_exact_pool_amount",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "pool_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "min_asset_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 4,
            "Docs": [
              "Pool - Exit with exact pool amount",
              "",
              "Takes an asset from `pool_id` and transfers to `origin`. Differently from `pool_exit`,",
              "this method injects the exactly amount of `pool_amount` to `pool_id`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be received.",
              "* `pool_id`: Unique pool identifier.",
              "* `asset`: Asset leaving the pool.",
              "* `pool_amount`: Pool amount that is entering the pool.",
              "* `min_asset_amount`: The calculated amount for the asset must the equal or less",
              "than the given value.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "pool_join",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "pool_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "max_assets_in",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              }
            ],
            "Index": 5,
            "Docs": [
              "Pool - Join",
              "",
              "Joins a given set of assets provided from `origin` to `pool_id`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be transferred.",
              "* `pool_id`: Unique pool identifier.",
              "* `pool_amount`: The amount of LP shares for this pool that should be minted to the provider.",
              "* `max_assets_in`: List of asset upper bounds. No asset should be greater than the",
              "provided values.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)` where `n` is the number of assets in the specified pool"
            ]
          },
          {
            "Name": "pool_join_with_exact_asset_amount",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "asset_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "min_pool_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 7,
            "Docs": [
              "Pool - Join with exact asset amount",
              "",
              "Joins an asset provided from `origin` to `pool_id`. Differently from `pool_join`,",
              "this method transfers the exactly amount of `asset_amount` to `pool_id`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be received.",
              "* `pool_id`: Unique pool identifier.",
              "* `asset_in`: Asset entering the pool.",
              "* `asset_amount`: Asset amount that is entering the pool.",
              "* `min_pool_amount`: The calculated amount for the pool must be equal or greater",
              "than the given value.",
              "",
              "# Weight",
              "",
              "Complexity: O(1)"
            ]
          },
          {
            "Name": "pool_join_with_exact_pool_amount",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "pool_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "max_asset_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 8,
            "Docs": [
              "Pool - Join with exact pool amount",
              "",
              "Joins an asset provided from `origin` to `pool_id`. Differently from `pool_join`,",
              "this method injects the exactly amount of `pool_amount` to `origin`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be received.",
              "* `pool_id`: Unique pool identifier.",
              "* `asset`: Asset entering the pool.",
              "* `pool_amount`: Asset amount that is entering the pool.",
              "* `max_asset_amount`: The calculated amount of assets for the pool must be equal or",
              "less than the given value.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "swap_exact_amount_in",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "asset_amount_in",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "min_asset_amount_out",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 101
              },
              {
                "Name": "max_price",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 101
              }
            ],
            "Index": 9,
            "Docs": [
              "Swap - Exact amount in",
              "",
              "Swaps a given `asset_amount_in` of the `asset_in/asset_out` pair to `pool_id`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be transferred.",
              "* `pool_id`: Unique pool identifier.",
              "* `asset_in`: Asset entering the pool.",
              "* `asset_amount_in`: Amount that will be transferred from the provider to the pool.",
              "* `asset_out`: Asset leaving the pool.",
              "* `min_asset_amount_out`: Minimum asset amount that can leave the pool.",
              "* `max_price`: Market price must be equal or less than the provided value.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)` if the scoring rule is CPMM, `O(n)` where `n` is the amount of",
              "assets if the scoring rule is Rikiddo."
            ]
          },
          {
            "Name": "swap_exact_amount_out",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "max_asset_amount_in",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 101
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "asset_amount_out",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "max_price",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 101
              }
            ],
            "Index": 10,
            "Docs": [
              "Swap - Exact amount out",
              "",
              "Swaps a given `asset_amount_out` of the `asset_in/asset_out` pair to `origin`.",
              "",
              "# Arguments",
              "",
              "* `origin`: Liquidity Provider (LP). The account whose assets should be received.",
              "* `pool_id`: Unique pool identifier.",
              "* `asset_in`: Asset entering the pool.",
              "* `max_asset_amount_in`: Maximum asset amount that can enter the pool.",
              "* `asset_out`: Asset leaving the pool.",
              "* `asset_amount_out`: Amount that will be transferred from the pool to the provider.",
              "* `max_price`: Market price must be equal or less than the provided value.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)` if the scoring rule is CPMM, `O(n)` where `n` is the amount of",
              "assets if the scoring rule is Rikiddo."
            ]
          },
          {
            "Name": "force_pool_exit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 155
              },
              {
                "Name": "pool_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "min_assets_out",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              }
            ],
            "Index": 11
          }
        ],
        "Path": [
          "zrml_swaps",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "320": {
        "Variants": [
          {
            "Name": "admin_move_market_to_closed",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 1,
            "Docs": [
              "Allows the `CloseOrigin` to immediately move an open market to closed.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n + m)`, where `n` is the number of market ids,",
              "which open at the same time as the specified market,",
              "and `m` is the number of market ids,",
              "which close at the same time as the specified market."
            ]
          },
          {
            "Name": "admin_move_market_to_resolved",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 2,
            "Docs": [
              "Allows the `ResolveOrigin` to immediately move a reported or disputed",
              "market to resolved.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n + m)`, where `n` is the number of market ids",
              "per dispute / report block, m is the number of disputes."
            ]
          },
          {
            "Name": "approve_market",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 3,
            "Docs": [
              "Approves a market that is waiting for approval from the",
              "advisory committee.",
              "",
              "NOTE: Returns the proposer's bond since the market has been",
              "deemed valid by an advisory committee.",
              "",
              "NOTE: Can only be called by the `ApproveOrigin`.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "request_edit",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "edit_reason",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "Request an edit to a proposed market.",
              "",
              "Can only be called by the `RequestEditOrigin`.",
              "",
              "# Arguments",
              "",
              "* `market_id`: The id of the market to edit.",
              "* `edit_reason`: An short record of what needs to be changed.",
              "",
              "# Weight",
              "",
              "Complexity: `O(edit_reason.len())`"
            ]
          },
          {
            "Name": "buy_complete_set",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 5,
            "Docs": [
              "Buy a complete set of outcome shares of a market.",
              "",
              "The cost of a full set is exactly one unit of the market's base asset. For example,",
              "when calling `buy_complete_set(origin, 1, 2)` on a categorical market with five",
              "different outcomes, the caller pays `2` of the base asset and receives `2` of each of",
              "the five outcome tokens.",
              "",
              "NOTE: This is the only way to create new shares of outcome tokens.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of outcome assets in the market."
            ]
          },
          {
            "Name": "dispute",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 6,
            "Docs": [
              "Dispute on a market that has been reported or already disputed.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of outstanding disputes."
            ]
          },
          {
            "Name": "create_market",
            "TypeFields": [
              {
                "Name": "base_asset",
                "TypeName": "Asset<MarketIdOf<T>>",
                "TypeId": 63
              },
              {
                "Name": "creator_fee",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "oracle",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "period",
                "TypeName": "MarketPeriod<T::BlockNumber, MomentOf<T>>",
                "TypeId": 108
              },
              {
                "Name": "deadlines",
                "TypeName": "Deadlines<T::BlockNumber>",
                "TypeId": 110
              },
              {
                "Name": "metadata",
                "TypeName": "MultiHash",
                "TypeId": 321
              },
              {
                "Name": "creation",
                "TypeName": "MarketCreation",
                "TypeId": 105
              },
              {
                "Name": "market_type",
                "TypeName": "MarketType",
                "TypeId": 106
              },
              {
                "Name": "dispute_mechanism",
                "TypeName": "Option<MarketDisputeMechanism>",
                "TypeId": 115
              },
              {
                "Name": "scoring_rule",
                "TypeName": "ScoringRule",
                "TypeId": 111
              }
            ],
            "Index": 8,
            "Docs": [
              "Creates a market.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of market ids,",
              "which close at the same time as the specified market."
            ]
          },
          {
            "Name": "edit_market",
            "TypeFields": [
              {
                "Name": "base_asset",
                "TypeName": "Asset<MarketIdOf<T>>",
                "TypeId": 63
              },
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              },
              {
                "Name": "oracle",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "period",
                "TypeName": "MarketPeriod<T::BlockNumber, MomentOf<T>>",
                "TypeId": 108
              },
              {
                "Name": "deadlines",
                "TypeName": "Deadlines<T::BlockNumber>",
                "TypeId": 110
              },
              {
                "Name": "metadata",
                "TypeName": "MultiHash",
                "TypeId": 321
              },
              {
                "Name": "market_type",
                "TypeName": "MarketType",
                "TypeId": 106
              },
              {
                "Name": "dispute_mechanism",
                "TypeName": "Option<MarketDisputeMechanism>",
                "TypeId": 115
              },
              {
                "Name": "scoring_rule",
                "TypeName": "ScoringRule",
                "TypeId": 111
              }
            ],
            "Index": 9,
            "Docs": [
              "Edit a proposed market for which request is made.",
              "",
              "Edit can only be made by the creator of the market.",
              "",
              "# Arguments",
              "",
              "* `market_id`: The id of the market to edit.",
              "* `oracle`: Oracle to edit market.",
              "* `period`: MarketPeriod to edit market.",
              "* `deadlines`: Deadlines to edit market.",
              "* `metadata`: MultiHash metadata to edit market.",
              "* `market_type`: MarketType to edit market.",
              "* `dispute_mechanism`: MarketDisputeMechanism to edit market.",
              "* `scoring_rule`: ScoringRule to edit market.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of markets",
              "which end at the same time as the market before the edit."
            ]
          },
          {
            "Name": "redeem_shares",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 12,
            "Docs": [
              "Redeems the winning shares of a prediction market.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "reject_market",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "reject_reason",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 13,
            "Docs": [
              "Rejects a market that is waiting for approval from the advisory committee.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n + m)`,",
              "where `n` is the number of market ids,",
              "which open at the same time as the specified market,",
              "and `m` is the number of market ids,",
              "which close at the same time as the specified market."
            ]
          },
          {
            "Name": "report",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 14,
            "Docs": [
              "Reports the outcome of a market.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of market ids,",
              "which reported at the same time as the specified market."
            ]
          },
          {
            "Name": "sell_complete_set",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 15,
            "Docs": [
              "Sells a complete set of outcomes shares for a market.",
              "",
              "Each complete set is sold for one unit of the market's base asset.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of assets for a categorical market."
            ]
          },
          {
            "Name": "start_global_dispute",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 16,
            "Docs": [
              "Start a global dispute, if the market dispute mechanism fails.",
              "",
              "# Arguments",
              "",
              "* `market_id`: The identifier of the market.",
              "",
              "NOTE:",
              "The returned outcomes of the market dispute mechanism and the report outcome",
              "are added to the global dispute voting outcomes.",
              "The bond of each dispute is the initial vote amount."
            ]
          },
          {
            "Name": "create_market_and_deploy_pool",
            "TypeFields": [
              {
                "Name": "base_asset",
                "TypeName": "Asset<MarketIdOf<T>>",
                "TypeId": 63
              },
              {
                "Name": "creator_fee",
                "TypeName": "Perbill",
                "TypeId": 80
              },
              {
                "Name": "oracle",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "period",
                "TypeName": "MarketPeriod<T::BlockNumber, MomentOf<T>>",
                "TypeId": 108
              },
              {
                "Name": "deadlines",
                "TypeName": "Deadlines<T::BlockNumber>",
                "TypeId": 110
              },
              {
                "Name": "metadata",
                "TypeName": "MultiHash",
                "TypeId": 321
              },
              {
                "Name": "market_type",
                "TypeName": "MarketType",
                "TypeId": 106
              },
              {
                "Name": "dispute_mechanism",
                "TypeName": "Option<MarketDisputeMechanism>",
                "TypeId": 115
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "spot_prices",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              },
              {
                "Name": "swap_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 17,
            "Docs": [
              "Create a market, deploy a LMSR pool, and buy outcome tokens and provide liquidity to the",
              "market.",
              "",
              "# Weight",
              "",
              "`O(n)` where `n` is the number of markets which close on the same block, plus the",
              "resources consumed by `DeployPool::create_pool`. In the standard implementation using",
              "neo-swaps, this is `O(m)` where `m` is the number of assets in the market."
            ]
          },
          {
            "Name": "schedule_early_close",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 18,
            "Docs": [
              "Allows the `CloseMarketsEarlyOrigin` or the market creator to schedule an early close.",
              "",
              "The market creator schedules it `now + EarlyClose...Period` in the future.",
              "This is to allow enough time for a potential dispute.",
              "The market creator reserves a `CloseEarlyDisputeBond`, which is returned,",
              "if the `CloseMarketsEarlyOrigin` decides to accept the early close request",
              "or if it is not disputed.",
              "It is slashed, if the early close request is disputed",
              "and the `CloseMarketsEarlyOrigin` decides to reject the early close.",
              "The `CloseMarketsEarlyOrigin` (or root) can schedule it `now + CloseProtection...Period`",
              "in the future. This is to prevent fat finger mistakes.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the maximum number of market ids",
              "in `MarketIdsPerClose...` either at the old period end or new period end."
            ]
          },
          {
            "Name": "dispute_early_close",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 19,
            "Docs": [
              "Allows anyone to dispute a scheduled early close.",
              "",
              "The market period is reset to the original (old) period.",
              "A `CloseEarlyDisputeBond` is reserved, which is returned,",
              "if the `CloseMarketsEarlyOrigin` decides to reject",
              "the early close request of the market creator or",
              "if the `CloseMarketsEarlyOrigin` is inactive.",
              "It is slashed, if the `CloseMarketsEarlyOrigin` decides to schedule the early close.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the maximum number of market ids",
              "in `MarketIdsPerClose...` either at the old period end or new period end."
            ]
          },
          {
            "Name": "reject_early_close",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 20,
            "Docs": [
              "Allows the `CloseMarketsEarlyOrigin` to reject a scheduled early close.",
              "",
              "The market period is reset to the original (old) period",
              "in case it was scheduled before (fat-finger protection).",
              "",
              "The disputant gets back the `CloseEarlyDisputeBond`",
              "and receives the market creators `CloseEarlyRequestBond`.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the maximum number of market ids",
              "in `MarketIdsPerClose...` either at the old period end or new period end."
            ]
          },
          {
            "Name": "close_trusted_market",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 21,
            "Docs": [
              "Allows the market creator of a trusted market",
              "to immediately move an open market to closed.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n + m)`, where `n` is the number of market ids,",
              "which open at the same time as the specified market,",
              "and `m` is the number of market ids,",
              "which close at the same time as the specified market."
            ]
          },
          {
            "Name": "manually_close_market",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 22,
            "Docs": [
              "Allows the manual closing for \"broken\" markets.",
              "A market is \"broken\", if an unexpected chain stall happened",
              "and the auto close was scheduled during this time.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`,",
              "and `n` is the number of market ids,",
              "which close at the same time as the specified market."
            ]
          }
        ],
        "Path": [
          "zrml_prediction_markets",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "321": {
        "Variants": [
          {
            "Name": "Sha3_384",
            "TypeFields": [
              {
                "TypeName": "[u8; 50]",
                "TypeId": 322
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "types",
          "MultiHash"
        ],
        "TypeDef": "Variant"
      },
      "322": {
        "Length": 50,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "323": {
        "Variants": [
          {
            "Name": "cross",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Burns ZTG(styx.burnAmount()) to cross, granting the ability to claim your zeitgeist avatar.",
              "The signer can only cross once."
            ]
          },
          {
            "Name": "set_burn_amount",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 155
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the burn amount. Ensures the SetBurnAmountOrigin in the runtime.",
              "Intended to be called by a governing body like the council.",
              "",
              "# Arguments",
              "",
              "* `amount`: The amount of the new burn price"
            ]
          }
        ],
        "Path": [
          "zrml_styx",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "324": {
        "Variants": [
          {
            "Name": "add_vote_outcome",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              }
            ],
            "Index": 0,
            "Docs": [
              "Add voting outcome to a global dispute in exchange for a constant fee.",
              "Errors if the voting outcome already exists or",
              "if the global dispute has not started or has already finished.",
              "",
              "# Arguments",
              "",
              "- `market_id`: The id of the market.",
              "- `outcome`: The outcome report to add.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of owner(s) of the winner outcome",
              "in the case that this gets called for an already finished global dispute."
            ]
          },
          {
            "Name": "refund_vote_fees",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 5,
            "Docs": [
              "Return the voting outcome fees in case the global dispute was destroyed.",
              "",
              "# Arguments",
              "",
              "- `market_id`: The id of the market.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`,",
              "where `n` is the number of all existing outcomes for a global dispute."
            ]
          },
          {
            "Name": "purge_outcomes",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 1,
            "Docs": [
              "Purge all outcomes to allow the winning outcome owner(s) to get their reward.",
              "Fails if the global dispute is not concluded yet.",
              "",
              "# Arguments",
              "",
              "- `market_id`: The id of the market.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`,",
              "where `n` is the number of all existing outcomes for a global dispute."
            ]
          },
          {
            "Name": "reward_outcome_owner",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 2,
            "Docs": [
              "Reward the collected fees to the owner(s) of a voting outcome.",
              "Fails if outcomes is not already purged.",
              "",
              "# Arguments",
              "",
              "- `market_id`: The id of the market.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n)`, where `n` is the number of owners for the winning outcome."
            ]
          },
          {
            "Name": "vote_on_outcome",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "outcome",
                "TypeName": "OutcomeReport",
                "TypeId": 68
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 3,
            "Docs": [
              "Vote on existing voting outcomes by locking native tokens.",
              "Fails if the global dispute has not started or has already finished.",
              "",
              "# Arguments",
              "",
              "- `market_id`: The id of the market.",
              "- `outcome`: The existing outcome report to vote on.",
              "- `amount`: The amount to vote with.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n + m)`, where `n` is the number of all current votes on global disputes,",
              "and `m` is the number of owners for the specified outcome."
            ]
          },
          {
            "Name": "unlock_vote_balance",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 239
              }
            ],
            "Index": 4,
            "Docs": [
              "Return all locked native tokens from a finished or destroyed global dispute.",
              "Fails if the global dispute is not concluded yet.",
              "",
              "# Arguments",
              "",
              "- `voter`: The account id lookup to unlock funds for.",
              "",
              "# Weight",
              "",
              "Complexity: `O(n + m)`, where `n` is the number of all current votes on global disputes,",
              "and `m` is the number of owners for the winning outcome."
            ]
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "325": {
        "Variants": [
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "asset_count",
                "TypeName": "AssetIndexType",
                "TypeId": 60
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "amount_in",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "min_amount_out",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 0,
            "Docs": [
              "Buy outcome tokens from the specified market.",
              "",
              "The `amount_in` is paid in collateral. The transaction fails if the amount of outcome",
              "tokens received is smaller than `min_amount_out`. The user must correctly specify the",
              "number of outcomes for benchmarking reasons.",
              "",
              "The `amount_in` parameter must also satisfy lower and upper limits due to numerical",
              "constraints. In fact, after `amount_in` has been adjusted for fees, the following must",
              "hold:",
              "",
              "- `amount_in_minus_fees <= EXP_NUMERICAL_LIMIT * pool.liquidity_parameter`.",
              "- `exp(amount_in_minus_fees/pool.liquidity_parameter) - 1 + p <= LN_NUMERICAL_LIMIT`,",
              "  where `p` is the spot price of `asset_out`.",
              "",
              "# Parameters",
              "",
              "- `origin`: The origin account making the purchase.",
              "- `market_id`: Identifier for the market related to the trade.",
              "- `asset_count`: Number of assets in the pool.",
              "- `asset_out`: Asset to be purchased.",
              "- `amount_in`: Amount of collateral paid by the user.",
              "- `min_amount_out`: Minimum number of outcome tokens the user expects to receive.",
              "",
              "# Complexity",
              "",
              "Depends on the implementation of `CompleteSetOperationsApi` and `ExternalFees`; when",
              "using the canonical implementations, the runtime complexity is `O(asset_count)`."
            ]
          },
          {
            "Name": "sell",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "asset_count",
                "TypeName": "AssetIndexType",
                "TypeId": 60
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "amount_in",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "min_amount_out",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 1,
            "Docs": [
              "Sell outcome tokens to the specified market.",
              "",
              "The `amount_in` is paid in outcome tokens. The transaction fails if the amount of outcome",
              "tokens received is smaller than `min_amount_out`. The user must correctly specify the",
              "number of outcomes for benchmarking reasons.",
              "",
              "The `amount_in` parameter must also satisfy lower and upper limits due to numerical",
              "constraints. In fact, the following must hold:",
              "",
              "- `amount_in <= EXP_NUMERICAL_LIMIT * pool.liquidity_parameter`.",
              "- The spot price of `asset_in` is greater than `exp(-EXP_NUMERICAL_LIMIT)` before and",
              "  after execution",
              "",
              "# Parameters",
              "",
              "- `origin`: The origin account making the sale.",
              "- `market_id`: Identifier for the market related to the trade.",
              "- `asset_count`: Number of assets in the pool.",
              "- `asset_in`: Asset to be sold.",
              "- `amount_in`: Amount of outcome tokens paid by the user.",
              "- `min_amount_out`: Minimum amount of collateral the user expects to receive.",
              "",
              "# Complexity",
              "",
              "Depends on the implementation of `CompleteSetOperationsApi` and `ExternalFees`; when",
              "using the canonical implementations, the runtime complexity is `O(asset_count)`."
            ]
          },
          {
            "Name": "join",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "pool_shares_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "max_amounts_in",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              }
            ],
            "Index": 2,
            "Docs": [
              "Join the liquidity pool for the specified market.",
              "",
              "The LP receives pool shares in exchange for staking outcome tokens into the pool. The",
              "`max_amounts_in` vector specifies the maximum number of each outcome token that the LP is",
              "willing to deposit. These amounts are used to adjust the outcome balances in the pool",
              "according to the new proportion of pool shares owned by the LP.",
              "",
              "Note that the user must acquire the outcome tokens in a separate transaction, either by",
              "buying from the pool or by using complete set operations.",
              "",
              "# Parameters",
              "",
              "- `market_id`: Identifier for the market related to the pool.",
              "- `pool_shares_amount`: The number of new pool shares the LP will receive.",
              "- `max_amounts_in`: Vector of the maximum amounts of each outcome token the LP is",
              "  willing to deposit (with outcomes specified in the order of `MarketCommonsApi`).",
              "",
              "# Complexity",
              "",
              "`O(n + d)` where `n` is the number of assets in the pool and `d` is the depth of the",
              "pool's liquidity tree, or, equivalently, `log_2(m)` where `m` is the number of liquidity",
              "providers in the pool."
            ]
          },
          {
            "Name": "exit",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "pool_shares_amount_out",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "min_amounts_out",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              }
            ],
            "Index": 3,
            "Docs": [
              "Exit the liquidity pool for the specified market.",
              "",
              "The LP relinquishes pool shares in exchange for withdrawing outcome tokens from the",
              "pool. The `min_amounts_out` vector specifies the minimum number of each outcome token",
              "that the LP expects to withdraw. These minimum amounts are used to adjust the outcome",
              "balances in the pool, taking into account the reduction in the LP's pool share",
              "ownership.",
              "",
              "The transaction will fail unless the LP withdraws their fees from the pool beforehand. A",
              "batch transaction is very useful here.",
              "",
              "If the LP withdraws all pool shares that exist, then the pool is afterwards destroyed. A",
              "new pool can be deployed at any time, provided that the market is still open. If there",
              "are funds left in the pool account (this can happen due to exit fees), the remaining",
              "funds are destroyed.",
              "",
              "The LP is not allowed to leave a positive but small amount liquidity in the pool. If the",
              "liquidity parameter drops below a certain threshold, the transaction will fail. The only",
              "solution is to withdraw _all_ liquidity and let the pool die.",
              "",
              "# Parameters",
              "",
              "- `market_id`: Identifier for the market related to the pool.",
              "- `pool_shares_amount_out`: The number of pool shares the LP will relinquish.",
              "- `min_amounts_out`: Vector of the minimum amounts of each outcome token the LP expects",
              "  to withdraw (with outcomes specified in the order given by `MarketCommonsApi`).",
              "",
              "# Complexity",
              "",
              "`O(n + d)` where `n` is the number of assets in the pool and `d` is the depth of the",
              "pool's liquidity tree, or, equivalently, `log_2(m)` where `m` is the number of liquidity",
              "providers in the pool."
            ]
          },
          {
            "Name": "withdraw_fees",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 4,
            "Docs": [
              "Withdraw swap fees from the specified market.",
              "",
              "The transaction will fail if the caller is not a liquidity provider. Should always be",
              "used before calling `exit`.",
              "",
              "# Parameters",
              "",
              "- `market_id`: Identifier for the market related to the pool.",
              "",
              "# Complexity",
              "",
              "`O(1)`."
            ]
          },
          {
            "Name": "deploy_pool",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "spot_prices",
                "TypeName": "Vec<BalanceOf<T>>",
                "TypeId": 96
              },
              {
                "Name": "swap_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 5,
            "Docs": [
              "Deploy a pool for the specified market and provide liquidity.",
              "",
              "The sender specifies a vector of `spot_prices` for the market's outcomes in the order",
              "given by the `MarketCommonsApi`. The transaction will fail if the spot prices don't add",
              "up to exactly `BASE`.",
              "",
              "Depending on the values in the `spot_prices`, the transaction will transfer different",
              "amounts of each outcome to the pool. The sender specifies a maximum `amount` of outcome",
              "tokens to spend.",
              "",
              "Note that the sender must acquire the outcome tokens in a separate transaction by using",
              "complete set operations. It's therefore convenient to batch this function together with",
              "a `buy_complete_set` with `amount` as amount of complete sets to buy.",
              "",
              "Deploying the pool will cost the signer an additional fee to the tune of the",
              "collateral's existential deposit. This fee is placed in the pool account and ensures",
              "that swap fees can be stored in the pool account without triggering dusting or failed",
              "transfers.",
              "",
              "The operation is currently limited to binary and scalar markets.",
              "",
              "# Complexity",
              "",
              "`O(n)` where `n` is the number of assets in the pool."
            ]
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "326": {
        "Variants": [
          {
            "Name": "remove_order",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Removes an order.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "fill_order",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 6
              },
              {
                "Name": "maker_partial_fill",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 101
              }
            ],
            "Index": 1,
            "Docs": [
              "Fill an existing order entirely (`maker_partial_fill` = None)",
              "or partially (`maker_partial_fill` = Some(partial_amount)).",
              "",
              "External fees are paid in the base asset.",
              "",
              "NOTE: The `maker_partial_fill` is the partial amount",
              "of what the maker wants to get filled.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "place_order",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 155
              },
              {
                "Name": "maker_asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "maker_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              },
              {
                "Name": "taker_asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              },
              {
                "Name": "taker_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 2,
            "Docs": [
              "Place a new order.",
              "",
              "# Weight",
              "",
              "Complexity: `O(1)`"
            ]
          }
        ],
        "Path": [
          "zrml_orderbook",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "327": {
        "Variants": [
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset<MarketIdOf<T>>",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 155
              }
            ],
            "Index": 0,
            "Docs": [
              "Buy parimutuel shares for the market's base asset.",
              "",
              "# Arguments",
              "",
              "- `asset`: The outcome asset to buy the shares of.",
              "- `amount`: The amount of base asset to spend",
              "and of parimutuel shares to receive.",
              "Keep in mind that there are external fees taken from this amount.",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "claim_rewards",
            "TypeFields": [
              {
                "Name": "market_id",
                "TypeName": "MarketIdOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Claim winnings from a resolved market.",
              "",
              "Complexity: `O(1)`"
            ]
          },
          {
            "Name": "claim_refunds",
            "TypeFields": [
              {
                "Name": "refund_asset",
                "TypeName": "AssetOf<T>",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Refund the base asset of losing categorical outcome assets",
              "in case that there was no account betting on the winner outcome.",
              "",
              "# Arguments",
              "",
              "- `refund_asset`: The outcome asset to refund.",
              "",
              "Complexity: `O(1)`"
            ]
          }
        ],
        "Path": [
          "zrml_parimutuel",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "328": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 329
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "enact_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "329": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 330
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 332
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 334
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 336
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "330": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 331
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 7
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 11
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "331": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "332": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 333
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "333": {
        "TypeFields": [
          {
            "TypeId": 215
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "334": {
        "TypeId": 335,
        "TypeDef": "Sequence"
      },
      "335": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 7
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "336": {
        "TypeFields": [
          {
            "TypeId": 339
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 199
          },
          {
            "Name": "V",
            "TypeId": 337
          }
        ],
        "TypeDef": "Composite"
      },
      "337": {
        "TypeId": 338,
        "TypeDef": "Sequence"
      },
      "338": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 7
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "339": {
        "TypeId": 340,
        "TypeDef": "Sequence"
      },
      "340": {
        "TypeIds": [
          199,
          337
        ],
        "TypeDef": "Tuple"
      },
      "341": {
        "Variants": [
          {
            "Name": "set_staking_expectations",
            "TypeFields": [
              {
                "Name": "expectations",
                "TypeName": "Range<BalanceOf<T>>",
                "TypeId": 342
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the expectations for total staked. These expectations determine the issuance for",
              "the round according to logic in `fn compute_issuance`"
            ]
          },
          {
            "Name": "set_inflation",
            "TypeFields": [
              {
                "Name": "schedule",
                "TypeName": "Range<Perbill>",
                "TypeId": 343
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the annual inflation rate to derive per-round inflation"
            ]
          },
          {
            "Name": "set_parachain_bond_account",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the account that will hold funds set aside for parachain bond"
            ]
          },
          {
            "Name": "set_parachain_bond_reserve_percent",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Percent",
                "TypeId": 136
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the percent of inflation set aside for parachain bond"
            ]
          },
          {
            "Name": "set_total_selected",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the total number of collator candidates selected per round",
              "- changes are not applied until the start of the next round"
            ]
          },
          {
            "Name": "set_collator_commission",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Perbill",
                "TypeId": 80
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the commission for all collators"
            ]
          },
          {
            "Name": "set_blocks_per_round",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 6,
            "Docs": [
              "Set blocks per round",
              "- if called with `new` less than length of current round, will transition immediately",
              "in the next block",
              "- also updates per-round inflation config"
            ]
          },
          {
            "Name": "join_candidates",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 7,
            "Docs": [
              "Join the set of collator candidates"
            ]
          },
          {
            "Name": "schedule_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 8,
            "Docs": [
              "Request to leave the set of candidates. If successful, the account is immediately",
              "removed from the candidate pool to prevent selection as a collator."
            ]
          },
          {
            "Name": "execute_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate_delegation_count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 9,
            "Docs": [
              "Execute leave candidates request"
            ]
          },
          {
            "Name": "cancel_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 10,
            "Docs": [
              "Cancel open request to leave candidates",
              "- only callable by collator account",
              "- result upon successful call is the candidate is active in the candidate pool"
            ]
          },
          {
            "Name": "go_offline",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Temporarily leave the set of collator candidates without unbonding"
            ]
          },
          {
            "Name": "go_online",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Rejoin the set of collator candidates if previously had called `go_offline`"
            ]
          },
          {
            "Name": "candidate_bond_more",
            "TypeFields": [
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Increase collator candidate self bond by `more`"
            ]
          },
          {
            "Name": "schedule_candidate_bond_less",
            "TypeFields": [
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Request by collator candidate to decrease self bond by `less`"
            ]
          },
          {
            "Name": "execute_candidate_bond_less",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 15,
            "Docs": [
              "Execute pending request to adjust the collator candidate self bond"
            ]
          },
          {
            "Name": "cancel_candidate_bond_less",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Cancel pending request to adjust the collator candidate self bond"
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate_delegation_count",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "delegation_count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 17,
            "Docs": [
              "If caller is not a delegator and not a collator, then join the set of delegators",
              "If caller is a delegator, then makes delegation to change their delegation state"
            ]
          },
          {
            "Name": "delegate_with_auto_compound",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "auto_compound",
                "TypeName": "Percent",
                "TypeId": 136
              },
              {
                "Name": "candidate_delegation_count",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "candidate_auto_compounding_delegation_count",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "delegation_count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 18,
            "Docs": [
              "If caller is not a delegator and not a collator, then join the set of delegators",
              "If caller is a delegator, then makes delegation to change their delegation state",
              "Sets the auto-compound config for the delegation"
            ]
          },
          {
            "Name": "schedule_leave_delegators",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "DEPRECATED use batch util with schedule_revoke_delegation for all delegations",
              "Request to leave the set of delegators. If successful, the caller is scheduled to be",
              "allowed to exit via a [DelegationAction::Revoke] towards all existing delegations.",
              "Success forbids future delegation requests until the request is invoked or cancelled."
            ]
          },
          {
            "Name": "execute_leave_delegators",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegation_count",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 20,
            "Docs": [
              "DEPRECATED use batch util with execute_delegation_request for all delegations",
              "Execute the right to exit the set of delegators and revoke all ongoing delegations."
            ]
          },
          {
            "Name": "cancel_leave_delegators",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "DEPRECATED use batch util with cancel_delegation_request for all delegations",
              "Cancel a pending request to exit the set of delegators. Success clears the pending exit",
              "request (thereby resetting the delay upon another `leave_delegators` call)."
            ]
          },
          {
            "Name": "schedule_revoke_delegation",
            "TypeFields": [
              {
                "Name": "collator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 22,
            "Docs": [
              "Request to revoke an existing delegation. If successful, the delegation is scheduled",
              "to be allowed to be revoked via the `execute_delegation_request` extrinsic.",
              "The delegation receives no rewards for the rounds while a revoke is pending.",
              "A revoke may not be performed if any other scheduled request is pending."
            ]
          },
          {
            "Name": "delegator_bond_more",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 23,
            "Docs": [
              "Bond more for delegators wrt a specific collator candidate."
            ]
          },
          {
            "Name": "schedule_delegator_bond_less",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Request bond less for delegators wrt a specific collator candidate. The delegation's",
              "rewards for rounds while the request is pending use the reduced bonded amount.",
              "A bond less may not be performed if any other scheduled request is pending."
            ]
          },
          {
            "Name": "execute_delegation_request",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 25,
            "Docs": [
              "Execute pending request to change an existing delegation"
            ]
          },
          {
            "Name": "cancel_delegation_request",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 26,
            "Docs": [
              "Cancel request to change an existing delegation."
            ]
          },
          {
            "Name": "set_auto_compound",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "Percent",
                "TypeId": 136
              },
              {
                "Name": "candidate_auto_compounding_delegation_count_hint",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "delegation_count_hint",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 27,
            "Docs": [
              "Sets the auto-compounding reward percentage for a delegation."
            ]
          },
          {
            "Name": "hotfix_remove_delegation_requests_exited_candidates",
            "TypeFields": [
              {
                "Name": "candidates",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 78
              }
            ],
            "Index": 28,
            "Docs": [
              "Hotfix to remove existing empty entries for candidates that have left."
            ]
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "342": {
        "TypeFields": [
          {
            "Name": "min",
            "TypeName": "T",
            "TypeId": 6
          },
          {
            "Name": "ideal",
            "TypeName": "T",
            "TypeId": 6
          },
          {
            "Name": "max",
            "TypeName": "T",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "inflation",
          "Range"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "343": {
        "TypeFields": [
          {
            "Name": "min",
            "TypeName": "T",
            "TypeId": 80
          },
          {
            "Name": "ideal",
            "TypeName": "T",
            "TypeId": 80
          },
          {
            "Name": "max",
            "TypeName": "T",
            "TypeId": 80
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "inflation",
          "Range"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 80
          }
        ],
        "TypeDef": "Composite"
      },
      "344": {
        "Variants": [
          {
            "Name": "kick_off_authorship_validation",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "This inherent is a workaround to run code after the \"real\" inherents have executed,",
              "but before transactions are executed."
            ]
          }
        ],
        "Path": [
          "pallet_author_inherent",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "345": {
        "Variants": [
          {
            "Name": "set_eligible",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "EligibilityValue",
                "TypeId": 138
              }
            ],
            "Index": 0,
            "Docs": [
              "Update the eligible count. Intended to be called by governance."
            ]
          }
        ],
        "Path": [
          "pallet_author_slot_filter",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "346": {
        "Variants": [
          {
            "Name": "add_association",
            "TypeFields": [
              {
                "Name": "nimbus_id",
                "TypeName": "NimbusId",
                "TypeId": 140
              }
            ],
            "Index": 0,
            "Docs": [
              "Register your NimbusId onchain so blocks you author are associated with your account.",
              "",
              "Users who have been (or will soon be) elected active collators in staking,",
              "should submit this extrinsic to have their blocks accepted and earn rewards."
            ]
          },
          {
            "Name": "update_association",
            "TypeFields": [
              {
                "Name": "old_nimbus_id",
                "TypeName": "NimbusId",
                "TypeId": 140
              },
              {
                "Name": "new_nimbus_id",
                "TypeName": "NimbusId",
                "TypeId": 140
              }
            ],
            "Index": 1,
            "Docs": [
              "Change your Mapping.",
              "",
              "This is useful for normal key rotation or for when switching from one physical collator",
              "machine to another. No new security deposit is required.",
              "This sets keys to new_nimbus_id.into() by default."
            ]
          },
          {
            "Name": "clear_association",
            "TypeFields": [
              {
                "Name": "nimbus_id",
                "TypeName": "NimbusId",
                "TypeId": 140
              }
            ],
            "Index": 2,
            "Docs": [
              "Clear your Mapping.",
              "",
              "This is useful when you are no longer an author and would like to re-claim your security",
              "deposit."
            ]
          },
          {
            "Name": "remove_keys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Remove your Mapping.",
              "",
              "This is useful when you are no longer an author and would like to re-claim your security",
              "deposit."
            ]
          },
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "Set association and session keys at once.",
              "",
              "This is useful for key rotation to update Nimbus and VRF keys in one call.",
              "No new security deposit is required. Will replace `update_association` which is kept",
              "now for backwards compatibility reasons."
            ]
          }
        ],
        "Path": [
          "pallet_author_mapping",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "347": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Service a single overweight message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "348": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 349
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                "TypeId": 361
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than the",
              "maximum amount of weight that the message could take to be executed, then no execution",
              "attempt will be made.",
              "",
              "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
              "to completion; only that *some* of it was executed."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 148
              },
              {
                "Name": "xcm_version",
                "TypeName": "XcmVersion",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 44
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be Root.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "349": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 350
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 158
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "350": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 351
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "351": {
        "TypeId": 352,
        "TypeDef": "Sequence"
      },
      "352": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 353
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 189
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 186
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 360
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 350
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 350
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "353": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 354
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 7
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "354": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 355
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 355
          }
        ],
        "TypeDef": "Variant"
      },
      "355": {
        "TypeIds": [
          7,
          356
        ],
        "TypeDef": "Tuple"
      },
      "356": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 4
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 4
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "357": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 358
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "358": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 187
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 359
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "359": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "360": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "361": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 362
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 366
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "362": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 363
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "363": {
        "TypeId": 364,
        "TypeDef": "Sequence"
      },
      "364": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 353
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 365
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 189
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 350
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 357
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 186
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 360
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 362
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 362
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "365": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "366": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 367
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "367": {
        "TypeId": 368,
        "TypeDef": "Sequence"
      },
      "368": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 168
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 365
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 149
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 148
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 366
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 366
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 161
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 161
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 169
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 174
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 151
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 151
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 150
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 153
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 149
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 158
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 163
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 148
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "369": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Services a single overweight XCM.",
              "",
              "- `origin`: Must pass `ExecuteOverweightOrigin`.",
              "- `index`: The index of the overweight XCM to service",
              "- `weight_limit`: The amount of weight that XCM execution may take.",
              "",
              "Errors:",
              "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
              "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
              "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
              "",
              "Events:",
              "- `OverweightServiced`: On success."
            ]
          },
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
              "suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
              "messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
              "message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          },
          {
            "Name": "update_threshold_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 6,
            "Docs": [
              "Overwrites the amount of remaining weight under which we stop processing messages.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.threshold_weight`"
            ]
          },
          {
            "Name": "update_weight_restrict_decay",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 7,
            "Docs": [
              "Overwrites the speed to which the available weight approaches the maximum weight.",
              "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
            ]
          },
          {
            "Name": "update_xcmp_max_individual_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 8,
            "Docs": [
              "Overwrite the maximum amount of weight any individual message may consume.",
              "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "370": {
        "Variants": [
          {
            "Name": "register_asset",
            "TypeFields": [
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<T::Balance, T::CustomMetadata>",
                "TypeId": 201
              },
              {
                "Name": "asset_id",
                "TypeName": "Option<T::AssetId>",
                "TypeId": 371
              }
            ],
            "Index": 0
          },
          {
            "Name": "update_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 63
              },
              {
                "Name": "decimals",
                "TypeName": "Option<u32>",
                "TypeId": 44
              },
              {
                "Name": "name",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 372
              },
              {
                "Name": "symbol",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 372
              },
              {
                "Name": "existential_deposit",
                "TypeName": "Option<T::Balance>",
                "TypeId": 101
              },
              {
                "Name": "location",
                "TypeName": "Option<Option<VersionedMultiLocation>>",
                "TypeId": 373
              },
              {
                "Name": "additional",
                "TypeName": "Option<T::CustomMetadata>",
                "TypeId": 374
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "orml_asset_registry",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "371": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 63
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 63
          }
        ],
        "TypeDef": "Variant"
      },
      "372": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "373": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 204
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 204
          }
        ],
        "TypeDef": "Variant"
      },
      "374": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 202
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 202
          }
        ],
        "TypeDef": "Variant"
      },
      "375": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer native currencies.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 376
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer `MultiAsset`.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_with_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 63
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer native currencies specifying the fee and amount as",
              "separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the amount to be spent to pay for execution in destination",
              "chain. Both fee and amount will be subtracted form the callers",
              "balance.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset_with_fee",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 376
              },
              {
                "Name": "fee",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 376
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 3,
            "Docs": [
              "Transfer `MultiAsset` specifying the fee and amount as separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the multiasset to be spent to pay for execution in",
              "destination chain. Both fee and amount will be subtracted form the",
              "callers balance For now we only accept fee and asset having the same",
              "`MultiLocation` id.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multicurrencies",
            "TypeFields": [
              {
                "Name": "currencies",
                "TypeName": "Vec<(T::CurrencyId, T::Balance)>",
                "TypeId": 93
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer several currencies specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the currencies tuple that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiassets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 5,
            "Docs": [
              "Transfer several `MultiAsset` specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the MultiAssets that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "376": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAsset",
                "TypeId": 186
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAsset",
                "TypeId": 163
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "377": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "TypeId": 231,
        "TypeDef": "Sequence"
      },
      "379": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "380": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 99
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 381
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 7
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 44
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "381": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 99
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 99
          }
        ],
        "TypeDef": "Variant"
      },
      "382": {
        "TypeIds": [
          11,
          7
        ],
        "TypeDef": "Tuple"
      },
      "383": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "384": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "385": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 388
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 386
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "386": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 66
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 387
          }
        ],
        "Path": [
          "pallet_balances",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "387": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "388": {
        "TypeId": 386,
        "TypeDef": "Sequence"
      },
      "389": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 391
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 390
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "390": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 66
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 66
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "TypeId": 390,
        "TypeDef": "Sequence"
      },
      "392": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed MaxReserves"
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "393": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "394": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "395": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "396": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 397
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 7
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "397": {
        "TypeId": 7,
        "TypeDef": "Sequence"
      },
      "398": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "399": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 66
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "400": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "401": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 402
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 243
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "402": {
        "TypeId": 243,
        "TypeDef": "Sequence"
      },
      "403": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_vesting",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "404": {
        "Variants": [
          {
            "Name": "NotVesting",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account given is not vesting."
            ]
          },
          {
            "Name": "AtMaxVestingSchedules",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "Name": "ScheduleIndexOutOfBounds",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "Name": "InvalidScheduleParams",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the vesting pallet."
        ]
      },
      "405": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "406": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 41
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 407
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "407": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 78
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "408": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "409": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "curator_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "BountyStatus<AccountId, BlockNumber>",
            "TypeId": 410
          }
        ],
        "Path": [
          "pallet_bounties",
          "Bounty"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "410": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Funded",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CuratorProposed",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "update_due",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4
          },
          {
            "Name": "PendingPayout",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "unlock_at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_bounties",
          "BountyStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "411": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "412": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "ReasonTooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The reason given is just too big."
            ]
          },
          {
            "Name": "UnexpectedStatus",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The bounty status is unexpected."
            ]
          },
          {
            "Name": "RequireCurator",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Require bounty curator."
            ]
          },
          {
            "Name": "InvalidValue",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Invalid bounty value."
            ]
          },
          {
            "Name": "InvalidFee",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid bounty fee."
            ]
          },
          {
            "Name": "PendingPayout",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "A bounty payout is pending.",
              "To cancel the bounty, you must unassign and slash the curator."
            ]
          },
          {
            "Name": "Premature",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The bounties cannot be claimed/closed because it's still in the countdown period."
            ]
          },
          {
            "Name": "HasActiveChildBounty",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The bounty cannot be closed because it has active child bounties."
            ]
          },
          {
            "Name": "TooManyQueued",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Too many approvals are already queued."
            ]
          }
        ],
        "Path": [
          "pallet_bounties",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "413": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 415
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 414
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "414": {
        "TypeIds": [
          7,
          233,
          0
        ],
        "TypeDef": "Tuple"
      },
      "415": {
        "TypeId": 414,
        "TypeDef": "Sequence"
      },
      "416": {
        "TypeIds": [
          407,
          6
        ],
        "TypeDef": "Tuple"
      },
      "417": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 418
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 50
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 233
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "418": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 233
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 46
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 419
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 233
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "419": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "420": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 421
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 424
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 425
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 248
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 424
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 425
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "421": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 423
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 422
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "422": {
        "TypeIds": [
          7,
          47
        ],
        "TypeDef": "Tuple"
      },
      "423": {
        "TypeId": 422,
        "TypeDef": "Sequence"
      },
      "424": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "425": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "426": {
        "TypeIds": [
          233,
          46
        ],
        "TypeDef": "Tuple"
      },
      "427": {
        "TypeIds": [
          4,
          407
        ],
        "TypeDef": "Tuple"
      },
      "428": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "429": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 208
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "430": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 7
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 7
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 78
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 78
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "431": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "432": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 78
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "433": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "434": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 208
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "435": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "436": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 78
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "437": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "438": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 208
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "439": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "440": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 78
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "441": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "442": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 443
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo<MaxAdditionalFields>",
            "TypeId": 259
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "MaxAdditionalFields"
          }
        ],
        "TypeDef": "Composite"
      },
      "443": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 445
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 444
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "444": {
        "TypeIds": [
          7,
          297
        ],
        "TypeDef": "Tuple"
      },
      "445": {
        "TypeId": 444,
        "TypeDef": "Sequence"
      },
      "446": {
        "TypeIds": [
          6,
          447
        ],
        "TypeDef": "Tuple"
      },
      "447": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 78
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "448": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 451
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 449
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "449": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 450
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 450
          }
        ],
        "TypeDef": "Variant"
      },
      "450": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdentityFields",
            "TypeId": 295
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "451": {
        "TypeId": 449,
        "TypeDef": "Sequence"
      },
      "452": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyFields",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Too many additional fields."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "453": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "454": {
        "TypeIds": [
          455,
          6
        ],
        "TypeDef": "Tuple"
      },
      "455": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 457
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 456
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "456": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 59
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 59
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "457": {
        "TypeId": 456,
        "TypeDef": "Sequence"
      },
      "458": {
        "TypeIds": [
          459,
          6
        ],
        "TypeDef": "Tuple"
      },
      "459": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 461
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 460
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "460": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 11
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 11
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "461": {
        "TypeId": 460,
        "TypeDef": "Sequence"
      },
      "462": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "463": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "TypeFields": [
          {
            "Name": "instruction_weights_version",
            "TypeName": "u32",
            "TypeId": 151
          },
          {
            "Name": "initial",
            "TypeName": "u32",
            "TypeId": 151
          },
          {
            "Name": "maximum",
            "TypeName": "u32",
            "TypeId": 151
          },
          {
            "Name": "code",
            "TypeName": "RelaxedCodeVec<T>",
            "TypeId": 465
          },
          {
            "Name": "determinism",
            "TypeName": "Determinism",
            "TypeId": 312
          }
        ],
        "Path": [
          "pallet_contracts",
          "wasm",
          "PrefabWasmModule"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "465": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "466": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountIdOf<T>",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 155
          },
          {
            "Name": "refcount",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "pallet_contracts",
          "wasm",
          "OwnerInfo"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "467": {
        "TypeFields": [
          {
            "Name": "trie_id",
            "TypeName": "TrieId",
            "TypeId": 377
          },
          {
            "Name": "code_hash",
            "TypeName": "CodeHash<T>",
            "TypeId": 11
          },
          {
            "Name": "storage_bytes",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "storage_items",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "storage_byte_deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "storage_item_deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "storage_base_deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_contracts",
          "storage",
          "ContractInfo"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "468": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 470
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 469
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "469": {
        "TypeFields": [
          {
            "Name": "trie_id",
            "TypeName": "TrieId",
            "TypeId": 377
          }
        ],
        "Path": [
          "pallet_contracts",
          "storage",
          "DeletedContract"
        ],
        "TypeDef": "Composite"
      },
      "470": {
        "TypeId": 469,
        "TypeDef": "Sequence"
      },
      "471": {
        "TypeFields": [
          {
            "Name": "limits",
            "TypeName": "Limits",
            "TypeId": 472
          },
          {
            "Name": "instruction_weights",
            "TypeName": "InstructionWeights<T>",
            "TypeId": 473
          },
          {
            "Name": "host_fn_weights",
            "TypeName": "HostFnWeights<T>",
            "TypeId": 474
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "Schedule"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "472": {
        "TypeFields": [
          {
            "Name": "event_topics",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "globals",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "locals",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "parameters",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "memory_pages",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "table_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "br_table_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "subject_len",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "payload_len",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "Limits"
        ],
        "TypeDef": "Composite"
      },
      "473": {
        "TypeFields": [
          {
            "Name": "version",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "fallback",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64const",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64load",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64store",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "select",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "r#if",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "br",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "br_if",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "br_table",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "br_table_per_entry",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "call",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "call_indirect",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "call_indirect_per_param",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "call_per_local",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "local_get",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "local_set",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "local_tee",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "global_get",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "global_set",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "memory_current",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "memory_grow",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64clz",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64ctz",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64popcnt",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64eqz",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64extendsi32",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64extendui32",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i32wrapi64",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64eq",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64ne",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64lts",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64ltu",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64gts",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64gtu",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64les",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64leu",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64ges",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64geu",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64add",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64sub",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64mul",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64divs",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64divu",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64rems",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64remu",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64and",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64or",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64xor",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64shl",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64shrs",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64shru",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64rotl",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "i64rotr",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "InstructionWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "474": {
        "TypeFields": [
          {
            "Name": "caller",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "is_contract",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "code_hash",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "own_code_hash",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "caller_is_origin",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "address",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gas_left",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "balance",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "value_transferred",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "minimum_balance",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "block_number",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "now",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "weight_to_fee",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "input",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "input_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "r#return",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "return_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "terminate",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "random",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "deposit_event",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "deposit_event_per_topic",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "deposit_event_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "debug_message",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "set_storage",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "set_storage_per_new_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "set_storage_per_old_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "set_code_hash",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "clear_storage",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "clear_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "contains_storage",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "contains_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "get_storage",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "get_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "take_storage",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "take_storage_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "transfer",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "call",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "delegate_call",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "call_transfer_surcharge",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "call_per_cloned_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "instantiate",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "instantiate_transfer_surcharge",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "instantiate_per_input_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "instantiate_per_salt_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_sha2_256",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_sha2_256_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_keccak_256",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_keccak_256_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_blake2_256",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_blake2_256_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_blake2_128",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "hash_blake2_128_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "ecdsa_recover",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "ecdsa_to_eth_address",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "reentrance_count",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "account_reentrance_count",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "instantiation_nonce",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_contracts",
          "schedule",
          "HostFnWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "475": {
        "Variants": [
          {
            "Name": "InvalidScheduleVersion",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A new schedule must have a greater version than the current one."
            ]
          },
          {
            "Name": "InvalidCallFlags",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
            ]
          },
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The executed contract exhausted its gas limit."
            ]
          },
          {
            "Name": "OutputBufferTooSmall",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The output buffer supplied to a contract API call was too small."
            ]
          },
          {
            "Name": "TransferFailed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Performing the requested transfer failed. Probably because there isn't enough",
              "free balance in the sender's account."
            ]
          },
          {
            "Name": "MaxCallDepthReached",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Performing a call was denied because the calling depth reached the limit",
              "of what is specified in the schedule."
            ]
          },
          {
            "Name": "ContractNotFound",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No contract was found at the specified address."
            ]
          },
          {
            "Name": "CodeTooLarge",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
              "current schedule."
            ]
          },
          {
            "Name": "CodeNotFound",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "No code could be found at the supplied code hash."
            ]
          },
          {
            "Name": "OutOfBounds",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "A buffer outside of sandbox memory was passed to a contract API function."
            ]
          },
          {
            "Name": "DecodingFailed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Input passed to a contract API function failed to decode as expected type."
            ]
          },
          {
            "Name": "ContractTrapped",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Contract trapped during execution."
            ]
          },
          {
            "Name": "ValueTooLarge",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The size defined in `T::MaxValueSize` was exceeded."
            ]
          },
          {
            "Name": "TerminatedWhileReentrant",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Termination of a contract is not allowed while the contract is already",
              "on the call stack. Can be triggered by `seal_terminate`."
            ]
          },
          {
            "Name": "InputForwarded",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "`seal_call` forwarded this contracts input. It therefore is no longer available."
            ]
          },
          {
            "Name": "RandomSubjectTooLong",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The subject passed to `seal_random` exceeds the limit."
            ]
          },
          {
            "Name": "TooManyTopics",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The amount of topics passed to `seal_deposit_events` exceeds the limit."
            ]
          },
          {
            "Name": "NoChainExtension",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The chain does not provide a chain extension. Calling the chain extension results",
              "in this error. Note that this usually  shouldn't happen as deploying such contracts",
              "is rejected."
            ]
          },
          {
            "Name": "DeletionQueueFull",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Removal of a contract failed because the deletion queue is full.",
              "",
              "This can happen when calling `seal_terminate`.",
              "The queue is filled by deleting contracts and emptied by a fixed amount each block.",
              "Trying again during another block is the only way to resolve this issue."
            ]
          },
          {
            "Name": "DuplicateContract",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "A contract with the same AccountId already exists."
            ]
          },
          {
            "Name": "TerminatedInConstructor",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "A contract self destructed in its constructor.",
              "",
              "This can be triggered by a call to `seal_terminate`."
            ]
          },
          {
            "Name": "DebugMessageInvalidUTF8",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The debug message specified to `seal_debug_message` does contain invalid UTF-8."
            ]
          },
          {
            "Name": "ReentranceDenied",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "A call tried to invoke a contract that is flagged as non-reentrant."
            ]
          },
          {
            "Name": "StorageDepositNotEnoughFunds",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Origin doesn't have enough balance to pay the required storage deposits."
            ]
          },
          {
            "Name": "StorageDepositLimitExhausted",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "More storage was created than allowed by the storage deposit limit."
            ]
          },
          {
            "Name": "CodeInUse",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Code removal was denied because the code is still in use by at least one contract."
            ]
          },
          {
            "Name": "ContractReverted",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The contract ran to completion but decided to revert its storage changes.",
              "Please note that this error is only returned from extrinsics. When called directly",
              "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
              "to determine whether a reversion has taken place."
            ]
          },
          {
            "Name": "CodeRejected",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The contract's code was found to be invalid during validation or instrumentation.",
              "",
              "The most likely cause of this is that an API was used which is not supported by the",
              "node. This hapens if an older node is used with a new version of ink!. Try updating",
              "your node to the newest available version.",
              "",
              "A more detailed error can be found on the node console if debug messages are enabled",
              "by supplying `-lruntime::contracts=debug`."
            ]
          },
          {
            "Name": "Indeterministic",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "An indetermistic code was used in a context where this is not permitted."
            ]
          }
        ],
        "Path": [
          "pallet_contracts",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "476": {
        "Variants": [
          {
            "Name": "AmountIntoBalanceFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unable to convert the Amount type into Balance."
            ]
          },
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Balance is too low."
            ]
          },
          {
            "Name": "DepositFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Deposit result is not expected"
            ]
          }
        ],
        "Path": [
          "orml_currencies",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "477": {
        "TypeIds": [
          0,
          63
        ],
        "TypeDef": "Tuple"
      },
      "478": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 480
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 479
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "479": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 66
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "480": {
        "TypeId": 479,
        "TypeDef": "Sequence"
      },
      "481": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "482": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 484
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 483
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "483": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 66
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 66
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "484": {
        "TypeId": 483,
        "TypeDef": "Sequence"
      },
      "485": {
        "Variants": [
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The balance is too low"
            ]
          },
          {
            "Name": "AmountIntoBalanceFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot convert Amount into Balance type"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed because liquidity restrictions due to locking"
            ]
          },
          {
            "Name": "MaxLocksExceeded",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Failed because the maximum locks was exceeded"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "486": {
        "Variants": [
          {
            "Name": "MarketDoesNotExist",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A market with the provided ID does not exist."
            ]
          },
          {
            "Name": "MarketPoolDoesNotExist",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Market does not have an stored associated pool id."
            ]
          },
          {
            "Name": "NoMarketHasBeenCreated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "It is not possible to fetch the latest market ID when",
              "no market has been created."
            ]
          },
          {
            "Name": "NoReport",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Market does not have a report"
            ]
          },
          {
            "Name": "PoolAlreadyExists",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There's a pool registered for this market already."
            ]
          }
        ],
        "Path": [
          "zrml_market_commons",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "487": {
        "TypeFields": [
          {
            "Name": "resolve_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "outcome",
            "TypeName": "OutcomeReport",
            "TypeId": 68
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "AuthorityReport"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "488": {
        "Variants": [
          {
            "Name": "MarketDoesNotHaveDisputeMechanismAuthorized",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The market unexpectedly has the incorrect dispute mechanism."
            ]
          },
          {
            "Name": "MarketIsNotDisputed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "An account attempts to submit a report to an undisputed market."
            ]
          },
          {
            "Name": "OutcomeMismatch",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The report does not match the market's type."
            ]
          }
        ],
        "Path": [
          "zrml_authorized",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "489": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 491
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 490
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "490": {
        "TypeFields": [
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "court_participant",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "consumed_stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "joined_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "CourtPoolItem"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "491": {
        "TypeId": 490,
        "TypeDef": "Sequence"
      },
      "492": {
        "TypeFields": [
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "active_lock",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "prepare_exit_at",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 494
          },
          {
            "Name": "delegations",
            "TypeName": "Option<Delegations>",
            "TypeId": 495
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "CourtParticipantInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Delegations",
            "TypeId": 493
          }
        ],
        "TypeDef": "Composite"
      },
      "493": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 78
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "494": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "495": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 493
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 493
          }
        ],
        "TypeDef": "Variant"
      },
      "496": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 500
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 497
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "497": {
        "TypeFields": [
          {
            "Name": "court_participant",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "weight",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "vote",
            "TypeName": "Vote<Hash, DelegatedStakes>",
            "TypeId": 499
          },
          {
            "Name": "slashable",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "Draw"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Hash",
            "TypeId": 11
          },
          {
            "Name": "DelegatedStakes",
            "TypeId": 498
          }
        ],
        "TypeDef": "Composite"
      },
      "498": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 98
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 99
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "499": {
        "Variants": [
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "delegated_stakes",
                "TypeName": "DelegatedStakes",
                "TypeId": 498
              }
            ],
            "Index": 0
          },
          {
            "Name": "Drawn",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Secret",
            "TypeFields": [
              {
                "Name": "commitment",
                "TypeName": "Hash",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "Revealed",
            "TypeFields": [
              {
                "Name": "commitment",
                "TypeName": "Hash",
                "TypeId": 11
              },
              {
                "Name": "vote_item",
                "TypeName": "VoteItem",
                "TypeId": 73
              },
              {
                "Name": "salt",
                "TypeName": "Hash",
                "TypeId": 11
              }
            ],
            "Index": 3
          },
          {
            "Name": "Denounced",
            "TypeFields": [
              {
                "Name": "commitment",
                "TypeName": "Hash",
                "TypeId": 11
              },
              {
                "Name": "vote_item",
                "TypeName": "VoteItem",
                "TypeId": 73
              },
              {
                "Name": "salt",
                "TypeName": "Hash",
                "TypeId": 11
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "zrml_court",
          "types",
          "Vote"
        ],
        "TypeParams": [
          {
            "Name": "Hash",
            "TypeId": 11
          },
          {
            "Name": "DelegatedStakes",
            "TypeId": 498
          }
        ],
        "TypeDef": "Variant"
      },
      "500": {
        "TypeId": 497,
        "TypeDef": "Sequence"
      },
      "501": {
        "Variants": [
          {
            "Name": "JurorDoesNotExist",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "An account id does not exist on the jurors storage."
            ]
          },
          {
            "Name": "MarketDoesNotHaveCourtMechanism",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "On dispute or resolution, someone tried to pass a non-court market type."
            ]
          },
          {
            "Name": "MarketIsNotDisputed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The market is not in a state where it can be disputed."
            ]
          },
          {
            "Name": "CallerIsNotACourtParticipant",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "This operation requires the caller to be a juror or delegator."
            ]
          },
          {
            "Name": "VoteAlreadyRevealed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The vote is not commitment."
            ]
          },
          {
            "Name": "CommitmentHashMismatch",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The vote item and salt reveal do not match the commitment vote."
            ]
          },
          {
            "Name": "CourtNotFound",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No court for this market id was found."
            ]
          },
          {
            "Name": "NotInVotingPeriod",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "This operation is only allowed in the voting period."
            ]
          },
          {
            "Name": "NotInAggregationPeriod",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "This operation is only allowed in the aggregation period."
            ]
          },
          {
            "Name": "MaxAppealsReached",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The maximum number of appeals has been reached."
            ]
          },
          {
            "Name": "NotInAppealPeriod",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "This operation is only allowed in the appeal period."
            ]
          },
          {
            "Name": "InvalidVoteState",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The caller of this extrinsic needs to be drawn or in the commitment vote state."
            ]
          },
          {
            "Name": "BelowMinJurorStake",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The amount is below the minimum required stake."
            ]
          },
          {
            "Name": "MaxCourtParticipantsReached",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The maximum number of possible jurors has been reached."
            ]
          },
          {
            "Name": "AlreadyPreparedExit",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "In order to exit the court the juror has to exit",
              "the pool first with `prepare_exit_court`."
            ]
          },
          {
            "Name": "JurorNotDrawn",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The juror was not randomly selected for the court."
            ]
          },
          {
            "Name": "JurorDidNotVote",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The juror was drawn but did not manage to commitmently vote within the court."
            ]
          },
          {
            "Name": "VoteAlreadyDenounced",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The juror was already denounced."
            ]
          },
          {
            "Name": "CallerDenouncedItself",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A juror tried to denounce herself."
            ]
          },
          {
            "Name": "CourtNotClosed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The court is not in the closed state."
            ]
          },
          {
            "Name": "CourtAlreadyReassigned",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The juror stakes of the court already got reassigned."
            ]
          },
          {
            "Name": "NotEnoughJurorsAndDelegatorsStake",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "There are not enough jurors in the pool."
            ]
          },
          {
            "Name": "MarketReportNotFound",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The report of the market was not found."
            ]
          },
          {
            "Name": "MaxCourtIdReached",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The maximum number of court ids is reached."
            ]
          },
          {
            "Name": "AmountExceedsBalance",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The caller has not enough funds to join the court with the specified amount."
            ]
          },
          {
            "Name": "AmountBelowLastJoin",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "After the first join of the court the amount has to be equal or higher than the current stake.",
              "This is to ensure the slashable amount in active court rounds",
              "is still smaller or equal to the stake.",
              "It is also necessary to calculate the `unconsumed` stake properly.",
              "Otherwise a juror could just reduce the probability to get selected whenever they want.",
              "But this has to be done by `prepare_exit_court` and `exit_court`.",
              "Additionally, the `join_court` and `delegate` extrinsics",
              "use `extend_lock` and not `set_lock` or `remove_lock`.",
              "This means those extrinsics are not meant to get out, but only to get into the court."
            ]
          },
          {
            "Name": "AmountBelowLowestJuror",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The amount is too low to kick the lowest juror out of the stake-weighted pool."
            ]
          },
          {
            "Name": "CourtParticipantTwiceInPool",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "This should not happen, because the juror account should only be once in a pool."
            ]
          },
          {
            "Name": "CallerNotInSelectedDraws",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "The caller of this function is not part of the juror draws."
            ]
          },
          {
            "Name": "AppealBondExceedsBalance",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "The callers balance is lower than the appeal bond."
            ]
          },
          {
            "Name": "PrematureExit",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "The juror should at least wait one inflation period after the funds can be unstaked.",
              "Otherwise hopping in and out for inflation rewards is possible."
            ]
          },
          {
            "Name": "PrepareExitAtNotPresent",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "The `prepare_exit_at` field is not present."
            ]
          },
          {
            "Name": "MaxDelegationsReached",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "The maximum number of delegations is reached for this account."
            ]
          },
          {
            "Name": "JurorDelegated",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "The juror decided to be a delegator."
            ]
          },
          {
            "Name": "SelfDelegationNotAllowed",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "A delegation to the own account is not possible."
            ]
          },
          {
            "Name": "IdenticalDelegationsNotAllowed",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "The set of delegations has to be distinct."
            ]
          },
          {
            "Name": "NoDelegations",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "The call to `delegate` is not valid if no delegations are provided."
            ]
          },
          {
            "Name": "DelegatedToInvalidJuror",
            "TypeFields": null,
            "Index": 37,
            "Docs": [
              "The set of delegations should contain only valid and active juror accounts."
            ]
          },
          {
            "Name": "MarketIdToCourtIdNotFound",
            "TypeFields": null,
            "Index": 38,
            "Docs": [
              "The market id to court id mapping was not found."
            ]
          },
          {
            "Name": "CourtIdToMarketIdNotFound",
            "TypeFields": null,
            "Index": 39,
            "Docs": [
              "The court id to market id mapping was not found."
            ]
          },
          {
            "Name": "InvalidVoteItemForOutcomeCourt",
            "TypeFields": null,
            "Index": 40,
            "Docs": [
              "The vote item is not valid for this (outcome) court."
            ]
          },
          {
            "Name": "InvalidVoteItemForBinaryCourt",
            "TypeFields": null,
            "Index": 41,
            "Docs": [
              "The vote item is not valid for this (binary) court."
            ]
          },
          {
            "Name": "AppealedVoteItemIsNoOutcome",
            "TypeFields": null,
            "Index": 42,
            "Docs": [
              "The appealed vote item is not an outcome."
            ]
          },
          {
            "Name": "WinnerVoteItemIsNoOutcome",
            "TypeFields": null,
            "Index": 43,
            "Docs": [
              "The winner vote item is not an outcome."
            ]
          },
          {
            "Name": "OutcomeMismatch",
            "TypeFields": null,
            "Index": 44,
            "Docs": [
              "The outcome does not match the market outcomes."
            ]
          },
          {
            "Name": "VoteItemIsNoOutcome",
            "TypeFields": null,
            "Index": 45,
            "Docs": [
              "The vote item was expected to be an outcome, but is actually not an outcome."
            ]
          },
          {
            "Name": "Unexpected",
            "TypeFields": [
              {
                "TypeName": "UnexpectedError",
                "TypeId": 502
              }
            ],
            "Index": 46,
            "Docs": [
              "Action cannot be completed because an unexpected error has occurred. This should be",
              "reported to protocol maintainers."
            ]
          },
          {
            "Name": "InflationExceedsMaxYearlyInflation",
            "TypeFields": null,
            "Index": 47,
            "Docs": [
              "The inflation rate is too high."
            ]
          }
        ],
        "Path": [
          "zrml_court",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "502": {
        "Variants": [
          {
            "Name": "BinarySearchByKeyFailed",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "zrml_court",
          "pallet",
          "UnexpectedError"
        ],
        "TypeDef": "Variant"
      },
      "503": {
        "TypeIds": [
          6,
          0
        ],
        "TypeDef": "Tuple"
      },
      "504": {
        "TypeFields": [
          {
            "Name": "participated_blocks",
            "TypeName": "BN",
            "TypeId": 4
          },
          {
            "Name": "perpetual_incentives",
            "TypeName": "BA",
            "TypeId": 6
          },
          {
            "Name": "total_incentives",
            "TypeName": "BA",
            "TypeId": 6
          },
          {
            "Name": "total_shares",
            "TypeName": "BA",
            "TypeId": 6
          }
        ],
        "Path": [
          "zrml_liquidity_mining",
          "owned_values_params",
          "OwnedValuesParams"
        ],
        "TypeParams": [
          {
            "Name": "BA",
            "TypeId": 6
          },
          {
            "Name": "BN",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "505": {
        "Variants": [
          {
            "Name": "FundDoesNotHaveEnoughBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Pallet account does not have enough funds"
            ]
          }
        ],
        "Path": [
          "zrml_liquidity_mining",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "506": {
        "TypeFields": [
          {
            "Name": "config",
            "TypeName": "RikiddoConfig<FS>",
            "TypeId": 525
          },
          {
            "Name": "fees",
            "TypeName": "FE",
            "TypeId": 518
          },
          {
            "Name": "ma_short",
            "TypeName": "MA",
            "TypeId": 520
          },
          {
            "Name": "ma_long",
            "TypeName": "MA",
            "TypeId": 520
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "rikiddo_sigmoid_mv",
          "RikiddoSigmoidMV"
        ],
        "TypeParams": [
          {
            "Name": "FU",
            "TypeId": 507
          },
          {
            "Name": "FS",
            "TypeId": 517
          },
          {
            "Name": "FE",
            "TypeId": 518
          },
          {
            "Name": "MA",
            "TypeId": 520
          }
        ],
        "TypeDef": "Composite"
      },
      "507": {
        "TypeFields": [
          {
            "Name": "bits",
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "substrate_fixed",
          "FixedU128"
        ],
        "TypeParams": [
          {
            "Name": "Frac",
            "TypeId": 508
          }
        ],
        "TypeDef": "Composite"
      },
      "508": {
        "TypeFields": [
          {
            "Name": "msb",
            "TypeName": "U",
            "TypeId": 509
          },
          {
            "Name": "lsb",
            "TypeName": "B",
            "TypeId": 515
          }
        ],
        "Path": [
          "typenum",
          "uint",
          "UInt"
        ],
        "TypeParams": [
          {
            "Name": "U",
            "TypeId": 509
          },
          {
            "Name": "B",
            "TypeId": 515
          }
        ],
        "TypeDef": "Composite"
      },
      "509": {
        "TypeFields": [
          {
            "Name": "msb",
            "TypeName": "U",
            "TypeId": 510
          },
          {
            "Name": "lsb",
            "TypeName": "B",
            "TypeId": 516
          }
        ],
        "Path": [
          "typenum",
          "uint",
          "UInt"
        ],
        "TypeParams": [
          {
            "Name": "U",
            "TypeId": 510
          },
          {
            "Name": "B",
            "TypeId": 516
          }
        ],
        "TypeDef": "Composite"
      },
      "510": {
        "TypeFields": [
          {
            "Name": "msb",
            "TypeName": "U",
            "TypeId": 511
          },
          {
            "Name": "lsb",
            "TypeName": "B",
            "TypeId": 516
          }
        ],
        "Path": [
          "typenum",
          "uint",
          "UInt"
        ],
        "TypeParams": [
          {
            "Name": "U",
            "TypeId": 511
          },
          {
            "Name": "B",
            "TypeId": 516
          }
        ],
        "TypeDef": "Composite"
      },
      "511": {
        "TypeFields": [
          {
            "Name": "msb",
            "TypeName": "U",
            "TypeId": 512
          },
          {
            "Name": "lsb",
            "TypeName": "B",
            "TypeId": 516
          }
        ],
        "Path": [
          "typenum",
          "uint",
          "UInt"
        ],
        "TypeParams": [
          {
            "Name": "U",
            "TypeId": 512
          },
          {
            "Name": "B",
            "TypeId": 516
          }
        ],
        "TypeDef": "Composite"
      },
      "512": {
        "TypeFields": [
          {
            "Name": "msb",
            "TypeName": "U",
            "TypeId": 513
          },
          {
            "Name": "lsb",
            "TypeName": "B",
            "TypeId": 516
          }
        ],
        "Path": [
          "typenum",
          "uint",
          "UInt"
        ],
        "TypeParams": [
          {
            "Name": "U",
            "TypeId": 513
          },
          {
            "Name": "B",
            "TypeId": 516
          }
        ],
        "TypeDef": "Composite"
      },
      "513": {
        "TypeFields": [
          {
            "Name": "msb",
            "TypeName": "U",
            "TypeId": 514
          },
          {
            "Name": "lsb",
            "TypeName": "B",
            "TypeId": 515
          }
        ],
        "Path": [
          "typenum",
          "uint",
          "UInt"
        ],
        "TypeParams": [
          {
            "Name": "U",
            "TypeId": 514
          },
          {
            "Name": "B",
            "TypeId": 515
          }
        ],
        "TypeDef": "Composite"
      },
      "514": {
        "Path": [
          "typenum",
          "uint",
          "UTerm"
        ],
        "TypeDef": "Composite"
      },
      "515": {
        "Path": [
          "typenum",
          "bit",
          "B1"
        ],
        "TypeDef": "Composite"
      },
      "516": {
        "Path": [
          "typenum",
          "bit",
          "B0"
        ],
        "TypeDef": "Composite"
      },
      "517": {
        "TypeFields": [
          {
            "Name": "bits",
            "TypeName": "i128",
            "TypeId": 314
          }
        ],
        "Path": [
          "substrate_fixed",
          "FixedI128"
        ],
        "TypeParams": [
          {
            "Name": "Frac",
            "TypeId": 508
          }
        ],
        "TypeDef": "Composite"
      },
      "518": {
        "TypeFields": [
          {
            "Name": "config",
            "TypeName": "FeeSigmoidConfig<FS>",
            "TypeId": 519
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "sigmoid_fee",
          "FeeSigmoid"
        ],
        "TypeParams": [
          {
            "Name": "FS",
            "TypeId": 517
          }
        ],
        "TypeDef": "Composite"
      },
      "519": {
        "TypeFields": [
          {
            "Name": "m",
            "TypeName": "FS",
            "TypeId": 517
          },
          {
            "Name": "p",
            "TypeName": "FS",
            "TypeId": 517
          },
          {
            "Name": "n",
            "TypeName": "FS",
            "TypeId": 517
          },
          {
            "Name": "initial_fee",
            "TypeName": "FS",
            "TypeId": 517
          },
          {
            "Name": "min_revenue",
            "TypeName": "FS",
            "TypeId": 517
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "sigmoid_fee",
          "FeeSigmoidConfig"
        ],
        "TypeParams": [
          {
            "Name": "FS",
            "TypeId": 517
          }
        ],
        "TypeDef": "Composite"
      },
      "520": {
        "TypeFields": [
          {
            "Name": "config",
            "TypeName": "EmaConfig<FU>",
            "TypeId": 521
          },
          {
            "Name": "ema",
            "TypeName": "FU",
            "TypeId": 507
          },
          {
            "Name": "multiplier",
            "TypeName": "FU",
            "TypeId": 507
          },
          {
            "Name": "last_time",
            "TypeName": "UnixTimestamp",
            "TypeId": 4
          },
          {
            "Name": "state",
            "TypeName": "MarketVolumeState",
            "TypeId": 524
          },
          {
            "Name": "start_time",
            "TypeName": "UnixTimestamp",
            "TypeId": 4
          },
          {
            "Name": "volumes_per_period",
            "TypeName": "FU",
            "TypeId": 507
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "ema_market_volume",
          "EmaMarketVolume"
        ],
        "TypeParams": [
          {
            "Name": "FU",
            "TypeId": 507
          }
        ],
        "TypeDef": "Composite"
      },
      "521": {
        "TypeFields": [
          {
            "Name": "ema_period",
            "TypeName": "Timespan",
            "TypeId": 522
          },
          {
            "Name": "ema_period_estimate_after",
            "TypeName": "Option<Timespan>",
            "TypeId": 523
          },
          {
            "Name": "smoothing",
            "TypeName": "FI",
            "TypeId": 507
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "ema_market_volume",
          "EmaConfig"
        ],
        "TypeParams": [
          {
            "Name": "FI",
            "TypeId": 507
          }
        ],
        "TypeDef": "Composite"
      },
      "522": {
        "Variants": [
          {
            "Name": "Seconds",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 0
          },
          {
            "Name": "Minutes",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 1
          },
          {
            "Name": "Hours",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 7
              }
            ],
            "Index": 2
          },
          {
            "Name": "Days",
            "TypeFields": [
              {
                "TypeName": "u16",
                "TypeId": 60
              }
            ],
            "Index": 3
          },
          {
            "Name": "Weeks",
            "TypeFields": [
              {
                "TypeName": "u16",
                "TypeId": 60
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "Timespan"
        ],
        "TypeDef": "Variant"
      },
      "523": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 522
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 522
          }
        ],
        "TypeDef": "Variant"
      },
      "524": {
        "Variants": [
          {
            "Name": "Uninitialized",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DataCollectionStarted",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DataCollected",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "ema_market_volume",
          "MarketVolumeState"
        ],
        "TypeDef": "Variant"
      },
      "525": {
        "TypeFields": [
          {
            "Name": "initial_fee",
            "TypeName": "FI",
            "TypeId": 517
          },
          {
            "Name": "log2_e",
            "TypeName": "FI",
            "TypeId": 517
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "types",
          "rikiddo_sigmoid_mv",
          "RikiddoConfig"
        ],
        "TypeParams": [
          {
            "Name": "FI",
            "TypeId": 517
          }
        ],
        "TypeDef": "Composite"
      },
      "526": {
        "Variants": [
          {
            "Name": "FixedConversionImpossible",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Conversion between the `Balance` and the internal Rikiddo core type failed."
            ]
          },
          {
            "Name": "RikiddoNotFoundForPool",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "For a given `poolid`, no Rikiddo instance could be found."
            ]
          },
          {
            "Name": "RikiddoAlreadyExistsForPool",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Trying to create a Rikiddo instance for a `poolid` that already has a Rikiddo instance."
            ]
          }
        ],
        "Path": [
          "zrml_rikiddo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Potential errors within the Rikiddo pallet."
        ]
      },
      "527": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 528
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 84
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "528": {
        "TypeId": 84,
        "TypeDef": "Sequence"
      },
      "529": {
        "Variants": [
          {
            "Name": "InvalidMarketStatus",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "1. Any resolution must either have a `Disputed` or `Reported` market status",
              "2. If status is `Disputed`, then at least one dispute must exist"
            ]
          },
          {
            "Name": "MarketDoesNotHaveSimpleDisputesMechanism",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "On dispute or resolution, someone tried to pass a non-simple-disputes market type"
            ]
          },
          {
            "Name": "StorageOverflow",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "OutcomeMismatch",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "CannotDisputeSameOutcome",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MarketIsNotReported",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "MaxDisputesReached",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The maximum number of disputes has been reached."
            ]
          }
        ],
        "Path": [
          "zrml_simple_disputes",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "530": {
        "Variants": [
          {
            "Name": "AboveMaximumWeight",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The weight of an asset in a CPMM swap pool is greather than the upper weight cap."
            ]
          },
          {
            "Name": "AssetNotBound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The weight of an asset in a CPMM swap pool could not be found."
            ]
          },
          {
            "Name": "AssetNotInPool",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The asset in question could not be found within the pool."
            ]
          },
          {
            "Name": "BaseAssetNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The base asset of the swaps pool was None although a value was expected."
            ]
          },
          {
            "Name": "BadLimitPrice",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The spot price of an asset pair was greater than the specified limit."
            ]
          },
          {
            "Name": "BelowMinimumWeight",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The weight of an asset in a CPMM swap pool is lower than the upper weight cap."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Some funds could not be transferred due to a too low balance."
            ]
          },
          {
            "Name": "InsufficientLiquidity",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Liquidity provided to new CPMM pool is less than the minimum allowed balance."
            ]
          },
          {
            "Name": "InvalidAmountArgument",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Could not create CPMM pool since no amount was specified."
            ]
          },
          {
            "Name": "InvalidFeeArgument",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Could not create CPMM pool since no fee was supplied."
            ]
          },
          {
            "Name": "InvalidPoolStatus",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Dispatch called on pool with invalid status."
            ]
          },
          {
            "Name": "InvalidStateTransition",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A function was called for a swaps pool that does not fulfill the state requirement."
            ]
          },
          {
            "Name": "InvalidWeightArgument",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Could not create CPMM pool since no weights were supplied."
            ]
          },
          {
            "Name": "LimitIn",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "A transferal of funds into a swaps pool was above a threshhold specified by the sender."
            ]
          },
          {
            "Name": "InvalidSubsidyAmount",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Subsidy amount is too small."
            ]
          },
          {
            "Name": "LimitMissing",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "No limit was specified for a swap."
            ]
          },
          {
            "Name": "LimitOut",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "A transferal of funds out of a swaps pool was below a threshhold specified by the",
              "receiver."
            ]
          },
          {
            "Name": "MathApproximation",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The custom math library yielded an invalid result (most times unexpected zero value)."
            ]
          },
          {
            "Name": "MaxInRatio",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The proportion of an asset added into a pool in comparison to the amount",
              "of that asset in the pool is above the threshhold specified by a constant."
            ]
          },
          {
            "Name": "MaxOutRatio",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The proportion of an asset taken from a pool in comparison to the amount",
              "of that asset in the pool is above the threshhold specified by a constant."
            ]
          },
          {
            "Name": "MaxTotalWeight",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The total weight of all assets within a CPMM pool is above a treshhold specified",
              "by a constant."
            ]
          },
          {
            "Name": "PoolDoesNotExist",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The pool in question does not exist."
            ]
          },
          {
            "Name": "PoolDrain",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "A pool balance dropped below the allowed minimum."
            ]
          },
          {
            "Name": "PoolIsNotActive",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The pool in question is inactive."
            ]
          },
          {
            "Name": "PoolMissingFee",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The CPMM pool in question does not have a fee, although it should."
            ]
          },
          {
            "Name": "PoolMissingSubsidy",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The Rikiddo pool in question does not have subsidy, although it should."
            ]
          },
          {
            "Name": "PoolMissingWeight",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The CPPM pool in question does not have weights, although it should."
            ]
          },
          {
            "Name": "ProvidedValuesLenMustEqualAssetsLen",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Two vectors do not have the same length (usually CPMM pool assets and weights)."
            ]
          },
          {
            "Name": "SwapFeeMissing",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "No swap fee information found for CPMM pool"
            ]
          },
          {
            "Name": "SwapFeeTooHigh",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "The swap fee is higher than the allowed maximum."
            ]
          },
          {
            "Name": "TooFewAssets",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Tried to create a pool that has less assets than the lower threshhold specified by",
              "a constant."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Tried to create a pool that has more assets than the upper threshhold specified by",
              "a constant."
            ]
          },
          {
            "Name": "SomeIdenticalAssets",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "Tried to create a pool with at least two identical assets."
            ]
          },
          {
            "Name": "UnsupportedTrade",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "The pool does not support swapping the assets in question."
            ]
          },
          {
            "Name": "WinningAssetNotFound",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "The outcome asset specified as the winning asset was not found in the pool."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "Some amount in a transaction equals zero."
            ]
          },
          {
            "Name": "Unexpected",
            "TypeFields": [
              {
                "TypeName": "UnexpectedError",
                "TypeId": 531
              }
            ],
            "Index": 36,
            "Docs": [
              "An unexpected error occurred. This is the result of faulty pallet logic and should be",
              "reported to the pallet maintainers."
            ]
          }
        ],
        "Path": [
          "zrml_swaps",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "531": {
        "Variants": [
          {
            "Name": "StorageOverflow",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "zrml_swaps",
          "pallet",
          "UnexpectedError"
        ],
        "TypeDef": "Variant"
      },
      "532": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 96
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "533": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 535
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 534
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "534": {
        "TypeFields": [
          {
            "Name": "market_id",
            "TypeName": "MI",
            "TypeId": 6
          },
          {
            "Name": "period",
            "TypeName": "MarketPeriod<BN, MO>",
            "TypeId": 108
          }
        ],
        "Path": [
          "zeitgeist_primitives",
          "market",
          "SubsidyUntil"
        ],
        "TypeParams": [
          {
            "Name": "BN",
            "TypeId": 4
          },
          {
            "Name": "MO",
            "TypeId": 4
          },
          {
            "Name": "MI",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "535": {
        "TypeId": 534,
        "TypeDef": "Sequence"
      },
      "536": {
        "Variants": [
          {
            "Name": "CannotDisputeSameOutcome",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Someone is trying to call `dispute` with the same outcome that is currently",
              "registered on-chain."
            ]
          },
          {
            "Name": "EditorNotCreator",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Only creator is able to edit the market."
            ]
          },
          {
            "Name": "EditReasonLengthExceedsMaxEditReasonLen",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "EditReason's length greater than MaxEditReasonLen."
            ]
          },
          {
            "Name": "InsufficientFundsInMarketAccount",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Market account does not have enough funds to pay out."
            ]
          },
          {
            "Name": "InsufficientShareBalance",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Sender does not have enough share balance."
            ]
          },
          {
            "Name": "InvalidMultihash",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "An invalid Hash was included in a multihash parameter."
            ]
          },
          {
            "Name": "InvalidMarketType",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "An invalid market type was found."
            ]
          },
          {
            "Name": "InvalidScoringRule",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "An operation is requested that is unsupported for the given scoring rule."
            ]
          },
          {
            "Name": "NotEnoughBalance",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Sender does not have enough balance to buy shares."
            ]
          },
          {
            "Name": "MarketAlreadyReported",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Market is already reported on."
            ]
          },
          {
            "Name": "MarketDurationTooLong",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The market duration is longer than allowed."
            ]
          },
          {
            "Name": "MarketEditRequestAlreadyInProgress",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Market edit request is already in progress."
            ]
          },
          {
            "Name": "MarketEditNotRequested",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Market is not requested for edit."
            ]
          },
          {
            "Name": "MarketIsNotActive",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Market was expected to be active."
            ]
          },
          {
            "Name": "MarketIsNotClosed",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Market was expected to be closed."
            ]
          },
          {
            "Name": "MarketIsNotCollectingSubsidy",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "A market in subsidy collection phase was expected."
            ]
          },
          {
            "Name": "MarketIsNotProposed",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "A proposed market was expected."
            ]
          },
          {
            "Name": "MarketIsNotReported",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "A reported market was expected."
            ]
          },
          {
            "Name": "MarketIsNotDisputed",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A disputed market was expected."
            ]
          },
          {
            "Name": "MarketIsNotResolved",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "A resolved market was expected."
            ]
          },
          {
            "Name": "MarketStartTooSoon",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The point in time when the market becomes active is too soon."
            ]
          },
          {
            "Name": "MarketStartTooLate",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The point in time when the market becomes active is too late."
            ]
          },
          {
            "Name": "MarketDisputeMechanismNotFailed",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The market dispute mechanism has not failed."
            ]
          },
          {
            "Name": "MissingBond",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Tried to settle missing bond."
            ]
          },
          {
            "Name": "NotEnoughCategories",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The number of categories for a categorical market is too low."
            ]
          },
          {
            "Name": "NoWinningBalance",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The user has no winning balance."
            ]
          },
          {
            "Name": "OutcomeMismatch",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "Submitted outcome does not match market type."
            ]
          },
          {
            "Name": "RejectReasonLengthExceedsMaxRejectReasonLen",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "RejectReason's length greater than MaxRejectReasonLen."
            ]
          },
          {
            "Name": "ReporterNotOracle",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "The report is not coming from designated oracle."
            ]
          },
          {
            "Name": "StorageOverflow",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "It was tried to append an item to storage beyond the boundaries."
            ]
          },
          {
            "Name": "TooManyCategories",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Too many categories for a categorical market."
            ]
          },
          {
            "Name": "InvalidDisputeMechanism",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "The action requires another market dispute mechanism."
            ]
          },
          {
            "Name": "InvalidMarketStatus",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "Catch-all error for invalid market status."
            ]
          },
          {
            "Name": "UnexpectedNoneInPostInfo",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "The post dispatch should never be None."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "An amount was illegally specified as zero."
            ]
          },
          {
            "Name": "InvalidMarketPeriod",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "Market period is faulty (too short, outside of limits)"
            ]
          },
          {
            "Name": "InvalidOutcomeRange",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "The outcome range of the scalar market is invalid."
            ]
          },
          {
            "Name": "NotAllowedToReportYet",
            "TypeFields": null,
            "Index": 37,
            "Docs": [
              "Can not report before market.deadlines.grace_period is ended."
            ]
          },
          {
            "Name": "DisputeDurationSmallerThanMinDisputeDuration",
            "TypeFields": null,
            "Index": 38,
            "Docs": [
              "Specified dispute_duration is smaller than MinDisputeDuration."
            ]
          },
          {
            "Name": "OracleDurationSmallerThanMinOracleDuration",
            "TypeFields": null,
            "Index": 39,
            "Docs": [
              "Specified oracle_duration is smaller than MinOracleDuration."
            ]
          },
          {
            "Name": "DisputeDurationGreaterThanMaxDisputeDuration",
            "TypeFields": null,
            "Index": 40,
            "Docs": [
              "Specified dispute_duration is greater than MaxDisputeDuration."
            ]
          },
          {
            "Name": "GracePeriodGreaterThanMaxGracePeriod",
            "TypeFields": null,
            "Index": 41,
            "Docs": [
              "Specified grace_period is greater than MaxGracePeriod."
            ]
          },
          {
            "Name": "OracleDurationGreaterThanMaxOracleDuration",
            "TypeFields": null,
            "Index": 42,
            "Docs": [
              "Specified oracle_duration is greater than MaxOracleDuration."
            ]
          },
          {
            "Name": "WeightsLenMustEqualAssetsLen",
            "TypeFields": null,
            "Index": 43,
            "Docs": [
              "The weights length has to be equal to the assets length."
            ]
          },
          {
            "Name": "InvalidBaseAsset",
            "TypeFields": null,
            "Index": 44,
            "Docs": [
              "Provided base_asset is not allowed to be used as base_asset."
            ]
          },
          {
            "Name": "UnregisteredForeignAsset",
            "TypeFields": null,
            "Index": 45,
            "Docs": [
              "A foreign asset in not registered in AssetRegistry."
            ]
          },
          {
            "Name": "GlobalDisputeExistsAlready",
            "TypeFields": null,
            "Index": 46,
            "Docs": [
              "The start of the global dispute for this market happened already."
            ]
          },
          {
            "Name": "NoDisputeMechanism",
            "TypeFields": null,
            "Index": 47,
            "Docs": [
              "The market has no dispute mechanism."
            ]
          },
          {
            "Name": "NonZeroDisputePeriodOnTrustedMarket",
            "TypeFields": null,
            "Index": 48,
            "Docs": [
              "The dispute duration is positive but the market has dispute period."
            ]
          },
          {
            "Name": "FeeTooHigh",
            "TypeFields": null,
            "Index": 49,
            "Docs": [
              "The fee is too high."
            ]
          },
          {
            "Name": "InvalidResolutionMechanism",
            "TypeFields": null,
            "Index": 50,
            "Docs": [
              "The resolution mechanism resulting from the scoring rule is not supported."
            ]
          },
          {
            "Name": "RequesterNotCreator",
            "TypeFields": null,
            "Index": 51,
            "Docs": [
              "The early market close operation was not requested by the market creator."
            ]
          },
          {
            "Name": "EarlyCloseRequestTooLate",
            "TypeFields": null,
            "Index": 52,
            "Docs": [
              "The early close would be scheduled after the original market period end."
            ]
          },
          {
            "Name": "InvalidEarlyCloseState",
            "TypeFields": null,
            "Index": 53,
            "Docs": [
              "This early close state is not valid."
            ]
          },
          {
            "Name": "NoEarlyCloseScheduled",
            "TypeFields": null,
            "Index": 54,
            "Docs": [
              "There is no early close scheduled."
            ]
          },
          {
            "Name": "OnlyAuthorizedCanScheduleEarlyClose",
            "TypeFields": null,
            "Index": 55,
            "Docs": [
              "After there was an early close already scheduled,",
              "only the `CloseMarketsEarlyOrigin` can schedule another one."
            ]
          },
          {
            "Name": "CallerNotMarketCreator",
            "TypeFields": null,
            "Index": 56,
            "Docs": [
              "The caller is not the market creator."
            ]
          },
          {
            "Name": "MarketIsNotTrusted",
            "TypeFields": null,
            "Index": 57,
            "Docs": [
              "The market is not trusted."
            ]
          },
          {
            "Name": "NotAllowedForBlockBasedMarkets",
            "TypeFields": null,
            "Index": 58,
            "Docs": [
              "The operation is not allowed for market with a block period."
            ]
          },
          {
            "Name": "MarketNotInCloseTimeFrameList",
            "TypeFields": null,
            "Index": 59,
            "Docs": [
              "The market is not in the close time frame list."
            ]
          },
          {
            "Name": "MarketPeriodEndNotAlreadyReachedYet",
            "TypeFields": null,
            "Index": 60,
            "Docs": [
              "The market period end was not already reached yet."
            ]
          }
        ],
        "Path": [
          "zrml_prediction_markets",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "537": {
        "Variants": [
          {
            "Name": "FundDoesNotHaveEnoughFreeBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account does not have enough balance to cross."
            ]
          },
          {
            "Name": "HasAlreadyCrossed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account has already crossed."
            ]
          }
        ],
        "Path": [
          "zrml_styx",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "538": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 540
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 539
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "539": {
        "TypeIds": [
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "540": {
        "TypeId": 539,
        "TypeDef": "Sequence"
      },
      "541": {
        "TypeIds": [
          6,
          68
        ],
        "TypeDef": "Tuple"
      },
      "542": {
        "TypeFields": [
          {
            "Name": "outcome_sum",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "possession",
            "TypeName": "Possession<AccountId, Balance, OwnerInfo>",
            "TypeId": 544
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "types",
          "OutcomeInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "OwnerInfo",
            "TypeId": 543
          }
        ],
        "TypeDef": "Composite"
      },
      "543": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 78
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "544": {
        "Variants": [
          {
            "Name": "Paid",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "fee",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Shared",
            "TypeFields": [
              {
                "Name": "owners",
                "TypeName": "OwnerInfo",
                "TypeId": 543
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "types",
          "Possession"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "OwnerInfo",
            "TypeId": 543
          }
        ],
        "TypeDef": "Variant"
      },
      "545": {
        "TypeFields": [
          {
            "Name": "winner_outcome",
            "TypeName": "OutcomeReport",
            "TypeId": 68
          },
          {
            "Name": "outcome_info",
            "TypeName": "OutcomeInfo<AccountId, Balance, OwnerInfo>",
            "TypeId": 542
          },
          {
            "Name": "status",
            "TypeName": "GdStatus<BlockNumber>",
            "TypeId": 546
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "types",
          "GlobalDisputeInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "OwnerInfo",
            "TypeId": 543
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "546": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "add_outcome_end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "vote_end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Destroyed",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "types",
          "GdStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "547": {
        "TypeFields": [
          {
            "Name": "outcome",
            "TypeName": "OutcomeReport",
            "TypeId": 68
          },
          {
            "Name": "outcome_info",
            "TypeName": "OldOutcomeInfo<Balance, OwnerInfo>",
            "TypeId": 548
          },
          {
            "Name": "is_finished",
            "TypeName": "bool",
            "TypeId": 50
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "types",
          "OldWinnerInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "OwnerInfo",
            "TypeId": 543
          }
        ],
        "TypeDef": "Composite"
      },
      "548": {
        "TypeFields": [
          {
            "Name": "outcome_sum",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "owners",
            "TypeName": "OwnerInfo",
            "TypeId": 543
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "types",
          "OldOutcomeInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "OwnerInfo",
            "TypeId": 543
          }
        ],
        "TypeDef": "Composite"
      },
      "549": {
        "Variants": [
          {
            "Name": "AmountTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender tried to vote with an amount below a defined minimum."
            ]
          },
          {
            "Name": "InvalidGlobalDisputeStatus",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The global dispute status is invalid for this operation."
            ]
          },
          {
            "Name": "InsufficientAmount",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender does not have enough funds for the vote on an outcome."
            ]
          },
          {
            "Name": "MaxOwnersReached",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The maximum amount of owners is reached."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The maximum number of votes for this account is reached."
            ]
          },
          {
            "Name": "NoFundsToReward",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The amount in the reward pot is zero."
            ]
          },
          {
            "Name": "GlobalDisputeNotFound",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No global dispute present at the moment."
            ]
          },
          {
            "Name": "OutcomeAlreadyExists",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The voting outcome has been already added."
            ]
          },
          {
            "Name": "OutcomeDoesNotExist",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The outcome specified is not present in the voting outcomes."
            ]
          },
          {
            "Name": "OutcomeMismatch",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Submitted outcome does not match market type."
            ]
          },
          {
            "Name": "OutcomesNotFullyCleaned",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The outcomes are not fully cleaned yet."
            ]
          },
          {
            "Name": "SharedPossessionRequired",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Only a shared possession is allowed."
            ]
          },
          {
            "Name": "UnfinishedGlobalDispute",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The global dispute period is not over yet. The winner is not yet determined."
            ]
          },
          {
            "Name": "AddOutcomePeriodIsOver",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The period in which outcomes can be added is over."
            ]
          },
          {
            "Name": "NotInGdVotingPeriod",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "It is not inside the period in which votes are allowed."
            ]
          },
          {
            "Name": "GlobalDisputeNotDestroyed",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The operation requires a global dispute in a destroyed state."
            ]
          },
          {
            "Name": "GlobalDisputeAlreadyExists",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The global dispute was already started."
            ]
          }
        ],
        "Path": [
          "zrml_global_disputes",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "550": {
        "TypeFields": [
          {
            "Name": "account_id",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "reserves",
            "TypeName": "BTreeMap<AssetOf<T>, BalanceOf<T>>",
            "TypeId": 92
          },
          {
            "Name": "collateral",
            "TypeName": "AssetOf<T>",
            "TypeId": 63
          },
          {
            "Name": "liquidity_parameter",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "liquidity_shares_manager",
            "TypeName": "LSM",
            "TypeId": 551
          },
          {
            "Name": "swap_fee",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "types",
          "pool",
          "Pool"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "LSM",
            "TypeId": 551
          }
        ],
        "TypeDef": "Composite"
      },
      "551": {
        "TypeFields": [
          {
            "Name": "nodes",
            "TypeName": "BoundedVec<Node<T>, LiquidityTreeMaxNodes<U>>",
            "TypeId": 552
          },
          {
            "Name": "account_to_index",
            "TypeName": "BoundedBTreeMap<T::AccountId, u32, LiquidityTreeMaxNodes<U>>",
            "TypeId": 555
          },
          {
            "Name": "abandoned_nodes",
            "TypeName": "BoundedVec<u32, LiquidityTreeMaxNodes<U>>",
            "TypeId": 559
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "liquidity_tree",
          "types",
          "liquidity_tree",
          "LiquidityTree"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "U"
          }
        ],
        "TypeDef": "Composite"
      },
      "552": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 554
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 553
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "553": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 250
          },
          {
            "Name": "stake",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "fees",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "descendant_stake",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "lazy_fees",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "liquidity_tree",
          "types",
          "node",
          "Node"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "554": {
        "TypeId": 553,
        "TypeDef": "Sequence"
      },
      "555": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 556
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 7
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "556": {
        "TypeFields": [
          {
            "TypeId": 557
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 7
          }
        ],
        "TypeDef": "Composite"
      },
      "557": {
        "TypeId": 558,
        "TypeDef": "Sequence"
      },
      "558": {
        "TypeIds": [
          0,
          7
        ],
        "TypeDef": "Tuple"
      },
      "559": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 397
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 7
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "560": {
        "Variants": [
          {
            "Name": "AssetCountAboveMax",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The number of assets in the pool is above the allowed maximum."
            ]
          },
          {
            "Name": "AmountInAboveMax",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Amount paid is above the specified maximum."
            ]
          },
          {
            "Name": "AmountOutBelowMin",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount received is below the specified minimum."
            ]
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Specified asset was not found in this pool."
            ]
          },
          {
            "Name": "DuplicatePool",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Market already has an associated pool."
            ]
          },
          {
            "Name": "IncorrectAssetCount",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Incorrect asset count."
            ]
          },
          {
            "Name": "IncorrectVecLen",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InsufficientPoolShares",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "User doesn't own enough pool shares."
            ]
          },
          {
            "Name": "LiquidityTooLow",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The liquidity in the pool is too low."
            ]
          },
          {
            "Name": "InvalidSpotPrices",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Sum of spot prices is not `1`."
            ]
          },
          {
            "Name": "InvalidTradingMechanism",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Market's trading mechanism is not LMSR."
            ]
          },
          {
            "Name": "MarketNotActive",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Pool can only be traded on if the market is active."
            ]
          },
          {
            "Name": "MathError",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Some calculation failed. This shouldn't happen."
            ]
          },
          {
            "Name": "NotAllowed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The user is not allowed to execute this command."
            ]
          },
          {
            "Name": "NotImplemented",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "This feature is not yet implemented."
            ]
          },
          {
            "Name": "NumericalLimits",
            "TypeFields": [
              {
                "TypeName": "NumericalLimitsError",
                "TypeId": 561
              }
            ],
            "Index": 15,
            "Docs": [
              "Some value in the operation is too large or small."
            ]
          },
          {
            "Name": "OutstandingFees",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Outstanding fees prevent liquidity withdrawal."
            ]
          },
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Specified market does not have a pool."
            ]
          },
          {
            "Name": "SpotPriceAboveMax",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Spot price is above the allowed maximum."
            ]
          },
          {
            "Name": "SpotPriceBelowMin",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Spot price is below the allowed minimum."
            ]
          },
          {
            "Name": "SwapFeeAboveMax",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Pool's swap fee exceeds the allowed upper limit."
            ]
          },
          {
            "Name": "SwapFeeBelowMin",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Pool's swap fee is below the allowed lower limit."
            ]
          },
          {
            "Name": "Unexpected",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "This shouldn't happen."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Specified monetary amount is zero."
            ]
          },
          {
            "Name": "LiquidityTreeError",
            "TypeFields": [
              {
                "TypeName": "LiquidityTreeError",
                "TypeId": 562
              }
            ],
            "Index": 24,
            "Docs": [
              "An error occurred when handling the liquidty tree."
            ]
          },
          {
            "Name": "MinRelativeLiquidityThresholdViolated",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The relative value of a new LP position is too low."
            ]
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "561": {
        "Variants": [
          {
            "Name": "SpotPriceTooLow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SpotPriceSlippedTooLow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "MaxAmountExceeded",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "MinAmountNotMet",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "pallet",
          "NumericalLimitsError"
        ],
        "TypeDef": "Variant"
      },
      "562": {
        "Variants": [
          {
            "Name": "AccountNotFound",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NodeNotFound",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UnwithdrawnFees",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "TreeIsFull",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "InsufficientStake",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MaxIterationsReached",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "StorageOverflow",
            "TypeFields": [
              {
                "TypeName": "StorageOverflowError",
                "TypeId": 563
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "liquidity_tree",
          "types",
          "liquidity_tree_error",
          "LiquidityTreeError"
        ],
        "TypeDef": "Variant"
      },
      "563": {
        "Variants": [
          {
            "Name": "Nodes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AccountToIndex",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "AbandonedNodes",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "zrml_neo_swaps",
          "liquidity_tree",
          "types",
          "liquidity_tree_error",
          "StorageOverflowError"
        ],
        "TypeDef": "Variant"
      },
      "564": {
        "Variants": [
          {
            "Name": "NotOrderCreator",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The sender is not the order creator."
            ]
          },
          {
            "Name": "OrderDoesNotExist",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The order does not exist."
            ]
          },
          {
            "Name": "MarketIsNotActive",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The market is not active."
            ]
          },
          {
            "Name": "InvalidScoringRule",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The scoring rule is not order book."
            ]
          },
          {
            "Name": "AmountTooHighForOrder",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The specified amount parameter is too high for the order."
            ]
          },
          {
            "Name": "InvalidOutcomeAsset",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The specified outcome asset is not part of the market."
            ]
          },
          {
            "Name": "PartialFillNearFullFillNotAllowed",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The maker partial fill leads to a too low quotient for the next order execution."
            ]
          },
          {
            "Name": "MarketBaseAssetNotPresent",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The market base asset is not present."
            ]
          },
          {
            "Name": "BelowMinimumBalance",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The specified amount is below the minimum balance."
            ]
          }
        ],
        "Path": [
          "zrml_orderbook",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "565": {
        "Variants": [
          {
            "Name": "NoRewardShareOutstanding",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There was no buyer for the winning outcome or all winners already claimed their rewards.",
              "Use the `refund` extrinsic to get the initial bet back,",
              "in case there was no buyer for the winning outcome."
            ]
          },
          {
            "Name": "MarketIsNotActive",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The market is not active."
            ]
          },
          {
            "Name": "AmountBelowMinimumBetSize",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The specified amount is below the minimum bet size."
            ]
          },
          {
            "Name": "NotParimutuelOutcome",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The specified asset is not a parimutuel share."
            ]
          },
          {
            "Name": "InvalidOutcomeAsset",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The specified asset was not found in the market assets."
            ]
          },
          {
            "Name": "InvalidScoringRule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The scoring rule is not parimutuel."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The specified amount can not be transferred."
            ]
          },
          {
            "Name": "MarketIsNotResolvedYet",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The market is not resolved yet."
            ]
          },
          {
            "Name": "Unexpected",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "An unexpected error occured. This should never happen!",
              "There was an internal coding mistake."
            ]
          },
          {
            "Name": "NoResolvedOutcome",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "There is no resolved outcome present for the market."
            ]
          },
          {
            "Name": "RefundNotAllowed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The refund is not allowed."
            ]
          },
          {
            "Name": "RefundableBalanceIsZero",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "There is no balance to refund."
            ]
          },
          {
            "Name": "NoWinningShares",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "There is no reward, because there are no winning shares."
            ]
          },
          {
            "Name": "NotCategorical",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Only categorical markets are allowed for parimutuels."
            ]
          },
          {
            "Name": "NoRewardToDistribute",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "There is no reward to distribute."
            ]
          },
          {
            "Name": "InconsistentState",
            "TypeFields": [
              {
                "TypeName": "InconsistentStateError",
                "TypeId": 566
              }
            ],
            "Index": 15,
            "Docs": [
              "Action cannot be completed because an unexpected error has occurred. This should be",
              "reported to protocol maintainers."
            ]
          }
        ],
        "Path": [
          "zrml_parimutuel",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "566": {
        "Variants": [
          {
            "Name": "InsufficientFundsInPotAccount",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OutcomeIssuanceGreaterCollateral",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "zrml_parimutuel",
          "pallet",
          "InconsistentStateError"
        ],
        "TypeDef": "Variant"
      },
      "567": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 568
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 568
          }
        ],
        "TypeDef": "Variant"
      },
      "568": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "569": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 11
          },
          {
            "Name": "relay_dispatch_queue_size",
            "TypeName": "(u32, u32)",
            "TypeId": 570
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 571
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 571
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "570": {
        "TypeIds": [
          7,
          7
        ],
        "TypeDef": "Tuple"
      },
      "571": {
        "TypeId": 572,
        "TypeDef": "Sequence"
      },
      "572": {
        "TypeIds": [
          199,
          573
        ],
        "TypeDef": "Tuple"
      },
      "573": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 574
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "574": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "575": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 7
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 7
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "576": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 11
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "577": {
        "TypeFields": [
          {
            "TypeId": 578
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 199
          },
          {
            "Name": "V",
            "TypeId": 576
          }
        ],
        "TypeDef": "Composite"
      },
      "578": {
        "TypeId": 579,
        "TypeDef": "Sequence"
      },
      "579": {
        "TypeIds": [
          199,
          576
        ],
        "TypeDef": "Tuple"
      },
      "580": {
        "TypeId": 581,
        "TypeDef": "Sequence"
      },
      "581": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 199
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 199
          }
        ],
        "TypeDef": "Composite"
      },
      "582": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending"
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function"
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run"
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block"
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block"
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "583": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "percent",
            "TypeName": "Percent",
            "TypeId": 136
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "ParachainBondConfig"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "584": {
        "TypeFields": [
          {
            "Name": "current",
            "TypeName": "RoundIndex",
            "TypeId": 7
          },
          {
            "Name": "first",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "length",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "RoundInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "585": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "delegations",
            "TypeName": "OrderedSet<Bond<AccountId, Balance>>",
            "TypeId": 586
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "less_total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "DelegatorStatus",
            "TypeId": 589
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "Delegator"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "586": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 588
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "set",
          "OrderedSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 587
          }
        ],
        "TypeDef": "Composite"
      },
      "587": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "Bond"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "588": {
        "TypeId": 587,
        "TypeDef": "Sequence"
      },
      "589": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Leaving",
            "TypeFields": [
              {
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "DelegatorStatus"
        ],
        "TypeDef": "Variant"
      },
      "590": {
        "TypeFields": [
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "delegation_count",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "total_counted",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "lowest_top_delegation_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "highest_bottom_delegation_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "lowest_bottom_delegation_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "top_capacity",
            "TypeName": "CapacityStatus",
            "TypeId": 591
          },
          {
            "Name": "bottom_capacity",
            "TypeName": "CapacityStatus",
            "TypeId": 591
          },
          {
            "Name": "request",
            "TypeName": "Option<CandidateBondLessRequest<Balance>>",
            "TypeId": 592
          },
          {
            "Name": "status",
            "TypeName": "CollatorStatus",
            "TypeId": 594
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CandidateMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "591": {
        "Variants": [
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Partial",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CapacityStatus"
        ],
        "TypeDef": "Variant"
      },
      "592": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 593
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 593
          }
        ],
        "TypeDef": "Variant"
      },
      "593": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "when_executable",
            "TypeName": "RoundIndex",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CandidateBondLessRequest"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "594": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Idle",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Leaving",
            "TypeFields": [
              {
                "TypeName": "RoundIndex",
                "TypeId": 7
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CollatorStatus"
        ],
        "TypeDef": "Variant"
      },
      "595": {
        "TypeId": 596,
        "TypeDef": "Sequence"
      },
      "596": {
        "TypeFields": [
          {
            "Name": "delegator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "when_executable",
            "TypeName": "RoundIndex",
            "TypeId": 7
          },
          {
            "Name": "action",
            "TypeName": "DelegationAction<Balance>",
            "TypeId": 134
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "delegation_requests",
          "ScheduledRequest"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "597": {
        "TypeId": 598,
        "TypeDef": "Sequence"
      },
      "598": {
        "TypeFields": [
          {
            "Name": "delegator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Percent",
            "TypeId": 136
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "auto_compound",
          "AutoCompoundConfig"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "599": {
        "TypeFields": [
          {
            "Name": "delegations",
            "TypeName": "Vec<Bond<AccountId, Balance>>",
            "TypeId": 588
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "600": {
        "TypeIds": [
          7,
          0
        ],
        "TypeDef": "Tuple"
      },
      "601": {
        "TypeFields": [
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "delegations",
            "TypeName": "Vec<BondWithAutoCompound<AccountId, Balance>>",
            "TypeId": 602
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CollatorSnapshot"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "602": {
        "TypeId": 603,
        "TypeDef": "Sequence"
      },
      "603": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "auto_compound",
            "TypeName": "Percent",
            "TypeId": 136
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "BondWithAutoCompound"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "604": {
        "TypeFields": [
          {
            "Name": "round_issuance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_staking_reward",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "collator_commission",
            "TypeName": "Perbill",
            "TypeId": 80
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "DelayedPayout"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "605": {
        "TypeFields": [
          {
            "Name": "expect",
            "TypeName": "Range<Balance>",
            "TypeId": 342
          },
          {
            "Name": "annual",
            "TypeName": "Range<Perbill>",
            "TypeId": 343
          },
          {
            "Name": "round",
            "TypeName": "Range<Perbill>",
            "TypeId": 343
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "inflation",
          "InflationInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "606": {
        "Variants": [
          {
            "Name": "DelegatorDNE",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DelegatorDNEinTopNorBottom",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DelegatorDNEInDelegatorSet",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CandidateDNE",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DelegationDNE",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "DelegatorExists",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "CandidateExists",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CandidateBondBelowMin",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "DelegatorBondBelowMin",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "DelegationBelowMin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "AlreadyOffline",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "AlreadyActive",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DelegatorAlreadyLeaving",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "DelegatorNotLeaving",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "DelegatorCannotLeaveYet",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "CannotDelegateIfLeaving",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "CandidateAlreadyLeaving",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "CandidateNotLeaving",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "CandidateCannotLeaveYet",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "CannotGoOnlineIfLeaving",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "ExceedMaxDelegationsPerDelegator",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "AlreadyDelegatedCandidate",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "InvalidSchedule",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "CannotSetBelowMin",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "RoundLengthMustBeGreaterThanTotalSelectedCollators",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "NoWritingSameValue",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "TooLowCandidateCountWeightHintJoinCandidates",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "TooLowCandidateCountWeightHintCancelLeaveCandidates",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "TooLowCandidateCountToLeaveCandidates",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "TooLowDelegationCountToDelegate",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "TooLowCandidateDelegationCountToDelegate",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "TooLowCandidateDelegationCountToLeaveCandidates",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "TooLowDelegationCountToLeaveDelegators",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "PendingCandidateRequestsDNE",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "PendingCandidateRequestAlreadyExists",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "PendingCandidateRequestNotDueYet",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "PendingDelegationRequestDNE",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "PendingDelegationRequestAlreadyExists",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "PendingDelegationRequestNotDueYet",
            "TypeFields": null,
            "Index": 39
          },
          {
            "Name": "CannotDelegateLessThanOrEqualToLowestBottomWhenFull",
            "TypeFields": null,
            "Index": 40
          },
          {
            "Name": "PendingDelegationRevoke",
            "TypeFields": null,
            "Index": 41
          },
          {
            "Name": "TooLowDelegationCountToAutoCompound",
            "TypeFields": null,
            "Index": 42
          },
          {
            "Name": "TooLowCandidateAutoCompoundingDelegationCountToAutoCompound",
            "TypeFields": null,
            "Index": 43
          },
          {
            "Name": "TooLowCandidateAutoCompoundingDelegationCountToDelegate",
            "TypeFields": null,
            "Index": 44
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "607": {
        "Variants": [
          {
            "Name": "AuthorAlreadySet",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Author already set in block."
            ]
          },
          {
            "Name": "NoAccountId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No AccountId was found to be associated with this author"
            ]
          },
          {
            "Name": "CannotBeAuthor",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The author in the inherent is not an eligible author."
            ]
          }
        ],
        "Path": [
          "pallet_author_inherent",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "608": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "keys",
            "TypeName": "T::Keys",
            "TypeId": 142
          }
        ],
        "Path": [
          "pallet_author_mapping",
          "pallet",
          "RegistrationInfo"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "609": {
        "Variants": [
          {
            "Name": "AssociationNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The association can't be cleared because it is not found."
            ]
          },
          {
            "Name": "NotYourAssociation",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The association can't be cleared because it belongs to another account."
            ]
          },
          {
            "Name": "CannotAffordSecurityDeposit",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "This account cannot set an author because it cannon afford the security deposit"
            ]
          },
          {
            "Name": "AlreadyAssociated",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The NimbusId in question is already associated and cannot be overwritten"
            ]
          },
          {
            "Name": "OldAuthorIdNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "No existing NimbusId can be found for the account"
            ]
          },
          {
            "Name": "WrongKeySize",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Keys have wrong size"
            ]
          },
          {
            "Name": "DecodeNimbusFailed",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Failed to decode NimbusId for `set_keys`"
            ]
          },
          {
            "Name": "DecodeKeysFailed",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Failed to decode T::Keys for `set_keys`"
            ]
          }
        ],
        "Path": [
          "pallet_author_mapping",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "An error that can occur while executing the mapping pallet's logic."
        ]
      },
      "610": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "611": {
        "TypeFields": [
          {
            "Name": "max_individual",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "ConfigData"
        ],
        "TypeDef": "Composite"
      },
      "612": {
        "TypeFields": [
          {
            "Name": "begin_used",
            "TypeName": "PageCounter",
            "TypeId": 7
          },
          {
            "Name": "end_used",
            "TypeName": "PageCounter",
            "TypeId": 7
          },
          {
            "Name": "overweight_count",
            "TypeName": "OverweightIndex",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "PageIndexData"
        ],
        "TypeDef": "Composite"
      },
      "613": {
        "TypeId": 614,
        "TypeDef": "Sequence"
      },
      "614": {
        "TypeIds": [
          7,
          12
        ],
        "TypeDef": "Tuple"
      },
      "615": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message index given is unknown."
            ]
          },
          {
            "Name": "OverLimit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The amount of weight given is possibly not enough for executing the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "616": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 197
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedMultiLocation>",
                "TypeId": 204
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 617
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 197
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 50
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 619
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "617": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 618
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 618
          }
        ],
        "TypeDef": "Variant"
      },
      "618": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "619": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Response",
                "TypeId": 353
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 168
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "620": {
        "TypeIds": [
          7,
          197
        ],
        "TypeDef": "Tuple"
      },
      "621": {
        "TypeIds": [
          4,
          9,
          7
        ],
        "TypeDef": "Tuple"
      },
      "622": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 624
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 623
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "623": {
        "TypeIds": [
          197,
          7
        ],
        "TypeDef": "Tuple"
      },
      "624": {
        "TypeId": 623,
        "TypeDef": "Sequence"
      },
      "625": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 372
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "626": {
        "TypeIds": [
          7,
          0,
          627
        ],
        "TypeDef": "Tuple"
      },
      "627": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 164
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "628": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 197
          },
          {
            "Name": "locker",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 197
          },
          {
            "Name": "users",
            "TypeName": "u32",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeDef": "Composite"
      },
      "629": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 631
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 630
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "630": {
        "TypeIds": [
          6,
          197
        ],
        "TypeDef": "Tuple"
      },
      "631": {
        "TypeId": 630,
        "TypeDef": "Sequence"
      },
      "632": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
              "a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Invalid asset for the operation."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still users of the lock."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "633": {
        "TypeId": 634,
        "TypeDef": "Sequence"
      },
      "634": {
        "TypeFields": [
          {
            "Name": "sender",
            "TypeName": "ParaId",
            "TypeId": 199
          },
          {
            "Name": "state",
            "TypeName": "InboundState",
            "TypeId": 635
          },
          {
            "Name": "message_metadata",
            "TypeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
            "TypeId": 636
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "635": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundState"
        ],
        "TypeDef": "Variant"
      },
      "636": {
        "TypeId": 637,
        "TypeDef": "Sequence"
      },
      "637": {
        "TypeIds": [
          7,
          638
        ],
        "TypeDef": "Tuple"
      },
      "638": {
        "Variants": [
          {
            "Name": "ConcatenatedVersionedXcm",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ConcatenatedEncodedBlob",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Signals",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "XcmpMessageFormat"
        ],
        "TypeDef": "Variant"
      },
      "639": {
        "TypeIds": [
          199,
          7
        ],
        "TypeDef": "Tuple"
      },
      "640": {
        "TypeId": 641,
        "TypeDef": "Sequence"
      },
      "641": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 199
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 642
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 50
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 60
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 60
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "642": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "643": {
        "TypeIds": [
          199,
          60
        ],
        "TypeDef": "Tuple"
      },
      "644": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 7
          },
          {
            "Name": "threshold_weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "weight_restrict_decay",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "xcmp_max_individual_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "645": {
        "TypeIds": [
          199,
          7,
          12
        ],
        "TypeDef": "Tuple"
      },
      "646": {
        "Variants": [
          {
            "Name": "FailedToSend",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to send XCM message."
            ]
          },
          {
            "Name": "BadXcmOrigin",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Bad XCM origin."
            ]
          },
          {
            "Name": "BadXcm",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bad XCM data."
            ]
          },
          {
            "Name": "BadOverweightIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad overweight index."
            ]
          },
          {
            "Name": "WeightOverLimit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Provided weight is possibly not enough to execute the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "647": {
        "Variants": [
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset was not found."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The version of the `VersionedMultiLocation` value used is not able",
              "to be interpreted."
            ]
          },
          {
            "Name": "InvalidAssetId",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The asset id is invalid."
            ]
          },
          {
            "Name": "ConflictingLocation",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Another asset was already register with this location."
            ]
          },
          {
            "Name": "ConflictingAssetId",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Another asset was already register with this asset id."
            ]
          }
        ],
        "Path": [
          "orml_asset_registry",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "648": {
        "TypeIds": [
          148,
          148
        ],
        "TypeDef": "Tuple"
      },
      "649": {
        "TypeIds": [
          148,
          12
        ],
        "TypeDef": "Tuple"
      },
      "650": {
        "Variants": [
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The balance is too low."
            ]
          },
          {
            "Name": "BalanceOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The operation will cause balance to overflow."
            ]
          },
          {
            "Name": "UnhandledAsset",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Unhandled asset."
            ]
          }
        ],
        "Path": [
          "orml_unknown_tokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "651": {
        "Variants": [
          {
            "Name": "AssetHasNoReserve",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset has no reserve location."
            ]
          },
          {
            "Name": "NotCrossChainTransfer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not cross-chain transfer."
            ]
          },
          {
            "Name": "InvalidDest",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid transfer destination."
            ]
          },
          {
            "Name": "NotCrossChainTransferableCurrency",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Currency is not cross-chain transferable."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "XcmExecutionFailed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "XCM execution failed."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the",
              "destination chain."
            ]
          },
          {
            "Name": "InvalidAncestry",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Could not get ancestry of asset reserve location."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The MultiAsset is invalid."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          },
          {
            "Name": "DistinctReserveForAssetAndFee",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "We tried sending distinct asset and fee but they have different",
              "reserve chains."
            ]
          },
          {
            "Name": "ZeroFee",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The fee is zero."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The transfering asset amount is zero."
            ]
          },
          {
            "Name": "TooManyAssetsBeingSent",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The number of assets to be sent is over the maximum."
            ]
          },
          {
            "Name": "AssetIndexNonExistent",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The specified index does not exist in a MultiAssets struct."
            ]
          },
          {
            "Name": "FeeNotEnough",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Fee is not enough."
            ]
          },
          {
            "Name": "NotSupportedMultiLocation",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Not supported MultiLocation"
            ]
          },
          {
            "Name": "MinXcmFeeNotDefined",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "MinXcmFee not registered for certain reserve location"
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "652": {
        "TypeFields": [
          {
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 239
          },
          {
            "Name": "Call",
            "TypeId": 234
          },
          {
            "Name": "Signature",
            "TypeId": 653
          },
          {
            "Name": "Extra",
            "TypeId": 659
          }
        ],
        "TypeDef": "Composite"
      },
      "653": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 654
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 656
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 657
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "654": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 655
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "655": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "656": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 655
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "657": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 658
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "658": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "659": {
        "TypeIds": [
          660,
          661,
          662,
          663,
          664,
          666,
          667,
          668
        ],
        "TypeDef": "Tuple"
      },
      "660": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "661": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "662": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "663": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "664": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 665
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "665": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "666": {
        "TypeFields": [
          {
            "TypeName": "T::Index",
            "TypeId": 10
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "667": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "668": {
        "TypeFields": [
          {
            "Name": "tip",
            "TypeName": "BalanceOf<T>",
            "TypeId": 155
          },
          {
            "Name": "asset_id",
            "TypeName": "Option<ChargeAssetIdOf<T>>",
            "TypeId": 44
          }
        ],
        "Path": [
          "pallet_asset_tx_payment",
          "ChargeAssetTxPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "669": {
        "Path": [
          "zeitgeist_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 17,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 209
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 210,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 207,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 212
        },
        "Events": {
          "TypeId": 20
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 216,
            "Value": "Yk/XWgAHAIhSanQCAEABAsDNFwABBwACj6VLAgDQAAEHAOa9T1cCAPAAAQAAAsDNFwABBwCkI8BoAgAgAQEHAIhSanQCAEABAQcAopQaHQIAUAACwM0XAAAAAA==",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 220,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "+gAAAAAAAAA=",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 222,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 223,
            "Value": "JHplaXRnZWlzdCR6ZWl0Z2Vpc3QBAAAANQAAAAEAAAA46pPj8W89aWICAAAAKqYhIASd0tIBAAAAvJ2JkE9bkj8BAAAAaLZroSLJP6cCAAAAN8i7E1CpoqgDAAAA8/8U1atScFkDAAAAuoFzvyOy5vgBAAAA32rLaJkHYJsEAAAAN+OX/HyR9eQBAAAAQP461AH4lZoGAAAA94sni+U/RUwCAAAAqzwFcikf64sBAAAA0ryYl+7QjxUDAAAAj6A5QF6oN04BAAAAGwAAAAE=",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 60,
            "Value": "SQA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 227
        },
        "Index": 0
      },
      "1": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 228
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 4,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 1
      },
      "2": {
        "Name": "RandomnessCollectiveFlip",
        "Storage": {
          "Prefix": "RandomnessCollectiveFlip",
          "Entries": [
            {
              "Name": "RandomMaterial",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 229,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Series of block headers from the last 81 blocks that acts as random seed material. This",
                " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                " the oldest hash."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 230
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 30
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 235
        },
        "Events": {
          "TypeId": 29
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 9,
            "Value": "BwB0O6QLAgAgAA==",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 379
        },
        "Index": 3
      },
      "4": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 380
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 382,
                  "Value": 383
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 237
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [],
        "Errors": {
          "TypeId": 384
        },
        "Index": 4
      },
      "10": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 385
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 389
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 238
        },
        "Events": {
          "TypeId": 35
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "gPD6AgAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open."
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 392
        },
        "Index": 10
      },
      "11": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 393,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 394,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 37
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 11
      },
      "12": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 395
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 396,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 241
        },
        "Events": {
          "TypeId": 38
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 398,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 101,
            "Value": "AQBQOSeMBAAAAAAAAAAAAAA=",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "AKMCAAAAAAA=",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 398,
            "Value": "oIYBAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL3Rzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "Errors": {
          "TypeId": 400
        },
        "Index": 12
      },
      "13": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "Vesting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 401
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 403,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 242
        },
        "Events": {
          "TypeId": 39
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "gPD6AgAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "Name": "MaxVestingSchedules",
            "TypeId": 7,
            "Value": "HAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 404
        },
        "Index": 13
      },
      "14": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 405,
                  "Value": 406
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 244
        },
        "Events": {
          "TypeId": 40
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "gOoAggMAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "ADZuAQAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 408
        },
        "Index": 14
      },
      "15": {
        "Name": "Bounties",
        "Storage": {
          "Prefix": "Bounties",
          "Entries": [
            {
              "Name": "BountyCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of bounty proposals that have been made."
              ]
            },
            {
              "Name": "Bounties",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 409
                }
              },
              "Default": "AA==",
              "Docs": [
                " Bounties that have been made."
              ]
            },
            {
              "Name": "BountyDescriptions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 411
                }
              },
              "Default": "AA==",
              "Docs": [
                " The description of each bounty."
              ]
            },
            {
              "Name": "BountyApprovals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 396,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Bounty indices that have been approved but not yet funded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 246
        },
        "Events": {
          "TypeId": 42
        },
        "Constants": [
          {
            "Name": "BountyDepositBase",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for placing a bounty proposal."
            ]
          },
          {
            "Name": "BountyDepositPayoutDelay",
            "TypeId": 4,
            "Value": "YFQAAAAAAAA=",
            "Docs": [
              " The delay period for which a bounty beneficiary need to wait before claim the payout."
            ]
          },
          {
            "Name": "BountyUpdatePeriod",
            "TypeId": 4,
            "Value": "YNgDAAAAAAA=",
            "Docs": [
              " Bounty duration in blocks."
            ]
          },
          {
            "Name": "CuratorDepositMultiplier",
            "TypeId": 398,
            "Value": "IKEHAA==",
            "Docs": [
              " The curator deposit is calculated as a percentage of the curator fee.",
              "",
              " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
              " `CuratorDepositMin`."
            ]
          },
          {
            "Name": "CuratorDepositMax",
            "TypeId": 101,
            "Value": "AQBQOSeMBAAAAAAAAAAAAAA=",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "CuratorDepositMin",
            "TypeId": 101,
            "Value": "AQDodkgXAAAAAAAAAAAAAAA=",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "BountyValueMinimum",
            "TypeId": 6,
            "Value": "AIhSanQAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum value for a bounty."
            ]
          },
          {
            "Name": "DataDepositPerByte",
            "TypeId": 6,
            "Value": "AOQLVAIAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "Name": "MaximumReasonLength",
            "TypeId": 7,
            "Value": "ACAAAA==",
            "Docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          }
        ],
        "Errors": {
          "TypeId": 412
        },
        "Index": 15
      },
      "16": {
        "Name": "AssetTxPayment",
        "Storage": null,
        "Calls": null,
        "Events": {
          "TypeId": 43
        },
        "Constants": [],
        "Errors": null,
        "Index": 16
      },
      "20": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 413,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 416
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 417
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 420
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 426,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 427
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 50
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 247
        },
        "Events": {
          "TypeId": 45
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "QDgAAAAAAAA=",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "oIwAAAAAAAA=",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "oIwAAAAAAAA=",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "QDgAAAAAAAA=",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 50,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "IBwAAAAAAAA=",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 428
        },
        "Index": 20
      },
      "21": {
        "Name": "AdvisoryCommittee",
        "Storage": {
          "Prefix": "AdvisoryCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 429,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 234
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 430
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 78,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 249
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [],
        "Errors": {
          "TypeId": 431
        },
        "Index": 21
      },
      "22": {
        "Name": "AdvisoryCommitteeMembership",
        "Storage": {
          "Prefix": "AdvisoryCommitteeMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 432,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 253
        },
        "Events": {
          "TypeId": 51
        },
        "Constants": [],
        "Errors": {
          "TypeId": 433
        },
        "Index": 22
      },
      "23": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 434,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 234
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 430
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 78,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 254
        },
        "Events": {
          "TypeId": 52
        },
        "Constants": [],
        "Errors": {
          "TypeId": 435
        },
        "Index": 23
      },
      "24": {
        "Name": "CouncilMembership",
        "Storage": {
          "Prefix": "CouncilMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 436,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 255
        },
        "Events": {
          "TypeId": 53
        },
        "Constants": [],
        "Errors": {
          "TypeId": 437
        },
        "Index": 24
      },
      "25": {
        "Name": "TechnicalCommittee",
        "Storage": {
          "Prefix": "TechnicalCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 438,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 234
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 430
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 78,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 256
        },
        "Events": {
          "TypeId": 54
        },
        "Constants": [],
        "Errors": {
          "TypeId": 439
        },
        "Index": 25
      },
      "26": {
        "Name": "TechnicalCommitteeMembership",
        "Storage": {
          "Prefix": "TechnicalCommitteeMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 440,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 257
        },
        "Events": {
          "TypeId": 55
        },
        "Constants": [],
        "Errors": {
          "TypeId": 441
        },
        "Index": 26
      },
      "30": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 442
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 294
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 446
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 448,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 258
        },
        "Events": {
          "TypeId": 56
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "YGmaiQMAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "Name": "FieldDeposit",
            "TypeId": 6,
            "Value": "YE/zAgAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per additional field for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "cF9wgAMAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 7,
            "Value": "gAAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxAdditionalFields",
            "TypeId": 7,
            "Value": "EAAAAA==",
            "Docs": [
              " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
              " required to access an identity, but can be pretty high."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 7,
            "Value": "BAAAAA==",
            "Docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "Errors": {
          "TypeId": 452
        },
        "Index": 30
      },
      "31": {
        "Name": "Utility",
        "Storage": {
          "Prefix": "Utility",
          "Entries": []
        },
        "Calls": {
          "TypeId": 298
        },
        "Events": {
          "TypeId": 57
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 7,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 453
        },
        "Index": 31
      },
      "32": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 454
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 458
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 308
        },
        "Events": {
          "TypeId": 58
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "gGNtfgMAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "sKd5AQAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 7,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 7,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "gGNtfgMAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "YE/zAgAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 462
        },
        "Index": 32
      },
      "33": {
        "Name": "Contracts",
        "Storage": {
          "Prefix": "Contracts",
          "Entries": [
            {
              "Name": "PristineCode",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 463
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from an original code hash to the original code, untouched by instrumentation."
              ]
            },
            {
              "Name": "CodeStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 464
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between an original code hash and instrumented wasm code, ready for execution."
              ]
            },
            {
              "Name": "OwnerInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 466
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between an original code hash and its owner information."
              ]
            },
            {
              "Name": "Nonce",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " This is a **monotonic** counter incremented on contract instantiation.",
                "",
                " This is used in order to generate unique trie ids for contracts.",
                " The trie id of a new contract is calculated from hash(account_id, nonce).",
                " The nonce is required because otherwise the following sequence would lead to",
                " a possible collision of storage:",
                "",
                " 1. Create a new contract.",
                " 2. Terminate the contract.",
                " 3. Immediately recreate the contract with the same account_id.",
                "",
                " This is bad because the contents of a trie are deleted lazily and there might be",
                " storage of the old instantiation still in it when the new contract is created. Please",
                " note that we can't replace the counter by the block number because the sequence above",
                " can happen in the same block. We also can't keep the account counter in memory only",
                " because storage is the only way to communicate across different extrinsics in the",
                " same block.",
                "",
                " # Note",
                "",
                " Do not use it to determine the number of contracts. It won't be decremented if",
                " a contract is destroyed."
              ]
            },
            {
              "Name": "ContractInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 467
                }
              },
              "Default": "AA==",
              "Docs": [
                " The code associated with a given account.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "DeletionQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 468,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Evicted contracts that await child trie deletion.",
                "",
                " Child trie deletion is a heavy operation depending on the amount of storage items",
                " stored in said trie. Therefore this operation is performed lazily in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 310
        },
        "Events": {
          "TypeId": 61
        },
        "Constants": [
          {
            "Name": "Schedule",
            "TypeId": 471,
            "Value": "BAAAAAABAAAABAAAgAAAABAAAAAAEAAAAAEAACAAAAAAQAAABAAAAAAAAAAqCwAAODsAAI0oAACgEAAA1yoAAE8PAABHEgAAwSAAADQAAABotAAAZK0AAD0AAAAAAAAA/RIAAPYeAACCHQAAYTAAAE88AADJKAAAv4wEAaALAABBDAAAIQwAAH4KAAAsDAAA3wsAAHoNAABXDgAA/AoAAMcLAADEDQAAIA0AAGsOAACpCgAAUAsAAFMLAABZDAAAEAoAAGAMAADPDAAA1RQAABsOAAD3EwAA7hAAAN8MAADRCgAAagsAAN8MAADGCgAABg0AAMYNAAD3CwAAUscbAADOglYHAGp+kAcA/noiAACyPxEAAPoJHQAAUvcdAAAOyn0AAOJ6GgAAfkccAACWsxwAAKojGwAASg96AACa0gwAAFLRGAAAUQIAtnUdAADdAwD2OwnDAE54nAAAHlgvAQD6ArQeAE0UAIYgFAAANrgkIAEQfcUA1b0EskICRgCeKhUgARDlvQRKDccHARA1NwQCfuIHARCBVATymzggARDB3QSubrckAH7I358AssuEhACKeK0jAN4ICgAAA1pqz0UA1RcA5RQACRQAxsMZAAA5DwAqiF4AAL0/AB4PHAIAsRsA/uNOAADVGwA2wfwPADoe5AMAtgERAAD2fxoAABKFDAAA",
            "Docs": [
              " Cost schedule and limits."
            ]
          },
          {
            "Name": "DeletionQueueDepth",
            "TypeId": 7,
            "Value": "gAAAAA==",
            "Docs": [
              " The maximum number of contracts that can be pending for deletion.",
              "",
              " When a contract is deleted by calling `seal_terminate` it becomes inaccessible",
              " immediately, but the deletion of the storage items it has accumulated is performed",
              " later. The contract is put into the deletion queue. This defines how many",
              " contracts can be queued up at the same time. If that limit is reached `seal_terminate`",
              " will fail. The action must be retried in a later block in that case.",
              "",
              " The reasons for limiting the queue depth are:",
              "",
              " 1. The queue is in storage in order to be persistent between blocks. We want to limit",
              " \tthe amount of storage that can be consumed.",
              " 2. The queue is stored in a vector and needs to be decoded as a whole when reading",
              "\t\tit at the end of each block. Longer queues take more weight to decode and hence",
              "\t\tlimit the amount of items that can be deleted per block."
            ]
          },
          {
            "Name": "DeletionWeightLimit",
            "TypeId": 9,
            "Value": "BwCXLLsIAgAYAA==",
            "Docs": [
              " The maximum amount of weight that can be consumed per block for lazy trie removal.",
              "",
              " The amount of weight that is dedicated per block to work on the deletion queue. Larger",
              " values allow more trie keys to be deleted in each block but reduce the amount of",
              " weight that is left for transactions. See [`Self::DeletionQueueDepth`] for more",
              " information about the deletion queue."
            ]
          },
          {
            "Name": "DepositPerByte",
            "TypeId": 6,
            "Value": "sHELAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance a caller has to pay for each byte of storage.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "Name": "DepositPerItem",
            "TypeId": 6,
            "Value": "ANYRfgMAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of balance a caller has to pay for each storage item.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "Name": "MaxCodeLen",
            "TypeId": 7,
            "Value": "AOwBAA==",
            "Docs": [
              " The maximum length of a contract code in bytes. This limit applies to the instrumented",
              " version of the code. Therefore `instantiate_with_code` can fail even when supplying",
              " a wasm binary below this maximum size.",
              "",
              " The value should be chosen carefully taking into the account the overall memory limit",
              " your runtime has, as well as the [maximum allowed callstack",
              " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."
            ]
          },
          {
            "Name": "MaxStorageKeyLen",
            "TypeId": 7,
            "Value": "gAAAAA==",
            "Docs": [
              " The maximum allowable length in bytes for storage keys."
            ]
          },
          {
            "Name": "UnsafeUnstableInterface",
            "TypeId": 50,
            "Value": "AA==",
            "Docs": [
              " Make contract callable functions marked as `#[unstable]` available.",
              "",
              " Contracts that use `#[unstable]` functions won't be able to be uploaded unless",
              " this is set to `true`. This is only meant for testnets and dev nodes in order to",
              " experiment with new features.",
              "",
              " # Warning",
              "",
              " Do **not** set to `true` on productions chains."
            ]
          },
          {
            "Name": "MaxDebugBufferLen",
            "TypeId": 7,
            "Value": "AAAgAA==",
            "Docs": [
              " The maximum length of the debug buffer in bytes."
            ]
          }
        ],
        "Errors": {
          "TypeId": 475
        },
        "Index": 33
      },
      "40": {
        "Name": "AssetManager",
        "Storage": {
          "Prefix": "AssetManager",
          "Entries": []
        },
        "Calls": {
          "TypeId": 313
        },
        "Events": null,
        "Constants": [
          {
            "Name": "GetNativeCurrencyId",
            "TypeId": 63,
            "Value": "BA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 476
        },
        "Index": 40
      },
      "41": {
        "Name": "Tokens",
        "Storage": {
          "Prefix": "Tokens",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 63,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total issuance of a token type."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 477,
                  "Value": 478
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks of a token type under an account.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Accounts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 477,
                  "Value": 481
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " The balance of a token type under an account.",
                "",
                " NOTE: If the total is ever zero, decrease account ref account.",
                "",
                " NOTE: This is only used in the case that this module is used to store",
                " balances."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 477,
                  "Value": 482
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 62
        },
        "Constants": [
          {
            "Name": "MaxLocks",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxReserves",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 485
        },
        "Index": 41
      },
      "50": {
        "Name": "MarketCommons",
        "Storage": {
          "Prefix": "MarketCommons",
          "Entries": [
            {
              "Name": "Markets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 104
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds all markets"
              ]
            },
            {
              "Name": "MarketCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The number of markets that have been created (including removed markets) and the next",
                " identifier for a created market."
              ]
            },
            {
              "Name": "MarketPool",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps a market ID to a related pool ID. It is up to the caller to keep and sync valid",
                " existent markets with valid existent pools.",
                "",
                " Beware! DEPRECATED as of v0.5.0."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 486
        },
        "Index": 50
      },
      "51": {
        "Name": "Authorized",
        "Storage": {
          "Prefix": "Authorized",
          "Entries": [
            {
              "Name": "AuthorizedOutcomeReports",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 487
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps the market id to the outcome reported by the authorized account.    "
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 315
        },
        "Events": {
          "TypeId": 67
        },
        "Constants": [
          {
            "Name": "CorrectionPeriod",
            "TypeId": 4,
            "Value": "IBwAAAAAAAA=",
            "Docs": [
              " The period, in which the authority can correct the outcome of a market.",
              " This value must not be zero."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL2F0emQ=",
            "Docs": [
              " Identifier of this pallet"
            ]
          }
        ],
        "Errors": {
          "TypeId": 488
        },
        "Index": 51
      },
      "52": {
        "Name": "Court",
        "Storage": {
          "Prefix": "Court",
          "Entries": [
            {
              "Name": "CourtPool",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 489,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The pool of jurors and delegators who can get randomly selected according to their stake.",
                " The pool is sorted by `stake` in ascending order [min, ..., max]."
              ]
            },
            {
              "Name": "Participants",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 492
                }
              },
              "Default": "AA==",
              "Docs": [
                " The general information about each juror and delegator."
              ]
            },
            {
              "Name": "SelectionNonce",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " An extra layer of pseudo randomness so that we can generate a new random seed with it."
              ]
            },
            {
              "Name": "SelectedDraws",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 496
                }
              },
              "Default": "AA==",
              "Docs": [
                " The randomly selected jurors and delegators, their vote weight,",
                " the status about their vote and their selected and risked funds."
              ]
            },
            {
              "Name": "Courts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 70
                }
              },
              "Default": "AA==",
              "Docs": [
                " The general information about each court."
              ]
            },
            {
              "Name": "NextCourtId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The next identifier for a new court."
              ]
            },
            {
              "Name": "MarketIdToCourtId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from market id to court id."
              ]
            },
            {
              "Name": "CourtIdToMarketId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from court id to market id."
              ]
            },
            {
              "Name": "RequestBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The future block number when jurors should start voting.",
                " This is useful for the user experience of the jurors to vote for multiple courts at once."
              ]
            },
            {
              "Name": "YearlyInflation",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 80,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current inflation rate."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 316
        },
        "Events": {
          "TypeId": 69
        },
        "Constants": [
          {
            "Name": "AppealBond",
            "TypeId": 6,
            "Value": "AEDlnDASAAAAAAAAAAAAAA==",
            "Docs": [
              " The required base bond in order to get an appeal initiated.",
              " This bond increases exponentially with the number of appeals."
            ]
          },
          {
            "Name": "BlocksPerYear",
            "TypeId": 4,
            "Value": "qCAoAAAAAAA=",
            "Docs": [
              " The expected blocks per year to calculate the inflation emission."
            ]
          },
          {
            "Name": "VotePeriod",
            "TypeId": 4,
            "Value": "YFQAAAAAAAA=",
            "Docs": [
              " The time in which the jurors can cast their commitment vote."
            ]
          },
          {
            "Name": "AggregationPeriod",
            "TypeId": 4,
            "Value": "YFQAAAAAAAA=",
            "Docs": [
              " The time in which the jurors should reveal their commitment vote."
            ]
          },
          {
            "Name": "AppealPeriod",
            "TypeId": 4,
            "Value": "IBwAAAAAAAA=",
            "Docs": [
              " The time in which a court case can get appealed."
            ]
          },
          {
            "Name": "LockId",
            "TypeId": 66,
            "Value": "emdlL2NvbGs=",
            "Docs": [
              " The court lock identifier."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL2NvdXQ=",
            "Docs": [
              " Identifier of this pallet"
            ]
          },
          {
            "Name": "InflationPeriod",
            "TypeId": 4,
            "Value": "wEsDAAAAAAA=",
            "Docs": [
              " The inflation period in which new tokens are minted."
            ]
          },
          {
            "Name": "MaxAppeals",
            "TypeId": 7,
            "Value": "BAAAAA==",
            "Docs": [
              " The maximum number of appeals until a court fails."
            ]
          },
          {
            "Name": "MaxSelectedDraws",
            "TypeId": 7,
            "Value": "/gEAAA==",
            "Docs": [
              " The maximum number of randomly selected n * `MinJurorStake` (n equals all draw weights)",
              " out of all jurors and delegators stake. This configuration parameter should be",
              " the maximum necessary_draws_weight multiplied by 2.",
              " Each `MinJurorStake` (draw weight) out of `n * MinJurorStake` belongs",
              " to one juror or one delegator.",
              " (necessary_draws_weight = 2^(appeals_len) * 31 + 2^(appeals_len) - 1)",
              " Assume MaxAppeals - 1 (= 3), example: 2^3 * 31 + 2^3 - 1 = 255",
              " => 2 * 255 = 510 = `MaxSelectedDraws`.",
              " Why the multiplication by two?",
              " Because each draw weight is associated with one juror account id and",
              " potentially a delegator account id."
            ]
          },
          {
            "Name": "MaxDelegations",
            "TypeId": 7,
            "Value": "BQAAAA==",
            "Docs": [
              " The maximum number of possible delegations."
            ]
          },
          {
            "Name": "MaxCourtParticipants",
            "TypeId": 7,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of jurors and delegators that can be registered."
            ]
          },
          {
            "Name": "MaxYearlyInflation",
            "TypeId": 80,
            "Value": "AOH1BQ==",
            "Docs": [
              " The maximum yearly inflation rate."
            ]
          },
          {
            "Name": "MinJurorStake",
            "TypeId": 6,
            "Value": "AFA5J4wEAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum stake a user needs to lock to become a juror."
            ]
          },
          {
            "Name": "RequestInterval",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " The global interval which schedules the start of new court vote periods."
            ]
          },
          {
            "Name": "TreasuryPalletId",
            "TypeId": 399,
            "Value": "emdlL3Rzcnk=",
            "Docs": [
              " The treasury pallet identifier."
            ]
          }
        ],
        "Errors": {
          "TypeId": 501
        },
        "Index": 52
      },
      "53": {
        "Name": "LiquidityMining",
        "Storage": {
          "Prefix": "LiquidityMining",
          "Entries": [
            {
              "Name": "BlockBoughtShares",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 503,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Shares bought in the current block being constructed. Automatically *erased* after each finalized block."
              ]
            },
            {
              "Name": "BlockSoldShares",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 503,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Shares sold in the current block being constructed. Automatically *erased* after each finalized block."
              ]
            },
            {
              "Name": "OwnedValues",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 503,
                  "Value": 504
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Owned balances (not shares) that are going to be distributed as incentives. Automatically",
                " *updated* after each finalized block."
              ]
            },
            {
              "Name": "PerBlockIncentive",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Per block distribution. How much each block will distribute across bought shares."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 317
        },
        "Events": {
          "TypeId": 81
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL2x5bWc=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 505
        },
        "Index": 53
      },
      "54": {
        "Name": "RikiddoSigmoidFeeMarketEma",
        "Storage": {
          "Prefix": "RikiddoSigmoidFeeMarketEma",
          "Entries": [
            {
              "Name": "RikiddoPerPool",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 506
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage that maps pool ids to Rikiddo instances."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "BalanceFractionalDecimals",
            "TypeId": 2,
            "Value": "Cg==",
            "Docs": [
              " Number of fractional decimal places for one unit of currency."
            ]
          }
        ],
        "Errors": {
          "TypeId": 526
        },
        "Index": 54
      },
      "55": {
        "Name": "SimpleDisputes",
        "Storage": {
          "Prefix": "SimpleDisputes",
          "Entries": [
            {
              "Name": "Disputes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 527
                }
              },
              "Default": "AA==",
              "Docs": [
                " For each market, this holds the dispute information for each dispute that's",
                " been issued."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 318
        },
        "Events": {
          "TypeId": 83
        },
        "Constants": [
          {
            "Name": "OutcomeBond",
            "TypeId": 6,
            "Value": "AEDlnDASAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency that must be bonded in order to create a dispute."
            ]
          },
          {
            "Name": "OutcomeFactor",
            "TypeId": 6,
            "Value": "AMgXqAQAAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional amount of currency that must be bonded when creating a subsequent",
              " dispute."
            ]
          },
          {
            "Name": "MaxDisputes",
            "TypeId": 7,
            "Value": "AQAAAA==",
            "Docs": [
              " The maximum number of disputes allowed on any single market."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL3NlZHA=",
            "Docs": [
              " The pallet identifier."
            ]
          }
        ],
        "Errors": {
          "TypeId": 529
        },
        "Index": 55
      },
      "56": {
        "Name": "Swaps",
        "Storage": {
          "Prefix": "Swaps",
          "Entries": [
            {
              "Name": "Pools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "PoolsCachedForArbitrage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 33
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "SubsidyProviders",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 503,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "NextPoolId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 319
        },
        "Events": {
          "TypeId": 85
        },
        "Constants": [
          {
            "Name": "ExitFee",
            "TypeId": 6,
            "Value": "QEIPAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The fee for exiting a pool."
            ]
          },
          {
            "Name": "MaxAssets",
            "TypeId": 60,
            "Value": "QQA=",
            "Docs": []
          },
          {
            "Name": "MaxInRatio",
            "TypeId": 6,
            "Value": "VqGuxgAAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxOutRatio",
            "TypeId": 6,
            "Value": "VqGuxgAAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxSwapFee",
            "TypeId": 6,
            "Value": "AMqaOwAAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxTotalWeight",
            "TypeId": 6,
            "Value": "AADyBSoBAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxWeight",
            "TypeId": 6,
            "Value": "AAD5ApUAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "MinAssets",
            "TypeId": 60,
            "Value": "AgA=",
            "Docs": [
              " The minimum amount of assets in a pool."
            ]
          },
          {
            "Name": "MinWeight",
            "TypeId": 6,
            "Value": "AOQLVAIAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL3N3YXA=",
            "Docs": [
              " The module identifier."
            ]
          }
        ],
        "Errors": {
          "TypeId": 530
        },
        "Index": 56
      },
      "57": {
        "Name": "PredictionMarkets",
        "Storage": {
          "Prefix": "PredictionMarkets",
          "Entries": [
            {
              "Name": "MarketIdsPerOpenBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 532
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MarketIdsPerOpenTimeFrame",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 532
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MarketIdsPerCloseBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 532
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of market identifiers to the block their market ends on."
              ]
            },
            {
              "Name": "MarketIdsPerCloseTimeFrame",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 532
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of market identifiers to the time frame their market ends in."
              ]
            },
            {
              "Name": "LastTimeFrame",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The last time frame that was checked for markets to close."
              ]
            },
            {
              "Name": "MarketIdsPerDisputeBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 532
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of market identifiers to the block they were disputed at.",
                " A market only ends up here if it was disputed."
              ]
            },
            {
              "Name": "MarketIdsPerReportBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 532
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of market identifiers to the block that they were reported on."
              ]
            },
            {
              "Name": "MarketIdsForEdit",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 124
                }
              },
              "Default": "AA==",
              "Docs": [
                " Contains market_ids for which advisor has requested edit.",
                " Value for given market_id represents the reason for the edit."
              ]
            },
            {
              "Name": "MarketsCollectingSubsidy",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 533,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Contains a list of all markets that are currently collecting subsidy and the deadline."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 320
        },
        "Events": {
          "TypeId": 102
        },
        "Constants": [
          {
            "Name": "AdvisoryBond",
            "TypeId": 6,
            "Value": "ACBKqdEBAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency that must be bonded for a market approved by the",
              "  advisory committee."
            ]
          },
          {
            "Name": "AdvisoryBondSlashPercentage",
            "TypeId": 136,
            "Value": "AA==",
            "Docs": [
              " The percentage of the advisory bond that gets slashed when a market is rejected."
            ]
          },
          {
            "Name": "CloseEarlyDisputeBond",
            "TypeId": 6,
            "Value": "AEDlnDASAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency that must be bonded",
              " by the disputant in order to dispute an early market closure of the market creator."
            ]
          },
          {
            "Name": "CloseEarlyProtectionTimeFramePeriod",
            "TypeId": 4,
            "Value": "AC6TAgAAAAA=",
            "Docs": [
              " The milliseconds to wait for the `CloseMarketsEarlyOrigin`",
              " before the early market close actually happens (fat-finger protection)."
            ]
          },
          {
            "Name": "CloseEarlyProtectionBlockPeriod",
            "TypeId": 4,
            "Value": "EA4AAAAAAAA=",
            "Docs": [
              " The block time to wait for the `CloseMarketsEarlyOrigin`",
              " before the early market close actually happens (fat-finger protection)."
            ]
          },
          {
            "Name": "CloseEarlyRequestBond",
            "TypeId": 6,
            "Value": "AEDlnDASAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency that must be bonded",
              " by the market creator in order to schedule an early market closure."
            ]
          },
          {
            "Name": "DisputeBond",
            "TypeId": 6,
            "Value": "AEDlnDASAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency that must be bonded in order to create a dispute."
            ]
          },
          {
            "Name": "MaxCategories",
            "TypeId": 60,
            "Value": "QAA=",
            "Docs": [
              " The maximum number of categories available for categorical markets."
            ]
          },
          {
            "Name": "MinCategories",
            "TypeId": 60,
            "Value": "AgA=",
            "Docs": [
              " The minimum number of categories available for categorical markets."
            ]
          },
          {
            "Name": "MaxCreatorFee",
            "TypeId": 80,
            "Value": "gJaYAA==",
            "Docs": [
              " A upper bound for the fee that is charged each trade and given to the market creator."
            ]
          },
          {
            "Name": "MaxDisputes",
            "TypeId": 7,
            "Value": "AQAAAA==",
            "Docs": [
              " The maximum number of disputes allowed on any single market."
            ]
          },
          {
            "Name": "MinDisputeDuration",
            "TypeId": 4,
            "Value": "EA4AAAAAAAA=",
            "Docs": [
              " The minimum number of blocks allowed to be specified as dispute_duration",
              " in create_market."
            ]
          },
          {
            "Name": "MinOracleDuration",
            "TypeId": 4,
            "Value": "LAEAAAAAAAA=",
            "Docs": [
              " The minimum number of blocks allowed to be specified as oracle_duration",
              " in create_market."
            ]
          },
          {
            "Name": "MaxGracePeriod",
            "TypeId": 4,
            "Value": "qCAoAAAAAAA=",
            "Docs": [
              " The maximum number of blocks allowed to be specified as grace_period",
              " in create_market."
            ]
          },
          {
            "Name": "MaxOracleDuration",
            "TypeId": 4,
            "Value": "wIkBAAAAAAA=",
            "Docs": [
              " The maximum number of blocks allowed to be specified as oracle_duration",
              " in create_market."
            ]
          },
          {
            "Name": "MaxDisputeDuration",
            "TypeId": 4,
            "Value": "wEsDAAAAAAA=",
            "Docs": [
              " The maximum number of blocks allowed to be specified as dispute_duration",
              " in create_market."
            ]
          },
          {
            "Name": "MaxRejectReasonLen",
            "TypeId": 7,
            "Value": "AAQAAA==",
            "Docs": [
              " The maximum length of reject reason string."
            ]
          },
          {
            "Name": "MaxMarketLifetime",
            "TypeId": 4,
            "Value": "oIKgAAAAAAA=",
            "Docs": [
              " The maximum allowed duration of a market from creation to market close in blocks."
            ]
          },
          {
            "Name": "MaxEditReasonLen",
            "TypeId": 7,
            "Value": "AAQAAA==",
            "Docs": [
              " The maximum number of bytes allowed as edit reason."
            ]
          },
          {
            "Name": "OutsiderBond",
            "TypeId": 6,
            "Value": "AECUUqMDAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL3ByZWQ=",
            "Docs": [
              " The module identifier."
            ]
          },
          {
            "Name": "CloseEarlyBlockPeriod",
            "TypeId": 4,
            "Value": "oIwAAAAAAAA=",
            "Docs": [
              " The block time to wait for the market creator",
              " before the early market close actually happens."
            ]
          },
          {
            "Name": "CloseEarlyTimeFramePeriod",
            "TypeId": 4,
            "Value": "AMy/GQAAAAA=",
            "Docs": [
              " The milliseconds to wait for the market creator",
              " before the early market close actually happens."
            ]
          },
          {
            "Name": "OracleBond",
            "TypeId": 6,
            "Value": "ACBKqdEBAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency that must be bonded to ensure the oracle reports",
              "  in a timely manner."
            ]
          },
          {
            "Name": "ValidityBond",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency that must be bonded for a permissionless market,",
              " guaranteeing that it will resolve as anything but `Invalid`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 536
        },
        "Index": 57
      },
      "58": {
        "Name": "Styx",
        "Storage": {
          "Prefix": "Styx",
          "Entries": [
            {
              "Name": "Crossings",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 33
                }
              },
              "Default": "AA==",
              "Docs": [
                " Keep track of crossings. Accounts are only able to cross once."
              ]
            },
            {
              "Name": "BurnAmount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "ACBKqdEBAAAAAAAAAAAAAA==",
              "Docs": [
                " An extra layer of pseudo randomness."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 323
        },
        "Events": {
          "TypeId": 125
        },
        "Constants": [],
        "Errors": {
          "TypeId": 537
        },
        "Index": 58
      },
      "59": {
        "Name": "GlobalDisputes",
        "Storage": {
          "Prefix": "GlobalDisputes",
          "Entries": [
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 538
                }
              },
              "Default": "AA==",
              "Docs": [
                " All highest lock information (vote id, outcome index and locked balance)",
                " for a particular voter.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "Outcomes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 541,
                  "Value": 542
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps the market id to the outcome and providing information about the outcome."
              ]
            },
            {
              "Name": "GlobalDisputesInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 545
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps the market id to all information",
                " about the global dispute."
              ]
            },
            {
              "Name": "Winners",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 547
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 324
        },
        "Events": {
          "TypeId": 126
        },
        "Constants": [
          {
            "Name": "AddOutcomePeriod",
            "TypeId": 4,
            "Value": "IBwAAAAAAAA=",
            "Docs": [
              " The time period in which the addition of new outcomes are allowed."
            ]
          },
          {
            "Name": "GlobalDisputeLockId",
            "TypeId": 66,
            "Value": "emdlL2dkbGs=",
            "Docs": [
              " The vote lock identifier."
            ]
          },
          {
            "Name": "GlobalDisputesPalletId",
            "TypeId": 399,
            "Value": "emdlL2dsZHA=",
            "Docs": [
              " The pallet identifier."
            ]
          },
          {
            "Name": "MaxGlobalDisputeVotes",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum numbers of distinct markets",
              " on which one account can simultaneously vote on outcomes.",
              " When the user unlocks, the user has again `MaxGlobalDisputeVotes` number of votes.",
              " This constant is useful to limit the number of for-loop iterations (weight constraints)."
            ]
          },
          {
            "Name": "MaxOwners",
            "TypeId": 7,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum number of owners",
              " for a voting outcome for private API calls of `push_vote_outcome`."
            ]
          },
          {
            "Name": "MinOutcomeVoteAmount",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum required amount to vote on an outcome."
            ]
          },
          {
            "Name": "RemoveKeysLimit",
            "TypeId": 7,
            "Value": "+gAAAA==",
            "Docs": [
              " The maximum number of keys to remove from a storage map."
            ]
          },
          {
            "Name": "GdVotingPeriod",
            "TypeId": 4,
            "Value": "4MQAAAAAAAA=",
            "Docs": [
              " The time period in which votes are allowed."
            ]
          },
          {
            "Name": "VotingOutcomeFee",
            "TypeId": 6,
            "Value": "ACBKqdEBAAAAAAAAAAAAAA==",
            "Docs": [
              " The fee required to add a voting outcome."
            ]
          }
        ],
        "Errors": {
          "TypeId": 549
        },
        "Index": 59
      },
      "60": {
        "Name": "NeoSwaps",
        "Storage": {
          "Prefix": "NeoSwaps",
          "Entries": [
            {
              "Name": "Pools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 550
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 325
        },
        "Events": {
          "TypeId": 127
        },
        "Constants": [
          {
            "Name": "MaxLiquidityTreeDepth",
            "TypeId": 7,
            "Value": "CQAAAA==",
            "Docs": [
              " The maximum allowed liquidity tree depth per pool. Each pool can support `2^(depth + 1)",
              " - 1` liquidity providers. **Must** be less than 16."
            ]
          },
          {
            "Name": "MaxSwapFee",
            "TypeId": 6,
            "Value": "AMqaOwAAAAAAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL25lb3M=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 560
        },
        "Index": 60
      },
      "61": {
        "Name": "Orderbook",
        "Storage": {
          "Prefix": "Orderbook",
          "Entries": [
            {
              "Name": "NextOrderId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "Orders",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 129
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 326
        },
        "Events": {
          "TypeId": 128
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL29yZGI=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 564
        },
        "Index": 61
      },
      "62": {
        "Name": "Parimutuel",
        "Storage": {
          "Prefix": "Parimutuel",
          "Entries": []
        },
        "Calls": {
          "TypeId": 327
        },
        "Events": {
          "TypeId": 130
        },
        "Constants": [
          {
            "Name": "MinBetSize",
            "TypeId": 6,
            "Value": "APIFKgEAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount each bet must be. Must be larger than or equal to the existential",
              " deposit of parimutuel shares."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 399,
            "Value": "emdlL3BybXQ=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 565
        },
        "Index": 62
      },
      "100": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                " which will result the next block process with the new validation code. This concludes the upgrade process.",
                "",
                " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 330,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 567,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 332,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 569,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 575,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 576,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 577,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 580,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 215,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 215,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The next authorized upgrade, if there is one."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See [`Pallet::set_custom_validation_head_data`] for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 328
        },
        "Events": {
          "TypeId": 131
        },
        "Constants": [],
        "Errors": {
          "TypeId": 582
        },
        "Index": 100
      },
      "101": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 199,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 101
      },
      "110": {
        "Name": "ParachainStaking",
        "Storage": {
          "Prefix": "ParachainStaking",
          "Entries": [
            {
              "Name": "CollatorCommission",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 80,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Commission percent taken off of rewards for all collators"
              ]
            },
            {
              "Name": "TotalSelected",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The total candidates selected every round"
              ]
            },
            {
              "Name": "ParachainBondInfo",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 583,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Parachain bond config info { account, percent_of_inflation }"
              ]
            },
            {
              "Name": "Round",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 584,
                "Item2": null
              },
              "Default": "AQAAAAEAAAAAAAAAFAAAAA==",
              "Docs": [
                " Current round index and next round scheduled transition"
              ]
            },
            {
              "Name": "DelegatorState",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 585
                }
              },
              "Default": "AA==",
              "Docs": [
                " Get delegator state associated with an account if account is delegating else None"
              ]
            },
            {
              "Name": "CandidateInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 590
                }
              },
              "Default": "AA==",
              "Docs": [
                " Get collator candidate info associated with an account if account is candidate else None"
              ]
            },
            {
              "Name": "DelegationScheduledRequests",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 595
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores outstanding delegation requests per collator."
              ]
            },
            {
              "Name": "AutoCompoundingDelegations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 597
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores auto-compounding configuration per collator."
              ]
            },
            {
              "Name": "TopDelegations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 599
                }
              },
              "Default": "AA==",
              "Docs": [
                " Top delegations for collator candidate"
              ]
            },
            {
              "Name": "BottomDelegations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 599
                }
              },
              "Default": "AA==",
              "Docs": [
                " Bottom delegations for collator candidate"
              ]
            },
            {
              "Name": "SelectedCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 78,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The collator candidates selected for the current round"
              ]
            },
            {
              "Name": "Total",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total capital locked by this staking pallet"
              ]
            },
            {
              "Name": "CandidatePool",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 586,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The pool of collator candidates, each with their total backing stake"
              ]
            },
            {
              "Name": "AtStake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 600,
                  "Value": 601
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Snapshot of collator delegation stake at the start of the round"
              ]
            },
            {
              "Name": "DelayedPayouts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 604
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delayed payouts"
              ]
            },
            {
              "Name": "Staked",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total counted stake for selected candidates in the round"
              ]
            },
            {
              "Name": "InflationConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 605,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Inflation configuration"
              ]
            },
            {
              "Name": "Points",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 7,
                  "Value": 7
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Total points awarded to collators for block production in the round"
              ]
            },
            {
              "Name": "AwardedPts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 600,
                  "Value": 7
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Points for each collator per round"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 341
        },
        "Events": {
          "TypeId": 132
        },
        "Constants": [
          {
            "Name": "MinBlocksPerRound",
            "TypeId": 7,
            "Value": "CgAAAA==",
            "Docs": [
              " Minimum number of blocks per round"
            ]
          },
          {
            "Name": "LeaveCandidatesDelay",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds that candidates remain bonded before exit request is executable"
            ]
          },
          {
            "Name": "CandidateBondLessDelay",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds candidate requests to decrease self-bond must wait to be executable"
            ]
          },
          {
            "Name": "LeaveDelegatorsDelay",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds that delegators remain bonded before exit request is executable"
            ]
          },
          {
            "Name": "RevokeDelegationDelay",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds that delegations remain bonded before revocation request is executable"
            ]
          },
          {
            "Name": "DelegationBondLessDelay",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds that delegation less requests must wait before executable"
            ]
          },
          {
            "Name": "RewardPaymentDelay",
            "TypeId": 7,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of rounds after which block authors are rewarded"
            ]
          },
          {
            "Name": "MinSelectedCandidates",
            "TypeId": 7,
            "Value": "CAAAAA==",
            "Docs": [
              " Minimum number of selected candidates every round"
            ]
          },
          {
            "Name": "MaxTopDelegationsPerCandidate",
            "TypeId": 7,
            "Value": "LAEAAA==",
            "Docs": [
              " Maximum top delegations counted per candidate"
            ]
          },
          {
            "Name": "MaxBottomDelegationsPerCandidate",
            "TypeId": 7,
            "Value": "MgAAAA==",
            "Docs": [
              " Maximum bottom delegations (not counted) per candidate"
            ]
          },
          {
            "Name": "MaxDelegationsPerDelegator",
            "TypeId": 7,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum delegations per delegator"
            ]
          },
          {
            "Name": "MinCollatorStk",
            "TypeId": 6,
            "Value": "AAD5ApUAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake required for any candidate to be in `SelectedCandidates` for the round"
            ]
          },
          {
            "Name": "MinCandidateStk",
            "TypeId": 6,
            "Value": "AAD5ApUAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake required for any account to be a collator candidate"
            ]
          },
          {
            "Name": "MinDelegation",
            "TypeId": 6,
            "Value": "APIFKgEAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake for any registered on-chain account to delegate"
            ]
          },
          {
            "Name": "MinDelegatorStk",
            "TypeId": 6,
            "Value": "APIFKgEAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake for any registered on-chain account to be a delegator"
            ]
          }
        ],
        "Errors": {
          "TypeId": 606
        },
        "Index": 110
      },
      "111": {
        "Name": "AuthorInherent",
        "Storage": {
          "Prefix": "AuthorInherent",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            },
            {
              "Name": "HighestSlotSeen",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The highest slot that has been seen in the history of this chain.",
                " This is a strictly-increasing value."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 344
        },
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 607
        },
        "Index": 111
      },
      "112": {
        "Name": "AuthorFilter",
        "Storage": {
          "Prefix": "AuthorFilter",
          "Entries": [
            {
              "Name": "EligibleRatio",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 136,
                "Item2": null
              },
              "Default": "Mg==",
              "Docs": []
            },
            {
              "Name": "EligibleCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 138,
                "Item2": null
              },
              "Default": "MgAAAA==",
              "Docs": [
                " The number of active authors that will be eligible at each height."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 345
        },
        "Events": {
          "TypeId": 137
        },
        "Constants": [],
        "Errors": null,
        "Index": 112
      },
      "113": {
        "Name": "AuthorMapping",
        "Storage": {
          "Prefix": "AuthorMapping",
          "Entries": [
            {
              "Name": "MappingWithDeposit",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 140,
                  "Value": 608
                }
              },
              "Default": "AA==",
              "Docs": [
                " We maintain a mapping from the NimbusIds used in the consensus layer",
                " to the AccountIds runtime."
              ]
            },
            {
              "Name": "NimbusLookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 140
                }
              },
              "Default": "AA==",
              "Docs": [
                " We maintain a reverse mapping from AccountIds to NimbusIDS"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 346
        },
        "Events": {
          "TypeId": 139
        },
        "Constants": [],
        "Errors": {
          "TypeId": 609
        },
        "Index": 113
      },
      "120": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": null,
        "Events": {
          "TypeId": 143
        },
        "Constants": [],
        "Errors": {
          "TypeId": 610
        },
        "Index": 120
      },
      "121": {
        "Name": "DmpQueue",
        "Storage": {
          "Prefix": "DmpQueue",
          "Entries": [
            {
              "Name": "Configuration",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 611,
                "Item2": null
              },
              "Default": "BwDkC1QCAgAEAA==",
              "Docs": [
                " The configuration."
              ]
            },
            {
              "Name": "PageIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 612,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The page index."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 7,
                  "Value": 613
                }
              },
              "Default": "AA==",
              "Docs": [
                " The queue pages."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 614
                }
              },
              "Default": "AA==",
              "Docs": [
                " The overweight messages."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 347
        },
        "Events": {
          "TypeId": 146
        },
        "Constants": [],
        "Errors": {
          "TypeId": 615
        },
        "Index": 121
      },
      "122": {
        "Name": "PolkadotXcm",
        "Storage": {
          "Prefix": "PolkadotXcm",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 616
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 7
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 620,
                  "Value": 7
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 620,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 620,
                  "Value": 621
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 622,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 625,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 626,
                  "Value": 628
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 629
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 348
        },
        "Events": {
          "TypeId": 147
        },
        "Constants": [],
        "Errors": {
          "TypeId": 632
        },
        "Index": 122
      },
      "123": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 633,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Status of the inbound XCMP channels."
              ]
            },
            {
              "Name": "InboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 639,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 640,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 643,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 199,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 644,
                "Item2": null
              },
              "Default": "AgAAAAUAAAABAAAAghoGAAAIAAcAyBeoBAIABAA=",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 645
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages that exceeded max individual message weight budget.",
                "",
                " These message stay in this storage map until they are manually dispatched via",
                " `service_overweight`."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "OverweightCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                " available free overweight index."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 369
        },
        "Events": {
          "TypeId": 198
        },
        "Constants": [],
        "Errors": {
          "TypeId": 646
        },
        "Index": 123
      },
      "124": {
        "Name": "AssetRegistry",
        "Storage": {
          "Prefix": "AssetRegistry",
          "Entries": [
            {
              "Name": "Metadata",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 63,
                  "Value": 201
                }
              },
              "Default": "AA==",
              "Docs": [
                " The metadata of an asset, indexed by asset id."
              ]
            },
            {
              "Name": "LocationToAssetId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 148,
                  "Value": 63
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps a multilocation to an asset id - useful when processing xcm",
                " messages."
              ]
            },
            {
              "Name": "LastAssetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 63,
                "Item2": null
              },
              "Default": "BA==",
              "Docs": [
                " The last processed asset id - used when assigning a sequential id."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 370
        },
        "Events": {
          "TypeId": 200
        },
        "Constants": [],
        "Errors": {
          "TypeId": 647
        },
        "Index": 124
      },
      "125": {
        "Name": "UnknownTokens",
        "Storage": {
          "Prefix": "UnknownTokens",
          "Entries": [
            {
              "Name": "ConcreteFungibleBalances",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 648,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Concrete fungible balances under a given location and a concrete",
                " fungible id.",
                "",
                " double_map: who, asset_id => u128"
              ]
            },
            {
              "Name": "AbstractFungibleBalances",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 649,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Abstract fungible balances under a given location and a abstract",
                " fungible id.",
                "",
                " double_map: who, asset_id => u128"
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 205
        },
        "Constants": [],
        "Errors": {
          "TypeId": 650
        },
        "Index": 125
      },
      "126": {
        "Name": "XTokens",
        "Storage": {
          "Prefix": "XTokens",
          "Entries": []
        },
        "Calls": {
          "TypeId": 375
        },
        "Events": {
          "TypeId": 206
        },
        "Constants": [
          {
            "Name": "SelfLocation",
            "TypeId": 148,
            "Value": "AQEAsSA=",
            "Docs": [
              " Self chain location."
            ]
          },
          {
            "Name": "BaseXcmWeight",
            "TypeId": 9,
            "Value": "AgivLwA=",
            "Docs": [
              " Base XCM weight.",
              "",
              " The actually weight for an XCM message is `T::BaseXcmWeight +",
              " T::Weigher::weight(&msg)`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 651
        },
        "Index": 126
      }
    },
    "Extrinsic": {
      "TypeId": 652,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 660,
          "AddSignedExtType": 33
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 661,
          "AddSignedExtType": 7
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 662,
          "AddSignedExtType": 7
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 663,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 664,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 666,
          "AddSignedExtType": 33
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 667,
          "AddSignedExtType": 33
        },
        {
          "SignedIdentifier": "ChargeAssetTxPayment",
          "SignedExtType": 668,
          "AddSignedExtType": 33
        }
      ]
    },
    "TypeId": 669
  }
}