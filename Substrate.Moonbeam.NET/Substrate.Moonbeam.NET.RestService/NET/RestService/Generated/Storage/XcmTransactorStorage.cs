//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonbeam.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IXcmTransactorStorage interface definition.
    /// </summary>
    public interface IXcmTransactorStorage : IStorage
    {
        
        /// <summary>
        /// >> IndexToAccount
        ///  Since we are using pallet-utility for account derivation (through AsDerivative),
        ///  we need to provide an index for the account derivation. This storage item stores the index
        ///  assigned for a given local account. These indices are usable as derivative in the relay chain
        /// </summary>
        Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 GetIndexToAccount(string key);
        
        /// <summary>
        /// >> TransactInfoWithWeightLimit
        ///  Stores the transact info of a MultiLocation. This defines how much extra weight we need to
        ///  add when we want to transact in the destination chain and maximum amount of weight allowed
        ///  by the destination chain
        /// </summary>
        Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight GetTransactInfoWithWeightLimit(string key);
        
        /// <summary>
        /// >> DestinationAssetFeePerSecond
        ///  Stores the fee per second for an asset in its reserve chain. This allows us to convert
        ///  from weight to fee
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetDestinationAssetFeePerSecond(string key);
    }
    
    /// <summary>
    /// XcmTransactorStorage class definition.
    /// </summary>
    public sealed class XcmTransactorStorage : IXcmTransactorStorage
    {
        
        /// <summary>
        /// _indexToAccountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> _indexToAccountTypedStorage;
        
        /// <summary>
        /// _transactInfoWithWeightLimitTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight> _transactInfoWithWeightLimitTypedStorage;
        
        /// <summary>
        /// _destinationAssetFeePerSecondTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _destinationAssetFeePerSecondTypedStorage;
        
        /// <summary>
        /// XcmTransactorStorage constructor.
        /// </summary>
        public XcmTransactorStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.IndexToAccountTypedStorage = new TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>("XcmTransactor.IndexToAccount", storageDataProvider, storageChangeDelegates);
            this.TransactInfoWithWeightLimitTypedStorage = new TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight>("XcmTransactor.TransactInfoWithWeightLimit", storageDataProvider, storageChangeDelegates);
            this.DestinationAssetFeePerSecondTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("XcmTransactor.DestinationAssetFeePerSecond", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _indexToAccountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> IndexToAccountTypedStorage
        {
            get
            {
                return _indexToAccountTypedStorage;
            }
            set
            {
                _indexToAccountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _transactInfoWithWeightLimitTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight> TransactInfoWithWeightLimitTypedStorage
        {
            get
            {
                return _transactInfoWithWeightLimitTypedStorage;
            }
            set
            {
                _transactInfoWithWeightLimitTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _destinationAssetFeePerSecondTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> DestinationAssetFeePerSecondTypedStorage
        {
            get
            {
                return _destinationAssetFeePerSecondTypedStorage;
            }
            set
            {
                _destinationAssetFeePerSecondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await IndexToAccountTypedStorage.InitializeAsync("XcmTransactor", "IndexToAccount");
            await TransactInfoWithWeightLimitTypedStorage.InitializeAsync("XcmTransactor", "TransactInfoWithWeightLimit");
            await DestinationAssetFeePerSecondTypedStorage.InitializeAsync("XcmTransactor", "DestinationAssetFeePerSecond");
        }
        
        /// <summary>
        /// Implements any storage change for XcmTransactor.IndexToAccount
        /// </summary>
        [StorageChange("XcmTransactor", "IndexToAccount")]
        public void OnUpdateIndexToAccount(string key, string data)
        {
            IndexToAccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> IndexToAccount
        ///  Since we are using pallet-utility for account derivation (through AsDerivative),
        ///  we need to provide an index for the account derivation. This storage item stores the index
        ///  assigned for a given local account. These indices are usable as derivative in the relay chain
        /// </summary>
        public Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 GetIndexToAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (IndexToAccountTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XcmTransactor.TransactInfoWithWeightLimit
        /// </summary>
        [StorageChange("XcmTransactor", "TransactInfoWithWeightLimit")]
        public void OnUpdateTransactInfoWithWeightLimit(string key, string data)
        {
            TransactInfoWithWeightLimitTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TransactInfoWithWeightLimit
        ///  Stores the transact info of a MultiLocation. This defines how much extra weight we need to
        ///  add when we want to transact in the destination chain and maximum amount of weight allowed
        ///  by the destination chain
        /// </summary>
        public Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight GetTransactInfoWithWeightLimit(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TransactInfoWithWeightLimitTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XcmTransactor.DestinationAssetFeePerSecond
        /// </summary>
        [StorageChange("XcmTransactor", "DestinationAssetFeePerSecond")]
        public void OnUpdateDestinationAssetFeePerSecond(string key, string data)
        {
            DestinationAssetFeePerSecondTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DestinationAssetFeePerSecond
        ///  Stores the fee per second for an asset in its reserve chain. This allows us to convert
        ///  from weight to fee
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetDestinationAssetFeePerSecond(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DestinationAssetFeePerSecondTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
