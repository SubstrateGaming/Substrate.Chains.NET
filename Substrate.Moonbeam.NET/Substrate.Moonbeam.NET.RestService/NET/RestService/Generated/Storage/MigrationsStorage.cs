//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonbeam.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMigrationsStorage interface definition.
    /// </summary>
    public interface IMigrationsStorage : IStorage
    {
        
        /// <summary>
        /// >> FullyUpgraded
        ///  True if all required migrations have completed
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetFullyUpgraded();
        
        /// <summary>
        /// >> MigrationState
        ///  MigrationState tracks the progress of a migration.
        ///  Maps name (Vec<u8>) -> whether or not migration has been completed (bool)
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetMigrationState(string key);
        
        /// <summary>
        /// >> ShouldPauseXcm
        ///  Temporary value that is set to true at the beginning of the block during which the execution
        ///  of xcm messages must be paused.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetShouldPauseXcm();
    }
    
    /// <summary>
    /// MigrationsStorage class definition.
    /// </summary>
    public sealed class MigrationsStorage : IMigrationsStorage
    {
        
        /// <summary>
        /// _fullyUpgradedTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _fullyUpgradedTypedStorage;
        
        /// <summary>
        /// _migrationStateTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _migrationStateTypedStorage;
        
        /// <summary>
        /// _shouldPauseXcmTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _shouldPauseXcmTypedStorage;
        
        /// <summary>
        /// MigrationsStorage constructor.
        /// </summary>
        public MigrationsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.FullyUpgradedTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("Migrations.FullyUpgraded", storageDataProvider, storageChangeDelegates);
            this.MigrationStateTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("Migrations.MigrationState", storageDataProvider, storageChangeDelegates);
            this.ShouldPauseXcmTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("Migrations.ShouldPauseXcm", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _fullyUpgradedTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> FullyUpgradedTypedStorage
        {
            get
            {
                return _fullyUpgradedTypedStorage;
            }
            set
            {
                _fullyUpgradedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _migrationStateTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> MigrationStateTypedStorage
        {
            get
            {
                return _migrationStateTypedStorage;
            }
            set
            {
                _migrationStateTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _shouldPauseXcmTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> ShouldPauseXcmTypedStorage
        {
            get
            {
                return _shouldPauseXcmTypedStorage;
            }
            set
            {
                _shouldPauseXcmTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await FullyUpgradedTypedStorage.InitializeAsync("Migrations", "FullyUpgraded");
            await MigrationStateTypedStorage.InitializeAsync("Migrations", "MigrationState");
            await ShouldPauseXcmTypedStorage.InitializeAsync("Migrations", "ShouldPauseXcm");
        }
        
        /// <summary>
        /// Implements any storage change for Migrations.FullyUpgraded
        /// </summary>
        [StorageChange("Migrations", "FullyUpgraded")]
        public void OnUpdateFullyUpgraded(string data)
        {
            FullyUpgradedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> FullyUpgraded
        ///  True if all required migrations have completed
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetFullyUpgraded()
        {
            return FullyUpgradedTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Migrations.MigrationState
        /// </summary>
        [StorageChange("Migrations", "MigrationState")]
        public void OnUpdateMigrationState(string key, string data)
        {
            MigrationStateTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MigrationState
        ///  MigrationState tracks the progress of a migration.
        ///  Maps name (Vec<u8>) -> whether or not migration has been completed (bool)
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetMigrationState(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MigrationStateTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Migrations.ShouldPauseXcm
        /// </summary>
        [StorageChange("Migrations", "ShouldPauseXcm")]
        public void OnUpdateShouldPauseXcm(string data)
        {
            ShouldPauseXcmTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ShouldPauseXcm
        ///  Temporary value that is set to true at the beginning of the block during which the execution
        ///  of xcm messages must be paused.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetShouldPauseXcm()
        {
            return ShouldPauseXcmTypedStorage.Get();
        }
    }
}
