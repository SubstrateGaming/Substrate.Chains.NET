//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonbeam.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMoonbeamOrbitersStorage interface definition.
    /// </summary>
    public interface IMoonbeamOrbitersStorage : IStorage
    {
        
        /// <summary>
        /// >> AccountLookupOverride
        ///  Account lookup override
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> GetAccountLookupOverride(string key);
        
        /// <summary>
        /// >> CollatorsPool
        ///  Current orbiters, with their "parent" collator
        /// </summary>
        Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo GetCollatorsPool(string key);
        
        /// <summary>
        /// >> CounterForCollatorsPool
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForCollatorsPool();
        
        /// <summary>
        /// >> CurrentRound
        ///  Current round index
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCurrentRound();
        
        /// <summary>
        /// >> ForceRotation
        ///  If true, it forces the rotation at the next round.
        ///  A use case: when changing RotatePeriod, you need a migration code that sets this value to
        ///  true to avoid holes in OrbiterPerRound.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetForceRotation();
        
        /// <summary>
        /// >> MinOrbiterDeposit
        ///  Minimum deposit required to be registered as an orbiter
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMinOrbiterDeposit();
        
        /// <summary>
        /// >> OrbiterPerRound
        ///  Store active orbiter per round and per parent collator
        /// </summary>
        Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 GetOrbiterPerRound(string key);
        
        /// <summary>
        /// >> RegisteredOrbiter
        ///  Check if account is an orbiter
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetRegisteredOrbiter(string key);
    }
    
    /// <summary>
    /// MoonbeamOrbitersStorage class definition.
    /// </summary>
    public sealed class MoonbeamOrbitersStorage : IMoonbeamOrbitersStorage
    {
        
        /// <summary>
        /// _accountLookupOverrideTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>> _accountLookupOverrideTypedStorage;
        
        /// <summary>
        /// _collatorsPoolTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo> _collatorsPoolTypedStorage;
        
        /// <summary>
        /// _counterForCollatorsPoolTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForCollatorsPoolTypedStorage;
        
        /// <summary>
        /// _currentRoundTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _currentRoundTypedStorage;
        
        /// <summary>
        /// _forceRotationTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _forceRotationTypedStorage;
        
        /// <summary>
        /// _minOrbiterDepositTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _minOrbiterDepositTypedStorage;
        
        /// <summary>
        /// _orbiterPerRoundTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> _orbiterPerRoundTypedStorage;
        
        /// <summary>
        /// _registeredOrbiterTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _registeredOrbiterTypedStorage;
        
        /// <summary>
        /// MoonbeamOrbitersStorage constructor.
        /// </summary>
        public MoonbeamOrbitersStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AccountLookupOverrideTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>>("MoonbeamOrbiters.AccountLookupOverride", storageDataProvider, storageChangeDelegates);
            this.CollatorsPoolTypedStorage = new TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo>("MoonbeamOrbiters.CollatorsPool", storageDataProvider, storageChangeDelegates);
            this.CounterForCollatorsPoolTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("MoonbeamOrbiters.CounterForCollatorsPool", storageDataProvider, storageChangeDelegates);
            this.CurrentRoundTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("MoonbeamOrbiters.CurrentRound", storageDataProvider, storageChangeDelegates);
            this.ForceRotationTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("MoonbeamOrbiters.ForceRotation", storageDataProvider, storageChangeDelegates);
            this.MinOrbiterDepositTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("MoonbeamOrbiters.MinOrbiterDeposit", storageDataProvider, storageChangeDelegates);
            this.OrbiterPerRoundTypedStorage = new TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>("MoonbeamOrbiters.OrbiterPerRound", storageDataProvider, storageChangeDelegates);
            this.RegisteredOrbiterTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("MoonbeamOrbiters.RegisteredOrbiter", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _accountLookupOverrideTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>> AccountLookupOverrideTypedStorage
        {
            get
            {
                return _accountLookupOverrideTypedStorage;
            }
            set
            {
                _accountLookupOverrideTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _collatorsPoolTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo> CollatorsPoolTypedStorage
        {
            get
            {
                return _collatorsPoolTypedStorage;
            }
            set
            {
                _collatorsPoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForCollatorsPoolTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForCollatorsPoolTypedStorage
        {
            get
            {
                return _counterForCollatorsPoolTypedStorage;
            }
            set
            {
                _counterForCollatorsPoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _currentRoundTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CurrentRoundTypedStorage
        {
            get
            {
                return _currentRoundTypedStorage;
            }
            set
            {
                _currentRoundTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _forceRotationTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> ForceRotationTypedStorage
        {
            get
            {
                return _forceRotationTypedStorage;
            }
            set
            {
                _forceRotationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minOrbiterDepositTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> MinOrbiterDepositTypedStorage
        {
            get
            {
                return _minOrbiterDepositTypedStorage;
            }
            set
            {
                _minOrbiterDepositTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _orbiterPerRoundTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> OrbiterPerRoundTypedStorage
        {
            get
            {
                return _orbiterPerRoundTypedStorage;
            }
            set
            {
                _orbiterPerRoundTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _registeredOrbiterTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> RegisteredOrbiterTypedStorage
        {
            get
            {
                return _registeredOrbiterTypedStorage;
            }
            set
            {
                _registeredOrbiterTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AccountLookupOverrideTypedStorage.InitializeAsync("MoonbeamOrbiters", "AccountLookupOverride");
            await CollatorsPoolTypedStorage.InitializeAsync("MoonbeamOrbiters", "CollatorsPool");
            await CounterForCollatorsPoolTypedStorage.InitializeAsync("MoonbeamOrbiters", "CounterForCollatorsPool");
            await CurrentRoundTypedStorage.InitializeAsync("MoonbeamOrbiters", "CurrentRound");
            await ForceRotationTypedStorage.InitializeAsync("MoonbeamOrbiters", "ForceRotation");
            await MinOrbiterDepositTypedStorage.InitializeAsync("MoonbeamOrbiters", "MinOrbiterDeposit");
            await OrbiterPerRoundTypedStorage.InitializeAsync("MoonbeamOrbiters", "OrbiterPerRound");
            await RegisteredOrbiterTypedStorage.InitializeAsync("MoonbeamOrbiters", "RegisteredOrbiter");
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.AccountLookupOverride
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "AccountLookupOverride")]
        public void OnUpdateAccountLookupOverride(string key, string data)
        {
            AccountLookupOverrideTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AccountLookupOverride
        ///  Account lookup override
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> GetAccountLookupOverride(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountLookupOverrideTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.CollatorsPool
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "CollatorsPool")]
        public void OnUpdateCollatorsPool(string key, string data)
        {
            CollatorsPoolTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CollatorsPool
        ///  Current orbiters, with their "parent" collator
        /// </summary>
        public Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo GetCollatorsPool(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CollatorsPoolTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.CounterForCollatorsPool
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "CounterForCollatorsPool")]
        public void OnUpdateCounterForCollatorsPool(string data)
        {
            CounterForCollatorsPoolTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForCollatorsPool
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForCollatorsPool()
        {
            return CounterForCollatorsPoolTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.CurrentRound
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "CurrentRound")]
        public void OnUpdateCurrentRound(string data)
        {
            CurrentRoundTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentRound
        ///  Current round index
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCurrentRound()
        {
            return CurrentRoundTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.ForceRotation
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "ForceRotation")]
        public void OnUpdateForceRotation(string data)
        {
            ForceRotationTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ForceRotation
        ///  If true, it forces the rotation at the next round.
        ///  A use case: when changing RotatePeriod, you need a migration code that sets this value to
        ///  true to avoid holes in OrbiterPerRound.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetForceRotation()
        {
            return ForceRotationTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.MinOrbiterDeposit
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "MinOrbiterDeposit")]
        public void OnUpdateMinOrbiterDeposit(string data)
        {
            MinOrbiterDepositTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinOrbiterDeposit
        ///  Minimum deposit required to be registered as an orbiter
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMinOrbiterDeposit()
        {
            return MinOrbiterDepositTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.OrbiterPerRound
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "OrbiterPerRound")]
        public void OnUpdateOrbiterPerRound(string key, string data)
        {
            OrbiterPerRoundTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OrbiterPerRound
        ///  Store active orbiter per round and per parent collator
        /// </summary>
        public Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 GetOrbiterPerRound(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OrbiterPerRoundTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MoonbeamOrbiters.RegisteredOrbiter
        /// </summary>
        [StorageChange("MoonbeamOrbiters", "RegisteredOrbiter")]
        public void OnUpdateRegisteredOrbiter(string key, string data)
        {
            RegisteredOrbiterTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RegisteredOrbiter
        ///  Check if account is an orbiter
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetRegisteredOrbiter(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RegisteredOrbiterTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
