//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Moonbeam.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonbeam.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// ParachainStakingController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class ParachainStakingController : ControllerBase
    {
        
        private IParachainStakingStorage _parachainStakingStorage;
        
        /// <summary>
        /// ParachainStakingController constructor.
        /// </summary>
        public ParachainStakingController(IParachainStakingStorage parachainStakingStorage)
        {
            _parachainStakingStorage = parachainStakingStorage;
        }
        
        /// <summary>
        /// >> CollatorCommission
        ///  Commission percent taken off of rewards for all collators
        /// </summary>
        [HttpGet("CollatorCommission")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "CollatorCommissionParams")]
        public IActionResult GetCollatorCommission()
        {
            return this.Ok(_parachainStakingStorage.GetCollatorCommission());
        }
        
        /// <summary>
        /// >> TotalSelected
        ///  The total candidates selected every round
        /// </summary>
        [HttpGet("TotalSelected")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "TotalSelectedParams")]
        public IActionResult GetTotalSelected()
        {
            return this.Ok(_parachainStakingStorage.GetTotalSelected());
        }
        
        /// <summary>
        /// >> ParachainBondInfo
        ///  Parachain bond config info { account, percent_of_inflation }
        /// </summary>
        [HttpGet("ParachainBondInfo")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.ParachainBondConfig), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "ParachainBondInfoParams")]
        public IActionResult GetParachainBondInfo()
        {
            return this.Ok(_parachainStakingStorage.GetParachainBondInfo());
        }
        
        /// <summary>
        /// >> Round
        ///  Current round index and next round scheduled transition
        /// </summary>
        [HttpGet("Round")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.RoundInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "RoundParams")]
        public IActionResult GetRound()
        {
            return this.Ok(_parachainStakingStorage.GetRound());
        }
        
        /// <summary>
        /// >> DelegatorState
        ///  Get delegator state associated with an account if account is delegating else None
        /// </summary>
        [HttpGet("DelegatorState")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegator), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "DelegatorStateParams", typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetDelegatorState(string key)
        {
            return this.Ok(_parachainStakingStorage.GetDelegatorState(key));
        }
        
        /// <summary>
        /// >> CandidateInfo
        ///  Get collator candidate info associated with an account if account is candidate else None
        /// </summary>
        [HttpGet("CandidateInfo")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "CandidateInfoParams", typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetCandidateInfo(string key)
        {
            return this.Ok(_parachainStakingStorage.GetCandidateInfo(key));
        }
        
        /// <summary>
        /// >> DelegationScheduledRequests
        ///  Stores outstanding delegation requests per collator.
        /// </summary>
        [HttpGet("DelegationScheduledRequests")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.delegation_requests.ScheduledRequest>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "DelegationScheduledRequestsParams", typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetDelegationScheduledRequests(string key)
        {
            return this.Ok(_parachainStakingStorage.GetDelegationScheduledRequests(key));
        }
        
        /// <summary>
        /// >> AutoCompoundingDelegations
        ///  Stores auto-compounding configuration per collator.
        /// </summary>
        [HttpGet("AutoCompoundingDelegations")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.auto_compound.AutoCompoundConfig>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "AutoCompoundingDelegationsParams", typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetAutoCompoundingDelegations(string key)
        {
            return this.Ok(_parachainStakingStorage.GetAutoCompoundingDelegations(key));
        }
        
        /// <summary>
        /// >> TopDelegations
        ///  Top delegations for collator candidate
        /// </summary>
        [HttpGet("TopDelegations")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "TopDelegationsParams", typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetTopDelegations(string key)
        {
            return this.Ok(_parachainStakingStorage.GetTopDelegations(key));
        }
        
        /// <summary>
        /// >> BottomDelegations
        ///  Bottom delegations for collator candidate
        /// </summary>
        [HttpGet("BottomDelegations")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Delegations), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "BottomDelegationsParams", typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetBottomDelegations(string key)
        {
            return this.Ok(_parachainStakingStorage.GetBottomDelegations(key));
        }
        
        /// <summary>
        /// >> SelectedCandidates
        ///  The collator candidates selected for the current round
        /// </summary>
        [HttpGet("SelectedCandidates")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "SelectedCandidatesParams")]
        public IActionResult GetSelectedCandidates()
        {
            return this.Ok(_parachainStakingStorage.GetSelectedCandidates());
        }
        
        /// <summary>
        /// >> Total
        ///  Total capital locked by this staking pallet
        /// </summary>
        [HttpGet("Total")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "TotalParams")]
        public IActionResult GetTotal()
        {
            return this.Ok(_parachainStakingStorage.GetTotal());
        }
        
        /// <summary>
        /// >> CandidatePool
        ///  The pool of collator candidates, each with their total backing stake
        /// </summary>
        [HttpGet("CandidatePool")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "CandidatePoolParams")]
        public IActionResult GetCandidatePool()
        {
            return this.Ok(_parachainStakingStorage.GetCandidatePool());
        }
        
        /// <summary>
        /// >> AtStake
        ///  Snapshot of collator delegation stake at the start of the round
        /// </summary>
        [HttpGet("AtStake")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "AtStakeParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>))]
        public IActionResult GetAtStake(string key)
        {
            return this.Ok(_parachainStakingStorage.GetAtStake(key));
        }
        
        /// <summary>
        /// >> DelayedPayouts
        ///  Delayed payouts
        /// </summary>
        [HttpGet("DelayedPayouts")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "DelayedPayoutsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetDelayedPayouts(string key)
        {
            return this.Ok(_parachainStakingStorage.GetDelayedPayouts(key));
        }
        
        /// <summary>
        /// >> Staked
        ///  Total counted stake for selected candidates in the round
        /// </summary>
        [HttpGet("Staked")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "StakedParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetStaked(string key)
        {
            return this.Ok(_parachainStakingStorage.GetStaked(key));
        }
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration
        /// </summary>
        [HttpGet("InflationConfig")]
        [ProducesResponseType(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_parachain_staking.inflation.InflationInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "InflationConfigParams")]
        public IActionResult GetInflationConfig()
        {
            return this.Ok(_parachainStakingStorage.GetInflationConfig());
        }
        
        /// <summary>
        /// >> Points
        ///  Total points awarded to collators for block production in the round
        /// </summary>
        [HttpGet("Points")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "PointsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetPoints(string key)
        {
            return this.Ok(_parachainStakingStorage.GetPoints(key));
        }
        
        /// <summary>
        /// >> AwardedPts
        ///  Points for each collator per round
        /// </summary>
        [HttpGet("AwardedPts")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Storage.ParachainStakingStorage), "AwardedPtsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>))]
        public IActionResult GetAwardedPts(string key)
        {
            return this.Ok(_parachainStakingStorage.GetAwardedPts(key));
        }
    }
}
