//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Moonbeam.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class XcmTransactorStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public XcmTransactorStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcmTransactor", "IndexToAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcmTransactor", "TransactInfoWithWeightLimit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation), typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcmTransactor", "DestinationAssetFeePerSecond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> IndexToAccountParams
        ///  Since we are using pallet-utility for account derivation (through AsDerivative),
        ///  we need to provide an index for the account derivation. This storage item stores the index
        ///  assigned for a given local account. These indices are usable as derivative in the relay chain
        /// </summary>
        public static string IndexToAccountParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("XcmTransactor", "IndexToAccount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> IndexToAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string IndexToAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> IndexToAccount
        ///  Since we are using pallet-utility for account derivation (through AsDerivative),
        ///  we need to provide an index for the account derivation. This storage item stores the index
        ///  assigned for a given local account. These indices are usable as derivative in the relay chain
        /// </summary>
        public async Task<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> IndexToAccount(Substrate.NetApi.Model.Types.Primitive.U16 key, CancellationToken token)
        {
            string parameters = XcmTransactorStorage.IndexToAccountParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> TransactInfoWithWeightLimitParams
        ///  Stores the transact info of a MultiLocation. This defines how much extra weight we need to
        ///  add when we want to transact in the destination chain and maximum amount of weight allowed
        ///  by the destination chain
        /// </summary>
        public static string TransactInfoWithWeightLimitParams(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
        {
            return RequestGenerator.GetStorage("XcmTransactor", "TransactInfoWithWeightLimit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TransactInfoWithWeightLimitDefault
        /// Default value as hex string
        /// </summary>
        public static string TransactInfoWithWeightLimitDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TransactInfoWithWeightLimit
        ///  Stores the transact info of a MultiLocation. This defines how much extra weight we need to
        ///  add when we want to transact in the destination chain and maximum amount of weight allowed
        ///  by the destination chain
        /// </summary>
        public async Task<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight> TransactInfoWithWeightLimit(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key, CancellationToken token)
        {
            string parameters = XcmTransactorStorage.TransactInfoWithWeightLimitParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.RemoteTransactInfoWithMaxWeight>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> DestinationAssetFeePerSecondParams
        ///  Stores the fee per second for an asset in its reserve chain. This allows us to convert
        ///  from weight to fee
        /// </summary>
        public static string DestinationAssetFeePerSecondParams(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
        {
            return RequestGenerator.GetStorage("XcmTransactor", "DestinationAssetFeePerSecond", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DestinationAssetFeePerSecondDefault
        /// Default value as hex string
        /// </summary>
        public static string DestinationAssetFeePerSecondDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DestinationAssetFeePerSecond
        ///  Stores the fee per second for an asset in its reserve chain. This allows us to convert
        ///  from weight to fee
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> DestinationAssetFeePerSecond(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key, CancellationToken token)
        {
            string parameters = XcmTransactorStorage.DestinationAssetFeePerSecondParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
    }
    
    public sealed class XcmTransactorCalls
    {
        
        /// <summary>
        /// >> register
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Register(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 who, Substrate.NetApi.Model.Types.Primitive.U16 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(index.Encode());
            return new Method(107, "XcmTransactor", 0, "register", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deregister
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Deregister(Substrate.NetApi.Model.Types.Primitive.U16 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(107, "XcmTransactor", 1, "deregister", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transact_through_derivative
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method TransactThroughDerivative(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.moonbeam_runtime.xcm_config.EnumTransactors dest, Substrate.NetApi.Model.Types.Primitive.U16 index, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.CurrencyPayment fee, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> inner_call, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.TransactWeights weight_info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dest.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(fee.Encode());
            byteArray.AddRange(inner_call.Encode());
            byteArray.AddRange(weight_info.Encode());
            return new Method(107, "XcmTransactor", 2, "transact_through_derivative", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transact_through_sovereign
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method TransactThroughSovereign(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation dest, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 fee_payer, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.CurrencyPayment fee, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> call, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v2.EnumOriginKind origin_kind, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.TransactWeights weight_info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dest.Encode());
            byteArray.AddRange(fee_payer.Encode());
            byteArray.AddRange(fee.Encode());
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(origin_kind.Encode());
            byteArray.AddRange(weight_info.Encode());
            return new Method(107, "XcmTransactor", 3, "transact_through_sovereign", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_transact_info
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetTransactInfo(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation location, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight transact_extra_weight, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight max_weight, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight> transact_extra_weight_signed)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(transact_extra_weight.Encode());
            byteArray.AddRange(max_weight.Encode());
            byteArray.AddRange(transact_extra_weight_signed.Encode());
            return new Method(107, "XcmTransactor", 4, "set_transact_info", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_transact_info
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveTransactInfo(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(location.Encode());
            return new Method(107, "XcmTransactor", 5, "remove_transact_info", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transact_through_signed
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method TransactThroughSigned(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation dest, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.CurrencyPayment fee, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> call, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.TransactWeights weight_info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dest.Encode());
            byteArray.AddRange(fee.Encode());
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(weight_info.Encode());
            return new Method(107, "XcmTransactor", 6, "transact_through_signed", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_fee_per_second
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetFeePerSecond(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation asset_location, Substrate.NetApi.Model.Types.Primitive.U128 fee_per_second)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_location.Encode());
            byteArray.AddRange(fee_per_second.Encode());
            return new Method(107, "XcmTransactor", 7, "set_fee_per_second", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_fee_per_second
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveFeePerSecond(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation asset_location)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_location.Encode());
            return new Method(107, "XcmTransactor", 8, "remove_fee_per_second", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> hrmp_manage
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method HrmpManage(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.EnumHrmpOperation action, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.CurrencyPayment fee, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_xcm_transactor.pallet.TransactWeights weight_info)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(action.Encode());
            byteArray.AddRange(fee.Encode());
            byteArray.AddRange(weight_info.Encode());
            return new Method(107, "XcmTransactor", 9, "hrmp_manage", byteArray.ToArray());
        }
    }
    
    public sealed class XcmTransactorConstants
    {
        
        /// <summary>
        /// >> SelfLocation
        ///  Self chain location.
        /// </summary>
        public Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation SelfLocation()
        {
            var result = new Substrate.Moonbeam.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation();
            result.Create("0x0000");
            return result;
        }
        
        /// <summary>
        /// >> BaseXcmWeight
        /// 
        ///  The actual weight for an XCM message is `T::BaseXcmWeight +
        ///  T::Weigher::weight(&msg)`.
        /// </summary>
        public Substrate.Moonbeam.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight BaseXcmWeight()
        {
            var result = new Substrate.Moonbeam.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight();
            result.Create("0x0208AF2F00");
            return result;
        }
    }
    
    public enum XcmTransactorErrors
    {
        
        /// <summary>
        /// >> IndexAlreadyClaimed
        /// </summary>
        IndexAlreadyClaimed,
        
        /// <summary>
        /// >> UnclaimedIndex
        /// </summary>
        UnclaimedIndex,
        
        /// <summary>
        /// >> NotOwner
        /// </summary>
        NotOwner,
        
        /// <summary>
        /// >> UnweighableMessage
        /// </summary>
        UnweighableMessage,
        
        /// <summary>
        /// >> CannotReanchor
        /// </summary>
        CannotReanchor,
        
        /// <summary>
        /// >> AssetHasNoReserve
        /// </summary>
        AssetHasNoReserve,
        
        /// <summary>
        /// >> InvalidDest
        /// </summary>
        InvalidDest,
        
        /// <summary>
        /// >> NotCrossChainTransfer
        /// </summary>
        NotCrossChainTransfer,
        
        /// <summary>
        /// >> AssetIsNotReserveInDestination
        /// </summary>
        AssetIsNotReserveInDestination,
        
        /// <summary>
        /// >> DestinationNotInvertible
        /// </summary>
        DestinationNotInvertible,
        
        /// <summary>
        /// >> ErrorDelivering
        /// </summary>
        ErrorDelivering,
        
        /// <summary>
        /// >> DispatchWeightBiggerThanTotalWeight
        /// </summary>
        DispatchWeightBiggerThanTotalWeight,
        
        /// <summary>
        /// >> WeightOverflow
        /// </summary>
        WeightOverflow,
        
        /// <summary>
        /// >> AmountOverflow
        /// </summary>
        AmountOverflow,
        
        /// <summary>
        /// >> TransactorInfoNotSet
        /// </summary>
        TransactorInfoNotSet,
        
        /// <summary>
        /// >> NotCrossChainTransferableCurrency
        /// </summary>
        NotCrossChainTransferableCurrency,
        
        /// <summary>
        /// >> XcmExecuteError
        /// </summary>
        XcmExecuteError,
        
        /// <summary>
        /// >> BadVersion
        /// </summary>
        BadVersion,
        
        /// <summary>
        /// >> MaxWeightTransactReached
        /// </summary>
        MaxWeightTransactReached,
        
        /// <summary>
        /// >> UnableToWithdrawAsset
        /// </summary>
        UnableToWithdrawAsset,
        
        /// <summary>
        /// >> FeePerSecondNotSet
        /// </summary>
        FeePerSecondNotSet,
        
        /// <summary>
        /// >> SignedTransactNotAllowedForDestination
        /// </summary>
        SignedTransactNotAllowedForDestination,
        
        /// <summary>
        /// >> FailedMultiLocationToJunction
        /// </summary>
        FailedMultiLocationToJunction,
        
        /// <summary>
        /// >> HrmpHandlerNotImplemented
        /// </summary>
        HrmpHandlerNotImplemented,
        
        /// <summary>
        /// >> TooMuchFeeUsed
        /// </summary>
        TooMuchFeeUsed,
        
        /// <summary>
        /// >> ErrorValidating
        /// </summary>
        ErrorValidating,
    }
}
