//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Moonbeam.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class MoonbeamOrbitersStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public MoonbeamOrbitersStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "AccountLookupOverride"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "CollatorsPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "CounterForCollatorsPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "CurrentRound"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "ForceRotation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "MinOrbiterDeposit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "OrbiterPerRound"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>), typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MoonbeamOrbiters", "RegisteredOrbiter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> AccountLookupOverrideParams
        ///  Account lookup override
        /// </summary>
        public static string AccountLookupOverrideParams(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "AccountLookupOverride", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AccountLookupOverrideDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountLookupOverrideDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AccountLookupOverride
        ///  Account lookup override
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>> AccountLookupOverride(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key, CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.AccountLookupOverrideParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CollatorsPoolParams
        ///  Current orbiters, with their "parent" collator
        /// </summary>
        public static string CollatorsPoolParams(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "CollatorsPool", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollatorsPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string CollatorsPoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollatorsPool
        ///  Current orbiters, with their "parent" collator
        /// </summary>
        public async Task<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo> CollatorsPool(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key, CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.CollatorsPoolParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_moonbeam_orbiters.types.CollatorPoolInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForCollatorsPoolParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForCollatorsPoolParams()
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "CounterForCollatorsPool", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForCollatorsPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForCollatorsPoolDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForCollatorsPool
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForCollatorsPool(CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.CounterForCollatorsPoolParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentRoundParams
        ///  Current round index
        /// </summary>
        public static string CurrentRoundParams()
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "CurrentRound", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentRoundDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentRoundDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentRound
        ///  Current round index
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentRound(CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.CurrentRoundParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ForceRotationParams
        ///  If true, it forces the rotation at the next round.
        ///  A use case: when changing RotatePeriod, you need a migration code that sets this value to
        ///  true to avoid holes in OrbiterPerRound.
        /// </summary>
        public static string ForceRotationParams()
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "ForceRotation", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ForceRotationDefault
        /// Default value as hex string
        /// </summary>
        public static string ForceRotationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForceRotation
        ///  If true, it forces the rotation at the next round.
        ///  A use case: when changing RotatePeriod, you need a migration code that sets this value to
        ///  true to avoid holes in OrbiterPerRound.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> ForceRotation(CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.ForceRotationParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> MinOrbiterDepositParams
        ///  Minimum deposit required to be registered as an orbiter
        /// </summary>
        public static string MinOrbiterDepositParams()
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "MinOrbiterDeposit", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinOrbiterDepositDefault
        /// Default value as hex string
        /// </summary>
        public static string MinOrbiterDepositDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MinOrbiterDeposit
        ///  Minimum deposit required to be registered as an orbiter
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinOrbiterDeposit(CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.MinOrbiterDepositParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> OrbiterPerRoundParams
        ///  Store active orbiter per round and per parent collator
        /// </summary>
        public static string OrbiterPerRoundParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> key)
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "OrbiterPerRound", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> OrbiterPerRoundDefault
        /// Default value as hex string
        /// </summary>
        public static string OrbiterPerRoundDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OrbiterPerRound
        ///  Store active orbiter per round and per parent collator
        /// </summary>
        public async Task<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> OrbiterPerRound(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20> key, CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.OrbiterPerRoundParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> RegisteredOrbiterParams
        ///  Check if account is an orbiter
        /// </summary>
        public static string RegisteredOrbiterParams(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("MoonbeamOrbiters", "RegisteredOrbiter", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegisteredOrbiterDefault
        /// Default value as hex string
        /// </summary>
        public static string RegisteredOrbiterDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegisteredOrbiter
        ///  Check if account is an orbiter
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> RegisteredOrbiter(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key, CancellationToken token)
        {
            string parameters = MoonbeamOrbitersStorage.RegisteredOrbiterParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
    }
    
    public sealed class MoonbeamOrbitersCalls
    {
        
        /// <summary>
        /// >> collator_add_orbiter
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CollatorAddOrbiter(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 orbiter)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(orbiter.Encode());
            return new Method(24, "MoonbeamOrbiters", 0, "collator_add_orbiter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> collator_remove_orbiter
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CollatorRemoveOrbiter(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 orbiter)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(orbiter.Encode());
            return new Method(24, "MoonbeamOrbiters", 1, "collator_remove_orbiter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> orbiter_leave_collator_pool
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method OrbiterLeaveCollatorPool(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            return new Method(24, "MoonbeamOrbiters", 2, "orbiter_leave_collator_pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> orbiter_register
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method OrbiterRegister()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(24, "MoonbeamOrbiters", 3, "orbiter_register", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> orbiter_unregister
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method OrbiterUnregister(Substrate.NetApi.Model.Types.Primitive.U32 collators_pool_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collators_pool_count.Encode());
            return new Method(24, "MoonbeamOrbiters", 4, "orbiter_unregister", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_collator
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddCollator(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            return new Method(24, "MoonbeamOrbiters", 5, "add_collator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_collator
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveCollator(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            return new Method(24, "MoonbeamOrbiters", 6, "remove_collator", byteArray.ToArray());
        }
    }
    
    public sealed class MoonbeamOrbitersConstants
    {
        
        /// <summary>
        /// >> MaxPoolSize
        ///  Maximum number of orbiters per collator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPoolSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x08000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxRoundArchive
        ///  Maximum number of round to keep on storage.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxRoundArchive()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x04000000");
            return result;
        }
        
        /// <summary>
        /// >> RotatePeriod
        ///  Number of rounds before changing the selected orbiter.
        ///  WARNING: when changing `RotatePeriod`, you need a migration code that sets
        ///  `ForceRotation` to true to avoid holes in `OrbiterPerRound`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RotatePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x01000000");
            return result;
        }
    }
    
    public enum MoonbeamOrbitersErrors
    {
        
        /// <summary>
        /// >> CollatorAlreadyAdded
        /// The collator is already added in orbiters program.
        /// </summary>
        CollatorAlreadyAdded,
        
        /// <summary>
        /// >> CollatorNotFound
        /// This collator is not in orbiters program.
        /// </summary>
        CollatorNotFound,
        
        /// <summary>
        /// >> CollatorPoolTooLarge
        /// There are already too many orbiters associated with this collator.
        /// </summary>
        CollatorPoolTooLarge,
        
        /// <summary>
        /// >> CollatorsPoolCountTooLow
        /// There are more collator pools than the number specified in the parameter.
        /// </summary>
        CollatorsPoolCountTooLow,
        
        /// <summary>
        /// >> MinOrbiterDepositNotSet
        /// The minimum deposit required to register as an orbiter has not yet been included in the
        /// onchain storage
        /// </summary>
        MinOrbiterDepositNotSet,
        
        /// <summary>
        /// >> OrbiterAlreadyInPool
        /// This orbiter is already associated with this collator.
        /// </summary>
        OrbiterAlreadyInPool,
        
        /// <summary>
        /// >> OrbiterDepositNotFound
        /// This orbiter has not made a deposit
        /// </summary>
        OrbiterDepositNotFound,
        
        /// <summary>
        /// >> OrbiterNotFound
        /// This orbiter is not found
        /// </summary>
        OrbiterNotFound,
        
        /// <summary>
        /// >> OrbiterStillInAPool
        /// The orbiter is still at least in one pool
        /// </summary>
        OrbiterStillInAPool,
    }
}
