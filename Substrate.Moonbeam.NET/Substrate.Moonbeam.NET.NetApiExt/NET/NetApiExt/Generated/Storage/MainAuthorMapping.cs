//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Moonbeam.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class AuthorMappingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public AuthorMappingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AuthorMapping", "MappingWithDeposit"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public), typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_author_mapping.pallet.RegistrationInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AuthorMapping", "NimbusLookup"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public)));
        }
        
        /// <summary>
        /// >> MappingWithDepositParams
        ///  We maintain a mapping from the NimbusIds used in the consensus layer
        ///  to the AccountIds runtime.
        /// </summary>
        public static string MappingWithDepositParams(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public key)
        {
            return RequestGenerator.GetStorage("AuthorMapping", "MappingWithDeposit", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MappingWithDepositDefault
        /// Default value as hex string
        /// </summary>
        public static string MappingWithDepositDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MappingWithDeposit
        ///  We maintain a mapping from the NimbusIds used in the consensus layer
        ///  to the AccountIds runtime.
        /// </summary>
        public async Task<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_author_mapping.pallet.RegistrationInfo> MappingWithDeposit(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public key, CancellationToken token)
        {
            string parameters = AuthorMappingStorage.MappingWithDepositParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.pallet_author_mapping.pallet.RegistrationInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NimbusLookupParams
        ///  We maintain a reverse mapping from AccountIds to NimbusIDS
        /// </summary>
        public static string NimbusLookupParams(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("AuthorMapping", "NimbusLookup", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NimbusLookupDefault
        /// Default value as hex string
        /// </summary>
        public static string NimbusLookupDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NimbusLookup
        ///  We maintain a reverse mapping from AccountIds to NimbusIDS
        /// </summary>
        public async Task<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public> NimbusLookup(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.account.AccountId20 key, CancellationToken token)
        {
            string parameters = AuthorMappingStorage.NimbusLookupParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public>(parameters, token);
            return result;
        }
    }
    
    public sealed class AuthorMappingCalls
    {
        
        /// <summary>
        /// >> add_association
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddAssociation(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public nimbus_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(nimbus_id.Encode());
            return new Method(23, "AuthorMapping", 0, "add_association", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_association
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateAssociation(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public old_nimbus_id, Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public new_nimbus_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(old_nimbus_id.Encode());
            byteArray.AddRange(new_nimbus_id.Encode());
            return new Method(23, "AuthorMapping", 1, "update_association", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_association
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearAssociation(Substrate.Moonbeam.NET.NetApiExt.Generated.Model.nimbus_primitives.nimbus_crypto.Public nimbus_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(nimbus_id.Encode());
            return new Method(23, "AuthorMapping", 2, "clear_association", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_keys
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveKeys()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(23, "AuthorMapping", 3, "remove_keys", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_keys
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetKeys(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> keys)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(keys.Encode());
            return new Method(23, "AuthorMapping", 4, "set_keys", byteArray.ToArray());
        }
    }
    
    public sealed class AuthorMappingConstants
    {
    }
    
    public enum AuthorMappingErrors
    {
        
        /// <summary>
        /// >> AssociationNotFound
        /// The association can't be cleared because it is not found.
        /// </summary>
        AssociationNotFound,
        
        /// <summary>
        /// >> NotYourAssociation
        /// The association can't be cleared because it belongs to another account.
        /// </summary>
        NotYourAssociation,
        
        /// <summary>
        /// >> CannotAffordSecurityDeposit
        /// This account cannot set an author because it cannon afford the security deposit
        /// </summary>
        CannotAffordSecurityDeposit,
        
        /// <summary>
        /// >> AlreadyAssociated
        /// The NimbusId in question is already associated and cannot be overwritten
        /// </summary>
        AlreadyAssociated,
        
        /// <summary>
        /// >> OldAuthorIdNotFound
        /// No existing NimbusId can be found for the account
        /// </summary>
        OldAuthorIdNotFound,
        
        /// <summary>
        /// >> WrongKeySize
        /// Keys have wrong size
        /// </summary>
        WrongKeySize,
        
        /// <summary>
        /// >> DecodeNimbusFailed
        /// Failed to decode NimbusId for `set_keys`
        /// </summary>
        DecodeNimbusFailed,
        
        /// <summary>
        /// >> DecodeKeysFailed
        /// Failed to decode T::Keys for `set_keys`
        /// </summary>
        DecodeKeysFailed,
    }
}
