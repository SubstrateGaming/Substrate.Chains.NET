//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.People.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IXcmpQueueStorage interface definition.
    /// </summary>
    public interface IXcmpQueueStorage : IStorage
    {
        
        /// <summary>
        /// >> InboundXcmpSuspended
        ///  The suspended inbound XCMP channels. All others are not suspended.
        /// 
        ///  This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block
        ///  to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached
        ///  within the block and therefore only included once in the proof size.
        /// 
        ///  NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof
        ///  will be smaller.
        /// </summary>
        Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet GetInboundXcmpSuspended();
        
        /// <summary>
        /// >> OutboundXcmpStatus
        ///  The non-empty XCMP channels in order of becoming non-empty, and the index of the first
        ///  and last outbound message. If the two indices are equal, then it indicates an empty
        ///  queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater
        ///  than 65535 items. Queue indices for normal messages begin at one; zero is reserved in
        ///  case of the need to send a high-priority signal message this block.
        ///  The bool is true if there is a signal message waiting to be sent.
        /// </summary>
        Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 GetOutboundXcmpStatus();
        
        /// <summary>
        /// >> OutboundXcmpMessages
        ///  The messages outbound in a given XCMP channel.
        /// </summary>
        Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3 GetOutboundXcmpMessages(string key);
        
        /// <summary>
        /// >> SignalMessages
        ///  Any signal messages waiting to be sent.
        /// </summary>
        Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3 GetSignalMessages(string key);
        
        /// <summary>
        /// >> QueueConfig
        ///  The configuration which controls the dynamics of the outbound queue.
        /// </summary>
        Substrate.People.NET.NetApiExt.Generated.Model.cumulus_pallet_xcmp_queue.QueueConfigData GetQueueConfig();
        
        /// <summary>
        /// >> QueueSuspended
        ///  Whether or not the XCMP queue is suspended from executing incoming XCMs or not.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetQueueSuspended();
        
        /// <summary>
        /// >> DeliveryFeeFactor
        ///  The factor to multiply the base delivery fee by.
        /// </summary>
        Substrate.People.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetDeliveryFeeFactor(string key);
    }
    
    /// <summary>
    /// XcmpQueueStorage class definition.
    /// </summary>
    public sealed class XcmpQueueStorage : IXcmpQueueStorage
    {
        
        /// <summary>
        /// _inboundXcmpSuspendedTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet> _inboundXcmpSuspendedTypedStorage;
        
        /// <summary>
        /// _outboundXcmpStatusTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11> _outboundXcmpStatusTypedStorage;
        
        /// <summary>
        /// _outboundXcmpMessagesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3> _outboundXcmpMessagesTypedStorage;
        
        /// <summary>
        /// _signalMessagesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3> _signalMessagesTypedStorage;
        
        /// <summary>
        /// _queueConfigTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.cumulus_pallet_xcmp_queue.QueueConfigData> _queueConfigTypedStorage;
        
        /// <summary>
        /// _queueSuspendedTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _queueSuspendedTypedStorage;
        
        /// <summary>
        /// _deliveryFeeFactorTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> _deliveryFeeFactorTypedStorage;
        
        /// <summary>
        /// XcmpQueueStorage constructor.
        /// </summary>
        public XcmpQueueStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.InboundXcmpSuspendedTypedStorage = new TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet>("XcmpQueue.InboundXcmpSuspended", storageDataProvider, storageChangeDelegates);
            this.OutboundXcmpStatusTypedStorage = new TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11>("XcmpQueue.OutboundXcmpStatus", storageDataProvider, storageChangeDelegates);
            this.OutboundXcmpMessagesTypedStorage = new TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3>("XcmpQueue.OutboundXcmpMessages", storageDataProvider, storageChangeDelegates);
            this.SignalMessagesTypedStorage = new TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3>("XcmpQueue.SignalMessages", storageDataProvider, storageChangeDelegates);
            this.QueueConfigTypedStorage = new TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.cumulus_pallet_xcmp_queue.QueueConfigData>("XcmpQueue.QueueConfig", storageDataProvider, storageChangeDelegates);
            this.QueueSuspendedTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("XcmpQueue.QueueSuspended", storageDataProvider, storageChangeDelegates);
            this.DeliveryFeeFactorTypedStorage = new TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>("XcmpQueue.DeliveryFeeFactor", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _inboundXcmpSuspendedTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet> InboundXcmpSuspendedTypedStorage
        {
            get
            {
                return _inboundXcmpSuspendedTypedStorage;
            }
            set
            {
                _inboundXcmpSuspendedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _outboundXcmpStatusTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11> OutboundXcmpStatusTypedStorage
        {
            get
            {
                return _outboundXcmpStatusTypedStorage;
            }
            set
            {
                _outboundXcmpStatusTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _outboundXcmpMessagesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3> OutboundXcmpMessagesTypedStorage
        {
            get
            {
                return _outboundXcmpMessagesTypedStorage;
            }
            set
            {
                _outboundXcmpMessagesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _signalMessagesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3> SignalMessagesTypedStorage
        {
            get
            {
                return _signalMessagesTypedStorage;
            }
            set
            {
                _signalMessagesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _queueConfigTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.People.NET.NetApiExt.Generated.Model.cumulus_pallet_xcmp_queue.QueueConfigData> QueueConfigTypedStorage
        {
            get
            {
                return _queueConfigTypedStorage;
            }
            set
            {
                _queueConfigTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _queueSuspendedTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> QueueSuspendedTypedStorage
        {
            get
            {
                return _queueSuspendedTypedStorage;
            }
            set
            {
                _queueSuspendedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _deliveryFeeFactorTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.People.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> DeliveryFeeFactorTypedStorage
        {
            get
            {
                return _deliveryFeeFactorTypedStorage;
            }
            set
            {
                _deliveryFeeFactorTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await InboundXcmpSuspendedTypedStorage.InitializeAsync("XcmpQueue", "InboundXcmpSuspended");
            await OutboundXcmpStatusTypedStorage.InitializeAsync("XcmpQueue", "OutboundXcmpStatus");
            await OutboundXcmpMessagesTypedStorage.InitializeAsync("XcmpQueue", "OutboundXcmpMessages");
            await SignalMessagesTypedStorage.InitializeAsync("XcmpQueue", "SignalMessages");
            await QueueConfigTypedStorage.InitializeAsync("XcmpQueue", "QueueConfig");
            await QueueSuspendedTypedStorage.InitializeAsync("XcmpQueue", "QueueSuspended");
            await DeliveryFeeFactorTypedStorage.InitializeAsync("XcmpQueue", "DeliveryFeeFactor");
        }
        
        /// <summary>
        /// Implements any storage change for XcmpQueue.InboundXcmpSuspended
        /// </summary>
        [StorageChange("XcmpQueue", "InboundXcmpSuspended")]
        public void OnUpdateInboundXcmpSuspended(string data)
        {
            InboundXcmpSuspendedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> InboundXcmpSuspended
        ///  The suspended inbound XCMP channels. All others are not suspended.
        /// 
        ///  This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block
        ///  to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached
        ///  within the block and therefore only included once in the proof size.
        /// 
        ///  NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof
        ///  will be smaller.
        /// </summary>
        public Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet GetInboundXcmpSuspended()
        {
            return InboundXcmpSuspendedTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for XcmpQueue.OutboundXcmpStatus
        /// </summary>
        [StorageChange("XcmpQueue", "OutboundXcmpStatus")]
        public void OnUpdateOutboundXcmpStatus(string data)
        {
            OutboundXcmpStatusTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> OutboundXcmpStatus
        ///  The non-empty XCMP channels in order of becoming non-empty, and the index of the first
        ///  and last outbound message. If the two indices are equal, then it indicates an empty
        ///  queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater
        ///  than 65535 items. Queue indices for normal messages begin at one; zero is reserved in
        ///  case of the need to send a high-priority signal message this block.
        ///  The bool is true if there is a signal message waiting to be sent.
        /// </summary>
        public Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 GetOutboundXcmpStatus()
        {
            return OutboundXcmpStatusTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for XcmpQueue.OutboundXcmpMessages
        /// </summary>
        [StorageChange("XcmpQueue", "OutboundXcmpMessages")]
        public void OnUpdateOutboundXcmpMessages(string key, string data)
        {
            OutboundXcmpMessagesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OutboundXcmpMessages
        ///  The messages outbound in a given XCMP channel.
        /// </summary>
        public Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3 GetOutboundXcmpMessages(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OutboundXcmpMessagesTypedStorage.Dictionary.TryGetValue(key, out Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XcmpQueue.SignalMessages
        /// </summary>
        [StorageChange("XcmpQueue", "SignalMessages")]
        public void OnUpdateSignalMessages(string key, string data)
        {
            SignalMessagesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SignalMessages
        ///  Any signal messages waiting to be sent.
        /// </summary>
        public Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3 GetSignalMessages(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SignalMessagesTypedStorage.Dictionary.TryGetValue(key, out Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT3 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XcmpQueue.QueueConfig
        /// </summary>
        [StorageChange("XcmpQueue", "QueueConfig")]
        public void OnUpdateQueueConfig(string data)
        {
            QueueConfigTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> QueueConfig
        ///  The configuration which controls the dynamics of the outbound queue.
        /// </summary>
        public Substrate.People.NET.NetApiExt.Generated.Model.cumulus_pallet_xcmp_queue.QueueConfigData GetQueueConfig()
        {
            return QueueConfigTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for XcmpQueue.QueueSuspended
        /// </summary>
        [StorageChange("XcmpQueue", "QueueSuspended")]
        public void OnUpdateQueueSuspended(string data)
        {
            QueueSuspendedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> QueueSuspended
        ///  Whether or not the XCMP queue is suspended from executing incoming XCMs or not.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetQueueSuspended()
        {
            return QueueSuspendedTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for XcmpQueue.DeliveryFeeFactor
        /// </summary>
        [StorageChange("XcmpQueue", "DeliveryFeeFactor")]
        public void OnUpdateDeliveryFeeFactor(string key, string data)
        {
            DeliveryFeeFactorTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DeliveryFeeFactor
        ///  The factor to multiply the base delivery fee by.
        /// </summary>
        public Substrate.People.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetDeliveryFeeFactor(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DeliveryFeeFactorTypedStorage.Dictionary.TryGetValue(key, out Substrate.People.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
