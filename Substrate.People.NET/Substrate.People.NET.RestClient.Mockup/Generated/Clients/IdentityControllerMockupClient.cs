//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.People.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.People.NET.NetApiExt.Generated.Model.pallet_identity.types;
   using Substrate.People.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.People.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class IdentityControllerMockupClient : MockupBaseClient, IIdentityControllerMockupClient
   {
      private HttpClient _httpClient;
      public IdentityControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetIdentityOf(BaseTuple<Registration, BaseOpt<BoundedVecT4>> value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Identity/IdentityOf", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.IdentityStorage.IdentityOfParams(key));
      }
      public async Task<bool> SetSuperOf(BaseTuple<AccountId32, EnumData> value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Identity/SuperOf", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.IdentityStorage.SuperOfParams(key));
      }
      public async Task<bool> SetSubsOf(BaseTuple<U128, BoundedVecT18> value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Identity/SubsOf", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.IdentityStorage.SubsOfParams(key));
      }
      public async Task<bool> SetRegistrars(BoundedVecT22 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Identity/Registrars", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.IdentityStorage.RegistrarsParams());
      }
      public async Task<bool> SetUsernameAuthorities(AuthorityProperties value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Identity/UsernameAuthorities", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.IdentityStorage.UsernameAuthoritiesParams(key));
      }
      public async Task<bool> SetAccountOfUsername(AccountId32 value, BoundedVecT4 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Identity/AccountOfUsername", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.IdentityStorage.AccountOfUsernameParams(key));
      }
      public async Task<bool> SetPendingUsernames(BaseTuple<AccountId32, U32> value, BoundedVecT4 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Identity/PendingUsernames", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.IdentityStorage.PendingUsernamesParams(key));
      }
   }
}
