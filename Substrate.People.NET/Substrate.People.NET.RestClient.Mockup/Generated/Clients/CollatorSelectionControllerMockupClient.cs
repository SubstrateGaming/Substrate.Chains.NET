//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.People.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.People.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.People.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class CollatorSelectionControllerMockupClient : MockupBaseClient, ICollatorSelectionControllerMockupClient
   {
      private HttpClient _httpClient;
      public CollatorSelectionControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetInvulnerables(BoundedVecT8 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CollatorSelection/Invulnerables", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.CollatorSelectionStorage.InvulnerablesParams());
      }
      public async Task<bool> SetCandidateList(BoundedVecT9 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CollatorSelection/CandidateList", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.CollatorSelectionStorage.CandidateListParams());
      }
      public async Task<bool> SetLastAuthoredBlock(U32 value, Substrate.People.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "CollatorSelection/LastAuthoredBlock", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.CollatorSelectionStorage.LastAuthoredBlockParams(key));
      }
      public async Task<bool> SetDesiredCandidates(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CollatorSelection/DesiredCandidates", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.CollatorSelectionStorage.DesiredCandidatesParams());
      }
      public async Task<bool> SetCandidacyBond(U128 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CollatorSelection/CandidacyBond", value.Encode(), Substrate.People.NET.NetApiExt.Generated.Storage.CollatorSelectionStorage.CandidacyBondParams());
      }
   }
}
