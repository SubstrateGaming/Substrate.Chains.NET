//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Unique.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IForeignAssetsStorage interface definition.
    /// </summary>
    public interface IForeignAssetsStorage : IStorage
    {
        
        /// <summary>
        /// >> NextForeignAssetId
        ///  Next available Foreign AssetId ID.
        /// 
        ///  NextForeignAssetId: ForeignAssetId
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNextForeignAssetId();
        
        /// <summary>
        /// >> ForeignAssetLocations
        ///  The storages for MultiLocations.
        /// 
        ///  ForeignAssetLocations: map ForeignAssetId => Option<MultiLocation>
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation GetForeignAssetLocations(string key);
        
        /// <summary>
        /// >> LocationToCurrencyIds
        ///  The storages for CurrencyIds.
        /// 
        ///  LocationToCurrencyIds: map MultiLocation => Option<ForeignAssetId>
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetLocationToCurrencyIds(string key);
        
        /// <summary>
        /// >> AssetMetadatas
        ///  The storages for AssetMetadatas.
        /// 
        ///  AssetMetadatas: map AssetIds => Option<AssetMetadata>
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata GetAssetMetadatas(string key);
        
        /// <summary>
        /// >> AssetBinding
        ///  The storages for assets to fungible collection binding
        /// 
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId GetAssetBinding(string key);
    }
    
    /// <summary>
    /// ForeignAssetsStorage class definition.
    /// </summary>
    public sealed class ForeignAssetsStorage : IForeignAssetsStorage
    {
        
        /// <summary>
        /// _nextForeignAssetIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nextForeignAssetIdTypedStorage;
        
        /// <summary>
        /// _foreignAssetLocationsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation> _foreignAssetLocationsTypedStorage;
        
        /// <summary>
        /// _locationToCurrencyIdsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _locationToCurrencyIdsTypedStorage;
        
        /// <summary>
        /// _assetMetadatasTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata> _assetMetadatasTypedStorage;
        
        /// <summary>
        /// _assetBindingTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId> _assetBindingTypedStorage;
        
        /// <summary>
        /// ForeignAssetsStorage constructor.
        /// </summary>
        public ForeignAssetsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.NextForeignAssetIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ForeignAssets.NextForeignAssetId", storageDataProvider, storageChangeDelegates);
            this.ForeignAssetLocationsTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation>("ForeignAssets.ForeignAssetLocations", storageDataProvider, storageChangeDelegates);
            this.LocationToCurrencyIdsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ForeignAssets.LocationToCurrencyIds", storageDataProvider, storageChangeDelegates);
            this.AssetMetadatasTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata>("ForeignAssets.AssetMetadatas", storageDataProvider, storageChangeDelegates);
            this.AssetBindingTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId>("ForeignAssets.AssetBinding", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _nextForeignAssetIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> NextForeignAssetIdTypedStorage
        {
            get
            {
                return _nextForeignAssetIdTypedStorage;
            }
            set
            {
                _nextForeignAssetIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _foreignAssetLocationsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation> ForeignAssetLocationsTypedStorage
        {
            get
            {
                return _foreignAssetLocationsTypedStorage;
            }
            set
            {
                _foreignAssetLocationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _locationToCurrencyIdsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> LocationToCurrencyIdsTypedStorage
        {
            get
            {
                return _locationToCurrencyIdsTypedStorage;
            }
            set
            {
                _locationToCurrencyIdsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetMetadatasTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata> AssetMetadatasTypedStorage
        {
            get
            {
                return _assetMetadatasTypedStorage;
            }
            set
            {
                _assetMetadatasTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetBindingTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId> AssetBindingTypedStorage
        {
            get
            {
                return _assetBindingTypedStorage;
            }
            set
            {
                _assetBindingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await NextForeignAssetIdTypedStorage.InitializeAsync("ForeignAssets", "NextForeignAssetId");
            await ForeignAssetLocationsTypedStorage.InitializeAsync("ForeignAssets", "ForeignAssetLocations");
            await LocationToCurrencyIdsTypedStorage.InitializeAsync("ForeignAssets", "LocationToCurrencyIds");
            await AssetMetadatasTypedStorage.InitializeAsync("ForeignAssets", "AssetMetadatas");
            await AssetBindingTypedStorage.InitializeAsync("ForeignAssets", "AssetBinding");
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.NextForeignAssetId
        /// </summary>
        [StorageChange("ForeignAssets", "NextForeignAssetId")]
        public void OnUpdateNextForeignAssetId(string data)
        {
            NextForeignAssetIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextForeignAssetId
        ///  Next available Foreign AssetId ID.
        /// 
        ///  NextForeignAssetId: ForeignAssetId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNextForeignAssetId()
        {
            return NextForeignAssetIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.ForeignAssetLocations
        /// </summary>
        [StorageChange("ForeignAssets", "ForeignAssetLocations")]
        public void OnUpdateForeignAssetLocations(string key, string data)
        {
            ForeignAssetLocationsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ForeignAssetLocations
        ///  The storages for MultiLocations.
        /// 
        ///  ForeignAssetLocations: map ForeignAssetId => Option<MultiLocation>
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation GetForeignAssetLocations(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ForeignAssetLocationsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.LocationToCurrencyIds
        /// </summary>
        [StorageChange("ForeignAssets", "LocationToCurrencyIds")]
        public void OnUpdateLocationToCurrencyIds(string key, string data)
        {
            LocationToCurrencyIdsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LocationToCurrencyIds
        ///  The storages for CurrencyIds.
        /// 
        ///  LocationToCurrencyIds: map MultiLocation => Option<ForeignAssetId>
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetLocationToCurrencyIds(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LocationToCurrencyIdsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.AssetMetadatas
        /// </summary>
        [StorageChange("ForeignAssets", "AssetMetadatas")]
        public void OnUpdateAssetMetadatas(string key, string data)
        {
            AssetMetadatasTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetMetadatas
        ///  The storages for AssetMetadatas.
        /// 
        ///  AssetMetadatas: map AssetIds => Option<AssetMetadata>
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata GetAssetMetadatas(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetMetadatasTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.AssetBinding
        /// </summary>
        [StorageChange("ForeignAssets", "AssetBinding")]
        public void OnUpdateAssetBinding(string key, string data)
        {
            AssetBindingTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetBinding
        ///  The storages for assets to fungible collection binding
        /// 
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId GetAssetBinding(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetBindingTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
