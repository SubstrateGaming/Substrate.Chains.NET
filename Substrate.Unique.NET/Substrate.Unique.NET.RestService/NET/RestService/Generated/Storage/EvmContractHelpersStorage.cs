//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Unique.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IEvmContractHelpersStorage interface definition.
    /// </summary>
    public interface IEvmContractHelpersStorage : IStorage
    {
        
        /// <summary>
        /// >> Owner
        ///  Store owner for contract.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - owner for contract.
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.primitive_types.H160 GetOwner(string key);
        
        /// <summary>
        /// >> SelfSponsoring
        ///  Deprecated: this storage is deprecated
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetSelfSponsoring(string key);
        
        /// <summary>
        /// >> Sponsoring
        ///  Store for contract sponsorship state.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - sponsorship state.
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.EnumSponsorshipState GetSponsoring(string key);
        
        /// <summary>
        /// >> SponsoringMode
        ///  Store for sponsoring mode.
        /// 
        ///  ### Usage
        ///  Prefer to delete collection from storage if mode chaged to [`Disabled`](SponsoringModeT::Disabled).
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - [`sponsoring mode`](SponsoringModeT).
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_evm_contract_helpers.EnumSponsoringModeT GetSponsoringMode(string key);
        
        /// <summary>
        /// >> SponsoringRateLimit
        ///  Storage for sponsoring rate limit in blocks.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - amount of sponsored blocks.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetSponsoringRateLimit(string key);
        
        /// <summary>
        /// >> SponsoringFeeLimit
        ///  Storage for last sponsored block.
        /// 
        ///  * **Key1** - contract address.
        ///  * **Key2** - sponsored user address.
        ///  * **Value** - last sponsored block number.
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4 GetSponsoringFeeLimit(string key);
        
        /// <summary>
        /// >> SponsorBasket
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetSponsorBasket(string key);
        
        /// <summary>
        /// >> AllowlistEnabled
        ///  Storege for contracts with [`Allowlisted`](SponsoringModeT::Allowlisted) sponsoring mode.
        /// 
        ///  ### Usage
        ///  Prefer to delete collection from storage if mode chaged to non `Allowlisted`, than set **Value** to **false**.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - is contract in [`Allowlisted`](SponsoringModeT::Allowlisted) mode.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetAllowlistEnabled(string key);
        
        /// <summary>
        /// >> Allowlist
        ///  Storage for users that allowed for sponsorship.
        /// 
        ///  ### Usage
        ///  Prefer to delete record from storage if user no more allowed for sponsorship.
        /// 
        ///  * **Key1** - contract address.
        ///  * **Key2** - user that allowed for sponsorship.
        ///  * **Value** - allowance for sponsorship.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetAllowlist(string key);
    }
    
    /// <summary>
    /// EvmContractHelpersStorage class definition.
    /// </summary>
    public sealed class EvmContractHelpersStorage : IEvmContractHelpersStorage
    {
        
        /// <summary>
        /// _ownerTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.primitive_types.H160> _ownerTypedStorage;
        
        /// <summary>
        /// _selfSponsoringTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _selfSponsoringTypedStorage;
        
        /// <summary>
        /// _sponsoringTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.EnumSponsorshipState> _sponsoringTypedStorage;
        
        /// <summary>
        /// _sponsoringModeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_evm_contract_helpers.EnumSponsoringModeT> _sponsoringModeTypedStorage;
        
        /// <summary>
        /// _sponsoringRateLimitTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _sponsoringRateLimitTypedStorage;
        
        /// <summary>
        /// _sponsoringFeeLimitTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4> _sponsoringFeeLimitTypedStorage;
        
        /// <summary>
        /// _sponsorBasketTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _sponsorBasketTypedStorage;
        
        /// <summary>
        /// _allowlistEnabledTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _allowlistEnabledTypedStorage;
        
        /// <summary>
        /// _allowlistTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _allowlistTypedStorage;
        
        /// <summary>
        /// EvmContractHelpersStorage constructor.
        /// </summary>
        public EvmContractHelpersStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.OwnerTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.primitive_types.H160>("EvmContractHelpers.Owner", storageDataProvider, storageChangeDelegates);
            this.SelfSponsoringTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("EvmContractHelpers.SelfSponsoring", storageDataProvider, storageChangeDelegates);
            this.SponsoringTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.EnumSponsorshipState>("EvmContractHelpers.Sponsoring", storageDataProvider, storageChangeDelegates);
            this.SponsoringModeTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_evm_contract_helpers.EnumSponsoringModeT>("EvmContractHelpers.SponsoringMode", storageDataProvider, storageChangeDelegates);
            this.SponsoringRateLimitTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("EvmContractHelpers.SponsoringRateLimit", storageDataProvider, storageChangeDelegates);
            this.SponsoringFeeLimitTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4>("EvmContractHelpers.SponsoringFeeLimit", storageDataProvider, storageChangeDelegates);
            this.SponsorBasketTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("EvmContractHelpers.SponsorBasket", storageDataProvider, storageChangeDelegates);
            this.AllowlistEnabledTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("EvmContractHelpers.AllowlistEnabled", storageDataProvider, storageChangeDelegates);
            this.AllowlistTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("EvmContractHelpers.Allowlist", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _ownerTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.primitive_types.H160> OwnerTypedStorage
        {
            get
            {
                return _ownerTypedStorage;
            }
            set
            {
                _ownerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _selfSponsoringTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> SelfSponsoringTypedStorage
        {
            get
            {
                return _selfSponsoringTypedStorage;
            }
            set
            {
                _selfSponsoringTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sponsoringTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.EnumSponsorshipState> SponsoringTypedStorage
        {
            get
            {
                return _sponsoringTypedStorage;
            }
            set
            {
                _sponsoringTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sponsoringModeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_evm_contract_helpers.EnumSponsoringModeT> SponsoringModeTypedStorage
        {
            get
            {
                return _sponsoringModeTypedStorage;
            }
            set
            {
                _sponsoringModeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sponsoringRateLimitTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> SponsoringRateLimitTypedStorage
        {
            get
            {
                return _sponsoringRateLimitTypedStorage;
            }
            set
            {
                _sponsoringRateLimitTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sponsoringFeeLimitTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4> SponsoringFeeLimitTypedStorage
        {
            get
            {
                return _sponsoringFeeLimitTypedStorage;
            }
            set
            {
                _sponsoringFeeLimitTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sponsorBasketTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> SponsorBasketTypedStorage
        {
            get
            {
                return _sponsorBasketTypedStorage;
            }
            set
            {
                _sponsorBasketTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _allowlistEnabledTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> AllowlistEnabledTypedStorage
        {
            get
            {
                return _allowlistEnabledTypedStorage;
            }
            set
            {
                _allowlistEnabledTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _allowlistTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> AllowlistTypedStorage
        {
            get
            {
                return _allowlistTypedStorage;
            }
            set
            {
                _allowlistTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await OwnerTypedStorage.InitializeAsync("EvmContractHelpers", "Owner");
            await SelfSponsoringTypedStorage.InitializeAsync("EvmContractHelpers", "SelfSponsoring");
            await SponsoringTypedStorage.InitializeAsync("EvmContractHelpers", "Sponsoring");
            await SponsoringModeTypedStorage.InitializeAsync("EvmContractHelpers", "SponsoringMode");
            await SponsoringRateLimitTypedStorage.InitializeAsync("EvmContractHelpers", "SponsoringRateLimit");
            await SponsoringFeeLimitTypedStorage.InitializeAsync("EvmContractHelpers", "SponsoringFeeLimit");
            await SponsorBasketTypedStorage.InitializeAsync("EvmContractHelpers", "SponsorBasket");
            await AllowlistEnabledTypedStorage.InitializeAsync("EvmContractHelpers", "AllowlistEnabled");
            await AllowlistTypedStorage.InitializeAsync("EvmContractHelpers", "Allowlist");
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.Owner
        /// </summary>
        [StorageChange("EvmContractHelpers", "Owner")]
        public void OnUpdateOwner(string key, string data)
        {
            OwnerTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Owner
        ///  Store owner for contract.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - owner for contract.
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.primitive_types.H160 GetOwner(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OwnerTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.primitive_types.H160 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.SelfSponsoring
        /// </summary>
        [StorageChange("EvmContractHelpers", "SelfSponsoring")]
        public void OnUpdateSelfSponsoring(string key, string data)
        {
            SelfSponsoringTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SelfSponsoring
        ///  Deprecated: this storage is deprecated
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetSelfSponsoring(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SelfSponsoringTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.Sponsoring
        /// </summary>
        [StorageChange("EvmContractHelpers", "Sponsoring")]
        public void OnUpdateSponsoring(string key, string data)
        {
            SponsoringTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Sponsoring
        ///  Store for contract sponsorship state.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - sponsorship state.
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.EnumSponsorshipState GetSponsoring(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SponsoringTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.EnumSponsorshipState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.SponsoringMode
        /// </summary>
        [StorageChange("EvmContractHelpers", "SponsoringMode")]
        public void OnUpdateSponsoringMode(string key, string data)
        {
            SponsoringModeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SponsoringMode
        ///  Store for sponsoring mode.
        /// 
        ///  ### Usage
        ///  Prefer to delete collection from storage if mode chaged to [`Disabled`](SponsoringModeT::Disabled).
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - [`sponsoring mode`](SponsoringModeT).
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_evm_contract_helpers.EnumSponsoringModeT GetSponsoringMode(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SponsoringModeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_evm_contract_helpers.EnumSponsoringModeT result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.SponsoringRateLimit
        /// </summary>
        [StorageChange("EvmContractHelpers", "SponsoringRateLimit")]
        public void OnUpdateSponsoringRateLimit(string key, string data)
        {
            SponsoringRateLimitTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SponsoringRateLimit
        ///  Storage for sponsoring rate limit in blocks.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - amount of sponsored blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetSponsoringRateLimit(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SponsoringRateLimitTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.SponsoringFeeLimit
        /// </summary>
        [StorageChange("EvmContractHelpers", "SponsoringFeeLimit")]
        public void OnUpdateSponsoringFeeLimit(string key, string data)
        {
            SponsoringFeeLimitTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SponsoringFeeLimit
        ///  Storage for last sponsored block.
        /// 
        ///  * **Key1** - contract address.
        ///  * **Key2** - sponsored user address.
        ///  * **Value** - last sponsored block number.
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4 GetSponsoringFeeLimit(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SponsoringFeeLimitTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMapT4 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.SponsorBasket
        /// </summary>
        [StorageChange("EvmContractHelpers", "SponsorBasket")]
        public void OnUpdateSponsorBasket(string key, string data)
        {
            SponsorBasketTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SponsorBasket
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetSponsorBasket(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SponsorBasketTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.AllowlistEnabled
        /// </summary>
        [StorageChange("EvmContractHelpers", "AllowlistEnabled")]
        public void OnUpdateAllowlistEnabled(string key, string data)
        {
            AllowlistEnabledTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AllowlistEnabled
        ///  Storege for contracts with [`Allowlisted`](SponsoringModeT::Allowlisted) sponsoring mode.
        /// 
        ///  ### Usage
        ///  Prefer to delete collection from storage if mode chaged to non `Allowlisted`, than set **Value** to **false**.
        /// 
        ///  * **Key** - contract address.
        ///  * **Value** - is contract in [`Allowlisted`](SponsoringModeT::Allowlisted) mode.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetAllowlistEnabled(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AllowlistEnabledTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EvmContractHelpers.Allowlist
        /// </summary>
        [StorageChange("EvmContractHelpers", "Allowlist")]
        public void OnUpdateAllowlist(string key, string data)
        {
            AllowlistTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Allowlist
        ///  Storage for users that allowed for sponsorship.
        /// 
        ///  ### Usage
        ///  Prefer to delete record from storage if user no more allowed for sponsorship.
        /// 
        ///  * **Key1** - contract address.
        ///  * **Key2** - user that allowed for sponsorship.
        ///  * **Value** - allowance for sponsorship.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetAllowlist(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AllowlistTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
