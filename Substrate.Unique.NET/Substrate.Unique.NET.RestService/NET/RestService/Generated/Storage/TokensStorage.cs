//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Unique.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ITokensStorage interface definition.
    /// </summary>
    public interface ITokensStorage : IStorage
    {
        
        /// <summary>
        /// >> TotalIssuance
        ///  The total issuance of a token type.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetTotalIssuance(string key);
        
        /// <summary>
        /// >> Locks
        ///  Any liquidity locks of a token type under an account.
        ///  NOTE: Should only be accessed when setting, changing and freeing a lock.
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetLocks(string key);
        
        /// <summary>
        /// >> Accounts
        ///  The balance of a token type under an account.
        /// 
        ///  NOTE: If the total is ever zero, decrease account ref account.
        /// 
        ///  NOTE: This is only used in the case that this module is used to store
        ///  balances.
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.orml_tokens.AccountData GetAccounts(string key);
        
        /// <summary>
        /// >> Reserves
        ///  Named reserves on some account balances.
        /// </summary>
        Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23 GetReserves(string key);
    }
    
    /// <summary>
    /// TokensStorage class definition.
    /// </summary>
    public sealed class TokensStorage : ITokensStorage
    {
        
        /// <summary>
        /// _totalIssuanceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _totalIssuanceTypedStorage;
        
        /// <summary>
        /// _locksTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> _locksTypedStorage;
        
        /// <summary>
        /// _accountsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.orml_tokens.AccountData> _accountsTypedStorage;
        
        /// <summary>
        /// _reservesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23> _reservesTypedStorage;
        
        /// <summary>
        /// TokensStorage constructor.
        /// </summary>
        public TokensStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.TotalIssuanceTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Tokens.TotalIssuance", storageDataProvider, storageChangeDelegates);
            this.LocksTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22>("Tokens.Locks", storageDataProvider, storageChangeDelegates);
            this.AccountsTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.orml_tokens.AccountData>("Tokens.Accounts", storageDataProvider, storageChangeDelegates);
            this.ReservesTypedStorage = new TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23>("Tokens.Reserves", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _totalIssuanceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> TotalIssuanceTypedStorage
        {
            get
            {
                return _totalIssuanceTypedStorage;
            }
            set
            {
                _totalIssuanceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _locksTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> LocksTypedStorage
        {
            get
            {
                return _locksTypedStorage;
            }
            set
            {
                _locksTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _accountsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.orml_tokens.AccountData> AccountsTypedStorage
        {
            get
            {
                return _accountsTypedStorage;
            }
            set
            {
                _accountsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _reservesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23> ReservesTypedStorage
        {
            get
            {
                return _reservesTypedStorage;
            }
            set
            {
                _reservesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await TotalIssuanceTypedStorage.InitializeAsync("Tokens", "TotalIssuance");
            await LocksTypedStorage.InitializeAsync("Tokens", "Locks");
            await AccountsTypedStorage.InitializeAsync("Tokens", "Accounts");
            await ReservesTypedStorage.InitializeAsync("Tokens", "Reserves");
        }
        
        /// <summary>
        /// Implements any storage change for Tokens.TotalIssuance
        /// </summary>
        [StorageChange("Tokens", "TotalIssuance")]
        public void OnUpdateTotalIssuance(string key, string data)
        {
            TotalIssuanceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TotalIssuance
        ///  The total issuance of a token type.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetTotalIssuance(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TotalIssuanceTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Tokens.Locks
        /// </summary>
        [StorageChange("Tokens", "Locks")]
        public void OnUpdateLocks(string key, string data)
        {
            LocksTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Locks
        ///  Any liquidity locks of a token type under an account.
        ///  NOTE: Should only be accessed when setting, changing and freeing a lock.
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetLocks(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LocksTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Tokens.Accounts
        /// </summary>
        [StorageChange("Tokens", "Accounts")]
        public void OnUpdateAccounts(string key, string data)
        {
            AccountsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Accounts
        ///  The balance of a token type under an account.
        /// 
        ///  NOTE: If the total is ever zero, decrease account ref account.
        /// 
        ///  NOTE: This is only used in the case that this module is used to store
        ///  balances.
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.orml_tokens.AccountData GetAccounts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.orml_tokens.AccountData result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Tokens.Reserves
        /// </summary>
        [StorageChange("Tokens", "Reserves")]
        public void OnUpdateReserves(string key, string data)
        {
            ReservesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Reserves
        ///  Named reserves on some account balances.
        /// </summary>
        public Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23 GetReserves(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReservesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Unique.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT23 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
