//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Unique.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IFungibleStorage interface definition.
    /// </summary>
    public interface IFungibleStorage : IStorage
    {
        
        /// <summary>
        /// >> TotalSupply
        ///  Total amount of fungible tokens inside a collection.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetTotalSupply(string key);
        
        /// <summary>
        /// >> Balance
        ///  Amount of tokens owned by an account inside a collection.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetBalance(string key);
        
        /// <summary>
        /// >> Allowance
        ///  Storage for assets delegated to a limited extent to other users.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetAllowance(string key);
    }
    
    /// <summary>
    /// FungibleStorage class definition.
    /// </summary>
    public sealed class FungibleStorage : IFungibleStorage
    {
        
        /// <summary>
        /// _totalSupplyTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _totalSupplyTypedStorage;
        
        /// <summary>
        /// _balanceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _balanceTypedStorage;
        
        /// <summary>
        /// _allowanceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _allowanceTypedStorage;
        
        /// <summary>
        /// FungibleStorage constructor.
        /// </summary>
        public FungibleStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.TotalSupplyTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Fungible.TotalSupply", storageDataProvider, storageChangeDelegates);
            this.BalanceTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Fungible.Balance", storageDataProvider, storageChangeDelegates);
            this.AllowanceTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Fungible.Allowance", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _totalSupplyTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> TotalSupplyTypedStorage
        {
            get
            {
                return _totalSupplyTypedStorage;
            }
            set
            {
                _totalSupplyTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _balanceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> BalanceTypedStorage
        {
            get
            {
                return _balanceTypedStorage;
            }
            set
            {
                _balanceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _allowanceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> AllowanceTypedStorage
        {
            get
            {
                return _allowanceTypedStorage;
            }
            set
            {
                _allowanceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await TotalSupplyTypedStorage.InitializeAsync("Fungible", "TotalSupply");
            await BalanceTypedStorage.InitializeAsync("Fungible", "Balance");
            await AllowanceTypedStorage.InitializeAsync("Fungible", "Allowance");
        }
        
        /// <summary>
        /// Implements any storage change for Fungible.TotalSupply
        /// </summary>
        [StorageChange("Fungible", "TotalSupply")]
        public void OnUpdateTotalSupply(string key, string data)
        {
            TotalSupplyTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TotalSupply
        ///  Total amount of fungible tokens inside a collection.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetTotalSupply(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TotalSupplyTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Fungible.Balance
        /// </summary>
        [StorageChange("Fungible", "Balance")]
        public void OnUpdateBalance(string key, string data)
        {
            BalanceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Balance
        ///  Amount of tokens owned by an account inside a collection.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetBalance(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BalanceTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Fungible.Allowance
        /// </summary>
        [StorageChange("Fungible", "Allowance")]
        public void OnUpdateAllowance(string key, string data)
        {
            AllowanceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Allowance
        ///  Storage for assets delegated to a limited extent to other users.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetAllowance(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AllowanceTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
