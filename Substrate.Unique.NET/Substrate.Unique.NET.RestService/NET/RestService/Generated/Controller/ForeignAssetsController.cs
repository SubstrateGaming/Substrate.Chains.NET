//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Unique.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Unique.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// ForeignAssetsController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class ForeignAssetsController : ControllerBase
    {
        
        private IForeignAssetsStorage _foreignAssetsStorage;
        
        /// <summary>
        /// ForeignAssetsController constructor.
        /// </summary>
        public ForeignAssetsController(IForeignAssetsStorage foreignAssetsStorage)
        {
            _foreignAssetsStorage = foreignAssetsStorage;
        }
        
        /// <summary>
        /// >> NextForeignAssetId
        ///  Next available Foreign AssetId ID.
        /// 
        ///  NextForeignAssetId: ForeignAssetId
        /// </summary>
        [HttpGet("NextForeignAssetId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Unique.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage), "NextForeignAssetIdParams")]
        public IActionResult GetNextForeignAssetId()
        {
            return this.Ok(_foreignAssetsStorage.GetNextForeignAssetId());
        }
        
        /// <summary>
        /// >> ForeignAssetLocations
        ///  The storages for MultiLocations.
        /// 
        ///  ForeignAssetLocations: map ForeignAssetId => Option<MultiLocation>
        /// </summary>
        [HttpGet("ForeignAssetLocations")]
        [ProducesResponseType(typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation), 200)]
        [StorageKeyBuilder(typeof(Substrate.Unique.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage), "ForeignAssetLocationsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetForeignAssetLocations(string key)
        {
            return this.Ok(_foreignAssetsStorage.GetForeignAssetLocations(key));
        }
        
        /// <summary>
        /// >> LocationToCurrencyIds
        ///  The storages for CurrencyIds.
        /// 
        ///  LocationToCurrencyIds: map MultiLocation => Option<ForeignAssetId>
        /// </summary>
        [HttpGet("LocationToCurrencyIds")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Unique.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage), "LocationToCurrencyIdsParams", typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation))]
        public IActionResult GetLocationToCurrencyIds(string key)
        {
            return this.Ok(_foreignAssetsStorage.GetLocationToCurrencyIds(key));
        }
        
        /// <summary>
        /// >> AssetMetadatas
        ///  The storages for AssetMetadatas.
        /// 
        ///  AssetMetadatas: map AssetIds => Option<AssetMetadata>
        /// </summary>
        [HttpGet("AssetMetadatas")]
        [ProducesResponseType(typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata), 200)]
        [StorageKeyBuilder(typeof(Substrate.Unique.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage), "AssetMetadatasParams", typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.EnumAssetIds))]
        public IActionResult GetAssetMetadatas(string key)
        {
            return this.Ok(_foreignAssetsStorage.GetAssetMetadatas(key));
        }
        
        /// <summary>
        /// >> AssetBinding
        ///  The storages for assets to fungible collection binding
        /// 
        /// </summary>
        [HttpGet("AssetBinding")]
        [ProducesResponseType(typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId), 200)]
        [StorageKeyBuilder(typeof(Substrate.Unique.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage), "AssetBindingParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetAssetBinding(string key)
        {
            return this.Ok(_foreignAssetsStorage.GetAssetBinding(key));
        }
    }
}
