{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Index",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Index",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "misc_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 9
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 9
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeId": 10,
        "TypeDef": "Compact"
      },
      "10": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "11": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "12": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "13": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 15,
        "TypeDef": "Sequence"
      },
      "15": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "16": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "17": {
        "TypeId": 18,
        "TypeDef": "Sequence"
      },
      "18": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 136
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 19
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 123
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 19
          },
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "19": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 20
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 29
              }
            ],
            "Index": 20
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 31
              }
            ],
            "Index": 30
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 33
              }
            ],
            "Index": 33
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 34
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 35
              }
            ],
            "Index": 35
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "orml_vesting::Event<Runtime>",
                "TypeId": 39
              }
            ],
            "Index": 37
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "orml_xtokens::Event<Runtime>",
                "TypeId": 42
              }
            ],
            "Index": 38
          },
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "orml_tokens::Event<Runtime>",
                "TypeId": 60
              }
            ],
            "Index": 39
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 63
              }
            ],
            "Index": 50
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 66
              }
            ],
            "Index": 51
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 104
              }
            ],
            "Index": 52
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                "TypeId": 105
              }
            ],
            "Index": 53
          },
          {
            "Name": "Configuration",
            "TypeFields": [
              {
                "TypeName": "pallet_configuration::Event<Runtime>",
                "TypeId": 106
              }
            ],
            "Index": 63
          },
          {
            "Name": "Common",
            "TypeFields": [
              {
                "TypeName": "pallet_common::Event<Runtime>",
                "TypeId": 109
              }
            ],
            "Index": 66
          },
          {
            "Name": "Structure",
            "TypeFields": [
              {
                "TypeName": "pallet_structure::Event<Runtime>",
                "TypeId": 115
              }
            ],
            "Index": 70
          },
          {
            "Name": "AppPromotion",
            "TypeFields": [
              {
                "TypeName": "pallet_app_promotion::Event<Runtime>",
                "TypeId": 116
              }
            ],
            "Index": 73
          },
          {
            "Name": "ForeignAssets",
            "TypeFields": [
              {
                "TypeName": "pallet_foreign_assets::Event<Runtime>",
                "TypeId": 117
              }
            ],
            "Index": 80
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "pallet_evm::Event<Runtime>",
                "TypeId": 121
              }
            ],
            "Index": 100
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum::Event",
                "TypeId": 124
              }
            ],
            "Index": 101
          },
          {
            "Name": "EvmContractHelpers",
            "TypeFields": [
              {
                "TypeName": "pallet_evm_contract_helpers::Event<Runtime>",
                "TypeId": 133
              }
            ],
            "Index": 151
          },
          {
            "Name": "EvmMigration",
            "TypeFields": [
              {
                "TypeName": "pallet_evm_migration::Event<Runtime>",
                "TypeId": 134
              }
            ],
            "Index": 153
          },
          {
            "Name": "Maintenance",
            "TypeFields": [
              {
                "TypeName": "pallet_maintenance::Event<Runtime>",
                "TypeId": 135
              }
            ],
            "Index": 154
          }
        ],
        "Path": [
          "unique_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "20": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 24
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "21": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 22
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 23
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "22": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "23": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 25
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 26
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 27
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 28
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "26": {
        "Variants": [
          {
            "Name": "NoFunds",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "An upgrade has been authorized."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 30
              }
            ],
            "Index": 6,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "30": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "31": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 32
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "32": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "33": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "34": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "35": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old_sudoer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 38
              }
            ],
            "Index": 1,
            "Docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 2,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "36": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 37
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 24
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 37
          },
          {
            "Name": "E",
            "TypeId": 24
          }
        ],
        "TypeDef": "Variant"
      },
      "37": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "38": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "39": {
        "Variants": [
          {
            "Name": "VestingScheduleAdded",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "vesting_schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 40
              }
            ],
            "Index": 0,
            "Docs": [
              "Added new vesting schedule."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Claimed vesting."
            ]
          },
          {
            "Name": "VestingSchedulesUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Updated vesting schedules."
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "40": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "per_period",
            "TypeName": "Balance",
            "TypeId": 41
          }
        ],
        "Path": [
          "orml_vesting",
          "VestingSchedule"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "41": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "42": {
        "Variants": [
          {
            "Name": "TransferredMultiAssets",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "fee",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 0,
            "Docs": [
              "Transferred `MultiAsset` with fee."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "43": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 44
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "44": {
        "TypeId": 45,
        "TypeDef": "Sequence"
      },
      "45": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 46
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 56
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "46": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "47": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 48
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "48": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              },
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "49": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 51
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 51
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 51
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 53
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 41
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 54
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 55
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 52
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "50": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "51": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 52
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 52
          }
        ],
        "TypeDef": "Variant"
      },
      "52": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "53": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "54": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "55": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "56": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 41
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 57
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "57": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 41
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 58
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 59
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "58": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "59": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "60": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below",
              "ExistentialDeposit, resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "status",
                "TypeName": "BalanceStatus",
                "TypeId": 32
              }
            ],
            "Index": 5,
            "Docs": [
              "Some reserved balance was repatriated (moved from reserved to",
              "another account)."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "TotalIssuanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "The total issuance of an currency has been set"
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some balances were withdrawn (e.g. pay for transaction fee)"
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some balances were slashed (e.g. due to mis-behavior)"
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Deposited some balance into an account"
            ]
          },
          {
            "Name": "LockSet",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 58
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some funds are locked"
            ]
          },
          {
            "Name": "LockRemoved",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 58
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "Some locked funds were unlocked"
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some free balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Some locked balance was freed."
            ]
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "61": {
        "Variants": [
          {
            "Name": "ForeignAssetId",
            "TypeFields": [
              {
                "TypeName": "ForeignAssetId",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "NativeAssetId",
            "TypeFields": [
              {
                "TypeName": "NativeCurrency",
                "TypeId": 62
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_foreign_assets",
          "AssetIds"
        ],
        "TypeDef": "Variant"
      },
      "62": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Parent",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_foreign_assets",
          "NativeCurrency"
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 30
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Some XCM was executed ok."
            ]
          },
          {
            "Name": "Fail",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 30
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 64
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Some XCM failed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 30
              }
            ],
            "Index": 2,
            "Docs": [
              "Bad XCM version used."
            ]
          },
          {
            "Name": "BadFormat",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 30
              }
            ],
            "Index": 3,
            "Docs": [
              "Bad XCM format used."
            ]
          },
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 30
              }
            ],
            "Index": 4,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 65
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "required",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "An XCM exceeded the individual message weight budget."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "An XCM from the overweight queue was executed with the given actual weight used."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "64": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "65": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "66": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 67
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted.",
              "",
              "\\[ outcome \\]"
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent.",
              "",
              "\\[ origin, destination, message \\]"
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "Response",
                "TypeId": 71
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call.",
              "",
              "\\[ id, response \\]"
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification could",
              "not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result.",
              "",
              "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected location \\]"
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed.",
              "",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 89
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap.",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included.",
              "",
              "\\[ destination, result, cost \\]"
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention.",
              "",
              "\\[ location, XCM version \\]"
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "XcmError",
                "TypeId": 64
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it.",
              "",
              "\\[ location, query ID, error \\]"
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "TypeName": "VersionedMultiLocation",
                "TypeId": 103
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format.",
              "",
              "\\[ location, query ID \\]"
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected querier, maybe actual querier \\]"
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain sends us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change notifications.",
              "",
              "\\[ destination location, cost \\]"
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`).",
              "",
              "\\[ paying location, fees \\]"
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 89
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "67": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "TypeName": "Error",
                "TypeId": 64
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Error",
                "TypeId": 64
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "68": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 69
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "69": {
        "TypeId": 70,
        "TypeDef": "Sequence"
      },
      "70": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 71
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 81
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 82
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 48
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 68
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 68
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 72
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 78
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 52
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 48
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "71": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 72
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 74
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 78
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "72": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 73
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 73
          }
        ],
        "TypeDef": "Variant"
      },
      "73": {
        "TypeIds": [
          4,
          64
        ],
        "TypeDef": "Tuple"
      },
      "74": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 77
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 75
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "75": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 50
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 76
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 76
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 50
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 50
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 50
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "76": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "77": {
        "TypeId": 75,
        "TypeDef": "Sequence"
      },
      "78": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 79
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 79
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "79": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "80": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 47
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 47
          }
        ],
        "TypeDef": "Variant"
      },
      "81": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "82": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "83": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 47
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 9
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "84": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 85
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "85": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 46
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 86
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 46
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 86
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "86": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "88": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "89": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAssets"
        ],
        "TypeDef": "Variant"
      },
      "90": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 91
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "91": {
        "TypeId": 92,
        "TypeDef": "Sequence"
      },
      "92": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 93
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 101
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "93": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "94": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 95
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "95": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              },
              {
                "TypeName": "Junction",
                "TypeId": 96
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "96": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 97
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 97
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 97
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 53
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 41
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 98
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 99
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 100
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "97": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 98
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "98": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 98
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "100": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "101": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 41
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 102
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 41
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 58
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 59
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "103": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "104": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "TypeName": "Outcome",
                "TypeId": 67
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "105": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM."
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM."
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "outcome",
                "TypeName": "Outcome",
                "TypeId": 67
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome."
            ]
          },
          {
            "Name": "WeightExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "remaining_weight",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "The weight limit for handling downward messages was reached."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward message is overweight and was placed in the overweight queue."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward message from the overweight queue was executed."
            ]
          },
          {
            "Name": "MaxMessagesExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 6,
            "Docs": [
              "The maximum number of downward messages was."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "106": {
        "Variants": [
          {
            "Name": "NewDesiredCollators",
            "TypeFields": [
              {
                "Name": "desired_collators",
                "TypeName": "Option<u32>",
                "TypeId": 107
              }
            ],
            "Index": 0
          },
          {
            "Name": "NewCollatorLicenseBond",
            "TypeFields": [
              {
                "Name": "bond_cost",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 108
              }
            ],
            "Index": 1
          },
          {
            "Name": "NewCollatorKickThreshold",
            "TypeFields": [
              {
                "Name": "length_in_blocks",
                "TypeName": "Option<T::BlockNumber>",
                "TypeId": 107
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_configuration",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "107": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "108": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "109": {
        "Variants": [
          {
            "Name": "CollectionCreated",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Globally unique identifier of newly created collection."
                ]
              },
              {
                "TypeName": "u8",
                "TypeId": 2,
                "Docs": [
                  "[`CollectionMode`] converted into _u8_."
                ]
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "Collection owner."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "New collection was created"
            ]
          },
          {
            "Name": "CollectionDestroyed",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Globally unique identifier of collection."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "New collection was destroyed"
            ]
          },
          {
            "Name": "ItemCreated",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Id of the collection where item was created."
                ]
              },
              {
                "TypeName": "TokenId",
                "TypeId": 111,
                "Docs": [
                  "Id of an item. Unique within the collection."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Owner of newly created item"
                ]
              },
              {
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Always 1 for NFT"
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "New item was created."
            ]
          },
          {
            "Name": "ItemDestroyed",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Id of the collection where item was destroyed."
                ]
              },
              {
                "TypeName": "TokenId",
                "TypeId": 111,
                "Docs": [
                  "Identifier of burned NFT."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Which user has destroyed its tokens."
                ]
              },
              {
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Amount of token pieces destroed. Always 1 for NFT."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Collection item was burned."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Id of collection to which item is belong."
                ]
              },
              {
                "TypeName": "TokenId",
                "TypeId": 111,
                "Docs": [
                  "Id of an item."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Original owner of item."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "New owner of item."
                ]
              },
              {
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Amount of token pieces transfered. Always 1 for NFT."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Item was transferred"
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Id of collection to which item is belong."
                ]
              },
              {
                "TypeName": "TokenId",
                "TypeId": 111,
                "Docs": [
                  "Id of an item."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Original owner of item."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Id for which the approval was granted."
                ]
              },
              {
                "TypeName": "u128",
                "TypeId": 6,
                "Docs": [
                  "Amount of token pieces transfered. Always 1 for NFT."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Amount pieces of token owned by `sender` was approved for `spender`."
            ]
          },
          {
            "Name": "ApprovedForAll",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Id of collection to which item is belong."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Owner of a wallet."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Id for which operator status was granted or rewoked."
                ]
              },
              {
                "TypeName": "bool",
                "TypeId": 87,
                "Docs": [
                  "Is operator status granted or revoked?"
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A `sender` approves operations on all owned tokens for `spender`."
            ]
          },
          {
            "Name": "CollectionPropertySet",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Id of collection to which property has been set."
                ]
              },
              {
                "TypeName": "PropertyKey",
                "TypeId": 114,
                "Docs": [
                  "The property that was set."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "The colletion property has been added or edited."
            ]
          },
          {
            "Name": "CollectionPropertyDeleted",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Id of collection to which property has been deleted."
                ]
              },
              {
                "TypeName": "PropertyKey",
                "TypeId": 114,
                "Docs": [
                  "The property that was deleted."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "The property has been deleted."
            ]
          },
          {
            "Name": "TokenPropertySet",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Identifier of the collection whose token has the property set."
                ]
              },
              {
                "TypeName": "TokenId",
                "TypeId": 111,
                "Docs": [
                  "The token for which the property was set."
                ]
              },
              {
                "TypeName": "PropertyKey",
                "TypeId": 114,
                "Docs": [
                  "The property that was set."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "The token property has been added or edited."
            ]
          },
          {
            "Name": "TokenPropertyDeleted",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "Identifier of the collection whose token has the property deleted."
                ]
              },
              {
                "TypeName": "TokenId",
                "TypeId": 111,
                "Docs": [
                  "The token for which the property was deleted."
                ]
              },
              {
                "TypeName": "PropertyKey",
                "TypeId": 114,
                "Docs": [
                  "The property that was deleted."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "The token property has been deleted."
            ]
          },
          {
            "Name": "PropertyPermissionSet",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of collection to which property permission has been set."
                ]
              },
              {
                "TypeName": "PropertyKey",
                "TypeId": 114,
                "Docs": [
                  "The property permission that was set."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "The token property permission of a collection has been set."
            ]
          },
          {
            "Name": "AllowListAddressAdded",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Address of the added account."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "Address was added to the allow list."
            ]
          },
          {
            "Name": "AllowListAddressRemoved",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Address of the removed account."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "Address was removed from the allow list."
            ]
          },
          {
            "Name": "CollectionAdminAdded",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Admin address."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Collection admin was added."
            ]
          },
          {
            "Name": "CollectionAdminRemoved",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              },
              {
                "TypeName": "T::CrossAccountId",
                "TypeId": 112,
                "Docs": [
                  "Removed admin address."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Collection admin was removed."
            ]
          },
          {
            "Name": "CollectionLimitSet",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Collection limits were set."
            ]
          },
          {
            "Name": "CollectionOwnerChanged",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "New owner address."
                ]
              }
            ],
            "Index": 17,
            "Docs": [
              "Collection owned was changed."
            ]
          },
          {
            "Name": "CollectionPermissionSet",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              }
            ],
            "Index": 18,
            "Docs": [
              "Collection permissions were set."
            ]
          },
          {
            "Name": "CollectionSponsorSet",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "New sponsor address."
                ]
              }
            ],
            "Index": 19,
            "Docs": [
              "Collection sponsor was set."
            ]
          },
          {
            "Name": "SponsorshipConfirmed",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "New sponsor address."
                ]
              }
            ],
            "Index": 20,
            "Docs": [
              "New sponsor was confirm."
            ]
          },
          {
            "Name": "CollectionSponsorRemoved",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 110,
                "Docs": [
                  "ID of the affected collection."
                ]
              }
            ],
            "Index": 21,
            "Docs": [
              "Collection sponsor was removed."
            ]
          }
        ],
        "Path": [
          "pallet_common",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "110": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "up_data_structs",
          "CollectionId"
        ],
        "TypeDef": "Composite"
      },
      "111": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "up_data_structs",
          "TokenId"
        ],
        "TypeDef": "Composite"
      },
      "112": {
        "Variants": [
          {
            "Name": "Substrate",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_evm",
          "account",
          "BasicCrossAccountIdRepr"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 53
          }
        ],
        "Path": [
          "primitive_types",
          "H160"
        ],
        "TypeDef": "Composite"
      },
      "114": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "115": {
        "Variants": [
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 0,
            "Docs": [
              "Executed call on behalf of the token."
            ]
          }
        ],
        "Path": [
          "pallet_structure",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "116": {
        "Variants": [
          {
            "Name": "StakingRecalculation",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "An recalculated staker"
                ]
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Base on which interest is calculated"
                ]
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6,
                "Docs": [
                  "Amount of accrued interest"
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Staking recalculation was performed",
              "",
              "# Arguments",
              "* AccountId: account of the staker.",
              "* Balance : recalculation base",
              "* Balance : total income"
            ]
          },
          {
            "Name": "Stake",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Staking was performed",
              "",
              "# Arguments",
              "* AccountId: account of the staker",
              "* Balance : staking amount"
            ]
          },
          {
            "Name": "Unstake",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Unstaking was performed",
              "",
              "# Arguments",
              "* AccountId: account of the staker",
              "* Balance : unstaking amount"
            ]
          },
          {
            "Name": "SetAdmin",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "The admin was set",
              "",
              "# Arguments",
              "* AccountId: account address of the admin"
            ]
          }
        ],
        "Path": [
          "pallet_app_promotion",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "117": {
        "Variants": [
          {
            "Name": "ForeignAssetRegistered",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "ForeignAssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_address",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 118
              }
            ],
            "Index": 0,
            "Docs": [
              "The foreign asset registered."
            ]
          },
          {
            "Name": "ForeignAssetUpdated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "ForeignAssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_address",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 118
              }
            ],
            "Index": 1,
            "Docs": [
              "The foreign asset updated."
            ]
          },
          {
            "Name": "AssetRegistered",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIds",
                "TypeId": 61
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 118
              }
            ],
            "Index": 2,
            "Docs": [
              "The asset registered."
            ]
          },
          {
            "Name": "AssetUpdated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIds",
                "TypeId": 61
              },
              {
                "Name": "metadata",
                "TypeName": "AssetMetadata<BalanceOf<T>>",
                "TypeId": 118
              }
            ],
            "Index": 3,
            "Docs": [
              "The asset updated."
            ]
          }
        ],
        "Path": [
          "pallet_foreign_assets",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "118": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "AssetName",
            "TypeId": 119
          },
          {
            "Name": "symbol",
            "TypeName": "AssetSymbol",
            "TypeId": 120
          },
          {
            "Name": "decimals",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "minimal_balance",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_foreign_assets",
          "module",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "119": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "120": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "121": {
        "Variants": [
          {
            "Name": "Log",
            "TypeFields": [
              {
                "Name": "log",
                "TypeName": "Log",
                "TypeId": 122
              }
            ],
            "Index": 0,
            "Docs": [
              "Ethereum events from contracts."
            ]
          },
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 1,
            "Docs": [
              "A contract has been created at given address."
            ]
          },
          {
            "Name": "CreatedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 2,
            "Docs": [
              "A contract was attempted to be created, but the execution failed."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 3,
            "Docs": [
              "A contract has been executed successfully with states applied."
            ]
          },
          {
            "Name": "ExecutedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 4,
            "Docs": [
              "A contract has been executed with errors. States are reverted with only gas fees applied."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "122": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "H160",
            "TypeId": 113
          },
          {
            "Name": "topics",
            "TypeName": "Vec<H256>",
            "TypeId": 123
          },
          {
            "Name": "data",
            "TypeName": "Bytes",
            "TypeId": 12
          }
        ],
        "Path": [
          "ethereum",
          "log",
          "Log"
        ],
        "TypeDef": "Composite"
      },
      "123": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "124": {
        "Variants": [
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "transaction_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "exit_reason",
                "TypeName": "ExitReason",
                "TypeId": 125
              }
            ],
            "Index": 0,
            "Docs": [
              "An ethereum transaction was successfully executed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "125": {
        "Variants": [
          {
            "Name": "Succeed",
            "TypeFields": [
              {
                "TypeName": "ExitSucceed",
                "TypeId": 126
              }
            ],
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 127
              }
            ],
            "Index": 1
          },
          {
            "Name": "Revert",
            "TypeFields": [
              {
                "TypeName": "ExitRevert",
                "TypeId": 131
              }
            ],
            "Index": 2
          },
          {
            "Name": "Fatal",
            "TypeFields": [
              {
                "TypeName": "ExitFatal",
                "TypeId": 132
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitReason"
        ],
        "TypeDef": "Variant"
      },
      "126": {
        "Variants": [
          {
            "Name": "Stopped",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Returned",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Suicided",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitSucceed"
        ],
        "TypeDef": "Variant"
      },
      "127": {
        "Variants": [
          {
            "Name": "StackUnderflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "StackOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "InvalidJump",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "InvalidRange",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DesignatedInvalid",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CallTooDeep",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "CreateCollision",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CreateContractLimit",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidCode",
            "TypeFields": [
              {
                "TypeName": "Opcode",
                "TypeId": 128
              }
            ],
            "Index": 15
          },
          {
            "Name": "OutOfOffset",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "OutOfFund",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "PCUnderflow",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "CreateEmpty",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 129
              }
            ],
            "Index": 13
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitError"
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "evm_core",
          "opcode",
          "Opcode"
        ],
        "TypeDef": "Composite"
      },
      "129": {
        "TypeFields": [
          {
            "TypeId": 130
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 130
          }
        ],
        "TypeDef": "Composite"
      },
      "130": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "131": {
        "Variants": [
          {
            "Name": "Reverted",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitRevert"
        ],
        "TypeDef": "Variant"
      },
      "132": {
        "Variants": [
          {
            "Name": "NotSupported",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "UnhandledInterrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "CallErrorAsFatal",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 127
              }
            ],
            "Index": 2
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 129
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitFatal"
        ],
        "TypeDef": "Variant"
      },
      "133": {
        "Variants": [
          {
            "Name": "ContractSponsorSet",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 113,
                "Docs": [
                  "Contract address of the affected collection."
                ]
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "New sponsor address."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Contract sponsor was set."
            ]
          },
          {
            "Name": "ContractSponsorshipConfirmed",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 113,
                "Docs": [
                  "Contract address of the affected collection."
                ]
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "New sponsor address."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "New sponsor was confirm."
            ]
          },
          {
            "Name": "ContractSponsorRemoved",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 113,
                "Docs": [
                  "Contract address of the affected collection."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Collection sponsor was removed."
            ]
          }
        ],
        "Path": [
          "pallet_evm_contract_helpers",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "134": {
        "Variants": [
          {
            "Name": "TestEvent",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "This event is used in benchmarking and can be used for tests"
            ]
          }
        ],
        "Path": [
          "pallet_evm_migration",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "135": {
        "Variants": [
          {
            "Name": "MaintenanceEnabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MaintenanceDisabled",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_maintenance",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "136": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "137": {
        "TypeId": 138,
        "TypeDef": "Sequence"
      },
      "138": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "139": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 50
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 130
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "140": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "## Complexity",
              "- `O(1)`"
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code.",
              "",
              "## Complexity",
              "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "## Complexity",
              "- `O(C)` where `C` length of `code`"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 141
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 143
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 12
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "141": {
        "TypeId": 142,
        "TypeDef": "Sequence"
      },
      "142": {
        "TypeIds": [
          12,
          12
        ],
        "TypeDef": "Tuple"
      },
      "143": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "144": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 145
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "145": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 146
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 146
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 146
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 146
          }
        ],
        "TypeDef": "Composite"
      },
      "146": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 147
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 147
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 147
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "147": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 8
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Variant"
      },
      "148": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 149
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "149": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 130
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 130
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 152
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "152": {
        "TypeFields": [
          {
            "TypeId": 153
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 153
          }
        ],
        "TypeDef": "Composite"
      },
      "153": {
        "TypeId": 154,
        "TypeDef": "Sequence"
      },
      "154": {
        "TypeIds": [
          58,
          4
        ],
        "TypeDef": "Tuple"
      },
      "155": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "156": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "157": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 158
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 11
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "158": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "159": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 160
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 160
          }
        ],
        "TypeDef": "Variant"
      },
      "160": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "161": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 162
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "TypeFields": [
          {
            "TypeId": 143
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "163": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 11
          },
          {
            "Name": "relay_dispatch_queue_size",
            "TypeName": "(u32, u32)",
            "TypeId": 138
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 164
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 164
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "164": {
        "TypeId": 165,
        "TypeDef": "Sequence"
      },
      "165": {
        "TypeIds": [
          65,
          166
        ],
        "TypeDef": "Tuple"
      },
      "166": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 167
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "167": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "168": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "169": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 11
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "170": {
        "TypeFields": [
          {
            "TypeId": 171
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 65
          },
          {
            "Name": "V",
            "TypeId": 169
          }
        ],
        "TypeDef": "Composite"
      },
      "171": {
        "TypeId": 172,
        "TypeDef": "Sequence"
      },
      "172": {
        "TypeIds": [
          65,
          169
        ],
        "TypeDef": "Tuple"
      },
      "173": {
        "TypeId": 174,
        "TypeDef": "Sequence"
      },
      "174": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 65
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 65
          }
        ],
        "TypeDef": "Composite"
      },
      "175": {
        "TypeFields": [
          {
            "Name": "code_hash",
            "TypeName": "T::Hash",
            "TypeId": 11
          },
          {
            "Name": "check_version",
            "TypeName": "bool",
            "TypeId": 87
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "CodeUpgradeAuthorization"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "176": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 177
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 2,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
              "version and name should be verified on upgrade. Since the authorization only has a hash,",
              "it cannot actually perform the verification.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "enact_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
              "",
              "If the authorization required a version check, this call will ensure the spec name",
              "remains unchanged and that the spec version has increased.",
              "",
              "Note that this function will not apply the new `code`, but only attempt to schedule the",
              "upgrade with the Relay Chain.",
              "",
              "All origins are allowed."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "177": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 157
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 161
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 178
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 180
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "178": {
        "TypeId": 179,
        "TypeDef": "Sequence"
      },
      "179": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "180": {
        "TypeFields": [
          {
            "TypeId": 183
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 65
          },
          {
            "Name": "V",
            "TypeId": 181
          }
        ],
        "TypeDef": "Composite"
      },
      "181": {
        "TypeId": 182,
        "TypeDef": "Sequence"
      },
      "182": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "183": {
        "TypeId": 184,
        "TypeDef": "Sequence"
      },
      "184": {
        "TypeIds": [
          65,
          181
        ],
        "TypeDef": "Tuple"
      },
      "185": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending."
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run."
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block."
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block."
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "186": {
        "Variants": null,
        "Path": [
          "parachain_info",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "187": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 190
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 188
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "188": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 189
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "189": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "190": {
        "TypeId": 188,
        "TypeDef": "Sequence"
      },
      "191": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "192": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 195
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 193
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "193": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 58
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 194
          }
        ],
        "Path": [
          "pallet_balances",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "194": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "195": {
        "TypeId": 193,
        "TypeDef": "Sequence"
      },
      "196": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 198
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 197
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "197": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 59
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 59
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "198": {
        "TypeId": 197,
        "TypeDef": "Sequence"
      },
      "199": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor.",
              "",
              "## Complexity",
              "- Dependent on arguments but not critical, given proper implementations for input config",
              "  types. See related functions below.",
              "- It contains a limited number of reads and writes internally and no complex",
              "  computation.",
              "",
              "Related functions:",
              "",
              "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
              "  - Transferring balances to accounts that did not exist before will cause",
              "    `T::OnNewAccount::on_new_account` to be called.",
              "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
              "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
              "    that the transfer will not kill the origin account."
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 41
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
              "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
              "If the new free or reserved balance is below the existential deposit,",
              "it will reset the account nonce (`frame_system::AccountNonce`).",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source account may be",
              "specified.",
              "## Complexity",
              "- Same as transfer, but additional read and write because the source account is not",
              "  assumed to be in the overlay."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
              "origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "[`transfer`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true). ## Complexity",
              "- O(1). Just like transfer, but reading the user's transferable balance first."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "200": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 201
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 53
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 37
          }
        ],
        "TypeDef": "Variant"
      },
      "201": {
        "TypeId": 37,
        "TypeDef": "Compact"
      },
      "202": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed MaxReserves"
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "203": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "204": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "206": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "207": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 208
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "208": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "209": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 41
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              }
            ],
            "Index": 0,
            "Docs": [
              "Put forward a suggestion for spending. A deposit proportional to the value",
              "is reserved and slashed if the proposal is rejected. It is returned once the",
              "proposal is awarded.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 50
              }
            ],
            "Index": 1,
            "Docs": [
              "Reject a proposed spend. The original deposit will be slashed.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "## Complexity",
              "- O(1)"
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 50
              }
            ],
            "Index": 2,
            "Docs": [
              "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::ApproveOrigin`.",
              "",
              "## Complexity",
              " - O(1)."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 41
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 50
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "The original deposit will no longer be returned.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "- `proposal_id`: The index of a proposal",
              "",
              "## Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "Errors:",
              "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
              "i.e., the proposal has not been approved. This could also mean the proposal does not",
              "exist altogether, thus there is no way it would have been approved in the first place."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "210": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "211": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 58
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "212": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "213": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 214
              }
            ],
            "Index": 0,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 214
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              }
            ],
            "Index": 2,
            "Docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 200
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 214
              }
            ],
            "Index": 3,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "214": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 140
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 176
              }
            ],
            "Index": 20
          },
          {
            "Name": "ParachainInfo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                "TypeId": 186
              }
            ],
            "Index": 21
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 199
              }
            ],
            "Index": 30
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 203
              }
            ],
            "Index": 32
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 209
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 213
              }
            ],
            "Index": 35
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 215
              }
            ],
            "Index": 37
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                "TypeId": 217
              }
            ],
            "Index": 38
          },
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>",
                "TypeId": 221
              }
            ],
            "Index": 39
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 222
              }
            ],
            "Index": 50
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 223
              }
            ],
            "Index": 51
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                "TypeId": 244
              }
            ],
            "Index": 52
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                "TypeId": 245
              }
            ],
            "Index": 53
          },
          {
            "Name": "Inflation",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Inflation, Runtime>",
                "TypeId": 246
              }
            ],
            "Index": 60
          },
          {
            "Name": "Unique",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Unique, Runtime>",
                "TypeId": 247
              }
            ],
            "Index": 61
          },
          {
            "Name": "Configuration",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>",
                "TypeId": 296
              }
            ],
            "Index": 63
          },
          {
            "Name": "Structure",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Structure, Runtime>",
                "TypeId": 302
              }
            ],
            "Index": 70
          },
          {
            "Name": "AppPromotion",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AppPromotion, Runtime>",
                "TypeId": 303
              }
            ],
            "Index": 73
          },
          {
            "Name": "ForeignAssets",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ForeignAssets, Runtime>",
                "TypeId": 304
              }
            ],
            "Index": 80
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                "TypeId": 305
              }
            ],
            "Index": 100
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                "TypeId": 311
              }
            ],
            "Index": 101
          },
          {
            "Name": "EvmCoderSubstrate",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EvmCoderSubstrate, Runtime>",
                "TypeId": 321
              }
            ],
            "Index": 150
          },
          {
            "Name": "EvmContractHelpers",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EvmContractHelpers, Runtime>",
                "TypeId": 322
              }
            ],
            "Index": 151
          },
          {
            "Name": "EvmMigration",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EvmMigration, Runtime>",
                "TypeId": 324
              }
            ],
            "Index": 153
          },
          {
            "Name": "Maintenance",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Maintenance, Runtime>",
                "TypeId": 328
              }
            ],
            "Index": 154
          }
        ],
        "Path": [
          "unique_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "215": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 40
              }
            ],
            "Index": 1
          },
          {
            "Name": "update_vesting_schedules",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "vesting_schedules",
                "TypeName": "Vec<VestingScheduleOf<T>>",
                "TypeId": 216
              }
            ],
            "Index": 2
          },
          {
            "Name": "claim_for",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "216": {
        "TypeId": 40,
        "TypeDef": "Sequence"
      },
      "217": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer native currencies.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 218
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer `MultiAsset`.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_with_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer native currencies specifying the fee and amount as",
              "separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the amount to be spent to pay for execution in destination",
              "chain. Both fee and amount will be subtracted form the callers",
              "balance.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset_with_fee",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 218
              },
              {
                "Name": "fee",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 218
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 3,
            "Docs": [
              "Transfer `MultiAsset` specifying the fee and amount as separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the multiasset to be spent to pay for execution in",
              "destination chain. Both fee and amount will be subtracted form the",
              "callers balance For now we only accept fee and asset having the same",
              "`MultiLocation` id.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multicurrencies",
            "TypeFields": [
              {
                "Name": "currencies",
                "TypeName": "Vec<(T::CurrencyId, T::Balance)>",
                "TypeId": 219
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer several currencies specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the currencies tuple that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiassets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 89
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 5,
            "Docs": [
              "Transfer several `MultiAsset` specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the MultiAssets that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "218": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAsset",
                "TypeId": 92
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAsset",
                "TypeId": 45
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "219": {
        "TypeId": 220,
        "TypeDef": "Sequence"
      },
      "220": {
        "TypeIds": [
          61,
          6
        ],
        "TypeDef": "Tuple"
      },
      "221": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "It will decrease the total issuance of the system by the",
              "`TransferFee`. If the sender's account is below the existential",
              "deposit as a result of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `amount`: free balance amount to tranfer."
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer all remaining balance to the given account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_",
              "balances. This means that any locked, reserved, or existential",
              "deposits (when `keep_alive` is `true`), will not be transferred by",
              "this function. To ensure that this function results in a killed",
              "account, you might need to prepare the account by removing any",
              "reference counters, storage deposits, etc...",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `keep_alive`: A boolean to determine if the `transfer_all`",
              "  operation should send all of the funds the account has, causing",
              "  the sender account to be killed (false), or transfer everything",
              "  except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 2,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer",
              "will not kill the origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "The dispatch origin for this call must be `Signed` by the",
              "transactor.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `amount`: free balance amount to tranfer."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 3,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source",
              "account may be specified.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The sender of the transfer.",
              "- `dest`: The recipient of the transfer.",
              "- `currency_id`: currency type.",
              "- `amount`: free balance amount to tranfer."
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 200
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 61
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 41
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 4,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
              "will also decrease the total issuance of the system",
              "(`TotalIssuance`). If the new free or reserved balance is below the",
              "existential deposit, it will reap the `AccountInfo`.",
              "",
              "The dispatch origin for this call is `root`."
            ]
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "222": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Services a single overweight XCM.",
              "",
              "- `origin`: Must pass `ExecuteOverweightOrigin`.",
              "- `index`: The index of the overweight XCM to service",
              "- `weight_limit`: The amount of weight that XCM execution may take.",
              "",
              "Errors:",
              "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
              "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
              "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
              "",
              "Events:",
              "- `OverweightServiced`: On success."
            ]
          },
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
              "suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
              "messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
              "message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          },
          {
            "Name": "update_threshold_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "Overwrites the amount of remaining weight under which we stop processing messages.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.threshold_weight`"
            ]
          },
          {
            "Name": "update_weight_restrict_decay",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 7,
            "Docs": [
              "Overwrites the speed to which the available weight approaches the maximum weight.",
              "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
            ]
          },
          {
            "Name": "update_xcmp_max_individual_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 8,
            "Docs": [
              "Overwrite the maximum amount of weight any individual message may consume.",
              "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "223": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 224
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 89
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 89
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                "TypeId": 236
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than the",
              "maximum amount of weight that the message could take to be executed, then no execution",
              "attempt will be made.",
              "",
              "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
              "to completion; only that *some* of it was executed."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 47
              },
              {
                "Name": "xcm_version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 107
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be Root.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 89
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 89
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "224": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 225
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 68
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "225": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 226
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "226": {
        "TypeId": 227,
        "TypeDef": "Sequence"
      },
      "227": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 228
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 90
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 90
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 81
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 82
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 95
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 92
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 235
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 225
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 225
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 90
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "228": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 229
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "229": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 230
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 230
          }
        ],
        "TypeDef": "Variant"
      },
      "230": {
        "TypeIds": [
          4,
          231
        ],
        "TypeDef": "Tuple"
      },
      "231": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "232": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 233
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "233": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 93
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 234
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "234": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "235": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "236": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 241
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "237": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 238
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "238": {
        "TypeId": 239,
        "TypeDef": "Sequence"
      },
      "239": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 228
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 90
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 90
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 81
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 240
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 95
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 90
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 225
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 94
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 232
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 92
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 235
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 237
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 90
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 94
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "240": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "241": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 242
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "242": {
        "TypeId": 243,
        "TypeDef": "Sequence"
      },
      "243": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 71
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 81
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 240
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 48
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 47
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 84
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 241
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 241
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 43
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 43
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 72
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 78
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 50
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 50
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 83
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 49
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 52
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 48
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 68
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 45
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 47
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 88
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 80
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "244": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "245": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Service a single overweight message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "246": {
        "Variants": [
          {
            "Name": "start_inflation",
            "TypeFields": [
              {
                "Name": "inflation_start_relay_block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "This method sets the inflation start date. Can be only called once.",
              "Inflation start block can be backdated and will catch up. The method will create Treasury",
              "account if it does not exist and perform the first inflation deposit.",
              "",
              "# Permissions",
              "",
              "* Root",
              "",
              "# Arguments",
              "",
              "* inflation_start_relay_block: The relay chain block at which inflation should start"
            ]
          }
        ],
        "Path": [
          "pallet_inflation",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "247": {
        "Variants": [
          {
            "Name": "create_collection",
            "TypeFields": [
              {
                "Name": "collection_name",
                "TypeName": "BoundedVec<u16, ConstU32<MAX_COLLECTION_NAME_LENGTH>>",
                "TypeId": 248
              },
              {
                "Name": "collection_description",
                "TypeName": "BoundedVec<u16, ConstU32<MAX_COLLECTION_DESCRIPTION_LENGTH>>",
                "TypeId": 250
              },
              {
                "Name": "token_prefix",
                "TypeName": "BoundedVec<u8, ConstU32<MAX_TOKEN_PREFIX_LENGTH>>",
                "TypeId": 251
              },
              {
                "Name": "mode",
                "TypeName": "CollectionMode",
                "TypeId": 252
              }
            ],
            "Index": 0,
            "Docs": [
              "Create a collection of tokens.",
              "",
              "Each Token may have multiple properties encoded as an array of bytes",
              "of certain length. The initial owner of the collection is set",
              "to the address that signed the transaction and can be changed later.",
              "",
              "Prefer the more advanced [`create_collection_ex`][`Pallet::create_collection_ex`] instead.",
              "",
              "# Permissions",
              "",
              "* Anyone - becomes the owner of the new collection.",
              "",
              "# Arguments",
              "",
              "* `collection_name`: Wide-character string with collection name",
              "(limit [`MAX_COLLECTION_NAME_LENGTH`]).",
              "* `collection_description`: Wide-character string with collection description",
              "(limit [`MAX_COLLECTION_DESCRIPTION_LENGTH`]).",
              "* `token_prefix`: Byte string containing the token prefix to mark a collection",
              "to which a token belongs (limit [`MAX_TOKEN_PREFIX_LENGTH`]).",
              "* `mode`: Type of items stored in the collection and type dependent data.",
              "",
              "returns collection ID",
              "",
              "Deprecated: `create_collection_ex` is more up-to-date and advanced, prefer it instead."
            ]
          },
          {
            "Name": "create_collection_ex",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "CreateCollectionData<T::AccountId>",
                "TypeId": 253
              }
            ],
            "Index": 1,
            "Docs": [
              "Create a collection with explicit parameters.",
              "",
              "Prefer it to the deprecated [`create_collection`][`Pallet::create_collection`] method.",
              "",
              "# Permissions",
              "",
              "* Anyone - becomes the owner of the new collection.",
              "",
              "# Arguments",
              "",
              "* `data`: Explicit data of a collection used for its creation."
            ]
          },
          {
            "Name": "destroy_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              }
            ],
            "Index": 2,
            "Docs": [
              "Destroy a collection if no tokens exist within.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "",
              "# Arguments",
              "",
              "* `collection_id`: Collection to destroy."
            ]
          },
          {
            "Name": "add_to_allow_list",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "address",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an address to allow list.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `address`: ID of the address to be added to the allowlist."
            ]
          },
          {
            "Name": "remove_from_allow_list",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "address",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              }
            ],
            "Index": 4,
            "Docs": [
              "Remove an address from allow list.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `address`: ID of the address to be removed from the allowlist."
            ]
          },
          {
            "Name": "change_collection_owner",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "new_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "Change the owner of the collection.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `new_owner`: ID of the account that will become the owner."
            ]
          },
          {
            "Name": "add_collection_admin",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "new_admin_id",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              }
            ],
            "Index": 6,
            "Docs": [
              "Add an admin to a collection.",
              "",
              "NFT Collection can be controlled by multiple admin addresses",
              "(some which can also be servers, for example). Admins can issue",
              "and burn NFTs, as well as add and remove other admins,",
              "but cannot change NFT or Collection ownership.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the Collection to add an admin for.",
              "* `new_admin`: Address of new admin to add."
            ]
          },
          {
            "Name": "remove_collection_admin",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "account_id",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove admin of a collection.",
              "",
              "An admin address can remove itself. List of admins may become empty,",
              "in which case only Collection Owner will be able to add an Admin.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection to remove the admin for.",
              "* `account_id`: Address of the admin to remove."
            ]
          },
          {
            "Name": "set_collection_sponsor",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "new_sponsor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "Set (invite) a new collection sponsor.",
              "",
              "If successful, confirmation from the sponsor-to-be will be pending.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `new_sponsor`: ID of the account of the sponsor-to-be."
            ]
          },
          {
            "Name": "confirm_sponsorship",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              }
            ],
            "Index": 9,
            "Docs": [
              "Confirm own sponsorship of a collection, becoming the sponsor.",
              "",
              "An invitation must be pending, see [`set_collection_sponsor`][`Pallet::set_collection_sponsor`].",
              "Sponsor can pay the fees of a transaction instead of the sender,",
              "but only within specified limits.",
              "",
              "# Permissions",
              "",
              "* Sponsor-to-be",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection with the pending sponsor."
            ]
          },
          {
            "Name": "remove_collection_sponsor",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              }
            ],
            "Index": 10,
            "Docs": [
              "Remove a collection's a sponsor, making everyone pay for their own transactions.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection with the sponsor to remove."
            ]
          },
          {
            "Name": "create_item",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "owner",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "data",
                "TypeName": "CreateItemData",
                "TypeId": 278
              }
            ],
            "Index": 11,
            "Docs": [
              "Mint an item within a collection.",
              "",
              "A collection must exist first, see [`create_collection_ex`][`Pallet::create_collection_ex`].",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Anyone if",
              "    * Allow List is enabled, and",
              "    * Address is added to allow list, and",
              "    * MintPermission is enabled (see [`set_collection_permissions`][`Pallet::set_collection_permissions`])",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection to which an item would belong.",
              "* `owner`: Address of the initial owner of the item.",
              "* `data`: Token data describing the item to store on chain."
            ]
          },
          {
            "Name": "create_multiple_items",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "owner",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "items_data",
                "TypeName": "Vec<CreateItemData>",
                "TypeId": 282
              }
            ],
            "Index": 12,
            "Docs": [
              "Create multiple items within a collection.",
              "",
              "A collection must exist first, see [`create_collection_ex`][`Pallet::create_collection_ex`].",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Anyone if",
              "    * Allow List is enabled, and",
              "    * Address is added to the allow list, and",
              "    * MintPermission is enabled (see [`set_collection_permissions`][`Pallet::set_collection_permissions`])",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection to which the tokens would belong.",
              "* `owner`: Address of the initial owner of the tokens.",
              "* `items_data`: Vector of data describing each item to be created."
            ]
          },
          {
            "Name": "set_collection_properties",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "properties",
                "TypeName": "Vec<Property>",
                "TypeId": 277
              }
            ],
            "Index": 13,
            "Docs": [
              "Add or change collection properties.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `properties`: Vector of key-value pairs stored as the collection's metadata.",
              "Keys support Latin letters, `-`, `_`, and `.` as symbols."
            ]
          },
          {
            "Name": "delete_collection_properties",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "property_keys",
                "TypeName": "Vec<PropertyKey>",
                "TypeId": 283
              }
            ],
            "Index": 14,
            "Docs": [
              "Delete specified collection properties.",
              "",
              "# Permissions",
              "",
              "* Collection Owner",
              "* Collection Admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `property_keys`: Vector of keys of the properties to be deleted.",
              "Keys support Latin letters, `-`, `_`, and `.` as symbols."
            ]
          },
          {
            "Name": "set_token_properties",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "properties",
                "TypeName": "Vec<Property>",
                "TypeId": 277
              }
            ],
            "Index": 15,
            "Docs": [
              "Add or change token properties according to collection's permissions.",
              "Currently properties only work with NFTs.",
              "",
              "# Permissions",
              "",
              "* Depends on collection's token property permissions and specified property mutability:",
              "\t* Collection owner",
              "\t* Collection admin",
              "\t* Token owner",
              "",
              "See [`set_token_property_permissions`][`Pallet::set_token_property_permissions`].",
              "",
              "# Arguments",
              "",
              "* `collection_id: ID of the collection to which the token belongs.",
              "* `token_id`: ID of the modified token.",
              "* `properties`: Vector of key-value pairs stored as the token's metadata.",
              "Keys support Latin letters, `-`, `_`, and `.` as symbols."
            ]
          },
          {
            "Name": "delete_token_properties",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "property_keys",
                "TypeName": "Vec<PropertyKey>",
                "TypeId": 283
              }
            ],
            "Index": 16,
            "Docs": [
              "Delete specified token properties. Currently properties only work with NFTs.",
              "",
              "# Permissions",
              "",
              "* Depends on collection's token property permissions and specified property mutability:",
              "\t* Collection owner",
              "\t* Collection admin",
              "\t* Token owner",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection to which the token belongs.",
              "* `token_id`: ID of the modified token.",
              "* `property_keys`: Vector of keys of the properties to be deleted.",
              "Keys support Latin letters, `-`, `_`, and `.` as symbols."
            ]
          },
          {
            "Name": "set_token_property_permissions",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "property_permissions",
                "TypeName": "Vec<PropertyKeyPermission>",
                "TypeId": 273
              }
            ],
            "Index": 17,
            "Docs": [
              "Add or change token property permissions of a collection.",
              "",
              "Without a permission for a particular key, a property with that key",
              "cannot be created in a token.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `property_permissions`: Vector of permissions for property keys.",
              "Keys support Latin letters, `-`, `_`, and `.` as symbols."
            ]
          },
          {
            "Name": "create_multiple_items_ex",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "data",
                "TypeName": "CreateItemExData<T::CrossAccountId>",
                "TypeId": 284
              }
            ],
            "Index": 18,
            "Docs": [
              "Create multiple items within a collection with explicitly specified initial parameters.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Anyone if",
              "    * Allow List is enabled, and",
              "    * Address is added to allow list, and",
              "    * MintPermission is enabled (see [`set_collection_permissions`][`Pallet::set_collection_permissions`])",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection to which the tokens would belong.",
              "* `data`: Explicit item creation data."
            ]
          },
          {
            "Name": "set_transfers_enabled_flag",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "value",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 19,
            "Docs": [
              "Completely allow or disallow transfers for a particular collection.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection.",
              "* `value`: New value of the flag, are transfers allowed?"
            ]
          },
          {
            "Name": "burn_item",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "item_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "value",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Destroy an item.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Current item owner",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection to which the item belongs.",
              "* `item_id`: ID of item to burn.",
              "* `value`: Number of pieces of the item to destroy.",
              "\t* Non-Fungible Mode: An NFT is indivisible, there is always 1 corresponding to an ID.",
              "    * Fungible Mode: The desired number of pieces to burn.",
              "    * Re-Fungible Mode: The desired number of pieces to burn."
            ]
          },
          {
            "Name": "burn_from",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "from",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "item_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "value",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "Destroy a token on behalf of the owner as a non-owner account.",
              "",
              "See also: [`approve`][`Pallet::approve`].",
              "",
              "After this method executes, one approval is removed from the total so that",
              "the approved address will not be able to transfer this item again from this owner.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Current token owner",
              "* Address approved by current item owner",
              "",
              "# Arguments",
              "",
              "* `from`: The owner of the burning item.",
              "* `collection_id`: ID of the collection to which the item belongs.",
              "* `item_id`: ID of item to burn.",
              "* `value`: Number of pieces to burn.",
              "\t* Non-Fungible Mode: An NFT is indivisible, there is always 1 corresponding to an ID.",
              "    * Fungible Mode: The desired number of pieces to burn.",
              "    * Re-Fungible Mode: The desired number of pieces to burn."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "item_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "value",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 22,
            "Docs": [
              "Change ownership of the token.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Current token owner",
              "",
              "# Arguments",
              "",
              "* `recipient`: Address of token recipient.",
              "* `collection_id`: ID of the collection the item belongs to.",
              "* `item_id`: ID of the item.",
              "    * Non-Fungible Mode: Required.",
              "    * Fungible Mode: Ignored.",
              "    * Re-Fungible Mode: Required.",
              "",
              "* `value`: Amount to transfer.",
              "\t* Non-Fungible Mode: An NFT is indivisible, there is always 1 corresponding to an ID.",
              "    * Fungible Mode: The desired number of pieces to transfer.",
              "    * Re-Fungible Mode: The desired number of pieces to transfer."
            ]
          },
          {
            "Name": "approve",
            "TypeFields": [
              {
                "Name": "spender",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "item_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 23,
            "Docs": [
              "Allow a non-permissioned address to transfer or burn an item.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Current item owner",
              "",
              "# Arguments",
              "",
              "* `spender`: Account to be approved to make specific transactions on non-owned tokens.",
              "* `collection_id`: ID of the collection the item belongs to.",
              "* `item_id`: ID of the item transactions on which are now approved.",
              "* `amount`: Number of pieces of the item approved for a transaction (maximum of 1 for NFTs).",
              "Set to 0 to revoke the approval."
            ]
          },
          {
            "Name": "approve_from",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "to",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "item_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Allow a non-permissioned address to transfer or burn an item from owner's eth mirror.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Current item owner",
              "",
              "# Arguments",
              "",
              "* `from`: Owner's account eth mirror",
              "* `to`: Account to be approved to make specific transactions on non-owned tokens.",
              "* `collection_id`: ID of the collection the item belongs to.",
              "* `item_id`: ID of the item transactions on which are now approved.",
              "* `amount`: Number of pieces of the item approved for a transaction (maximum of 1 for NFTs).",
              "Set to 0 to revoke the approval."
            ]
          },
          {
            "Name": "transfer_from",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "recipient",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "item_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "value",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "Change ownership of an item on behalf of the owner as a non-owner account.",
              "",
              "See the [`approve`][`Pallet::approve`] method for additional information.",
              "",
              "After this method executes, one approval is removed from the total so that",
              "the approved address will not be able to transfer this item again from this owner.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "* Current item owner",
              "* Address approved by current item owner",
              "",
              "# Arguments",
              "",
              "* `from`: Address that currently owns the token.",
              "* `recipient`: Address of the new token-owner-to-be.",
              "* `collection_id`: ID of the collection the item.",
              "* `item_id`: ID of the item to be transferred.",
              "* `value`: Amount to transfer.",
              "\t* Non-Fungible Mode: An NFT is indivisible, there is always 1 corresponding to an ID.",
              "    * Fungible Mode: The desired number of pieces to transfer.",
              "    * Re-Fungible Mode: The desired number of pieces to transfer."
            ]
          },
          {
            "Name": "set_collection_limits",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "new_limit",
                "TypeName": "CollectionLimits",
                "TypeId": 257
              }
            ],
            "Index": 26,
            "Docs": [
              "Set specific limits of a collection. Empty, or None fields mean chain default.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `new_limit`: New limits of the collection. Fields that are not set (None)",
              "will not overwrite the old ones."
            ]
          },
          {
            "Name": "set_collection_permissions",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "new_permission",
                "TypeName": "CollectionPermissions",
                "TypeId": 262
              }
            ],
            "Index": 27,
            "Docs": [
              "Set specific permissions of a collection. Empty, or None fields mean chain default.",
              "",
              "# Permissions",
              "",
              "* Collection owner",
              "* Collection admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the modified collection.",
              "* `new_permission`: New permissions of the collection. Fields that are not set (None)",
              "will not overwrite the old ones."
            ]
          },
          {
            "Name": "repartition",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "token_id",
                "TypeName": "TokenId",
                "TypeId": 111
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 28,
            "Docs": [
              "Re-partition a refungible token, while owning all of its parts/pieces.",
              "",
              "# Permissions",
              "",
              "* Token owner (must own every part)",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection the RFT belongs to.",
              "* `token_id`: ID of the RFT.",
              "* `amount`: New number of parts/pieces into which the token shall be partitioned."
            ]
          },
          {
            "Name": "set_allowance_for_all",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "operator",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 29,
            "Docs": [
              "Sets or unsets the approval of a given operator.",
              "",
              "The `operator` is allowed to transfer all tokens of the `owner` on their behalf.",
              "",
              "# Arguments",
              "",
              "* `owner`: Token owner",
              "* `operator`: Operator",
              "* `approve`: Should operator status be granted or revoked?"
            ]
          },
          {
            "Name": "force_repair_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              }
            ],
            "Index": 30,
            "Docs": [
              "Repairs a collection if the data was somehow corrupted.",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection to repair."
            ]
          },
          {
            "Name": "force_repair_item",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              },
              {
                "Name": "item_id",
                "TypeName": "TokenId",
                "TypeId": 111
              }
            ],
            "Index": 31,
            "Docs": [
              "Repairs a token if the data was somehow corrupted.",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection the item belongs to.",
              "* `item_id`: ID of the item."
            ]
          }
        ],
        "Path": [
          "pallet_unique",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Type alias to Pallet, to be used by construct_runtime."
        ]
      },
      "248": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 249
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 155
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "249": {
        "TypeId": 155,
        "TypeDef": "Sequence"
      },
      "250": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 249
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 155
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "251": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "252": {
        "Variants": [
          {
            "Name": "NFT",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "DecimalPoints",
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReFungible",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "up_data_structs",
          "CollectionMode"
        ],
        "TypeDef": "Variant"
      },
      "253": {
        "TypeFields": [
          {
            "Name": "mode",
            "TypeName": "CollectionMode",
            "TypeId": 252
          },
          {
            "Name": "access",
            "TypeName": "Option<AccessMode>",
            "TypeId": 254
          },
          {
            "Name": "name",
            "TypeName": "CollectionName",
            "TypeId": 248
          },
          {
            "Name": "description",
            "TypeName": "CollectionDescription",
            "TypeId": 250
          },
          {
            "Name": "token_prefix",
            "TypeName": "CollectionTokenPrefix",
            "TypeId": 251
          },
          {
            "Name": "pending_sponsor",
            "TypeName": "Option<AccountId>",
            "TypeId": 38
          },
          {
            "Name": "limits",
            "TypeName": "Option<CollectionLimits>",
            "TypeId": 256
          },
          {
            "Name": "permissions",
            "TypeName": "Option<CollectionPermissions>",
            "TypeId": 261
          },
          {
            "Name": "token_property_permissions",
            "TypeName": "CollectionPropertiesPermissionsVec",
            "TypeId": 270
          },
          {
            "Name": "properties",
            "TypeName": "CollectionPropertiesVec",
            "TypeId": 274
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateCollectionData"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "254": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 255
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 255
          }
        ],
        "TypeDef": "Variant"
      },
      "255": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllowList",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "up_data_structs",
          "AccessMode"
        ],
        "TypeDef": "Variant"
      },
      "256": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 257
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 257
          }
        ],
        "TypeDef": "Variant"
      },
      "257": {
        "TypeFields": [
          {
            "Name": "account_token_ownership_limit",
            "TypeName": "Option<u32>",
            "TypeId": 107
          },
          {
            "Name": "sponsored_data_size",
            "TypeName": "Option<u32>",
            "TypeId": 107
          },
          {
            "Name": "sponsored_data_rate_limit",
            "TypeName": "Option<SponsoringRateLimit>",
            "TypeId": 258
          },
          {
            "Name": "token_limit",
            "TypeName": "Option<u32>",
            "TypeId": 107
          },
          {
            "Name": "sponsor_transfer_timeout",
            "TypeName": "Option<u32>",
            "TypeId": 107
          },
          {
            "Name": "sponsor_approve_timeout",
            "TypeName": "Option<u32>",
            "TypeId": 107
          },
          {
            "Name": "owner_can_transfer",
            "TypeName": "Option<bool>",
            "TypeId": 260
          },
          {
            "Name": "owner_can_destroy",
            "TypeName": "Option<bool>",
            "TypeId": 260
          },
          {
            "Name": "transfers_enabled",
            "TypeName": "Option<bool>",
            "TypeId": 260
          }
        ],
        "Path": [
          "up_data_structs",
          "CollectionLimits"
        ],
        "TypeDef": "Composite"
      },
      "258": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 259
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 259
          }
        ],
        "TypeDef": "Variant"
      },
      "259": {
        "Variants": [
          {
            "Name": "SponsoringDisabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Blocks",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "up_data_structs",
          "SponsoringRateLimit"
        ],
        "TypeDef": "Variant"
      },
      "260": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 87
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 87
          }
        ],
        "TypeDef": "Variant"
      },
      "261": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 262
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 262
          }
        ],
        "TypeDef": "Variant"
      },
      "262": {
        "TypeFields": [
          {
            "Name": "access",
            "TypeName": "Option<AccessMode>",
            "TypeId": 254
          },
          {
            "Name": "mint_mode",
            "TypeName": "Option<bool>",
            "TypeId": 260
          },
          {
            "Name": "nesting",
            "TypeName": "Option<NestingPermissions>",
            "TypeId": 263
          }
        ],
        "Path": [
          "up_data_structs",
          "CollectionPermissions"
        ],
        "TypeDef": "Composite"
      },
      "263": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 264
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 264
          }
        ],
        "TypeDef": "Variant"
      },
      "264": {
        "TypeFields": [
          {
            "Name": "token_owner",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "collection_admin",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "restricted",
            "TypeName": "Option<OwnerRestrictedSet>",
            "TypeId": 265
          }
        ],
        "Path": [
          "up_data_structs",
          "NestingPermissions"
        ],
        "TypeDef": "Composite"
      },
      "265": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 266
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 266
          }
        ],
        "TypeDef": "Variant"
      },
      "266": {
        "TypeFields": [
          {
            "TypeName": "OwnerRestrictedSetInner",
            "TypeId": 267
          }
        ],
        "Path": [
          "up_data_structs",
          "OwnerRestrictedSet"
        ],
        "TypeDef": "Composite"
      },
      "267": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 268
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 110
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "268": {
        "TypeFields": [
          {
            "TypeId": 269
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 110
          }
        ],
        "TypeDef": "Composite"
      },
      "269": {
        "TypeId": 110,
        "TypeDef": "Sequence"
      },
      "270": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 273
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 271
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "271": {
        "TypeFields": [
          {
            "Name": "key",
            "TypeName": "PropertyKey",
            "TypeId": 114
          },
          {
            "Name": "permission",
            "TypeName": "PropertyPermission",
            "TypeId": 272
          }
        ],
        "Path": [
          "up_data_structs",
          "PropertyKeyPermission"
        ],
        "TypeDef": "Composite"
      },
      "272": {
        "TypeFields": [
          {
            "Name": "mutable",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "collection_admin",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "token_owner",
            "TypeName": "bool",
            "TypeId": 87
          }
        ],
        "Path": [
          "up_data_structs",
          "PropertyPermission"
        ],
        "TypeDef": "Composite"
      },
      "273": {
        "TypeId": 271,
        "TypeDef": "Sequence"
      },
      "274": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 277
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 275
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "275": {
        "TypeFields": [
          {
            "Name": "key",
            "TypeName": "PropertyKey",
            "TypeId": 114
          },
          {
            "Name": "value",
            "TypeName": "PropertyValue",
            "TypeId": 276
          }
        ],
        "Path": [
          "up_data_structs",
          "Property"
        ],
        "TypeDef": "Composite"
      },
      "276": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "277": {
        "TypeId": 275,
        "TypeDef": "Sequence"
      },
      "278": {
        "Variants": [
          {
            "Name": "NFT",
            "TypeFields": [
              {
                "TypeName": "CreateNftData",
                "TypeId": 279
              }
            ],
            "Index": 0
          },
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "CreateFungibleData",
                "TypeId": 280
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReFungible",
            "TypeFields": [
              {
                "TypeName": "CreateReFungibleData",
                "TypeId": 281
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateItemData"
        ],
        "TypeDef": "Variant"
      },
      "279": {
        "TypeFields": [
          {
            "Name": "properties",
            "TypeName": "CollectionPropertiesVec",
            "TypeId": 274
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateNftData"
        ],
        "TypeDef": "Composite"
      },
      "280": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateFungibleData"
        ],
        "TypeDef": "Composite"
      },
      "281": {
        "TypeFields": [
          {
            "Name": "pieces",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "properties",
            "TypeName": "CollectionPropertiesVec",
            "TypeId": 274
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateReFungibleData"
        ],
        "TypeDef": "Composite"
      },
      "282": {
        "TypeId": 278,
        "TypeDef": "Sequence"
      },
      "283": {
        "TypeId": 114,
        "TypeDef": "Sequence"
      },
      "284": {
        "Variants": [
          {
            "Name": "NFT",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<CreateNftExData<CrossAccountId>, ConstU32<\nMAX_ITEMS_PER_BATCH>>",
                "TypeId": 285
              }
            ],
            "Index": 0
          },
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "BoundedBTreeMap<CrossAccountId, u128, ConstU32<MAX_ITEMS_PER_BATCH>>",
                "TypeId": 288
              }
            ],
            "Index": 1
          },
          {
            "Name": "RefungibleMultipleItems",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<CreateRefungibleExSingleOwner<CrossAccountId>, ConstU32<\nMAX_ITEMS_PER_BATCH>>",
                "TypeId": 292
              }
            ],
            "Index": 2
          },
          {
            "Name": "RefungibleMultipleOwners",
            "TypeFields": [
              {
                "TypeName": "CreateRefungibleExMultipleOwners<CrossAccountId>",
                "TypeId": 295
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateItemExData"
        ],
        "TypeParams": [
          {
            "Name": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "TypeDef": "Variant"
      },
      "285": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 287
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 286
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "286": {
        "TypeFields": [
          {
            "Name": "properties",
            "TypeName": "CollectionPropertiesVec",
            "TypeId": 274
          },
          {
            "Name": "owner",
            "TypeName": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateNftExData"
        ],
        "TypeParams": [
          {
            "Name": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "TypeDef": "Composite"
      },
      "287": {
        "TypeId": 286,
        "TypeDef": "Sequence"
      },
      "288": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 289
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 112
          },
          {
            "Name": "V",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "289": {
        "TypeFields": [
          {
            "TypeId": 290
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 112
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "290": {
        "TypeId": 291,
        "TypeDef": "Sequence"
      },
      "291": {
        "TypeIds": [
          112,
          6
        ],
        "TypeDef": "Tuple"
      },
      "292": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 294
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 293
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "293": {
        "TypeFields": [
          {
            "Name": "user",
            "TypeName": "CrossAccountId",
            "TypeId": 112
          },
          {
            "Name": "pieces",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "properties",
            "TypeName": "CollectionPropertiesVec",
            "TypeId": 274
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateRefungibleExSingleOwner"
        ],
        "TypeParams": [
          {
            "Name": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "TypeDef": "Composite"
      },
      "294": {
        "TypeId": 293,
        "TypeDef": "Sequence"
      },
      "295": {
        "TypeFields": [
          {
            "Name": "users",
            "TypeName": "BoundedBTreeMap<CrossAccountId, u128, ConstU32<MAX_ITEMS_PER_BATCH>>",
            "TypeId": 288
          },
          {
            "Name": "properties",
            "TypeName": "CollectionPropertiesVec",
            "TypeId": 274
          }
        ],
        "Path": [
          "up_data_structs",
          "CreateRefungibleExMultipleOwners"
        ],
        "TypeParams": [
          {
            "Name": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "TypeDef": "Composite"
      },
      "296": {
        "Variants": [
          {
            "Name": "set_weight_to_fee_coefficient_override",
            "TypeFields": [
              {
                "Name": "coeff",
                "TypeName": "Option<u64>",
                "TypeId": 297
              }
            ],
            "Index": 0
          },
          {
            "Name": "set_min_gas_price_override",
            "TypeFields": [
              {
                "Name": "coeff",
                "TypeName": "Option<u64>",
                "TypeId": 297
              }
            ],
            "Index": 1
          },
          {
            "Name": "set_app_promotion_configuration_override",
            "TypeFields": [
              {
                "Name": "configuration",
                "TypeName": "AppPromotionConfiguration<T::BlockNumber>",
                "TypeId": 298
              }
            ],
            "Index": 3
          },
          {
            "Name": "set_collator_selection_desired_collators",
            "TypeFields": [
              {
                "Name": "max",
                "TypeName": "Option<u32>",
                "TypeId": 107
              }
            ],
            "Index": 4
          },
          {
            "Name": "set_collator_selection_license_bond",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 108
              }
            ],
            "Index": 5
          },
          {
            "Name": "set_collator_selection_kick_threshold",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "Option<T::BlockNumber>",
                "TypeId": 107
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "pallet_configuration",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "297": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "298": {
        "TypeFields": [
          {
            "Name": "recalculation_interval",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 107
          },
          {
            "Name": "pending_interval",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 107
          },
          {
            "Name": "interval_income",
            "TypeName": "Option<Perbill>",
            "TypeId": 299
          },
          {
            "Name": "max_stakers_per_calculation",
            "TypeName": "Option<u8>",
            "TypeId": 301
          }
        ],
        "Path": [
          "pallet_configuration",
          "AppPromotionConfiguration"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "299": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 300
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 300
          }
        ],
        "TypeDef": "Variant"
      },
      "300": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "301": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          }
        ],
        "TypeDef": "Variant"
      },
      "302": {
        "Variants": null,
        "Path": [
          "pallet_structure",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "303": {
        "Variants": [
          {
            "Name": "set_admin_address",
            "TypeFields": [
              {
                "Name": "admin",
                "TypeName": "T::CrossAccountId",
                "TypeId": 112
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets an address as the the admin.",
              "",
              "# Permissions",
              "",
              "* Sudo",
              "",
              "# Arguments",
              "",
              "* `admin`: account of the new admin."
            ]
          },
          {
            "Name": "stake",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Stakes the amount of native tokens.",
              "Sets `amount` to the locked state.",
              "The maximum number of stakes for a staker is 10.",
              "",
              "# Arguments",
              "",
              "* `amount`: in native tokens."
            ]
          },
          {
            "Name": "unstake_all",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Unstakes all stakes.",
              "After the end of `PendingInterval` this sum becomes completely",
              "free for further use."
            ]
          },
          {
            "Name": "unstake_partial",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Unstakes the amount of balance for the staker.",
              "After the end of `PendingInterval` this sum becomes completely",
              "free for further use.",
              "",
              " # Arguments",
              "",
              "* `staker`: staker account.",
              "* `amount`: amount of unstaked funds."
            ]
          },
          {
            "Name": "sponsor_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              }
            ],
            "Index": 3,
            "Docs": [
              "Sets the pallet to be the sponsor for the collection.",
              "",
              "# Permissions",
              "",
              "* Pallet admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection that will be sponsored by `pallet_id`"
            ]
          },
          {
            "Name": "stop_sponsoring_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionId",
                "TypeId": 110
              }
            ],
            "Index": 4,
            "Docs": [
              "Removes the pallet as the sponsor for the collection.",
              "Returns [`NoPermission`][`Error::NoPermission`]",
              "if the pallet wasn't the sponsor.",
              "",
              "# Permissions",
              "",
              "* Pallet admin",
              "",
              "# Arguments",
              "",
              "* `collection_id`: ID of the collection that is sponsored by `pallet_id`"
            ]
          },
          {
            "Name": "sponsor_contract",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 5,
            "Docs": [
              "Sets the pallet to be the sponsor for the contract.",
              "",
              "# Permissions",
              "",
              "* Pallet admin",
              "",
              "# Arguments",
              "",
              "* `contract_id`: the contract address that will be sponsored by `pallet_id`"
            ]
          },
          {
            "Name": "stop_sponsoring_contract",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 6,
            "Docs": [
              "Removes the pallet as the sponsor for the contract.",
              "Returns [`NoPermission`][`Error::NoPermission`]",
              "if the pallet wasn't the sponsor.",
              "",
              "# Permissions",
              "",
              "* Pallet admin",
              "",
              "# Arguments",
              "",
              "* `contract_id`: the contract address that is sponsored by `pallet_id`"
            ]
          },
          {
            "Name": "payout_stakers",
            "TypeFields": [
              {
                "Name": "stakers_number",
                "TypeName": "Option<u8>",
                "TypeId": 301
              }
            ],
            "Index": 7,
            "Docs": [
              "Recalculates interest for the specified number of stakers.",
              "If all stakers are not recalculated, the next call of the extrinsic",
              "will continue the recalculation, from those stakers for whom this",
              "was not perform in last call.",
              "",
              "# Permissions",
              "",
              "* Pallet admin",
              "",
              "# Arguments",
              "",
              "* `stakers_number`: the number of stakers for which recalculation will be performed"
            ]
          }
        ],
        "Path": [
          "pallet_app_promotion",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "304": {
        "Variants": [
          {
            "Name": "register_foreign_asset",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "metadata",
                "TypeName": "Box<AssetMetadata<BalanceOf<T>>>",
                "TypeId": 118
              }
            ],
            "Index": 0
          },
          {
            "Name": "update_foreign_asset",
            "TypeFields": [
              {
                "Name": "foreign_asset_id",
                "TypeName": "ForeignAssetId",
                "TypeId": 4
              },
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 103
              },
              {
                "Name": "metadata",
                "TypeName": "Box<AssetMetadata<BalanceOf<T>>>",
                "TypeId": 118
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_foreign_assets",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "305": {
        "Variants": [
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Withdraw balance from EVM into currency/balances pallet."
            ]
          },
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "target",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "input",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 306
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 306
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 308
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 308
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 309
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
            ]
          },
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 306
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 306
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 308
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 308
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 309
              }
            ],
            "Index": 2,
            "Docs": [
              "Issue an EVM create operation. This is similar to a contract creation transaction in",
              "Ethereum."
            ]
          },
          {
            "Name": "create2",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "salt",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 306
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 306
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 308
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 308
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 309
              }
            ],
            "Index": 3,
            "Docs": [
              "Issue an EVM create2 operation."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "306": {
        "TypeFields": [
          {
            "TypeName": "[u64; 4]",
            "TypeId": 307
          }
        ],
        "Path": [
          "primitive_types",
          "U256"
        ],
        "TypeDef": "Composite"
      },
      "307": {
        "Length": 4,
        "TypeId": 10,
        "TypeDef": "Array"
      },
      "308": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 306
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 306
          }
        ],
        "TypeDef": "Variant"
      },
      "309": {
        "TypeId": 310,
        "TypeDef": "Sequence"
      },
      "310": {
        "TypeIds": [
          113,
          123
        ],
        "TypeDef": "Tuple"
      },
      "311": {
        "Variants": [
          {
            "Name": "transact",
            "TypeFields": [
              {
                "Name": "transaction",
                "TypeName": "Transaction",
                "TypeId": 312
              }
            ],
            "Index": 0,
            "Docs": [
              "Transact an Ethereum transaction."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "312": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "LegacyTransaction",
                "TypeId": 313
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930Transaction",
                "TypeId": 317
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559Transaction",
                "TypeId": 320
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionV2"
        ],
        "TypeDef": "Variant"
      },
      "313": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 314
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "signature",
            "TypeName": "TransactionSignature",
            "TypeId": 315
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "LegacyTransaction"
        ],
        "TypeDef": "Composite"
      },
      "314": {
        "Variants": [
          {
            "Name": "Call",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 0
          },
          {
            "Name": "Create",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionAction"
        ],
        "TypeDef": "Variant"
      },
      "315": {
        "TypeFields": [
          {
            "Name": "v",
            "TypeName": "TransactionRecoveryId",
            "TypeId": 316
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 11
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionSignature"
        ],
        "TypeDef": "Composite"
      },
      "316": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionRecoveryId"
        ],
        "TypeDef": "Composite"
      },
      "317": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 314
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 318
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 11
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP2930Transaction"
        ],
        "TypeDef": "Composite"
      },
      "318": {
        "TypeId": 319,
        "TypeDef": "Sequence"
      },
      "319": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "Address",
            "TypeId": 113
          },
          {
            "Name": "storage_keys",
            "TypeName": "Vec<H256>",
            "TypeId": 123
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "AccessListItem"
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "max_priority_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "max_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 314
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 318
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 11
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP1559Transaction"
        ],
        "TypeDef": "Composite"
      },
      "321": {
        "Variants": [
          {
            "Name": "empty_call",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_evm_coder_substrate",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "322": {
        "Variants": [
          {
            "Name": "migrate_from_self_sponsoring",
            "TypeFields": [
              {
                "Name": "addresses",
                "TypeName": "Vec<H160>",
                "TypeId": 323
              }
            ],
            "Index": 0,
            "Docs": [
              "Migrate contract to use `SponsoringMode` storage instead of `SelfSponsoring`"
            ]
          }
        ],
        "Path": [
          "pallet_evm_contract_helpers",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "323": {
        "TypeId": 113,
        "TypeDef": "Sequence"
      },
      "324": {
        "Variants": [
          {
            "Name": "begin",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              }
            ],
            "Index": 0,
            "Docs": [
              "Start contract migration, inserts contract stub at target address,",
              "and marks account as pending, allowing to insert storage"
            ]
          },
          {
            "Name": "set_data",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "data",
                "TypeName": "Vec<(H256, H256)>",
                "TypeId": 325
              }
            ],
            "Index": 1,
            "Docs": [
              "Insert items into contract storage, this method can be called",
              "multiple times"
            ]
          },
          {
            "Name": "finish",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 113
              },
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Finish contract migration, allows it to be called.",
              "It is not possible to alter contract storage via [`Self::set_data`]",
              "after this call."
            ]
          },
          {
            "Name": "insert_eth_logs",
            "TypeFields": [
              {
                "Name": "logs",
                "TypeName": "Vec<ethereum::Log>",
                "TypeId": 327
              }
            ],
            "Index": 3,
            "Docs": [
              "Create ethereum events attached to the fake transaction"
            ]
          },
          {
            "Name": "insert_events",
            "TypeFields": [
              {
                "Name": "events",
                "TypeName": "Vec<Vec<u8>>",
                "TypeId": 143
              }
            ],
            "Index": 4,
            "Docs": [
              "Create substrate events"
            ]
          },
          {
            "Name": "remove_rmrk_data",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Remove remark compatibility data leftovers"
            ]
          }
        ],
        "Path": [
          "pallet_evm_migration",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "325": {
        "TypeId": 326,
        "TypeDef": "Sequence"
      },
      "326": {
        "TypeIds": [
          11,
          11
        ],
        "TypeDef": "Tuple"
      },
      "327": {
        "TypeId": 122,
        "TypeDef": "Sequence"
      },
      "328": {
        "Variants": [
          {
            "Name": "enable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "disable",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "execute_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "weight_bound",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 2,
            "Docs": [
              "Execute a runtime call stored as a preimage.",
              "",
              "`weight_bound` is the maximum weight that the caller is willing",
              "to allow the extrinsic to be executed with."
            ]
          }
        ],
        "Path": [
          "pallet_maintenance",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "329": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet"
        ]
      },
      "330": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 216
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 40
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "331": {
        "Variants": [
          {
            "Name": "ZeroVestingPeriod",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting period is zero"
            ]
          },
          {
            "Name": "ZeroVestingPeriodCount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Number of vests is zero"
            ]
          },
          {
            "Name": "InsufficientBalanceToLock",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Insufficient amount of balance to lock"
            ]
          },
          {
            "Name": "TooManyVestingSchedules",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "This account have too many vesting schedules"
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The vested transfer amount is too low"
            ]
          },
          {
            "Name": "MaxVestingSchedulesExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Failed because the maximum vesting schedules was exceeded"
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "332": {
        "Variants": [
          {
            "Name": "AssetHasNoReserve",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset has no reserve location."
            ]
          },
          {
            "Name": "NotCrossChainTransfer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not cross-chain transfer."
            ]
          },
          {
            "Name": "InvalidDest",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid transfer destination."
            ]
          },
          {
            "Name": "NotCrossChainTransferableCurrency",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Currency is not cross-chain transferable."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "XcmExecutionFailed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "XCM execution failed."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the",
              "destination chain."
            ]
          },
          {
            "Name": "InvalidAncestry",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Could not get ancestry of asset reserve location."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The MultiAsset is invalid."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          },
          {
            "Name": "DistinctReserveForAssetAndFee",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "We tried sending distinct asset and fee but they have different",
              "reserve chains."
            ]
          },
          {
            "Name": "ZeroFee",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The fee is zero."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The transfering asset amount is zero."
            ]
          },
          {
            "Name": "TooManyAssetsBeingSent",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The number of assets to be sent is over the maximum."
            ]
          },
          {
            "Name": "AssetIndexNonExistent",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The specified index does not exist in a MultiAssets struct."
            ]
          },
          {
            "Name": "FeeNotEnough",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Fee is not enough."
            ]
          },
          {
            "Name": "NotSupportedMultiLocation",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Not supported MultiLocation"
            ]
          },
          {
            "Name": "MinXcmFeeNotDefined",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "MinXcmFee not registered for certain reserve location"
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "333": {
        "TypeIds": [
          0,
          61
        ],
        "TypeDef": "Tuple"
      },
      "334": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 336
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 335
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "335": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 58
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "336": {
        "TypeId": 335,
        "TypeDef": "Sequence"
      },
      "337": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "338": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 340
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 339
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "339": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 37
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 37
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "340": {
        "TypeId": 339,
        "TypeDef": "Sequence"
      },
      "341": {
        "Variants": [
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The balance is too low"
            ]
          },
          {
            "Name": "AmountIntoBalanceFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot convert Amount into Balance type"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed because liquidity restrictions due to locking"
            ]
          },
          {
            "Name": "MaxLocksExceeded",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Failed because the maximum locks was exceeded"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "342": {
        "TypeId": 343,
        "TypeDef": "Sequence"
      },
      "343": {
        "TypeFields": [
          {
            "Name": "sender",
            "TypeName": "ParaId",
            "TypeId": 65
          },
          {
            "Name": "state",
            "TypeName": "InboundState",
            "TypeId": 344
          },
          {
            "Name": "message_metadata",
            "TypeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
            "TypeId": 345
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "344": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundState"
        ],
        "TypeDef": "Variant"
      },
      "345": {
        "TypeId": 346,
        "TypeDef": "Sequence"
      },
      "346": {
        "TypeIds": [
          4,
          347
        ],
        "TypeDef": "Tuple"
      },
      "347": {
        "Variants": [
          {
            "Name": "ConcatenatedVersionedXcm",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ConcatenatedEncodedBlob",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Signals",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "XcmpMessageFormat"
        ],
        "TypeDef": "Variant"
      },
      "348": {
        "TypeIds": [
          65,
          4
        ],
        "TypeDef": "Tuple"
      },
      "349": {
        "TypeId": 350,
        "TypeDef": "Sequence"
      },
      "350": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 65
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 351
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 155
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 155
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "351": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "352": {
        "TypeIds": [
          65,
          155
        ],
        "TypeDef": "Tuple"
      },
      "353": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "threshold_weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "weight_restrict_decay",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "xcmp_max_individual_weight",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "354": {
        "TypeIds": [
          65,
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "355": {
        "Variants": [
          {
            "Name": "FailedToSend",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to send XCM message."
            ]
          },
          {
            "Name": "BadXcmOrigin",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Bad XCM origin."
            ]
          },
          {
            "Name": "BadXcm",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bad XCM data."
            ]
          },
          {
            "Name": "BadOverweightIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad overweight index."
            ]
          },
          {
            "Name": "WeightOverLimit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Provided weight is possibly not enough to execute the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "356": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 103
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedMultiLocation>",
                "TypeId": 357
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 358
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 103
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 87
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 360
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "357": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 103
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 103
          }
        ],
        "TypeDef": "Variant"
      },
      "358": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 359
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 359
          }
        ],
        "TypeDef": "Variant"
      },
      "359": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "360": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Response",
                "TypeId": 228
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 71
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "361": {
        "TypeIds": [
          4,
          103
        ],
        "TypeDef": "Tuple"
      },
      "362": {
        "TypeIds": [
          10,
          8,
          4
        ],
        "TypeDef": "Tuple"
      },
      "363": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 365
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 364
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "TypeIds": [
          103,
          4
        ],
        "TypeDef": "Tuple"
      },
      "365": {
        "TypeId": 364,
        "TypeDef": "Sequence"
      },
      "366": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 367
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "367": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "368": {
        "TypeIds": [
          4,
          0,
          369
        ],
        "TypeDef": "Tuple"
      },
      "369": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 46
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "370": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 103
          },
          {
            "Name": "locker",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 103
          },
          {
            "Name": "users",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 373
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 372
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "372": {
        "TypeIds": [
          6,
          103
        ],
        "TypeDef": "Tuple"
      },
      "373": {
        "TypeId": 372,
        "TypeDef": "Sequence"
      },
      "374": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
              "a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Invalid asset for the operation."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still users of the lock."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "375": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "376": {
        "TypeFields": [
          {
            "Name": "max_individual",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "ConfigData"
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "TypeFields": [
          {
            "Name": "begin_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "end_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "overweight_count",
            "TypeName": "OverweightIndex",
            "TypeId": 10
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "PageIndexData"
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "TypeId": 379,
        "TypeDef": "Sequence"
      },
      "379": {
        "TypeIds": [
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "380": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message index given is unknown."
            ]
          },
          {
            "Name": "OverLimit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The amount of weight given is possibly not enough for executing the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "381": {
        "TypeIds": [
          110,
          0
        ],
        "TypeDef": "Tuple"
      },
      "382": {
        "TypeIds": [
          110,
          111
        ],
        "TypeDef": "Tuple"
      },
      "383": {
        "TypeIds": [
          110,
          111,
          0
        ],
        "TypeDef": "Tuple"
      },
      "384": {
        "Variants": [
          {
            "Name": "CollectionDecimalPointLimitExceeded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Decimal_points parameter must be lower than [`up_data_structs::MAX_DECIMAL_POINTS`]."
            ]
          },
          {
            "Name": "EmptyArgument",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Length of items properties must be greater than 0."
            ]
          },
          {
            "Name": "RepartitionCalledOnNonRefungibleCollection",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Repertition is only supported by refungible collection."
            ]
          }
        ],
        "Path": [
          "pallet_unique",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Errors for the common Unique transactions."
        ]
      },
      "385": {
        "Variants": [
          {
            "Name": "InconsistentConfiguration",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_configuration",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "386": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "mode",
            "TypeName": "CollectionMode",
            "TypeId": 252
          },
          {
            "Name": "name",
            "TypeName": "CollectionName",
            "TypeId": 248
          },
          {
            "Name": "description",
            "TypeName": "CollectionDescription",
            "TypeId": 250
          },
          {
            "Name": "token_prefix",
            "TypeName": "CollectionTokenPrefix",
            "TypeId": 251
          },
          {
            "Name": "sponsorship",
            "TypeName": "SponsorshipState<AccountId>",
            "TypeId": 387
          },
          {
            "Name": "limits",
            "TypeName": "CollectionLimits",
            "TypeId": 257
          },
          {
            "Name": "permissions",
            "TypeName": "CollectionPermissions",
            "TypeId": 262
          },
          {
            "Name": "flags",
            "TypeName": "CollectionFlags",
            "TypeId": 388
          }
        ],
        "Path": [
          "up_data_structs",
          "Collection"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "387": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unconfirmed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "up_data_structs",
          "SponsorshipState"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "388": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "389": {
        "TypeFields": [
          {
            "Name": "map",
            "TypeName": "PropertiesMap<PropertyValue>",
            "TypeId": 390
          },
          {
            "Name": "consumed_space",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "_reserved",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "up_data_structs",
          "Properties"
        ],
        "TypeDef": "Composite"
      },
      "390": {
        "TypeFields": [
          {
            "TypeName": "BoundedBTreeMap<PropertyKey, Value, ConstU32<MAX_PROPERTIES_PER_ITEM>>",
            "TypeId": 391
          }
        ],
        "Path": [
          "up_data_structs",
          "PropertiesMap"
        ],
        "TypeParams": [
          {
            "Name": "Value",
            "TypeId": 276
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 392
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 114
          },
          {
            "Name": "V",
            "TypeId": 276
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "392": {
        "TypeFields": [
          {
            "TypeId": 393
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 114
          },
          {
            "Name": "V",
            "TypeId": 276
          }
        ],
        "TypeDef": "Composite"
      },
      "393": {
        "TypeId": 394,
        "TypeDef": "Sequence"
      },
      "394": {
        "TypeIds": [
          114,
          276
        ],
        "TypeDef": "Tuple"
      },
      "395": {
        "TypeFields": [
          {
            "TypeName": "BoundedBTreeMap<PropertyKey, Value, ConstU32<MAX_PROPERTIES_PER_ITEM>>",
            "TypeId": 396
          }
        ],
        "Path": [
          "up_data_structs",
          "PropertiesMap"
        ],
        "TypeParams": [
          {
            "Name": "Value",
            "TypeId": 272
          }
        ],
        "TypeDef": "Composite"
      },
      "396": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 397
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 114
          },
          {
            "Name": "V",
            "TypeId": 272
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "397": {
        "TypeFields": [
          {
            "TypeId": 398
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 114
          },
          {
            "Name": "V",
            "TypeId": 272
          }
        ],
        "TypeDef": "Composite"
      },
      "398": {
        "TypeId": 399,
        "TypeDef": "Sequence"
      },
      "399": {
        "TypeIds": [
          114,
          272
        ],
        "TypeDef": "Tuple"
      },
      "400": {
        "TypeIds": [
          110,
          112
        ],
        "TypeDef": "Tuple"
      },
      "401": {
        "TypeIds": [
          402,
          110,
          111,
          403,
          404
        ],
        "TypeDef": "Tuple"
      },
      "402": {
        "TypeFields": [
          {
            "Name": "created",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "destroyed",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "alive",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "up_data_structs",
          "CollectionStats"
        ],
        "TypeDef": "Composite"
      },
      "403": {
        "TypeFields": [
          {
            "Name": "token",
            "TypeName": "TokenId",
            "TypeId": 111
          },
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 110
          }
        ],
        "Path": [
          "up_data_structs",
          "TokenChild"
        ],
        "TypeDef": "Composite"
      },
      "404": {
        "TypeFields": [
          {
            "TypeId": 418
          }
        ],
        "Path": [
          "PhantomType",
          "up_data_structs"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 405
          }
        ],
        "TypeDef": "Composite"
      },
      "405": {
        "TypeIds": [
          406,
          408,
          410
        ],
        "TypeDef": "Tuple"
      },
      "406": {
        "TypeFields": [
          {
            "Name": "properties",
            "TypeName": "Vec<Property>",
            "TypeId": 277
          },
          {
            "Name": "owner",
            "TypeName": "Option<CrossAccountId>",
            "TypeId": 407
          },
          {
            "Name": "pieces",
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "up_data_structs",
          "TokenData"
        ],
        "TypeParams": [
          {
            "Name": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "TypeDef": "Composite"
      },
      "407": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 112
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 112
          }
        ],
        "TypeDef": "Variant"
      },
      "408": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "mode",
            "TypeName": "CollectionMode",
            "TypeId": 252
          },
          {
            "Name": "name",
            "TypeName": "Vec<u16>",
            "TypeId": 249
          },
          {
            "Name": "description",
            "TypeName": "Vec<u16>",
            "TypeId": 249
          },
          {
            "Name": "token_prefix",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "sponsorship",
            "TypeName": "SponsorshipState<AccountId>",
            "TypeId": 387
          },
          {
            "Name": "limits",
            "TypeName": "CollectionLimits",
            "TypeId": 257
          },
          {
            "Name": "permissions",
            "TypeName": "CollectionPermissions",
            "TypeId": 262
          },
          {
            "Name": "token_property_permissions",
            "TypeName": "Vec<PropertyKeyPermission>",
            "TypeId": 273
          },
          {
            "Name": "properties",
            "TypeName": "Vec<Property>",
            "TypeId": 277
          },
          {
            "Name": "read_only",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "flags",
            "TypeName": "RpcCollectionFlags",
            "TypeId": 409
          }
        ],
        "Path": [
          "up_data_structs",
          "RpcCollection"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "409": {
        "TypeFields": [
          {
            "Name": "foreign",
            "TypeName": "bool",
            "TypeId": 87
          },
          {
            "Name": "erc721metadata",
            "TypeName": "bool",
            "TypeId": 87
          }
        ],
        "Path": [
          "up_data_structs",
          "RpcCollectionFlags"
        ],
        "TypeDef": "Composite"
      },
      "410": {
        "TypeFields": [
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "compact_proof_size",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "compressed_proof_size",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "results",
            "TypeName": "Vec<ApplyExtrinsicResult>",
            "TypeId": 411
          },
          {
            "Name": "key_values",
            "TypeName": "Vec<TrieKeyValue>",
            "TypeId": 416
          }
        ],
        "Path": [
          "up_pov_estimate_rpc",
          "PovInfo"
        ],
        "TypeDef": "Composite"
      },
      "411": {
        "TypeId": 412,
        "TypeDef": "Sequence"
      },
      "412": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 36
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 413
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 36
          },
          {
            "Name": "E",
            "TypeId": 413
          }
        ],
        "TypeDef": "Variant"
      },
      "413": {
        "Variants": [
          {
            "Name": "Invalid",
            "TypeFields": [
              {
                "TypeName": "InvalidTransaction",
                "TypeId": 414
              }
            ],
            "Index": 0
          },
          {
            "Name": "Unknown",
            "TypeFields": [
              {
                "TypeName": "UnknownTransaction",
                "TypeId": 415
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "transaction_validity",
          "TransactionValidityError"
        ],
        "TypeDef": "Variant"
      },
      "414": {
        "Variants": [
          {
            "Name": "Call",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Payment",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Future",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Stale",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "BadProof",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "AncientBirthBlock",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "ExhaustsResources",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Custom",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "BadMandatory",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "MandatoryValidation",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "BadSigner",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "sp_runtime",
          "transaction_validity",
          "InvalidTransaction"
        ],
        "TypeDef": "Variant"
      },
      "415": {
        "Variants": [
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoUnsignedValidator",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Custom",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "transaction_validity",
          "UnknownTransaction"
        ],
        "TypeDef": "Variant"
      },
      "416": {
        "TypeId": 417,
        "TypeDef": "Sequence"
      },
      "417": {
        "TypeFields": [
          {
            "Name": "key",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "value",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "up_pov_estimate_rpc",
          "TrieKeyValue"
        ],
        "TypeDef": "Composite"
      },
      "418": {
        "Length": 0,
        "TypeId": 405,
        "TypeDef": "Array"
      },
      "419": {
        "Variants": [
          {
            "Name": "CollectionNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "This collection does not exist."
            ]
          },
          {
            "Name": "MustBeTokenOwner",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Sender parameter and item owner must be equal."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "No permission to perform action"
            ]
          },
          {
            "Name": "CantDestroyNotEmptyCollection",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Destroying only empty collections is allowed"
            ]
          },
          {
            "Name": "PublicMintingNotAllowed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Collection is not in mint mode."
            ]
          },
          {
            "Name": "AddressNotInAllowlist",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Address is not in allow list."
            ]
          },
          {
            "Name": "CollectionNameLimitExceeded",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Collection name can not be longer than 63 char."
            ]
          },
          {
            "Name": "CollectionDescriptionLimitExceeded",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Collection description can not be longer than 255 char."
            ]
          },
          {
            "Name": "CollectionTokenPrefixLimitExceeded",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Token prefix can not be longer than 15 char."
            ]
          },
          {
            "Name": "TotalCollectionsLimitExceeded",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Total collections bound exceeded."
            ]
          },
          {
            "Name": "CollectionAdminCountExceeded",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Exceeded max admin count"
            ]
          },
          {
            "Name": "CollectionLimitBoundsExceeded",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Collection limit bounds per collection exceeded"
            ]
          },
          {
            "Name": "OwnerPermissionsCantBeReverted",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Tried to enable permissions which are only permitted to be disabled"
            ]
          },
          {
            "Name": "TransferNotAllowed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Collection settings not allowing items transferring"
            ]
          },
          {
            "Name": "AccountTokenLimitExceeded",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Account token limit exceeded per collection"
            ]
          },
          {
            "Name": "CollectionTokenLimitExceeded",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Collection token limit exceeded"
            ]
          },
          {
            "Name": "MetadataFlagFrozen",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Metadata flag frozen"
            ]
          },
          {
            "Name": "TokenNotFound",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Item does not exist"
            ]
          },
          {
            "Name": "TokenValueTooLow",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Item is balance not enough"
            ]
          },
          {
            "Name": "ApprovedValueTooLow",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Requested value is more than the approved"
            ]
          },
          {
            "Name": "CantApproveMoreThanOwned",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Tried to approve more than owned"
            ]
          },
          {
            "Name": "AddressIsNotEthMirror",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Only spending from eth mirror could be approved"
            ]
          },
          {
            "Name": "AddressIsZero",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Can't transfer tokens to ethereum zero address"
            ]
          },
          {
            "Name": "UnsupportedOperation",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The operation is not supported"
            ]
          },
          {
            "Name": "NotSufficientFounds",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Insufficient funds to perform an action"
            ]
          },
          {
            "Name": "UserIsNotAllowedToNest",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "User does not satisfy the nesting rule"
            ]
          },
          {
            "Name": "SourceCollectionIsNotAllowedToNest",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "Only tokens from specific collections may nest tokens under this one"
            ]
          },
          {
            "Name": "CollectionFieldSizeExceeded",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Tried to store more data than allowed in collection field"
            ]
          },
          {
            "Name": "NoSpaceForProperty",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Tried to store more property data than allowed"
            ]
          },
          {
            "Name": "PropertyLimitReached",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Tried to store more property keys than allowed"
            ]
          },
          {
            "Name": "PropertyKeyIsTooLong",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Property key is too long"
            ]
          },
          {
            "Name": "InvalidCharacterInPropertyKey",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Only ASCII letters, digits, and symbols `_`, `-`, and `.` are allowed"
            ]
          },
          {
            "Name": "EmptyPropertyKey",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "Empty property keys are forbidden"
            ]
          },
          {
            "Name": "CollectionIsExternal",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "Tried to access an external collection with an internal API"
            ]
          },
          {
            "Name": "CollectionIsInternal",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "Tried to access an internal collection with an external API"
            ]
          },
          {
            "Name": "ConfirmSponsorshipFail",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "This address is not set as sponsor, use setCollectionSponsor first."
            ]
          },
          {
            "Name": "UserIsNotCollectionAdmin",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "The user is not an administrator."
            ]
          }
        ],
        "Path": [
          "pallet_common",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "420": {
        "TypeIds": [
          110,
          112,
          112
        ],
        "TypeDef": "Tuple"
      },
      "421": {
        "Variants": [
          {
            "Name": "NotFungibleDataUsedToMintFungibleCollectionToken",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not Fungible item data used to mint in Fungible collection."
            ]
          },
          {
            "Name": "FungibleItemsHaveNoId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Fungible tokens hold no ID, and the default value of TokenId for Fungible collection is 0."
            ]
          },
          {
            "Name": "FungibleItemsDontHaveData",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Tried to set data for fungible item."
            ]
          },
          {
            "Name": "FungibleDisallowsNesting",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Fungible token does not support nesting."
            ]
          },
          {
            "Name": "SettingPropertiesNotAllowed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Setting item properties is not allowed."
            ]
          },
          {
            "Name": "SettingAllowanceForAllNotAllowed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Setting allowance for all is not allowed."
            ]
          },
          {
            "Name": "FungibleTokensAreAlwaysValid",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Only a fungible collection could be possibly broken; any fungible token is valid."
            ]
          }
        ],
        "Path": [
          "pallet_fungible",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "422": {
        "TypeFields": [
          {
            "Name": "map",
            "TypeName": "PropertiesMap<PropertyValue>",
            "TypeId": 390
          },
          {
            "Name": "consumed_space",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "_reserved",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "up_data_structs",
          "Properties"
        ],
        "TypeDef": "Composite"
      },
      "423": {
        "TypeIds": [
          110,
          112,
          111
        ],
        "TypeDef": "Tuple"
      },
      "424": {
        "TypeIds": [
          110,
          111,
          112
        ],
        "TypeDef": "Tuple"
      },
      "425": {
        "TypeIds": [
          110,
          111,
          112,
          112
        ],
        "TypeDef": "Tuple"
      },
      "426": {
        "Variants": [
          {
            "Name": "NotRefungibleDataUsedToMintFungibleCollectionToken",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not Refungible item data used to mint in Refungible collection."
            ]
          },
          {
            "Name": "WrongRefungiblePieces",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Maximum refungibility exceeded."
            ]
          },
          {
            "Name": "RepartitionWhileNotOwningAllPieces",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Refungible token can't be repartitioned by user who isn't owns all pieces."
            ]
          },
          {
            "Name": "RefungibleDisallowsNesting",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Refungible token can't nest other tokens."
            ]
          },
          {
            "Name": "SettingPropertiesNotAllowed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Setting item properties is not allowed."
            ]
          }
        ],
        "Path": [
          "pallet_refungible",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "427": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "Path": [
          "pallet_nonfungible",
          "ItemData"
        ],
        "TypeParams": [
          {
            "Name": "CrossAccountId",
            "TypeId": 112
          }
        ],
        "TypeDef": "Composite"
      },
      "428": {
        "TypeIds": [
          110,
          111,
          429,
          114
        ],
        "TypeDef": "Tuple"
      },
      "429": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Rmrk",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "up_data_structs",
          "PropertyScope"
        ],
        "TypeDef": "Variant"
      },
      "430": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "431": {
        "TypeIds": [
          110,
          111,
          382
        ],
        "TypeDef": "Tuple"
      },
      "432": {
        "Variants": [
          {
            "Name": "NotNonfungibleDataUsedToMintFungibleCollectionToken",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not Nonfungible item data used to mint in Nonfungible collection."
            ]
          },
          {
            "Name": "NonfungibleItemsHaveNoAmount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Used amount > 1 with NFT"
            ]
          },
          {
            "Name": "CantBurnNftWithChildren",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Unable to burn NFT with children"
            ]
          }
        ],
        "Path": [
          "pallet_nonfungible",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "433": {
        "Variants": [
          {
            "Name": "OuroborosDetected",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "While nesting, encountered an already checked account, detecting a loop."
            ]
          },
          {
            "Name": "DepthLimit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "While nesting, reached the depth limit of nesting, exceeding the provided budget."
            ]
          },
          {
            "Name": "BreadthLimit",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "While nesting, reached the breadth limit of nesting, exceeding the provided budget."
            ]
          },
          {
            "Name": "TokenNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Couldn't find the token owner that is itself a token."
            ]
          },
          {
            "Name": "CantNestTokenUnderCollection",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Tried to nest token under collection contract address, instead of token address"
            ]
          }
        ],
        "Path": [
          "pallet_structure",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "434": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "435": {
        "TypeIds": [
          6,
          4
        ],
        "TypeDef": "Tuple"
      },
      "436": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 438
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 437
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "437": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "438": {
        "TypeId": 437,
        "TypeDef": "Sequence"
      },
      "439": {
        "Variants": [
          {
            "Name": "AdminNotSet",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Error due to action requiring admin to be set."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No permission to perform an action."
            ]
          },
          {
            "Name": "NotSufficientFunds",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Insufficient funds to perform an action."
            ]
          },
          {
            "Name": "PendingForBlockOverflow",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Occurs when a pending unstake cannot be added in this block. PENDING_LIMIT_PER_BLOCK` limits exceeded."
            ]
          },
          {
            "Name": "SponsorNotSet",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The error is due to the fact that the collection/contract must already be sponsored in order to perform the action."
            ]
          },
          {
            "Name": "IncorrectLockedBalanceOperation",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Errors caused by incorrect actions with a locked balance."
            ]
          },
          {
            "Name": "InsufficientStakedBalance",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Errors caused by insufficient staked balance."
            ]
          }
        ],
        "Path": [
          "pallet_app_promotion",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "440": {
        "Variants": [
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "MultiLocationExisted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "MultiLocation existed"
            ]
          },
          {
            "Name": "AssetIdNotExists",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "AssetId not exists"
            ]
          },
          {
            "Name": "AssetIdExisted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "AssetId exists"
            ]
          }
        ],
        "Path": [
          "pallet_foreign_assets",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "441": {
        "TypeIds": [
          113,
          11
        ],
        "TypeDef": "Tuple"
      },
      "442": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not enough balance to perform action"
            ]
          },
          {
            "Name": "FeeOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Calculating total fee overflowed"
            ]
          },
          {
            "Name": "PaymentOverflow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Calculating total payment overflowed"
            ]
          },
          {
            "Name": "WithdrawFailed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Withdraw fee failed"
            ]
          },
          {
            "Name": "GasPriceTooLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Gas price is too low."
            ]
          },
          {
            "Name": "InvalidNonce",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Nonce is invalid"
            ]
          },
          {
            "Name": "GasLimitTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Gas limit is too low."
            ]
          },
          {
            "Name": "GasLimitTooHigh",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Gas limit is too high."
            ]
          },
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Undefined error."
            ]
          },
          {
            "Name": "Reentrancy",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "EVM reentrancy"
            ]
          },
          {
            "Name": "TransactionMustComeFromEOA",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "EIP-3607,"
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "443": {
        "TypeId": 444,
        "TypeDef": "Sequence"
      },
      "444": {
        "TypeIds": [
          312,
          445,
          449
        ],
        "TypeDef": "Tuple"
      },
      "445": {
        "TypeFields": [
          {
            "Name": "transaction_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "transaction_index",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "from",
            "TypeName": "H160",
            "TypeId": 113
          },
          {
            "Name": "to",
            "TypeName": "Option<H160>",
            "TypeId": 446
          },
          {
            "Name": "contract_address",
            "TypeName": "Option<H160>",
            "TypeId": 446
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 327
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 447
          }
        ],
        "Path": [
          "fp_rpc",
          "TransactionStatus"
        ],
        "TypeDef": "Composite"
      },
      "446": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 113
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 113
          }
        ],
        "TypeDef": "Variant"
      },
      "447": {
        "TypeFields": [
          {
            "TypeName": "[u8; BLOOM_SIZE]",
            "TypeId": 448
          }
        ],
        "Path": [
          "ethbloom",
          "Bloom"
        ],
        "TypeDef": "Composite"
      },
      "448": {
        "Length": 256,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "449": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "EIP658ReceiptData",
                "TypeId": 450
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930ReceiptData",
                "TypeId": 450
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559ReceiptData",
                "TypeId": 450
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "ReceiptV3"
        ],
        "TypeDef": "Variant"
      },
      "450": {
        "TypeFields": [
          {
            "Name": "status_code",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "used_gas",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 447
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 327
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "EIP658ReceiptData"
        ],
        "TypeDef": "Composite"
      },
      "451": {
        "TypeFields": [
          {
            "Name": "header",
            "TypeName": "Header",
            "TypeId": 452
          },
          {
            "Name": "transactions",
            "TypeName": "Vec<T>",
            "TypeId": 454
          },
          {
            "Name": "ommers",
            "TypeName": "Vec<Header>",
            "TypeId": 455
          }
        ],
        "Path": [
          "ethereum",
          "block",
          "Block"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 312
          }
        ],
        "TypeDef": "Composite"
      },
      "452": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "ommers_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "beneficiary",
            "TypeName": "H160",
            "TypeId": 113
          },
          {
            "Name": "state_root",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "transactions_root",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "receipts_root",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 447
          },
          {
            "Name": "difficulty",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "number",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "gas_used",
            "TypeName": "U256",
            "TypeId": 306
          },
          {
            "Name": "timestamp",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "extra_data",
            "TypeName": "Bytes",
            "TypeId": 12
          },
          {
            "Name": "mix_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "nonce",
            "TypeName": "H64",
            "TypeId": 453
          }
        ],
        "Path": [
          "ethereum",
          "header",
          "Header"
        ],
        "TypeDef": "Composite"
      },
      "453": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 58
          }
        ],
        "Path": [
          "ethereum_types",
          "hash",
          "H64"
        ],
        "TypeDef": "Composite"
      },
      "454": {
        "TypeId": 312,
        "TypeDef": "Sequence"
      },
      "455": {
        "TypeId": 452,
        "TypeDef": "Sequence"
      },
      "456": {
        "TypeId": 449,
        "TypeDef": "Sequence"
      },
      "457": {
        "TypeId": 445,
        "TypeDef": "Sequence"
      },
      "458": {
        "Variants": [
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Signature is invalid."
            ]
          },
          {
            "Name": "PreLogExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Pre-log is present, therefore transact is not allowed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "459": {
        "Variants": [
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OutOfFund",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_evm_coder_substrate",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "DispatchError is opaque, but we need to somehow extract correct error in case of OutOfGas failure",
          "So we have this pallet, which defines OutOfGas error, and knews its own id to check if DispatchError",
          "is thrown because of it",
          "",
          "These errors shouldn't end in extrinsic results, as they only used in evm execution path"
        ]
      },
      "460": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unconfirmed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 112
              }
            ],
            "Index": 1
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 112
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "up_data_structs",
          "SponsorshipState"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 112
          }
        ],
        "TypeDef": "Variant"
      },
      "461": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Allowlisted",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Generous",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_evm_contract_helpers",
          "SponsoringModeT"
        ],
        "TypeDef": "Variant"
      },
      "462": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 463
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 306
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "463": {
        "TypeFields": [
          {
            "TypeId": 464
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 306
          }
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "TypeId": 465,
        "TypeDef": "Sequence"
      },
      "465": {
        "TypeIds": [
          4,
          306
        ],
        "TypeDef": "Tuple"
      },
      "466": {
        "TypeIds": [
          113,
          113
        ],
        "TypeDef": "Tuple"
      },
      "467": {
        "Variants": [
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "This method is only executable by contract owner"
            ]
          },
          {
            "Name": "NoPendingSponsor",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No pending sponsor for contract."
            ]
          },
          {
            "Name": "TooManyMethodsHaveSponsoredLimit",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Number of methods that sponsored limit is defined for exceeds maximum."
            ]
          }
        ],
        "Path": [
          "pallet_evm_contract_helpers",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "468": {
        "Variants": [
          {
            "Name": "AccountNotEmpty",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Can only migrate to empty address."
            ]
          },
          {
            "Name": "AccountIsNotMigrating",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Migration of this account is not yet started, or already finished."
            ]
          },
          {
            "Name": "BadEvent",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to decode event bytes"
            ]
          }
        ],
        "Path": [
          "pallet_evm_migration",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "469": {
        "Variants": null,
        "Path": [
          "pallet_maintenance",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "470": {
        "TypeFields": [
          {
            "TypeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
            "TypeId": 490
          }
        ],
        "Path": [
          "fp_self_contained",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 200
          },
          {
            "Name": "Call",
            "TypeId": 214
          },
          {
            "Name": "Signature",
            "TypeId": 471
          },
          {
            "Name": "Extra",
            "TypeId": 477
          }
        ],
        "TypeDef": "Composite"
      },
      "471": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 472
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 474
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 475
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "472": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 473
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "473": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "474": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 473
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "475": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 476
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "476": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "477": {
        "TypeIds": [
          478,
          479,
          480,
          481,
          483,
          484,
          485,
          486,
          487,
          489
        ],
        "TypeDef": "Tuple"
      },
      "478": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "479": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "480": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "481": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 482
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "482": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "483": {
        "TypeFields": [
          {
            "TypeName": "T::Index",
            "TypeId": 50
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "484": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "485": {
        "Path": [
          "unique_runtime",
          "runtime_common",
          "maintenance",
          "CheckMaintenance"
        ],
        "TypeDef": "Composite"
      },
      "486": {
        "Path": [
          "unique_runtime",
          "runtime_common",
          "identity",
          "DisableIdentityCalls"
        ],
        "TypeDef": "Composite"
      },
      "487": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_template_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 488
          }
        ],
        "TypeDef": "Composite"
      },
      "488": {
        "Path": [
          "unique_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      },
      "489": {
        "Path": [
          "pallet_ethereum",
          "FakeTransactionFinalizer"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 488
          }
        ],
        "TypeDef": "Composite"
      },
      "490": {
        "TypeFields": [
          {
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 200
          },
          {
            "Name": "Call",
            "TypeId": 214
          },
          {
            "Name": "Signature",
            "TypeId": 471
          },
          {
            "Name": "Extra",
            "TypeId": 477
          }
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 17,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 137
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 139,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 136,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 140
        },
        "Events": {
          "TypeId": 20
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 144,
            "Value": "Yk/XWgAHAIhSanQCAEABAsDNFwABBwACj6VLAgDQAAEHAOa9T1cCAPAAAQAAAsDNFwABBwCkI8BoAgAgAQEHAIhSanQCAEABAQcAopQaHQIAUAACwM0XAAAAAA==",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 148,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "YAkAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 150,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 151,
            "Value": "GHVuaXF1ZRh1bmlxdWUBAAAA/1sOAAAAAAA8T9xNKXOLNtUDAAAAFE88dhb1yKECAAAA32rLaJkHYJsEAAAAN+OX/HyR9eQBAAAAQP461AH4lZoGAAAA0ryYl+7QjxUDAAAA94sni+U/RUwCAAAAWCIR9luxS4kEAAAA5lsA5Gzt0KoCAAAAqzwFcikf64sBAAAA3XGNXMUyYtQBAAAA6pPj8W89aWICAAAAvJ2JkE9bkj8BAAAAN8i7E1CpoqgDAAAAMtZ642DK6UQBAAAAAwAAAAA=",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 155,
            "Value": "3xw=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 156
        },
        "Index": 0
      },
      "20": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                " which will result the next block process with the new validation code. This concludes the upgrade process.",
                "",
                " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 157,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 159,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 161,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 163,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 168,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 169,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 170,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 173,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 143,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 143,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 175,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The next authorized upgrade, if there is one."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See [`Pallet::set_custom_validation_head_data`] for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 176
        },
        "Events": {
          "TypeId": 29
        },
        "Constants": [],
        "Errors": {
          "TypeId": 185
        },
        "Index": 20
      },
      "21": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 65,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 186
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 21
      },
      "25": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 187,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 191,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 25
      },
      "26": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 187,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will always",
                " be updated to the latest AuRa authorities in `on_finalize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 26
      },
      "30": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 192
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 196
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 199
        },
        "Events": {
          "TypeId": 31
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open."
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 202
        },
        "Index": 30
      },
      "32": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 203
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 10,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 32
      },
      "33": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 204,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 205,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 33
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 33
      },
      "34": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 206
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 207,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 209
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 210,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AABkp7O24A0AAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 108,
            "Value": "AQAAoN7Frck1NgAAAAAAAAA=",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "GQAAAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 210,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 211,
            "Value": "cHkvdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "Errors": {
          "TypeId": 212
        },
        "Index": 34
      },
      "35": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 213
        },
        "Events": {
          "TypeId": 35
        },
        "Constants": [],
        "Errors": {
          "TypeId": 329
        },
        "Index": 35
      },
      "37": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "VestingSchedules",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 330
                }
              },
              "Default": "AA==",
              "Docs": [
                " Vesting schedules of an account.",
                "",
                " VestingSchedules: map AccountId => Vec<VestingSchedule>"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 215
        },
        "Events": {
          "TypeId": 39
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AADoiQQjx4oAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 331
        },
        "Index": 37
      },
      "38": {
        "Name": "XTokens",
        "Storage": null,
        "Calls": {
          "TypeId": 217
        },
        "Events": {
          "TypeId": 42
        },
        "Constants": [
          {
            "Name": "SelfLocation",
            "TypeId": 47,
            "Value": "AQEA1R8=",
            "Docs": [
              " Self chain location."
            ]
          },
          {
            "Name": "BaseXcmWeight",
            "TypeId": 8,
            "Value": "AoTXF6EP",
            "Docs": [
              " Base XCM weight.",
              "",
              " The actually weight for an XCM message is `T::BaseXcmWeight +",
              " T::Weigher::weight(&msg)`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 332
        },
        "Index": 38
      },
      "39": {
        "Name": "Tokens",
        "Storage": {
          "Prefix": "Tokens",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 61,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total issuance of a token type."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 333,
                  "Value": 334
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks of a token type under an account.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Accounts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 333,
                  "Value": 337
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " The balance of a token type under an account.",
                "",
                " NOTE: If the total is ever zero, decrease account ref account.",
                "",
                " NOTE: This is only used in the case that this module is used to store",
                " balances."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 333,
                  "Value": 338
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 221
        },
        "Events": {
          "TypeId": 60
        },
        "Constants": [
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 341
        },
        "Index": 39
      },
      "50": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 342,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Status of the inbound XCMP channels."
              ]
            },
            {
              "Name": "InboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 348,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 349,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 352,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 65,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 353,
                "Item2": null
              },
              "Default": "AgAAAAUAAAABAAAAghoGAAAIAAcAyBeoBAIABAA=",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 10,
                  "Value": 354
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages that exceeded max individual message weight budget.",
                "",
                " These message stay in this storage map until they are manually dispatched via",
                " `service_overweight`."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "OverweightCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                " available free overweight index."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 222
        },
        "Events": {
          "TypeId": 63
        },
        "Constants": [],
        "Errors": {
          "TypeId": 355
        },
        "Index": 50
      },
      "51": {
        "Name": "PolkadotXcm",
        "Storage": {
          "Prefix": "PolkadotXcm",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 10,
                  "Value": 356
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 11,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 361,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 361,
                  "Value": 10
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 361,
                  "Value": 362
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 363,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 366,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 368,
                  "Value": 370
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 371
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 223
        },
        "Events": {
          "TypeId": 66
        },
        "Constants": [],
        "Errors": {
          "TypeId": 374
        },
        "Index": 51
      },
      "52": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 244
        },
        "Events": {
          "TypeId": 104
        },
        "Constants": [],
        "Errors": {
          "TypeId": 375
        },
        "Index": 52
      },
      "53": {
        "Name": "DmpQueue",
        "Storage": {
          "Prefix": "DmpQueue",
          "Entries": [
            {
              "Name": "Configuration",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 376,
                "Item2": null
              },
              "Default": "BwDkC1QCAgAEAA==",
              "Docs": [
                " The configuration."
              ]
            },
            {
              "Name": "PageIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 377,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The page index."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 378
                }
              },
              "Default": "AA==",
              "Docs": [
                " The queue pages."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 10,
                  "Value": 379
                }
              },
              "Default": "AA==",
              "Docs": [
                " The overweight messages."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 245
        },
        "Events": {
          "TypeId": 105
        },
        "Constants": [],
        "Errors": {
          "TypeId": 380
        },
        "Index": 53
      },
      "60": {
        "Name": "Inflation",
        "Storage": {
          "Prefix": "Inflation",
          "Entries": [
            {
              "Name": "StartingYearTotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " starting year total issuance"
              ]
            },
            {
              "Name": "BlockInflation",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Current inflation for `InflationBlockInterval` number of blocks"
              ]
            },
            {
              "Name": "NextInflationBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Next target (relay) block when inflation will be applied"
              ]
            },
            {
              "Name": "NextRecalculationBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Next target (relay) block when inflation is recalculated"
              ]
            },
            {
              "Name": "StartBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Relay block when inflation has started"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 246
        },
        "Events": null,
        "Constants": [
          {
            "Name": "InflationBlockInterval",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Number of blocks that pass between treasury balance updates due to inflation"
            ]
          }
        ],
        "Errors": null,
        "Index": 60
      },
      "61": {
        "Name": "Unique",
        "Storage": {
          "Prefix": "Unique",
          "Entries": [
            {
              "Name": "ChainVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Used for migrations"
              ]
            },
            {
              "Name": "CreateItemBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 381,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " (Collection id (controlled?2), who created (real))",
                " TODO: Off chain worker should remove from this map when collection gets removed"
              ]
            },
            {
              "Name": "NftTransferBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 382,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Collection id (controlled?2), token id (controlled?2)"
              ]
            },
            {
              "Name": "FungibleTransferBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 381,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Collection id (controlled?2), owning user (real)"
              ]
            },
            {
              "Name": "ReFungibleTransferBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 383,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Collection id (controlled?2), token id (controlled?2)"
              ]
            },
            {
              "Name": "TokenPropertyBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 382,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Last sponsoring of token property setting // todo:doc rephrase this and the following"
              ]
            },
            {
              "Name": "NftApproveBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 382,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Last sponsoring of NFT approval in a collection"
              ]
            },
            {
              "Name": "FungibleApproveBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 381,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Last sponsoring of fungible tokens approval in a collection"
              ]
            },
            {
              "Name": "RefungibleApproveBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 383,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Last sponsoring of RFT approval in a collection"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 247
        },
        "Events": null,
        "Constants": [
          {
            "Name": "nesting_budget",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " A maximum number of levels of depth in the token nesting tree."
            ]
          },
          {
            "Name": "max_collection_name_length",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " Maximal length of a collection name."
            ]
          },
          {
            "Name": "max_collection_description_length",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " Maximal length of a collection description."
            ]
          },
          {
            "Name": "max_token_prefix_length",
            "TypeId": 4,
            "Value": "EAAAAA==",
            "Docs": [
              " Maximal length of a token prefix."
            ]
          },
          {
            "Name": "collection_admins_limit",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum admins per collection."
            ]
          },
          {
            "Name": "max_property_key_length",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " Maximal length of a property key."
            ]
          },
          {
            "Name": "max_property_value_length",
            "TypeId": 4,
            "Value": "AIAAAA==",
            "Docs": [
              " Maximal length of a property value."
            ]
          },
          {
            "Name": "max_properties_per_item",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " A maximum number of token properties."
            ]
          },
          {
            "Name": "max_collection_properties_size",
            "TypeId": 4,
            "Value": "AKAAAA==",
            "Docs": [
              " Maximum size for all collection properties."
            ]
          },
          {
            "Name": "max_token_properties_size",
            "TypeId": 4,
            "Value": "AIAAAA==",
            "Docs": [
              " Maximum size of all token properties."
            ]
          },
          {
            "Name": "nft_default_collection_limits",
            "TypeId": 257,
            "Value": "AUBCDwABAAgAAAEAAf////8BBQAAAAEFAAAAAQABAQEB",
            "Docs": [
              " Default NFT collection limit."
            ]
          },
          {
            "Name": "rft_default_collection_limits",
            "TypeId": 257,
            "Value": "AUBCDwABAAgAAAEAAf////8BBQAAAAEFAAAAAQABAQEB",
            "Docs": [
              " Default RFT collection limit."
            ]
          },
          {
            "Name": "ft_default_collection_limits",
            "TypeId": 257,
            "Value": "AUBCDwABAAgAAAEAAf////8BBQAAAAEFAAAAAQABAQEB",
            "Docs": [
              " Default FT collection limit."
            ]
          }
        ],
        "Errors": {
          "TypeId": 384
        },
        "Index": 61
      },
      "63": {
        "Name": "Configuration",
        "Storage": {
          "Prefix": "Configuration",
          "Entries": [
            {
              "Name": "WeightToFeeCoefficientOverride",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "MWb9YUUEFgE=",
              "Docs": []
            },
            {
              "Name": "MinGasPriceOverride",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "vi57t90AAAA=",
              "Docs": []
            },
            {
              "Name": "AppPromomotionConfigurationOverride",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 298,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "CollatorSelectionDesiredCollatorsOverride",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "CgAAAA==",
              "Docs": []
            },
            {
              "Name": "CollatorSelectionLicenseBondOverride",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAQOrtdEbQnCyfDAAAAA==",
              "Docs": []
            },
            {
              "Name": "CollatorSelectionKickThresholdOverride",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "LAEAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 296
        },
        "Events": {
          "TypeId": 106
        },
        "Constants": [
          {
            "Name": "DefaultWeightToFeeCoefficient",
            "TypeId": 10,
            "Value": "MWb9YUUEFgE=",
            "Docs": []
          },
          {
            "Name": "DefaultMinGasPrice",
            "TypeId": 10,
            "Value": "vi57t90AAAA=",
            "Docs": []
          },
          {
            "Name": "MaxXcmAllowedLocations",
            "TypeId": 4,
            "Value": "EAAAAA==",
            "Docs": []
          },
          {
            "Name": "AppPromotionDailyRate",
            "TypeId": 300,
            "Value": "IKEHAA==",
            "Docs": []
          },
          {
            "Name": "DayRelayBlocks",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": []
          },
          {
            "Name": "DefaultCollatorSelectionMaxCollators",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": []
          },
          {
            "Name": "DefaultCollatorSelectionLicenseBond",
            "TypeId": 6,
            "Value": "AAAAQOrtdEbQnCyfDAAAAA==",
            "Docs": []
          },
          {
            "Name": "DefaultCollatorSelectionKickThreshold",
            "TypeId": 4,
            "Value": "LAEAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 385
        },
        "Index": 63
      },
      "64": {
        "Name": "Charging",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 64
      },
      "66": {
        "Name": "Common",
        "Storage": {
          "Prefix": "Common",
          "Entries": [
            {
              "Name": "CreatedCollectionCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 110,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Storage of the count of created collections. Essentially contains the last collection ID."
              ]
            },
            {
              "Name": "DestroyedCollectionCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 110,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Storage of the count of deleted collections."
              ]
            },
            {
              "Name": "CollectionById",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 110,
                  "Value": 386
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage of collection info."
              ]
            },
            {
              "Name": "CollectionProperties",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 110,
                  "Value": 389
                }
              },
              "Default": "AAAAAAAAAAAA",
              "Docs": [
                " Storage of collection properties."
              ]
            },
            {
              "Name": "CollectionPropertyPermissions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 110,
                  "Value": 395
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage of token property permissions of a collection."
              ]
            },
            {
              "Name": "AdminAmount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 110,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Storage of the amount of collection admins."
              ]
            },
            {
              "Name": "IsAdmin",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 400,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " List of collection admins."
              ]
            },
            {
              "Name": "Allowlist",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 400,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Allowlisted collection users."
              ]
            },
            {
              "Name": "DummyStorageValue",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 401,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Not used by code, exists only to provide some types to metadata."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 109
        },
        "Constants": [
          {
            "Name": "CollectionCreationPrice",
            "TypeId": 6,
            "Value": "AADITmdtwRsAAAAAAAAAAA==",
            "Docs": [
              " Set price to create a collection."
            ]
          },
          {
            "Name": "ContractAddress",
            "TypeId": 113,
            "Value": "bE6f4a43pB6TzuQp6OGIGr3LtU8=",
            "Docs": [
              " Address under which the CollectionHelper contract would be available."
            ]
          },
          {
            "Name": "collection_admins_limit",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum admins per collection."
            ]
          }
        ],
        "Errors": {
          "TypeId": 419
        },
        "Index": 66
      },
      "67": {
        "Name": "Fungible",
        "Storage": {
          "Prefix": "Fungible",
          "Entries": [
            {
              "Name": "TotalSupply",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 110,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total amount of fungible tokens inside a collection."
              ]
            },
            {
              "Name": "Balance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 400,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Amount of tokens owned by an account inside a collection."
              ]
            },
            {
              "Name": "Allowance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 420,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Storage for assets delegated to a limited extent to other users."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 421
        },
        "Index": 67
      },
      "68": {
        "Name": "Refungible",
        "Storage": {
          "Prefix": "Refungible",
          "Entries": [
            {
              "Name": "TokensMinted",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 110,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Total amount of minted tokens in a collection."
              ]
            },
            {
              "Name": "TokensBurnt",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 110,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Amount of tokens burnt in a collection."
              ]
            },
            {
              "Name": "TokenProperties",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 382,
                  "Value": 422
                }
              },
              "Default": "AAAAAAAAAAAA",
              "Docs": [
                " Amount of pieces a refungible token is split into."
              ]
            },
            {
              "Name": "TotalSupply",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 382,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total amount of pieces for token"
              ]
            },
            {
              "Name": "Owned",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 423,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Used to enumerate tokens owned by account."
              ]
            },
            {
              "Name": "AccountBalance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 400,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Amount of tokens (not pieces) partially owned by an account within a collection."
              ]
            },
            {
              "Name": "Balance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 424,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Amount of token pieces owned by account."
              ]
            },
            {
              "Name": "Allowance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "BlakeTwo128",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 425,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Allowance set by a token owner for another user to perform one of certain transactions on a number of pieces of a token."
              ]
            },
            {
              "Name": "CollectionAllowance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 420,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Spender set by a wallet owner that could perform certain transactions on all tokens in the wallet."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 426
        },
        "Index": 68
      },
      "69": {
        "Name": "Nonfungible",
        "Storage": {
          "Prefix": "Nonfungible",
          "Entries": [
            {
              "Name": "TokensMinted",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 110,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Total amount of minted tokens in a collection."
              ]
            },
            {
              "Name": "TokensBurnt",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 110,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Amount of burnt tokens in a collection."
              ]
            },
            {
              "Name": "TokenData",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 382,
                  "Value": 427
                }
              },
              "Default": "AA==",
              "Docs": [
                " Token data, used to partially describe a token."
              ]
            },
            {
              "Name": "TokenProperties",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 382,
                  "Value": 422
                }
              },
              "Default": "AAAAAAAAAAAA",
              "Docs": [
                " Map of key-value pairs, describing the metadata of a token."
              ]
            },
            {
              "Name": "TokenAuxProperties",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 428,
                  "Value": 430
                }
              },
              "Default": "AA==",
              "Docs": [
                " Custom data of a token that is serialized to bytes,",
                " primarily reserved for on-chain operations,",
                " normally obscured from the external users.",
                "",
                " Auxiliary properties are slightly different from",
                " usual [`TokenProperties`] due to an unlimited number",
                " and separately stored and written-to key-value pairs.",
                "",
                " Currently unused."
              ]
            },
            {
              "Name": "Owned",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 423,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Used to enumerate tokens owned by account."
              ]
            },
            {
              "Name": "TokenChildren",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 431,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Used to enumerate token's children."
              ]
            },
            {
              "Name": "AccountBalance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 400,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Amount of tokens owned by an account in a collection."
              ]
            },
            {
              "Name": "Allowance",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 382,
                  "Value": 112
                }
              },
              "Default": "AA==",
              "Docs": [
                " Allowance set by a token owner for another user to perform one of certain transactions on a token."
              ]
            },
            {
              "Name": "CollectionAllowance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 420,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Operator set by a wallet owner that could perform certain transactions on all tokens in the wallet."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 432
        },
        "Index": 69
      },
      "70": {
        "Name": "Structure",
        "Storage": null,
        "Calls": {
          "TypeId": 302
        },
        "Events": {
          "TypeId": 115
        },
        "Constants": [],
        "Errors": {
          "TypeId": 433
        },
        "Index": 70
      },
      "73": {
        "Name": "AppPromotion",
        "Storage": {
          "Prefix": "AppPromotion",
          "Entries": [
            {
              "Name": "TotalStaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Stores the total staked amount."
              ]
            },
            {
              "Name": "Admin",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `admin` account. Some extrinsics can only be executed if they were signed by `admin`."
              ]
            },
            {
              "Name": "Staked",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 434,
                  "Value": 435
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Stores the amount of tokens staked by account in the blocknumber.",
                "",
                " * **Key1** - Staker account.",
                " * **Key2** - Relay block number when the stake was made.",
                " * **(Balance, BlockNumber)** - Balance of the stake.",
                " The number of the relay block in which we must perform the interest recalculation"
              ]
            },
            {
              "Name": "StakesPerAccount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 2
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores number of stake records for an `Account`.",
                "",
                " * **Key** - Staker account.",
                " * **Value** - Amount of stakes."
              ]
            },
            {
              "Name": "PendingUnstake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 436
                }
              },
              "Default": "AA==",
              "Docs": [
                " Pending unstake records for an `Account`.",
                "",
                " * **Key** - Staker account.",
                " * **Value** - Amount of stakes."
              ]
            },
            {
              "Name": "PreviousCalculatedRecord",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 434,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores a key for record for which the revenue recalculation was performed.",
                " If `None`, then recalculation has not yet been performed or calculations have been completed for all stakers."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 303
        },
        "Events": {
          "TypeId": 116
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 211,
            "Value": "YXBwc3Rha2U=",
            "Docs": [
              " The app's pallet id, used for deriving its sovereign account address."
            ]
          },
          {
            "Name": "RecalculationInterval",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": [
              " In relay blocks."
            ]
          },
          {
            "Name": "PendingInterval",
            "TypeId": 4,
            "Value": "4MQAAA==",
            "Docs": [
              " In parachain blocks."
            ]
          },
          {
            "Name": "IntervalIncome",
            "TypeId": 300,
            "Value": "IKEHAA==",
            "Docs": [
              " Rate of return for interval in blocks defined in `RecalculationInterval`."
            ]
          },
          {
            "Name": "Nominal",
            "TypeId": 6,
            "Value": "AABkp7O24A0AAAAAAAAAAA==",
            "Docs": [
              " Decimals for the `Currency`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 439
        },
        "Index": 73
      },
      "80": {
        "Name": "ForeignAssets",
        "Storage": {
          "Prefix": "ForeignAssets",
          "Entries": [
            {
              "Name": "NextForeignAssetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Next available Foreign AssetId ID.",
                "",
                " NextForeignAssetId: ForeignAssetId"
              ]
            },
            {
              "Name": "ForeignAssetLocations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 47
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for MultiLocations.",
                "",
                " ForeignAssetLocations: map ForeignAssetId => Option<MultiLocation>"
              ]
            },
            {
              "Name": "LocationToCurrencyIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 47,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for CurrencyIds.",
                "",
                " LocationToCurrencyIds: map MultiLocation => Option<ForeignAssetId>"
              ]
            },
            {
              "Name": "AssetMetadatas",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 61,
                  "Value": 118
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for AssetMetadatas.",
                "",
                " AssetMetadatas: map AssetIds => Option<AssetMetadata>"
              ]
            },
            {
              "Name": "AssetBinding",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 110
                }
              },
              "Default": "AA==",
              "Docs": [
                " The storages for assets to fungible collection binding",
                ""
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 304
        },
        "Events": {
          "TypeId": 117
        },
        "Constants": [],
        "Errors": {
          "TypeId": 440
        },
        "Index": 80
      },
      "100": {
        "Name": "EVM",
        "Storage": {
          "Prefix": "EVM",
          "Entries": [
            {
              "Name": "AccountCodes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 113,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AccountStorages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 441,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "CurrentLogs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 327,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Written on log, reset after transaction",
                " Should be empty between transactions"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 305
        },
        "Events": {
          "TypeId": 121
        },
        "Constants": [],
        "Errors": {
          "TypeId": 442
        },
        "Index": 100
      },
      "101": {
        "Name": "Ethereum",
        "Storage": {
          "Prefix": "Ethereum",
          "Entries": [
            {
              "Name": "Pending",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 443,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current building block's transactions and receipts."
              ]
            },
            {
              "Name": "CurrentBlock",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 451,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum block."
              ]
            },
            {
              "Name": "CurrentReceipts",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 456,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum receipts."
              ]
            },
            {
              "Name": "CurrentTransactionStatuses",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 457,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current transaction statuses."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 306,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "InjectedNonce",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 306,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Injected transactions should have unique nonce, here we store current"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 311
        },
        "Events": {
          "TypeId": 124
        },
        "Constants": [],
        "Errors": {
          "TypeId": 458
        },
        "Index": 101
      },
      "150": {
        "Name": "EvmCoderSubstrate",
        "Storage": null,
        "Calls": {
          "TypeId": 321
        },
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 459
        },
        "Index": 150
      },
      "151": {
        "Name": "EvmContractHelpers",
        "Storage": {
          "Prefix": "EvmContractHelpers",
          "Entries": [
            {
              "Name": "Owner",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128"
                  ],
                  "Key": 113,
                  "Value": 113
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Store owner for contract.",
                "",
                " * **Key** - contract address.",
                " * **Value** - owner for contract."
              ]
            },
            {
              "Name": "SelfSponsoring",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128"
                  ],
                  "Key": 113,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Deprecated: this storage is deprecated"
              ]
            },
            {
              "Name": "Sponsoring",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 113,
                  "Value": 460
                }
              },
              "Default": "AA==",
              "Docs": [
                " Store for contract sponsorship state.",
                "",
                " * **Key** - contract address.",
                " * **Value** - sponsorship state."
              ]
            },
            {
              "Name": "SponsoringMode",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128"
                  ],
                  "Key": 113,
                  "Value": 461
                }
              },
              "Default": "AA==",
              "Docs": [
                " Store for sponsoring mode.",
                "",
                " ### Usage",
                " Prefer to delete collection from storage if mode chaged to [`Disabled`](SponsoringModeT::Disabled).",
                "",
                " * **Key** - contract address.",
                " * **Value** - [`sponsoring mode`](SponsoringModeT)."
              ]
            },
            {
              "Name": "SponsoringRateLimit",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128"
                  ],
                  "Key": 113,
                  "Value": 4
                }
              },
              "Default": "IBwAAA==",
              "Docs": [
                " Storage for sponsoring rate limit in blocks.",
                "",
                " * **Key** - contract address.",
                " * **Value** - amount of sponsored blocks."
              ]
            },
            {
              "Name": "SponsoringFeeLimit",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128"
                  ],
                  "Key": 113,
                  "Value": 462
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for last sponsored block.",
                "",
                " * **Key1** - contract address.",
                " * **Key2** - sponsored user address.",
                " * **Value** - last sponsored block number."
              ]
            },
            {
              "Name": "SponsorBasket",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128",
                    "Twox128"
                  ],
                  "Key": 466,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AllowlistEnabled",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128"
                  ],
                  "Key": 113,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storege for contracts with [`Allowlisted`](SponsoringModeT::Allowlisted) sponsoring mode.",
                "",
                " ### Usage",
                " Prefer to delete collection from storage if mode chaged to non `Allowlisted`, than set **Value** to **false**.",
                "",
                " * **Key** - contract address.",
                " * **Value** - is contract in [`Allowlisted`](SponsoringModeT::Allowlisted) mode."
              ]
            },
            {
              "Name": "Allowlist",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox128",
                    "Twox128"
                  ],
                  "Key": 466,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for users that allowed for sponsorship.",
                "",
                " ### Usage",
                " Prefer to delete record from storage if user no more allowed for sponsorship.",
                "",
                " * **Key1** - contract address.",
                " * **Key2** - user that allowed for sponsorship.",
                " * **Value** - allowance for sponsorship."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 322
        },
        "Events": {
          "TypeId": 133
        },
        "Constants": [
          {
            "Name": "ContractAddress",
            "TypeId": 113,
            "Value": "hCiZ7POAVT6KTedb9TTN9vv2QEk=",
            "Docs": [
              " Address, under which magic contract will be available"
            ]
          }
        ],
        "Errors": {
          "TypeId": 467
        },
        "Index": 151
      },
      "152": {
        "Name": "EvmTransactionPayment",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 152
      },
      "153": {
        "Name": "EvmMigration",
        "Storage": {
          "Prefix": "EvmMigration",
          "Entries": [
            {
              "Name": "MigrationPending",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 113,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 324
        },
        "Events": {
          "TypeId": 134
        },
        "Constants": [],
        "Errors": {
          "TypeId": 468
        },
        "Index": 153
      },
      "154": {
        "Name": "Maintenance",
        "Storage": {
          "Prefix": "Maintenance",
          "Entries": [
            {
              "Name": "Enabled",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 328
        },
        "Events": {
          "TypeId": 135
        },
        "Constants": [],
        "Errors": {
          "TypeId": 469
        },
        "Index": 154
      }
    },
    "Extrinsic": {
      "TypeId": 470,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 478,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 479,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 480,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 481,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 483,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 484,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "CheckMaintenance",
          "SignedExtType": 485,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "DisableIdentityCalls",
          "SignedExtType": 486,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 487,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "FakeTransactionFinalizer",
          "SignedExtType": 489,
          "AddSignedExtType": 37
        }
      ]
    },
    "TypeId": 488
  }
}