//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Unique.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class ForeignAssetsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ForeignAssetsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ForeignAssets", "NextForeignAssetId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ForeignAssets", "ForeignAssetLocations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ForeignAssets", "LocationToCurrencyIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ForeignAssets", "AssetMetadatas"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.EnumAssetIds), typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ForeignAssets", "AssetBinding"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId)));
        }
        
        /// <summary>
        /// >> NextForeignAssetIdParams
        ///  Next available Foreign AssetId ID.
        /// 
        ///  NextForeignAssetId: ForeignAssetId
        /// </summary>
        public static string NextForeignAssetIdParams()
        {
            return RequestGenerator.GetStorage("ForeignAssets", "NextForeignAssetId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextForeignAssetIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextForeignAssetIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextForeignAssetId
        ///  Next available Foreign AssetId ID.
        /// 
        ///  NextForeignAssetId: ForeignAssetId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextForeignAssetId(CancellationToken token)
        {
            string parameters = ForeignAssetsStorage.NextForeignAssetIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ForeignAssetLocationsParams
        ///  The storages for MultiLocations.
        /// 
        ///  ForeignAssetLocations: map ForeignAssetId => Option<MultiLocation>
        /// </summary>
        public static string ForeignAssetLocationsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ForeignAssets", "ForeignAssetLocations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ForeignAssetLocationsDefault
        /// Default value as hex string
        /// </summary>
        public static string ForeignAssetLocationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForeignAssetLocations
        ///  The storages for MultiLocations.
        /// 
        ///  ForeignAssetLocations: map ForeignAssetId => Option<MultiLocation>
        /// </summary>
        public async Task<Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation> ForeignAssetLocations(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ForeignAssetsStorage.ForeignAssetLocationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> LocationToCurrencyIdsParams
        ///  The storages for CurrencyIds.
        /// 
        ///  LocationToCurrencyIds: map MultiLocation => Option<ForeignAssetId>
        /// </summary>
        public static string LocationToCurrencyIdsParams(Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
        {
            return RequestGenerator.GetStorage("ForeignAssets", "LocationToCurrencyIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LocationToCurrencyIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string LocationToCurrencyIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LocationToCurrencyIds
        ///  The storages for CurrencyIds.
        /// 
        ///  LocationToCurrencyIds: map MultiLocation => Option<ForeignAssetId>
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LocationToCurrencyIds(Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key, CancellationToken token)
        {
            string parameters = ForeignAssetsStorage.LocationToCurrencyIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetMetadatasParams
        ///  The storages for AssetMetadatas.
        /// 
        ///  AssetMetadatas: map AssetIds => Option<AssetMetadata>
        /// </summary>
        public static string AssetMetadatasParams(Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.EnumAssetIds key)
        {
            return RequestGenerator.GetStorage("ForeignAssets", "AssetMetadatas", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetMetadatasDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetMetadatasDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetMetadatas
        ///  The storages for AssetMetadatas.
        /// 
        ///  AssetMetadatas: map AssetIds => Option<AssetMetadata>
        /// </summary>
        public async Task<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata> AssetMetadatas(Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.EnumAssetIds key, CancellationToken token)
        {
            string parameters = ForeignAssetsStorage.AssetMetadatasParams(key);
            var result = await _client.GetStorageAsync<Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetBindingParams
        ///  The storages for assets to fungible collection binding
        /// 
        /// </summary>
        public static string AssetBindingParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ForeignAssets", "AssetBinding", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetBindingDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetBindingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetBinding
        ///  The storages for assets to fungible collection binding
        /// 
        /// </summary>
        public async Task<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId> AssetBinding(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ForeignAssetsStorage.AssetBindingParams(key);
            var result = await _client.GetStorageAsync<Substrate.Unique.NET.NetApiExt.Generated.Model.up_data_structs.CollectionId>(parameters, token);
            return result;
        }
    }
    
    public sealed class ForeignAssetsCalls
    {
        
        /// <summary>
        /// >> register_foreign_asset
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RegisterForeignAsset(Substrate.Unique.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 owner, Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation location, Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(metadata.Encode());
            return new Method(80, "ForeignAssets", 0, "register_foreign_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_foreign_asset
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateForeignAsset(Substrate.NetApi.Model.Types.Primitive.U32 foreign_asset_id, Substrate.Unique.NET.NetApiExt.Generated.Model.xcm.EnumVersionedMultiLocation location, Substrate.Unique.NET.NetApiExt.Generated.Model.pallet_foreign_assets.module.AssetMetadata metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(foreign_asset_id.Encode());
            byteArray.AddRange(location.Encode());
            byteArray.AddRange(metadata.Encode());
            return new Method(80, "ForeignAssets", 1, "update_foreign_asset", byteArray.ToArray());
        }
    }
    
    public sealed class ForeignAssetsConstants
    {
    }
    
    public enum ForeignAssetsErrors
    {
        
        /// <summary>
        /// >> BadLocation
        /// The given location could not be used (e.g. because it cannot be expressed in the
        /// desired version of XCM).
        /// </summary>
        BadLocation,
        
        /// <summary>
        /// >> MultiLocationExisted
        /// MultiLocation existed
        /// </summary>
        MultiLocationExisted,
        
        /// <summary>
        /// >> AssetIdNotExists
        /// AssetId not exists
        /// </summary>
        AssetIdNotExists,
        
        /// <summary>
        /// >> AssetIdExisted
        /// AssetId exists
        /// </summary>
        AssetIdExisted,
    }
}
