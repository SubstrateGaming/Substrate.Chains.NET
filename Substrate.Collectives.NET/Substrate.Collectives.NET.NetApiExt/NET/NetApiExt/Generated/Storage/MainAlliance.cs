//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Collectives.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> AllianceStorage
    /// </summary>
    public sealed class AllianceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AllianceStorage Constructor
        /// </summary>
        public AllianceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "Rule"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types.Cid)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "Announcements"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT30)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "DepositOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "Members"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.EnumMemberRole), typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "RetiringMembers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "UnscrupulousAccounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "UnscrupulousWebsites"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31)));
        }
        
        /// <summary>
        /// >> RuleParams
        ///  The IPFS CID of the alliance rule.
        ///  Fellows can propose a new rule with a super-majority.
        /// </summary>
        public static string RuleParams()
        {
            return RequestGenerator.GetStorage("Alliance", "Rule", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RuleDefault
        /// Default value as hex string
        /// </summary>
        public static string RuleDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Rule
        ///  The IPFS CID of the alliance rule.
        ///  Fellows can propose a new rule with a super-majority.
        /// </summary>
        public async Task<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types.Cid> Rule(string blockhash, CancellationToken token)
        {
            string parameters = AllianceStorage.RuleParams();
            var result = await _client.GetStorageAsync<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types.Cid>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AnnouncementsParams
        ///  The current IPFS CIDs of any announcements.
        /// </summary>
        public static string AnnouncementsParams()
        {
            return RequestGenerator.GetStorage("Alliance", "Announcements", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AnnouncementsDefault
        /// Default value as hex string
        /// </summary>
        public static string AnnouncementsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Announcements
        ///  The current IPFS CIDs of any announcements.
        /// </summary>
        public async Task<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT30> Announcements(string blockhash, CancellationToken token)
        {
            string parameters = AllianceStorage.AnnouncementsParams();
            var result = await _client.GetStorageAsync<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT30>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DepositOfParams
        ///  Maps members to their candidacy deposit.
        /// </summary>
        public static string DepositOfParams(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Alliance", "DepositOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DepositOfDefault
        /// Default value as hex string
        /// </summary>
        public static string DepositOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DepositOf
        ///  Maps members to their candidacy deposit.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> DepositOf(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = AllianceStorage.DepositOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MembersParams
        ///  Maps member type to members of each type.
        /// </summary>
        public static string MembersParams(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.EnumMemberRole key)
        {
            return RequestGenerator.GetStorage("Alliance", "Members", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MembersDefault
        /// Default value as hex string
        /// </summary>
        public static string MembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Members
        ///  Maps member type to members of each type.
        /// </summary>
        public async Task<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25> Members(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.EnumMemberRole key, string blockhash, CancellationToken token)
        {
            string parameters = AllianceStorage.MembersParams(key);
            var result = await _client.GetStorageAsync<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RetiringMembersParams
        ///  A set of members who gave a retirement notice. They can retire after the end of retirement
        ///  period stored as a future block number.
        /// </summary>
        public static string RetiringMembersParams(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Alliance", "RetiringMembers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RetiringMembersDefault
        /// Default value as hex string
        /// </summary>
        public static string RetiringMembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RetiringMembers
        ///  A set of members who gave a retirement notice. They can retire after the end of retirement
        ///  period stored as a future block number.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> RetiringMembers(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = AllianceStorage.RetiringMembersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnscrupulousAccountsParams
        ///  The current list of accounts deemed unscrupulous. These accounts non grata cannot submit
        ///  candidacy.
        /// </summary>
        public static string UnscrupulousAccountsParams()
        {
            return RequestGenerator.GetStorage("Alliance", "UnscrupulousAccounts", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> UnscrupulousAccountsDefault
        /// Default value as hex string
        /// </summary>
        public static string UnscrupulousAccountsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UnscrupulousAccounts
        ///  The current list of accounts deemed unscrupulous. These accounts non grata cannot submit
        ///  candidacy.
        /// </summary>
        public async Task<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25> UnscrupulousAccounts(string blockhash, CancellationToken token)
        {
            string parameters = AllianceStorage.UnscrupulousAccountsParams();
            var result = await _client.GetStorageAsync<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnscrupulousWebsitesParams
        ///  The current list of websites deemed unscrupulous.
        /// </summary>
        public static string UnscrupulousWebsitesParams()
        {
            return RequestGenerator.GetStorage("Alliance", "UnscrupulousWebsites", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> UnscrupulousWebsitesDefault
        /// Default value as hex string
        /// </summary>
        public static string UnscrupulousWebsitesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> UnscrupulousWebsites
        ///  The current list of websites deemed unscrupulous.
        /// </summary>
        public async Task<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> UnscrupulousWebsites(string blockhash, CancellationToken token)
        {
            string parameters = AllianceStorage.UnscrupulousWebsitesParams();
            var result = await _client.GetStorageAsync<Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AllianceCalls
    /// </summary>
    public sealed class AllianceCalls
    {
        
        /// <summary>
        /// >> propose
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Propose(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> threshold, Substrate.Collectives.NET.NetApiExt.Generated.Model.collectives_polkadot_runtime.EnumRuntimeCall proposal, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> length_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(length_bound.Encode());
            return new Method(50, "Alliance", 0, "propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Vote(Substrate.Collectives.NET.NetApiExt.Generated.Model.primitive_types.H256 proposal, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.NetApi.Model.Types.Primitive.Bool approve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(approve.Encode());
            return new Method(50, "Alliance", 1, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> init_members
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InitMembers(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> fellows, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> allies)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(fellows.Encode());
            byteArray.AddRange(allies.Encode());
            return new Method(50, "Alliance", 3, "init_members", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> disband
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Disband(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types.DisbandWitness witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(witness.Encode());
            return new Method(50, "Alliance", 4, "disband", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_rule
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRule(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types.Cid rule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rule.Encode());
            return new Method(50, "Alliance", 5, "set_rule", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> announce
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Announce(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types.Cid announcement)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(announcement.Encode());
            return new Method(50, "Alliance", 6, "announce", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_announcement
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveAnnouncement(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types.Cid announcement)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(announcement.Encode());
            return new Method(50, "Alliance", 7, "remove_announcement", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> join_alliance
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method JoinAlliance()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(50, "Alliance", 8, "join_alliance", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> nominate_ally
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NominateAlly(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            return new Method(50, "Alliance", 9, "nominate_ally", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> elevate_ally
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ElevateAlly(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress ally)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ally.Encode());
            return new Method(50, "Alliance", 10, "elevate_ally", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> give_retirement_notice
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method GiveRetirementNotice()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(50, "Alliance", 11, "give_retirement_notice", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> retire
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Retire()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(50, "Alliance", 12, "retire", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> kick_member
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method KickMember(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            return new Method(50, "Alliance", 13, "kick_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_unscrupulous_items
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddUnscrupulousItems(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.EnumUnscrupulousItem> items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(items.Encode());
            return new Method(50, "Alliance", 14, "add_unscrupulous_items", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_unscrupulous_items
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveUnscrupulousItems(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.EnumUnscrupulousItem> items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(items.Encode());
            return new Method(50, "Alliance", 15, "remove_unscrupulous_items", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Close(Substrate.Collectives.NET.NetApiExt.Generated.Model.primitive_types.H256 proposal_hash, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> index, Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight proposal_weight_bound, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> length_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(proposal_weight_bound.Encode());
            byteArray.AddRange(length_bound.Encode());
            return new Method(50, "Alliance", 16, "close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> abdicate_fellow_status
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AbdicateFellowStatus()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(50, "Alliance", 17, "abdicate_fellow_status", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AllianceConstants
    /// </summary>
    public sealed class AllianceConstants
    {
        
        /// <summary>
        /// >> MaxUnscrupulousItems
        ///  The maximum number of the unscrupulous items supported by the pallet.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUnscrupulousItems()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxWebsiteUrlLength
        ///  The maximum length of a website URL.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxWebsiteUrlLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xFF000000");
            return result;
        }
        
        /// <summary>
        /// >> AllyDeposit
        ///  The deposit required for submitting candidacy.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AllyDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00A0724E180900000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxAnnouncementsCount
        ///  The maximum number of announcements.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxAnnouncementsCount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxMembersCount
        ///  The maximum number of members per member role.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxMembersCount()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> AllianceErrors
    /// </summary>
    public enum AllianceErrors
    {
        
        /// <summary>
        /// >> AllianceNotYetInitialized
        /// The Alliance has not been initialized yet, therefore accounts cannot join it.
        /// </summary>
        AllianceNotYetInitialized,
        
        /// <summary>
        /// >> AllianceAlreadyInitialized
        /// The Alliance has been initialized, therefore cannot be initialized again.
        /// </summary>
        AllianceAlreadyInitialized,
        
        /// <summary>
        /// >> AlreadyMember
        /// Account is already a member.
        /// </summary>
        AlreadyMember,
        
        /// <summary>
        /// >> NotMember
        /// Account is not a member.
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> NotAlly
        /// Account is not an ally.
        /// </summary>
        NotAlly,
        
        /// <summary>
        /// >> NoVotingRights
        /// Account does not have voting rights.
        /// </summary>
        NoVotingRights,
        
        /// <summary>
        /// >> AlreadyElevated
        /// Account is already an elevated (fellow) member.
        /// </summary>
        AlreadyElevated,
        
        /// <summary>
        /// >> AlreadyUnscrupulous
        /// Item is already listed as unscrupulous.
        /// </summary>
        AlreadyUnscrupulous,
        
        /// <summary>
        /// >> AccountNonGrata
        /// Account has been deemed unscrupulous by the Alliance and is not welcome to join or be
        /// nominated.
        /// </summary>
        AccountNonGrata,
        
        /// <summary>
        /// >> NotListedAsUnscrupulous
        /// Item has not been deemed unscrupulous.
        /// </summary>
        NotListedAsUnscrupulous,
        
        /// <summary>
        /// >> TooManyUnscrupulousItems
        /// The number of unscrupulous items exceeds `MaxUnscrupulousItems`.
        /// </summary>
        TooManyUnscrupulousItems,
        
        /// <summary>
        /// >> TooLongWebsiteUrl
        /// Length of website URL exceeds `MaxWebsiteUrlLength`.
        /// </summary>
        TooLongWebsiteUrl,
        
        /// <summary>
        /// >> InsufficientFunds
        /// Balance is insufficient for the required deposit.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> WithoutRequiredIdentityFields
        /// The account's identity does not have display field and website field.
        /// </summary>
        WithoutRequiredIdentityFields,
        
        /// <summary>
        /// >> WithoutGoodIdentityJudgement
        /// The account's identity has no good judgement.
        /// </summary>
        WithoutGoodIdentityJudgement,
        
        /// <summary>
        /// >> MissingProposalHash
        /// The proposal hash is not found.
        /// </summary>
        MissingProposalHash,
        
        /// <summary>
        /// >> MissingAnnouncement
        /// The announcement is not found.
        /// </summary>
        MissingAnnouncement,
        
        /// <summary>
        /// >> TooManyMembers
        /// Number of members exceeds `MaxMembersCount`.
        /// </summary>
        TooManyMembers,
        
        /// <summary>
        /// >> TooManyAnnouncements
        /// Number of announcements exceeds `MaxAnnouncementsCount`.
        /// </summary>
        TooManyAnnouncements,
        
        /// <summary>
        /// >> BadWitness
        /// Invalid witness data given.
        /// </summary>
        BadWitness,
        
        /// <summary>
        /// >> AlreadyRetiring
        /// Account already gave retirement notice
        /// </summary>
        AlreadyRetiring,
        
        /// <summary>
        /// >> RetirementNoticeNotGiven
        /// Account did not give a retirement notice required to retire.
        /// </summary>
        RetirementNoticeNotGiven,
        
        /// <summary>
        /// >> RetirementPeriodNotPassed
        /// Retirement period has not passed.
        /// </summary>
        RetirementPeriodNotPassed,
        
        /// <summary>
        /// >> FellowsMissing
        /// Fellows must be provided to initialize the Alliance.
        /// </summary>
        FellowsMissing,
    }
}
