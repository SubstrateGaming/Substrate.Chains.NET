//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Collectives.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> FellowshipSalaryStorage
    /// </summary>
    public sealed class FellowshipSalaryStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> FellowshipSalaryStorage Constructor
        /// </summary>
        public FellowshipSalaryStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FellowshipSalary", "Status"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("FellowshipSalary", "Claimant"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus)));
        }
        
        /// <summary>
        /// >> StatusParams
        ///  The overall status of the system.
        /// </summary>
        public static string StatusParams()
        {
            return RequestGenerator.GetStorage("FellowshipSalary", "Status", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StatusDefault
        /// Default value as hex string
        /// </summary>
        public static string StatusDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Status
        ///  The overall status of the system.
        /// </summary>
        public async Task<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType> Status(string blockhash, CancellationToken token)
        {
            string parameters = FellowshipSalaryStorage.StatusParams();
            var result = await _client.GetStorageAsync<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClaimantParams
        ///  The status of a claimant.
        /// </summary>
        public static string ClaimantParams(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("FellowshipSalary", "Claimant", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClaimantDefault
        /// Default value as hex string
        /// </summary>
        public static string ClaimantDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Claimant
        ///  The status of a claimant.
        /// </summary>
        public async Task<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus> Claimant(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = FellowshipSalaryStorage.ClaimantParams(key);
            var result = await _client.GetStorageAsync<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> FellowshipSalaryCalls
    /// </summary>
    public sealed class FellowshipSalaryCalls
    {
        
        /// <summary>
        /// >> init
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Init()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(64, "FellowshipSalary", 0, "init", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bump
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Bump()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(64, "FellowshipSalary", 1, "bump", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> induct
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Induct()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(64, "FellowshipSalary", 2, "induct", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Register()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(64, "FellowshipSalary", 3, "register", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Payout()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(64, "FellowshipSalary", 4, "payout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout_other
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PayoutOther(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 beneficiary)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(beneficiary.Encode());
            return new Method(64, "FellowshipSalary", 5, "payout_other", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> check_payment
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CheckPayment()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(64, "FellowshipSalary", 6, "check_payment", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> FellowshipSalaryConstants
    /// </summary>
    public sealed class FellowshipSalaryConstants
    {
        
        /// <summary>
        /// >> RegistrationPeriod
        ///  The number of blocks within a cycle which accounts have to register their intent to
        ///  claim.
        /// 
        ///  The number of blocks between sequential payout cycles is the sum of this and
        ///  `PayoutPeriod`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RegistrationPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE0A50100");
            return result;
        }
        
        /// <summary>
        /// >> PayoutPeriod
        ///  The number of blocks within a cycle which accounts have to claim the payout.
        /// 
        ///  The number of blocks between sequential payout cycles is the sum of this and
        ///  `RegistrationPeriod`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 PayoutPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE0A50100");
            return result;
        }
        
        /// <summary>
        /// >> Budget
        ///  The total budget per cycle.
        /// 
        ///  This may change over the course of a cycle without any problem.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Budget()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x004429353A0000000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> FellowshipSalaryErrors
    /// </summary>
    public enum FellowshipSalaryErrors
    {
        
        /// <summary>
        /// >> AlreadyStarted
        /// The salary system has already been started.
        /// </summary>
        AlreadyStarted,
        
        /// <summary>
        /// >> NotMember
        /// The account is not a ranked member.
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> AlreadyInducted
        /// The account is already inducted.
        /// </summary>
        AlreadyInducted,
        
        /// <summary>
        /// >> NotInducted
        /// </summary>
        NotInducted,
        
        /// <summary>
        /// >> NoClaim
        /// The member does not have a current valid claim.
        /// </summary>
        NoClaim,
        
        /// <summary>
        /// >> ClaimZero
        /// The member's claim is zero.
        /// </summary>
        ClaimZero,
        
        /// <summary>
        /// >> TooLate
        /// Current cycle's registration period is over.
        /// </summary>
        TooLate,
        
        /// <summary>
        /// >> TooEarly
        /// Current cycle's payment period is not yet begun.
        /// </summary>
        TooEarly,
        
        /// <summary>
        /// >> NotYet
        /// Cycle is not yet over.
        /// </summary>
        NotYet,
        
        /// <summary>
        /// >> NotStarted
        /// The payout cycles have not yet started.
        /// </summary>
        NotStarted,
        
        /// <summary>
        /// >> Bankrupt
        /// There is no budget left for the payout.
        /// </summary>
        Bankrupt,
        
        /// <summary>
        /// >> PayError
        /// There was some issue with the mechanism of payment.
        /// </summary>
        PayError,
        
        /// <summary>
        /// >> Inconclusive
        /// The payment has neither failed nor succeeded yet.
        /// </summary>
        Inconclusive,
        
        /// <summary>
        /// >> NotCurrent
        /// The cycle is after that in which the payment was made.
        /// </summary>
        NotCurrent,
    }
}
