//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary
{
    
    
    /// <summary>
    /// >> 450 - Composite[pallet_salary.StatusType]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class StatusType : BaseType
    {
        
        /// <summary>
        /// >> cycle_index
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CycleIndex { get; set; }
        /// <summary>
        /// >> cycle_start
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CycleStart { get; set; }
        /// <summary>
        /// >> budget
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Budget { get; set; }
        /// <summary>
        /// >> total_registrations
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 TotalRegistrations { get; set; }
        /// <summary>
        /// >> total_unregistered_paid
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 TotalUnregisteredPaid { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "StatusType";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(CycleIndex.Encode());
            result.AddRange(CycleStart.Encode());
            result.AddRange(Budget.Encode());
            result.AddRange(TotalRegistrations.Encode());
            result.AddRange(TotalUnregisteredPaid.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            CycleIndex = new Substrate.NetApi.Model.Types.Primitive.U32();
            CycleIndex.Decode(byteArray, ref p);
            CycleStart = new Substrate.NetApi.Model.Types.Primitive.U32();
            CycleStart.Decode(byteArray, ref p);
            Budget = new Substrate.NetApi.Model.Types.Primitive.U128();
            Budget.Decode(byteArray, ref p);
            TotalRegistrations = new Substrate.NetApi.Model.Types.Primitive.U128();
            TotalRegistrations.Decode(byteArray, ref p);
            TotalUnregisteredPaid = new Substrate.NetApi.Model.Types.Primitive.U128();
            TotalUnregisteredPaid.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
