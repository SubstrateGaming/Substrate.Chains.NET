//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Collectives.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_referenda.types;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.Collectives.NET.RestClient.Generated.Interfaces;
   
   public sealed class FellowshipReferendaControllerClient : BaseClient, IFellowshipReferendaControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public FellowshipReferendaControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<U32> GetReferendumCount()
      {
         return await SendRequestAsync<U32>(_httpClient, "fellowshipreferenda/referendumcount");
      }
      public async Task<bool> SubscribeReferendumCount()
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipReferenda.ReferendumCount");
      }
      public async Task<EnumReferendumInfo> GetReferendumInfoFor(U32 key)
      {
         return await SendRequestAsync<EnumReferendumInfo>(_httpClient, "fellowshipreferenda/referenduminfofor", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.ReferendumInfoForParams(key));
      }
      public async Task<bool> SubscribeReferendumInfoFor(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipReferenda.ReferendumInfoFor", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.ReferendumInfoForParams(key));
      }
      public async Task<BoundedVecT34> GetTrackQueue(U16 key)
      {
         return await SendRequestAsync<BoundedVecT34>(_httpClient, "fellowshipreferenda/trackqueue", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.TrackQueueParams(key));
      }
      public async Task<bool> SubscribeTrackQueue(U16 key)
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipReferenda.TrackQueue", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.TrackQueueParams(key));
      }
      public async Task<U32> GetDecidingCount(U16 key)
      {
         return await SendRequestAsync<U32>(_httpClient, "fellowshipreferenda/decidingcount", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.DecidingCountParams(key));
      }
      public async Task<bool> SubscribeDecidingCount(U16 key)
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipReferenda.DecidingCount", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.DecidingCountParams(key));
      }
      public async Task<H256> GetMetadataOf(U32 key)
      {
         return await SendRequestAsync<H256>(_httpClient, "fellowshipreferenda/metadataof", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.MetadataOfParams(key));
      }
      public async Task<bool> SubscribeMetadataOf(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipReferenda.MetadataOf", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipReferendaStorage.MetadataOfParams(key));
      }
   }
}
