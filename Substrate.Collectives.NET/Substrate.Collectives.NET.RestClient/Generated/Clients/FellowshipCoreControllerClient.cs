//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Collectives.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Collectives.NET.RestClient.Generated.Interfaces;
   
   public sealed class FellowshipCoreControllerClient : BaseClient, IFellowshipCoreControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public FellowshipCoreControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<ParamsTypeT1> GetParams()
      {
         return await SendRequestAsync<ParamsTypeT1>(_httpClient, "fellowshipcore/params");
      }
      public async Task<bool> SubscribeParams()
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipCore.Params");
      }
      public async Task<MemberStatus> GetMember(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<MemberStatus>(_httpClient, "fellowshipcore/member", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCoreStorage.MemberParams(key));
      }
      public async Task<bool> SubscribeMember(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipCore.Member", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCoreStorage.MemberParams(key));
      }
      public async Task<BaseTuple<EnumWish, BoundedVecT10>> GetMemberEvidence(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<BaseTuple<EnumWish, BoundedVecT10>>(_httpClient, "fellowshipcore/memberevidence", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCoreStorage.MemberEvidenceParams(key));
      }
      public async Task<bool> SubscribeMemberEvidence(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("FellowshipCore.MemberEvidence", Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCoreStorage.MemberEvidenceParams(key));
      }
   }
}
