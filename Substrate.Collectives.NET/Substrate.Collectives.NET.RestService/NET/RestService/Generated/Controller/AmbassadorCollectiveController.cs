//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Collectives.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Collectives.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// AmbassadorCollectiveController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class AmbassadorCollectiveController : ControllerBase
    {
        
        private IAmbassadorCollectiveStorage _ambassadorCollectiveStorage;
        
        /// <summary>
        /// AmbassadorCollectiveController constructor.
        /// </summary>
        public AmbassadorCollectiveController(IAmbassadorCollectiveStorage ambassadorCollectiveStorage)
        {
            _ambassadorCollectiveStorage = ambassadorCollectiveStorage;
        }
        
        /// <summary>
        /// >> MemberCount
        ///  The number of members in the collective who have at least the rank according to the index
        ///  of the vec.
        /// </summary>
        [HttpGet("MemberCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Storage.AmbassadorCollectiveStorage), "MemberCountParams", typeof(Substrate.NetApi.Model.Types.Primitive.U16))]
        public IActionResult GetMemberCount(string key)
        {
            return this.Ok(_ambassadorCollectiveStorage.GetMemberCount(key));
        }
        
        /// <summary>
        /// >> Members
        ///  The current members of the collective.
        /// </summary>
        [HttpGet("Members")]
        [ProducesResponseType(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_ranked_collective.MemberRecord), 200)]
        [StorageKeyBuilder(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Storage.AmbassadorCollectiveStorage), "MembersParams", typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetMembers(string key)
        {
            return this.Ok(_ambassadorCollectiveStorage.GetMembers(key));
        }
        
        /// <summary>
        /// >> IdToIndex
        ///  The index of each ranks's member into the group of members who have at least that rank.
        /// </summary>
        [HttpGet("IdToIndex")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Storage.AmbassadorCollectiveStorage), "IdToIndexParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetIdToIndex(string key)
        {
            return this.Ok(_ambassadorCollectiveStorage.GetIdToIndex(key));
        }
        
        /// <summary>
        /// >> IndexToId
        ///  The members in the collective by index. All indices in the range `0..MemberCount` will
        ///  return `Some`, however a member's index is not guaranteed to remain unchanged over time.
        /// </summary>
        [HttpGet("IndexToId")]
        [ProducesResponseType(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Storage.AmbassadorCollectiveStorage), "IndexToIdParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetIndexToId(string key)
        {
            return this.Ok(_ambassadorCollectiveStorage.GetIndexToId(key));
        }
        
        /// <summary>
        /// >> Voting
        ///  Votes on a given proposal, if it is ongoing.
        /// </summary>
        [HttpGet("Voting")]
        [ProducesResponseType(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_ranked_collective.EnumVoteRecord), 200)]
        [StorageKeyBuilder(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Storage.AmbassadorCollectiveStorage), "VotingParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetVoting(string key)
        {
            return this.Ok(_ambassadorCollectiveStorage.GetVoting(key));
        }
        
        /// <summary>
        /// >> VotingCleanup
        /// </summary>
        [HttpGet("VotingCleanup")]
        [ProducesResponseType(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36), 200)]
        [StorageKeyBuilder(typeof(Substrate.Collectives.NET.NetApiExt.Generated.Storage.AmbassadorCollectiveStorage), "VotingCleanupParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetVotingCleanup(string key)
        {
            return this.Ok(_ambassadorCollectiveStorage.GetVotingCleanup(key));
        }
    }
}
