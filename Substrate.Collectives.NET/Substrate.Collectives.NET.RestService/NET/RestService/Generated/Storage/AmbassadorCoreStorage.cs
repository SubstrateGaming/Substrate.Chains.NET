//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Collectives.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAmbassadorCoreStorage interface definition.
    /// </summary>
    public interface IAmbassadorCoreStorage : IStorage
    {
        
        /// <summary>
        /// >> Params
        ///  The overall status of the system.
        /// </summary>
        Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.ParamsTypeT1 GetParams();
        
        /// <summary>
        /// >> Member
        ///  The status of a claimant.
        /// </summary>
        Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.MemberStatus GetMember(string key);
        
        /// <summary>
        /// >> MemberEvidence
        ///  Some evidence together with the desired outcome for which it was presented.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.EnumWish, Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> GetMemberEvidence(string key);
    }
    
    /// <summary>
    /// AmbassadorCoreStorage class definition.
    /// </summary>
    public sealed class AmbassadorCoreStorage : IAmbassadorCoreStorage
    {
        
        /// <summary>
        /// _paramsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.ParamsTypeT1> _paramsTypedStorage;
        
        /// <summary>
        /// _memberTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.MemberStatus> _memberTypedStorage;
        
        /// <summary>
        /// _memberEvidenceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.EnumWish, Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>> _memberEvidenceTypedStorage;
        
        /// <summary>
        /// AmbassadorCoreStorage constructor.
        /// </summary>
        public AmbassadorCoreStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ParamsTypedStorage = new TypedStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.ParamsTypeT1>("AmbassadorCore.Params", storageDataProvider, storageChangeDelegates);
            this.MemberTypedStorage = new TypedMapStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.MemberStatus>("AmbassadorCore.Member", storageDataProvider, storageChangeDelegates);
            this.MemberEvidenceTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.EnumWish, Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>>("AmbassadorCore.MemberEvidence", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _paramsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.ParamsTypeT1> ParamsTypedStorage
        {
            get
            {
                return _paramsTypedStorage;
            }
            set
            {
                _paramsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _memberTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.MemberStatus> MemberTypedStorage
        {
            get
            {
                return _memberTypedStorage;
            }
            set
            {
                _memberTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _memberEvidenceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.EnumWish, Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10>> MemberEvidenceTypedStorage
        {
            get
            {
                return _memberEvidenceTypedStorage;
            }
            set
            {
                _memberEvidenceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ParamsTypedStorage.InitializeAsync("AmbassadorCore", "Params");
            await MemberTypedStorage.InitializeAsync("AmbassadorCore", "Member");
            await MemberEvidenceTypedStorage.InitializeAsync("AmbassadorCore", "MemberEvidence");
        }
        
        /// <summary>
        /// Implements any storage change for AmbassadorCore.Params
        /// </summary>
        [StorageChange("AmbassadorCore", "Params")]
        public void OnUpdateParams(string data)
        {
            ParamsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Params
        ///  The overall status of the system.
        /// </summary>
        public Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.ParamsTypeT1 GetParams()
        {
            return ParamsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for AmbassadorCore.Member
        /// </summary>
        [StorageChange("AmbassadorCore", "Member")]
        public void OnUpdateMember(string key, string data)
        {
            MemberTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Member
        ///  The status of a claimant.
        /// </summary>
        public Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.MemberStatus GetMember(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MemberTypedStorage.Dictionary.TryGetValue(key, out Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.MemberStatus result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AmbassadorCore.MemberEvidence
        /// </summary>
        [StorageChange("AmbassadorCore", "MemberEvidence")]
        public void OnUpdateMemberEvidence(string key, string data)
        {
            MemberEvidenceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MemberEvidence
        ///  Some evidence together with the desired outcome for which it was presented.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.EnumWish, Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> GetMemberEvidence(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MemberEvidenceTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_core_fellowship.EnumWish, Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
