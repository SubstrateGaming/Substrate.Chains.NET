//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Collectives.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAssetRateStorage interface definition.
    /// </summary>
    public interface IAssetRateStorage : IStorage
    {
        
        /// <summary>
        /// >> ConversionRateToNative
        ///  Maps an asset to its fixed point representation in the native balance.
        /// 
        ///  E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_kind)`
        /// </summary>
        Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetConversionRateToNative(string key);
    }
    
    /// <summary>
    /// AssetRateStorage class definition.
    /// </summary>
    public sealed class AssetRateStorage : IAssetRateStorage
    {
        
        /// <summary>
        /// _conversionRateToNativeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> _conversionRateToNativeTypedStorage;
        
        /// <summary>
        /// AssetRateStorage constructor.
        /// </summary>
        public AssetRateStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ConversionRateToNativeTypedStorage = new TypedMapStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>("AssetRate.ConversionRateToNative", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _conversionRateToNativeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> ConversionRateToNativeTypedStorage
        {
            get
            {
                return _conversionRateToNativeTypedStorage;
            }
            set
            {
                _conversionRateToNativeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ConversionRateToNativeTypedStorage.InitializeAsync("AssetRate", "ConversionRateToNative");
        }
        
        /// <summary>
        /// Implements any storage change for AssetRate.ConversionRateToNative
        /// </summary>
        [StorageChange("AssetRate", "ConversionRateToNative")]
        public void OnUpdateConversionRateToNative(string key, string data)
        {
            ConversionRateToNativeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ConversionRateToNative
        ///  Maps an asset to its fixed point representation in the native balance.
        /// 
        ///  E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_kind)`
        /// </summary>
        public Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetConversionRateToNative(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ConversionRateToNativeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
