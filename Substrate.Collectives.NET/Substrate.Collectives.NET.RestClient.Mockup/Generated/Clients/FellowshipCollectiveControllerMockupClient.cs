//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Collectives.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_ranked_collective;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Collectives.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class FellowshipCollectiveControllerMockupClient : MockupBaseClient, IFellowshipCollectiveControllerMockupClient
   {
      private HttpClient _httpClient;
      public FellowshipCollectiveControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetMemberCount(U32 value, U16 key)
      {
         return await SendMockupRequestAsync(_httpClient, "FellowshipCollective/MemberCount", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCollectiveStorage.MemberCountParams(key));
      }
      public async Task<bool> SetMembers(MemberRecord value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "FellowshipCollective/Members", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCollectiveStorage.MembersParams(key));
      }
      public async Task<bool> SetIdToIndex(U32 value, Substrate.NetApi.Model.Types.Base.BaseTuple<U16, AccountId32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "FellowshipCollective/IdToIndex", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCollectiveStorage.IdToIndexParams(key));
      }
      public async Task<bool> SetIndexToId(AccountId32 value, Substrate.NetApi.Model.Types.Base.BaseTuple<U16, U32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "FellowshipCollective/IndexToId", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCollectiveStorage.IndexToIdParams(key));
      }
      public async Task<bool> SetVoting(EnumVoteRecord value, Substrate.NetApi.Model.Types.Base.BaseTuple<U32, AccountId32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "FellowshipCollective/Voting", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCollectiveStorage.VotingParams(key));
      }
      public async Task<bool> SetVotingCleanup(BoundedVecT33 value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "FellowshipCollective/VotingCleanup", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.FellowshipCollectiveStorage.VotingCleanupParams(key));
      }
   }
}
