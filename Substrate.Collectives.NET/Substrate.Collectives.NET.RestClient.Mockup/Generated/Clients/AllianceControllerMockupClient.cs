//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Collectives.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.types;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Collectives.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class AllianceControllerMockupClient : MockupBaseClient, IAllianceControllerMockupClient
   {
      private HttpClient _httpClient;
      public AllianceControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetRule(Cid value)
      {
         return await SendMockupRequestAsync(_httpClient, "Alliance/Rule", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.AllianceStorage.RuleParams());
      }
      public async Task<bool> SetAnnouncements(BoundedVecT30 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Alliance/Announcements", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.AllianceStorage.AnnouncementsParams());
      }
      public async Task<bool> SetDepositOf(U128 value, Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Alliance/DepositOf", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.AllianceStorage.DepositOfParams(key));
      }
      public async Task<bool> SetMembers(BoundedVecT25 value, Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_alliance.EnumMemberRole key)
      {
         return await SendMockupRequestAsync(_httpClient, "Alliance/Members", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.AllianceStorage.MembersParams(key));
      }
      public async Task<bool> SetRetiringMembers(U32 value, Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Alliance/RetiringMembers", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.AllianceStorage.RetiringMembersParams(key));
      }
      public async Task<bool> SetUnscrupulousAccounts(BoundedVecT25 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Alliance/UnscrupulousAccounts", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.AllianceStorage.UnscrupulousAccountsParams());
      }
      public async Task<bool> SetUnscrupulousWebsites(BoundedVecT31 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Alliance/UnscrupulousWebsites", value.Encode(), Substrate.Collectives.NET.NetApiExt.Generated.Storage.AllianceStorage.UnscrupulousWebsitesParams());
      }
   }
}
