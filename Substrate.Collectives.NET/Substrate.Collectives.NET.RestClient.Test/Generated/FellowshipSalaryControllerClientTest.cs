//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Collectives.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Collectives.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Collectives.NET.RestClient.Generated.Clients;
   using Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary;
   
   public class FellowshipSalaryControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType GetTestValue2()
      {
         Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType result;
         result = new Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType();
         result.CycleIndex = this.GetTestValueU32();
         result.CycleStart = this.GetTestValueU32();
         result.Budget = this.GetTestValueU128();
         result.TotalRegistrations = this.GetTestValueU128();
         result.TotalUnregisteredPaid = this.GetTestValueU128();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestStatus()
      {
         // Construct new Mockup client to test with.
         FellowshipSalaryControllerMockupClient mockupClient = new FellowshipSalaryControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         FellowshipSalaryControllerClient rpcClient = new FellowshipSalaryControllerClient(_httpClient, subscriptionClient);
         Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeStatus());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetStatus(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.StatusType rpcResult = await rpcClient.GetStatus();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus GetTestValue4()
      {
         Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus result;
         result = new Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus();
         result.LastActive = this.GetTestValueU32();
         result.Status = new Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.EnumClaimState();
         result.Status = this.GetTestValue5();
         return result;
      }
      public Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.EnumClaimState GetTestValue5()
      {
         Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.EnumClaimState result;
         result = new Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.EnumClaimState();
         // NOT IMPLEMENTED >> Initialize Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.EnumClaimState
         return result;
      }
      public Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue6()
      {
         Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Collectives.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestClaimant()
      {
         // Construct new Mockup client to test with.
         FellowshipSalaryControllerMockupClient mockupClient = new FellowshipSalaryControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         FellowshipSalaryControllerClient rpcClient = new FellowshipSalaryControllerClient(_httpClient, subscriptionClient);
         Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus mockupValue = this.GetTestValue4();
         Substrate.Collectives.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 mockupKey = this.GetTestValue6();

         Assert.IsTrue(await rpcClient.SubscribeClaimant(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetClaimant(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Collectives.NET.NetApiExt.Generated.Model.pallet_salary.ClaimantStatus rpcResult = await rpcClient.GetClaimant(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
