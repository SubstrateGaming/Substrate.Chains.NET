//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.PolkadotAssetHub.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.cumulus_pallet_xcmp_queue;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives;
   using Substrate.PolkadotAssetHub.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class XcmpQueueControllerMockupClient : MockupBaseClient, IXcmpQueueControllerMockupClient
   {
      private HttpClient _httpClient;
      public XcmpQueueControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetInboundXcmpStatus(BaseVec<InboundChannelDetails> value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/InboundXcmpStatus", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.InboundXcmpStatusParams());
      }
      public async Task<bool> SetInboundXcmpMessages(BaseVec<U8> value, BaseTuple<Id, U32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/InboundXcmpMessages", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.InboundXcmpMessagesParams(key));
      }
      public async Task<bool> SetOutboundXcmpStatus(BaseVec<OutboundChannelDetails> value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/OutboundXcmpStatus", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.OutboundXcmpStatusParams());
      }
      public async Task<bool> SetOutboundXcmpMessages(BaseVec<U8> value, BaseTuple<Id, U16> key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/OutboundXcmpMessages", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.OutboundXcmpMessagesParams(key));
      }
      public async Task<bool> SetSignalMessages(BaseVec<U8> value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/SignalMessages", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.SignalMessagesParams(key));
      }
      public async Task<bool> SetQueueConfig(QueueConfigData value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/QueueConfig", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.QueueConfigParams());
      }
      public async Task<bool> SetOverweight(BaseTuple<Id, U32, BaseVec<U8>> value, U64 key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/Overweight", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.OverweightParams(key));
      }
      public async Task<bool> SetCounterForOverweight(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/CounterForOverweight", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.CounterForOverweightParams());
      }
      public async Task<bool> SetOverweightCount(U64 value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/OverweightCount", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.OverweightCountParams());
      }
      public async Task<bool> SetQueueSuspended(Bool value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmpQueue/QueueSuspended", value.Encode(), Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.QueueSuspendedParams());
      }
   }
}
