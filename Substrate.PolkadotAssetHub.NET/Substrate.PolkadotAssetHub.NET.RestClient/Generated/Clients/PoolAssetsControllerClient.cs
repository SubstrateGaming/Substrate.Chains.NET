//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.PolkadotAssetHub.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types;
   using Substrate.PolkadotAssetHub.NET.RestClient.Generated.Interfaces;
   
   public sealed class PoolAssetsControllerClient : BaseClient, IPoolAssetsControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public PoolAssetsControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<AssetDetails> GetAsset(Substrate.NetApi.Model.Types.Primitive.U32 key)
      {
         return await SendRequestAsync<AssetDetails>(_httpClient, "poolassets/asset", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.AssetParams(key));
      }
      public async Task<bool> SubscribeAsset(Substrate.NetApi.Model.Types.Primitive.U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("PoolAssets.Asset", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.AssetParams(key));
      }
      public async Task<AssetAccount> GetAccount(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await SendRequestAsync<AssetAccount>(_httpClient, "poolassets/account", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.AccountParams(key));
      }
      public async Task<bool> SubscribeAccount(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await _subscriptionClient.SubscribeAsync("PoolAssets.Account", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.AccountParams(key));
      }
      public async Task<Approval> GetApprovals(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await SendRequestAsync<Approval>(_httpClient, "poolassets/approvals", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.ApprovalsParams(key));
      }
      public async Task<bool> SubscribeApprovals(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await _subscriptionClient.SubscribeAsync("PoolAssets.Approvals", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.ApprovalsParams(key));
      }
      public async Task<AssetMetadataT3> GetMetadata(Substrate.NetApi.Model.Types.Primitive.U32 key)
      {
         return await SendRequestAsync<AssetMetadataT3>(_httpClient, "poolassets/metadata", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.MetadataParams(key));
      }
      public async Task<bool> SubscribeMetadata(Substrate.NetApi.Model.Types.Primitive.U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("PoolAssets.Metadata", Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage.MetadataParams(key));
      }
   }
}
