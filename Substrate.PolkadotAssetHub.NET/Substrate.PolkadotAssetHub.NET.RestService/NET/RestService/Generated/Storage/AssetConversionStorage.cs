//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotAssetHub.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAssetConversionStorage interface definition.
    /// </summary>
    public interface IAssetConversionStorage : IStorage
    {
        
        /// <summary>
        /// >> Pools
        ///  Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially
        ///  created rather than people sending tokens directly to a pool's public account.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_asset_conversion.types.PoolInfo GetPools(string key);
        
        /// <summary>
        /// >> NextPoolAssetId
        ///  Stores the `PoolAssetId` that is going to be used for the next lp token.
        ///  This gets incremented whenever a new lp pool is created.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNextPoolAssetId();
    }
    
    /// <summary>
    /// AssetConversionStorage class definition.
    /// </summary>
    public sealed class AssetConversionStorage : IAssetConversionStorage
    {
        
        /// <summary>
        /// _poolsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_asset_conversion.types.PoolInfo> _poolsTypedStorage;
        
        /// <summary>
        /// _nextPoolAssetIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nextPoolAssetIdTypedStorage;
        
        /// <summary>
        /// AssetConversionStorage constructor.
        /// </summary>
        public AssetConversionStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PoolsTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_asset_conversion.types.PoolInfo>("AssetConversion.Pools", storageDataProvider, storageChangeDelegates);
            this.NextPoolAssetIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AssetConversion.NextPoolAssetId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _poolsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_asset_conversion.types.PoolInfo> PoolsTypedStorage
        {
            get
            {
                return _poolsTypedStorage;
            }
            set
            {
                _poolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextPoolAssetIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> NextPoolAssetIdTypedStorage
        {
            get
            {
                return _nextPoolAssetIdTypedStorage;
            }
            set
            {
                _nextPoolAssetIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PoolsTypedStorage.InitializeAsync("AssetConversion", "Pools");
            await NextPoolAssetIdTypedStorage.InitializeAsync("AssetConversion", "NextPoolAssetId");
        }
        
        /// <summary>
        /// Implements any storage change for AssetConversion.Pools
        /// </summary>
        [StorageChange("AssetConversion", "Pools")]
        public void OnUpdatePools(string key, string data)
        {
            PoolsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Pools
        ///  Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially
        ///  created rather than people sending tokens directly to a pool's public account.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_asset_conversion.types.PoolInfo GetPools(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolsTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_asset_conversion.types.PoolInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetConversion.NextPoolAssetId
        /// </summary>
        [StorageChange("AssetConversion", "NextPoolAssetId")]
        public void OnUpdateNextPoolAssetId(string data)
        {
            NextPoolAssetIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextPoolAssetId
        ///  Stores the `PoolAssetId` that is going to be used for the next lp token.
        ///  This gets incremented whenever a new lp pool is created.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNextPoolAssetId()
        {
            return NextPoolAssetIdTypedStorage.Get();
        }
    }
}
