//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotAssetHub.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IForeignAssetsStorage interface definition.
    /// </summary>
    public interface IForeignAssetsStorage : IStorage
    {
        
        /// <summary>
        /// >> Asset
        ///  Details of an asset.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails GetAsset(string key);
        
        /// <summary>
        /// >> Account
        ///  The holdings of a specific account for a specific asset.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount GetAccount(string key);
        
        /// <summary>
        /// >> Approvals
        ///  Approved balance transfers. First balance is the amount approved for transfer. Second
        ///  is the amount of `T::Currency` reserved for storing this.
        ///  First key is the asset ID, second key is the owner and third key is the delegate.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval GetApprovals(string key);
        
        /// <summary>
        /// >> Metadata
        ///  Metadata of an asset.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT2 GetMetadata(string key);
    }
    
    /// <summary>
    /// ForeignAssetsStorage class definition.
    /// </summary>
    public sealed class ForeignAssetsStorage : IForeignAssetsStorage
    {
        
        /// <summary>
        /// _assetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails> _assetTypedStorage;
        
        /// <summary>
        /// _accountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount> _accountTypedStorage;
        
        /// <summary>
        /// _approvalsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval> _approvalsTypedStorage;
        
        /// <summary>
        /// _metadataTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT2> _metadataTypedStorage;
        
        /// <summary>
        /// ForeignAssetsStorage constructor.
        /// </summary>
        public ForeignAssetsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssetTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails>("ForeignAssets.Asset", storageDataProvider, storageChangeDelegates);
            this.AccountTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount>("ForeignAssets.Account", storageDataProvider, storageChangeDelegates);
            this.ApprovalsTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval>("ForeignAssets.Approvals", storageDataProvider, storageChangeDelegates);
            this.MetadataTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT2>("ForeignAssets.Metadata", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails> AssetTypedStorage
        {
            get
            {
                return _assetTypedStorage;
            }
            set
            {
                _assetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _accountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount> AccountTypedStorage
        {
            get
            {
                return _accountTypedStorage;
            }
            set
            {
                _accountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _approvalsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval> ApprovalsTypedStorage
        {
            get
            {
                return _approvalsTypedStorage;
            }
            set
            {
                _approvalsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _metadataTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT2> MetadataTypedStorage
        {
            get
            {
                return _metadataTypedStorage;
            }
            set
            {
                _metadataTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssetTypedStorage.InitializeAsync("ForeignAssets", "Asset");
            await AccountTypedStorage.InitializeAsync("ForeignAssets", "Account");
            await ApprovalsTypedStorage.InitializeAsync("ForeignAssets", "Approvals");
            await MetadataTypedStorage.InitializeAsync("ForeignAssets", "Metadata");
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.Asset
        /// </summary>
        [StorageChange("ForeignAssets", "Asset")]
        public void OnUpdateAsset(string key, string data)
        {
            AssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Asset
        ///  Details of an asset.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails GetAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.Account
        /// </summary>
        [StorageChange("ForeignAssets", "Account")]
        public void OnUpdateAccount(string key, string data)
        {
            AccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Account
        ///  The holdings of a specific account for a specific asset.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount GetAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.Approvals
        /// </summary>
        [StorageChange("ForeignAssets", "Approvals")]
        public void OnUpdateApprovals(string key, string data)
        {
            ApprovalsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Approvals
        ///  Approved balance transfers. First balance is the amount approved for transfer. Second
        ///  is the amount of `T::Currency` reserved for storing this.
        ///  First key is the asset ID, second key is the owner and third key is the delegate.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval GetApprovals(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ApprovalsTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ForeignAssets.Metadata
        /// </summary>
        [StorageChange("ForeignAssets", "Metadata")]
        public void OnUpdateMetadata(string key, string data)
        {
            MetadataTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Metadata
        ///  Metadata of an asset.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT2 GetMetadata(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MetadataTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT2 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
