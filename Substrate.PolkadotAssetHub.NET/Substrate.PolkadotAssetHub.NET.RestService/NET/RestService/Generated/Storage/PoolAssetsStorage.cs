//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotAssetHub.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IPoolAssetsStorage interface definition.
    /// </summary>
    public interface IPoolAssetsStorage : IStorage
    {
        
        /// <summary>
        /// >> Asset
        ///  Details of an asset.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails GetAsset(string key);
        
        /// <summary>
        /// >> Account
        ///  The holdings of a specific account for a specific asset.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount GetAccount(string key);
        
        /// <summary>
        /// >> Approvals
        ///  Approved balance transfers. First balance is the amount approved for transfer. Second
        ///  is the amount of `T::Currency` reserved for storing this.
        ///  First key is the asset ID, second key is the owner and third key is the delegate.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval GetApprovals(string key);
        
        /// <summary>
        /// >> Metadata
        ///  Metadata of an asset.
        /// </summary>
        Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT3 GetMetadata(string key);
        
        /// <summary>
        /// >> NextAssetId
        ///  The asset ID enforced for the next asset creation, if any present. Otherwise, this storage
        ///  item has no effect.
        /// 
        ///  This can be useful for setting up constraints for IDs of the new assets. For example, by
        ///  providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an
        ///  auto-increment model can be applied to all new asset IDs.
        /// 
        ///  The initial next asset ID can be set using the [`GenesisConfig`] or the
        ///  [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNextAssetId();
    }
    
    /// <summary>
    /// PoolAssetsStorage class definition.
    /// </summary>
    public sealed class PoolAssetsStorage : IPoolAssetsStorage
    {
        
        /// <summary>
        /// _assetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails> _assetTypedStorage;
        
        /// <summary>
        /// _accountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount> _accountTypedStorage;
        
        /// <summary>
        /// _approvalsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval> _approvalsTypedStorage;
        
        /// <summary>
        /// _metadataTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT3> _metadataTypedStorage;
        
        /// <summary>
        /// _nextAssetIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nextAssetIdTypedStorage;
        
        /// <summary>
        /// PoolAssetsStorage constructor.
        /// </summary>
        public PoolAssetsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssetTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails>("PoolAssets.Asset", storageDataProvider, storageChangeDelegates);
            this.AccountTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount>("PoolAssets.Account", storageDataProvider, storageChangeDelegates);
            this.ApprovalsTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval>("PoolAssets.Approvals", storageDataProvider, storageChangeDelegates);
            this.MetadataTypedStorage = new TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT3>("PoolAssets.Metadata", storageDataProvider, storageChangeDelegates);
            this.NextAssetIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("PoolAssets.NextAssetId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails> AssetTypedStorage
        {
            get
            {
                return _assetTypedStorage;
            }
            set
            {
                _assetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _accountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount> AccountTypedStorage
        {
            get
            {
                return _accountTypedStorage;
            }
            set
            {
                _accountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _approvalsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval> ApprovalsTypedStorage
        {
            get
            {
                return _approvalsTypedStorage;
            }
            set
            {
                _approvalsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _metadataTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT3> MetadataTypedStorage
        {
            get
            {
                return _metadataTypedStorage;
            }
            set
            {
                _metadataTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextAssetIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> NextAssetIdTypedStorage
        {
            get
            {
                return _nextAssetIdTypedStorage;
            }
            set
            {
                _nextAssetIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssetTypedStorage.InitializeAsync("PoolAssets", "Asset");
            await AccountTypedStorage.InitializeAsync("PoolAssets", "Account");
            await ApprovalsTypedStorage.InitializeAsync("PoolAssets", "Approvals");
            await MetadataTypedStorage.InitializeAsync("PoolAssets", "Metadata");
            await NextAssetIdTypedStorage.InitializeAsync("PoolAssets", "NextAssetId");
        }
        
        /// <summary>
        /// Implements any storage change for PoolAssets.Asset
        /// </summary>
        [StorageChange("PoolAssets", "Asset")]
        public void OnUpdateAsset(string key, string data)
        {
            AssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Asset
        ///  Details of an asset.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails GetAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PoolAssets.Account
        /// </summary>
        [StorageChange("PoolAssets", "Account")]
        public void OnUpdateAccount(string key, string data)
        {
            AccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Account
        ///  The holdings of a specific account for a specific asset.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount GetAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PoolAssets.Approvals
        /// </summary>
        [StorageChange("PoolAssets", "Approvals")]
        public void OnUpdateApprovals(string key, string data)
        {
            ApprovalsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Approvals
        ///  Approved balance transfers. First balance is the amount approved for transfer. Second
        ///  is the amount of `T::Currency` reserved for storing this.
        ///  First key is the asset ID, second key is the owner and third key is the delegate.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval GetApprovals(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ApprovalsTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PoolAssets.Metadata
        /// </summary>
        [StorageChange("PoolAssets", "Metadata")]
        public void OnUpdateMetadata(string key, string data)
        {
            MetadataTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Metadata
        ///  Metadata of an asset.
        /// </summary>
        public Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT3 GetMetadata(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MetadataTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT3 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for PoolAssets.NextAssetId
        /// </summary>
        [StorageChange("PoolAssets", "NextAssetId")]
        public void OnUpdateNextAssetId(string data)
        {
            NextAssetIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextAssetId
        ///  The asset ID enforced for the next asset creation, if any present. Otherwise, this storage
        ///  item has no effect.
        /// 
        ///  This can be useful for setting up constraints for IDs of the new assets. For example, by
        ///  providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an
        ///  auto-increment model can be applied to all new asset IDs.
        /// 
        ///  The initial next asset ID can be set using the [`GenesisConfig`] or the
        ///  [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNextAssetId()
        {
            return NextAssetIdTypedStorage.Get();
        }
    }
}
