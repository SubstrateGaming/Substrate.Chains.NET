//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.PolkadotAssetHub.NET.RestService.Generated.Storage;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotAssetHub.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// PoolAssetsController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class PoolAssetsController : ControllerBase
    {
        
        private IPoolAssetsStorage _poolAssetsStorage;
        
        /// <summary>
        /// PoolAssetsController constructor.
        /// </summary>
        public PoolAssetsController(IPoolAssetsStorage poolAssetsStorage)
        {
            _poolAssetsStorage = poolAssetsStorage;
        }
        
        /// <summary>
        /// >> Asset
        ///  Details of an asset.
        /// </summary>
        [HttpGet("Asset")]
        [ProducesResponseType(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetDetails), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage), "AssetParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetAsset(string key)
        {
            return this.Ok(_poolAssetsStorage.GetAsset(key));
        }
        
        /// <summary>
        /// >> Account
        ///  The holdings of a specific account for a specific asset.
        /// </summary>
        [HttpGet("Account")]
        [ProducesResponseType(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetAccount), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage), "AccountParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetAccount(string key)
        {
            return this.Ok(_poolAssetsStorage.GetAccount(key));
        }
        
        /// <summary>
        /// >> Approvals
        ///  Approved balance transfers. First balance is the amount approved for transfer. Second
        ///  is the amount of `T::Currency` reserved for storing this.
        ///  First key is the asset ID, second key is the owner and third key is the delegate.
        /// </summary>
        [HttpGet("Approvals")]
        [ProducesResponseType(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.Approval), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage), "ApprovalsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetApprovals(string key)
        {
            return this.Ok(_poolAssetsStorage.GetApprovals(key));
        }
        
        /// <summary>
        /// >> Metadata
        ///  Metadata of an asset.
        /// </summary>
        [HttpGet("Metadata")]
        [ProducesResponseType(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types.AssetMetadataT3), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotAssetHub.NET.NetApiExt.Generated.Storage.PoolAssetsStorage), "MetadataParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetMetadata(string key)
        {
            return this.Ok(_poolAssetsStorage.GetMetadata(key));
        }
    }
}
