//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Kusama.NET.RestClient.Generated.Clients;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr;
   
   public class BeefyMmrLeafControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet GetTestValue2()
      {
         Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet result;
         result = new Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet();
         result.Id = this.GetTestValueU64();
         result.Len = this.GetTestValueU32();
         result.KeysetCommitment = new Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.KeysetCommitment = this.GetTestValue3();
         return result;
      }
      public Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue3()
      {
         Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Kusama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBeefyAuthorities()
      {
         // Construct new Mockup client to test with.
         BeefyMmrLeafControllerMockupClient mockupClient = new BeefyMmrLeafControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BeefyMmrLeafControllerClient rpcClient = new BeefyMmrLeafControllerClient(_httpClient, subscriptionClient);
         Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeBeefyAuthorities());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBeefyAuthorities(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet rpcResult = await rpcClient.GetBeefyAuthorities();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet GetTestValue5()
      {
         Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet result;
         result = new Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet();
         result.Id = this.GetTestValueU64();
         result.Len = this.GetTestValueU32();
         result.KeysetCommitment = new Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.KeysetCommitment = this.GetTestValue6();
         return result;
      }
      public Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue6()
      {
         Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Kusama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBeefyNextAuthorities()
      {
         // Construct new Mockup client to test with.
         BeefyMmrLeafControllerMockupClient mockupClient = new BeefyMmrLeafControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BeefyMmrLeafControllerClient rpcClient = new BeefyMmrLeafControllerClient(_httpClient, subscriptionClient);
         Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet mockupValue = this.GetTestValue5();


         Assert.IsTrue(await rpcClient.SubscribeBeefyNextAuthorities());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBeefyNextAuthorities(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_consensus_beefy.mmr.BeefyAuthoritySet rpcResult = await rpcClient.GetBeefyNextAuthorities();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
