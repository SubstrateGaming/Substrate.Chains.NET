//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Kusama.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// SocietyController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class SocietyController : ControllerBase
    {
        
        private ISocietyStorage _societyStorage;
        
        /// <summary>
        /// SocietyController constructor.
        /// </summary>
        public SocietyController(ISocietyStorage societyStorage)
        {
            _societyStorage = societyStorage;
        }
        
        /// <summary>
        /// >> Parameters
        ///  The max number of members for the society at one time.
        /// </summary>
        [HttpGet("Parameters")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.GroupParams), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "ParametersParams")]
        public IActionResult GetParameters()
        {
            return this.Ok(_societyStorage.GetParameters());
        }
        
        /// <summary>
        /// >> Pot
        ///  Amount of our account balance that is specifically for the next round's bid(s).
        /// </summary>
        [HttpGet("Pot")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "PotParams")]
        public IActionResult GetPot()
        {
            return this.Ok(_societyStorage.GetPot());
        }
        
        /// <summary>
        /// >> Founder
        ///  The first member.
        /// </summary>
        [HttpGet("Founder")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "FounderParams")]
        public IActionResult GetFounder()
        {
            return this.Ok(_societyStorage.GetFounder());
        }
        
        /// <summary>
        /// >> Head
        ///  The most primary from the most recently approved rank 0 members in the society.
        /// </summary>
        [HttpGet("Head")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "HeadParams")]
        public IActionResult GetHead()
        {
            return this.Ok(_societyStorage.GetHead());
        }
        
        /// <summary>
        /// >> Rules
        ///  A hash of the rules of this society concerning membership. Can only be set once and
        ///  only by the founder.
        /// </summary>
        [HttpGet("Rules")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "RulesParams")]
        public IActionResult GetRules()
        {
            return this.Ok(_societyStorage.GetRules());
        }
        
        /// <summary>
        /// >> Members
        ///  The current members and their rank. Doesn't include `SuspendedMembers`.
        /// </summary>
        [HttpGet("Members")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "MembersParams", typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetMembers(string key)
        {
            return this.Ok(_societyStorage.GetMembers(key));
        }
        
        /// <summary>
        /// >> Payouts
        ///  Information regarding rank-0 payouts, past and future.
        /// </summary>
        [HttpGet("Payouts")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.PayoutRecord), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "PayoutsParams", typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetPayouts(string key)
        {
            return this.Ok(_societyStorage.GetPayouts(key));
        }
        
        /// <summary>
        /// >> MemberCount
        ///  The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)
        /// </summary>
        [HttpGet("MemberCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "MemberCountParams")]
        public IActionResult GetMemberCount()
        {
            return this.Ok(_societyStorage.GetMemberCount());
        }
        
        /// <summary>
        /// >> MemberByIndex
        ///  The current items in `Members` keyed by their unique index. Keys are densely populated
        ///  `0..MemberCount` (does not include `MemberCount`).
        /// </summary>
        [HttpGet("MemberByIndex")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "MemberByIndexParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetMemberByIndex(string key)
        {
            return this.Ok(_societyStorage.GetMemberByIndex(key));
        }
        
        /// <summary>
        /// >> SuspendedMembers
        ///  The set of suspended members, with their old membership record.
        /// </summary>
        [HttpGet("SuspendedMembers")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "SuspendedMembersParams", typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetSuspendedMembers(string key)
        {
            return this.Ok(_societyStorage.GetSuspendedMembers(key));
        }
        
        /// <summary>
        /// >> RoundCount
        ///  The number of rounds which have passed.
        /// </summary>
        [HttpGet("RoundCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "RoundCountParams")]
        public IActionResult GetRoundCount()
        {
            return this.Ok(_societyStorage.GetRoundCount());
        }
        
        /// <summary>
        /// >> Bids
        ///  The current bids, stored ordered by the value of the bid.
        /// </summary>
        [HttpGet("Bids")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "BidsParams")]
        public IActionResult GetBids()
        {
            return this.Ok(_societyStorage.GetBids());
        }
        
        /// <summary>
        /// >> Candidates
        /// </summary>
        [HttpGet("Candidates")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Candidacy), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "CandidatesParams", typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetCandidates(string key)
        {
            return this.Ok(_societyStorage.GetCandidates(key));
        }
        
        /// <summary>
        /// >> Skeptic
        ///  The current skeptic.
        /// </summary>
        [HttpGet("Skeptic")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "SkepticParams")]
        public IActionResult GetSkeptic()
        {
            return this.Ok(_societyStorage.GetSkeptic());
        }
        
        /// <summary>
        /// >> Votes
        ///  Double map from Candidate -> Voter -> (Maybe) Vote.
        /// </summary>
        [HttpGet("Votes")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "VotesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetVotes(string key)
        {
            return this.Ok(_societyStorage.GetVotes(key));
        }
        
        /// <summary>
        /// >> VoteClearCursor
        ///  Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor.
        /// </summary>
        [HttpGet("VoteClearCursor")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "VoteClearCursorParams", typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetVoteClearCursor(string key)
        {
            return this.Ok(_societyStorage.GetVoteClearCursor(key));
        }
        
        /// <summary>
        /// >> NextHead
        ///  At the end of the claim period, this contains the most recently approved members (along with
        ///  their bid and round ID) who is from the most recent round with the lowest bid. They will
        ///  become the new `Head`.
        /// </summary>
        [HttpGet("NextHead")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.IntakeRecord), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "NextHeadParams")]
        public IActionResult GetNextHead()
        {
            return this.Ok(_societyStorage.GetNextHead());
        }
        
        /// <summary>
        /// >> ChallengeRoundCount
        ///  The number of challenge rounds there have been. Used to identify stale DefenderVotes.
        /// </summary>
        [HttpGet("ChallengeRoundCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "ChallengeRoundCountParams")]
        public IActionResult GetChallengeRoundCount()
        {
            return this.Ok(_societyStorage.GetChallengeRoundCount());
        }
        
        /// <summary>
        /// >> Defending
        ///  The defending member currently being challenged, along with a running tally of votes.
        /// </summary>
        [HttpGet("Defending")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Tally>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "DefendingParams")]
        public IActionResult GetDefending()
        {
            return this.Ok(_societyStorage.GetDefending());
        }
        
        /// <summary>
        /// >> DefenderVotes
        ///  Votes for the defender, keyed by challenge round.
        /// </summary>
        [HttpGet("DefenderVotes")]
        [ProducesResponseType(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote), 200)]
        [StorageKeyBuilder(typeof(Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage), "DefenderVotesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetDefenderVotes(string key)
        {
            return this.Ok(_societyStorage.GetDefenderVotes(key));
        }
    }
}
