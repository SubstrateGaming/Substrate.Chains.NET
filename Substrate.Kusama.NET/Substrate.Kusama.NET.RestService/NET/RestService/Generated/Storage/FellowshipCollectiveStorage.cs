//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IFellowshipCollectiveStorage interface definition.
    /// </summary>
    public interface IFellowshipCollectiveStorage : IStorage
    {
        
        /// <summary>
        /// >> MemberCount
        ///  The number of members in the collective who have at least the rank according to the index
        ///  of the vec.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetMemberCount(string key);
        
        /// <summary>
        /// >> Members
        ///  The current members of the collective.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.MemberRecord GetMembers(string key);
        
        /// <summary>
        /// >> IdToIndex
        ///  The index of each ranks's member into the group of members who have at least that rank.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetIdToIndex(string key);
        
        /// <summary>
        /// >> IndexToId
        ///  The members in the collective by index. All indices in the range `0..MemberCount` will
        ///  return `Some`, however a member's index is not guaranteed to remain unchanged over time.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetIndexToId(string key);
        
        /// <summary>
        /// >> Voting
        ///  Votes on a given proposal, if it is ongoing.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.EnumVoteRecord GetVoting(string key);
        
        /// <summary>
        /// >> VotingCleanup
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetVotingCleanup(string key);
    }
    
    /// <summary>
    /// FellowshipCollectiveStorage class definition.
    /// </summary>
    public sealed class FellowshipCollectiveStorage : IFellowshipCollectiveStorage
    {
        
        /// <summary>
        /// _memberCountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _memberCountTypedStorage;
        
        /// <summary>
        /// _membersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.MemberRecord> _membersTypedStorage;
        
        /// <summary>
        /// _idToIndexTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _idToIndexTypedStorage;
        
        /// <summary>
        /// _indexToIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _indexToIdTypedStorage;
        
        /// <summary>
        /// _votingTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.EnumVoteRecord> _votingTypedStorage;
        
        /// <summary>
        /// _votingCleanupTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> _votingCleanupTypedStorage;
        
        /// <summary>
        /// FellowshipCollectiveStorage constructor.
        /// </summary>
        public FellowshipCollectiveStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.MemberCountTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("FellowshipCollective.MemberCount", storageDataProvider, storageChangeDelegates);
            this.MembersTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.MemberRecord>("FellowshipCollective.Members", storageDataProvider, storageChangeDelegates);
            this.IdToIndexTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("FellowshipCollective.IdToIndex", storageDataProvider, storageChangeDelegates);
            this.IndexToIdTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("FellowshipCollective.IndexToId", storageDataProvider, storageChangeDelegates);
            this.VotingTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.EnumVoteRecord>("FellowshipCollective.Voting", storageDataProvider, storageChangeDelegates);
            this.VotingCleanupTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22>("FellowshipCollective.VotingCleanup", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _memberCountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> MemberCountTypedStorage
        {
            get
            {
                return _memberCountTypedStorage;
            }
            set
            {
                _memberCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _membersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.MemberRecord> MembersTypedStorage
        {
            get
            {
                return _membersTypedStorage;
            }
            set
            {
                _membersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _idToIndexTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> IdToIndexTypedStorage
        {
            get
            {
                return _idToIndexTypedStorage;
            }
            set
            {
                _idToIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _indexToIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> IndexToIdTypedStorage
        {
            get
            {
                return _indexToIdTypedStorage;
            }
            set
            {
                _indexToIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _votingTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.EnumVoteRecord> VotingTypedStorage
        {
            get
            {
                return _votingTypedStorage;
            }
            set
            {
                _votingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _votingCleanupTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> VotingCleanupTypedStorage
        {
            get
            {
                return _votingCleanupTypedStorage;
            }
            set
            {
                _votingCleanupTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MemberCountTypedStorage.InitializeAsync("FellowshipCollective", "MemberCount");
            await MembersTypedStorage.InitializeAsync("FellowshipCollective", "Members");
            await IdToIndexTypedStorage.InitializeAsync("FellowshipCollective", "IdToIndex");
            await IndexToIdTypedStorage.InitializeAsync("FellowshipCollective", "IndexToId");
            await VotingTypedStorage.InitializeAsync("FellowshipCollective", "Voting");
            await VotingCleanupTypedStorage.InitializeAsync("FellowshipCollective", "VotingCleanup");
        }
        
        /// <summary>
        /// Implements any storage change for FellowshipCollective.MemberCount
        /// </summary>
        [StorageChange("FellowshipCollective", "MemberCount")]
        public void OnUpdateMemberCount(string key, string data)
        {
            MemberCountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MemberCount
        ///  The number of members in the collective who have at least the rank according to the index
        ///  of the vec.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetMemberCount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MemberCountTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for FellowshipCollective.Members
        /// </summary>
        [StorageChange("FellowshipCollective", "Members")]
        public void OnUpdateMembers(string key, string data)
        {
            MembersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Members
        ///  The current members of the collective.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.MemberRecord GetMembers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MembersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.MemberRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for FellowshipCollective.IdToIndex
        /// </summary>
        [StorageChange("FellowshipCollective", "IdToIndex")]
        public void OnUpdateIdToIndex(string key, string data)
        {
            IdToIndexTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> IdToIndex
        ///  The index of each ranks's member into the group of members who have at least that rank.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetIdToIndex(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (IdToIndexTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for FellowshipCollective.IndexToId
        /// </summary>
        [StorageChange("FellowshipCollective", "IndexToId")]
        public void OnUpdateIndexToId(string key, string data)
        {
            IndexToIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> IndexToId
        ///  The members in the collective by index. All indices in the range `0..MemberCount` will
        ///  return `Some`, however a member's index is not guaranteed to remain unchanged over time.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetIndexToId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (IndexToIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for FellowshipCollective.Voting
        /// </summary>
        [StorageChange("FellowshipCollective", "Voting")]
        public void OnUpdateVoting(string key, string data)
        {
            VotingTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Voting
        ///  Votes on a given proposal, if it is ongoing.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.EnumVoteRecord GetVoting(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (VotingTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_ranked_collective.EnumVoteRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for FellowshipCollective.VotingCleanup
        /// </summary>
        [StorageChange("FellowshipCollective", "VotingCleanup")]
        public void OnUpdateVotingCleanup(string key, string data)
        {
            VotingCleanupTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> VotingCleanup
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetVotingCleanup(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (VotingCleanupTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
