//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IConvictionVotingStorage interface definition.
    /// </summary>
    public interface IConvictionVotingStorage : IStorage
    {
        
        /// <summary>
        /// >> VotingFor
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_conviction_voting.vote.EnumVoting GetVotingFor(string key);
        
        /// <summary>
        /// >> ClassLocksFor
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetClassLocksFor(string key);
    }
    
    /// <summary>
    /// ConvictionVotingStorage class definition.
    /// </summary>
    public sealed class ConvictionVotingStorage : IConvictionVotingStorage
    {
        
        /// <summary>
        /// _votingForTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_conviction_voting.vote.EnumVoting> _votingForTypedStorage;
        
        /// <summary>
        /// _classLocksForTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> _classLocksForTypedStorage;
        
        /// <summary>
        /// ConvictionVotingStorage constructor.
        /// </summary>
        public ConvictionVotingStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.VotingForTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_conviction_voting.vote.EnumVoting>("ConvictionVoting.VotingFor", storageDataProvider, storageChangeDelegates);
            this.ClassLocksForTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22>("ConvictionVoting.ClassLocksFor", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _votingForTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_conviction_voting.vote.EnumVoting> VotingForTypedStorage
        {
            get
            {
                return _votingForTypedStorage;
            }
            set
            {
                _votingForTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _classLocksForTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> ClassLocksForTypedStorage
        {
            get
            {
                return _classLocksForTypedStorage;
            }
            set
            {
                _classLocksForTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await VotingForTypedStorage.InitializeAsync("ConvictionVoting", "VotingFor");
            await ClassLocksForTypedStorage.InitializeAsync("ConvictionVoting", "ClassLocksFor");
        }
        
        /// <summary>
        /// Implements any storage change for ConvictionVoting.VotingFor
        /// </summary>
        [StorageChange("ConvictionVoting", "VotingFor")]
        public void OnUpdateVotingFor(string key, string data)
        {
            VotingForTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> VotingFor
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_conviction_voting.vote.EnumVoting GetVotingFor(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (VotingForTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_conviction_voting.vote.EnumVoting result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ConvictionVoting.ClassLocksFor
        /// </summary>
        [StorageChange("ConvictionVoting", "ClassLocksFor")]
        public void OnUpdateClassLocksFor(string key, string data)
        {
            ClassLocksForTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ClassLocksFor
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetClassLocksFor(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ClassLocksForTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
