//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IConfigurationStorage interface definition.
    /// </summary>
    public interface IConfigurationStorage : IStorage
    {
        
        /// <summary>
        /// >> ActiveConfig
        ///  The active configuration for the current session.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration GetActiveConfig();
        
        /// <summary>
        /// >> PendingConfigs
        ///  Pending configuration changes.
        /// 
        ///  This is a list of configuration changes, each with a session index at which it should
        ///  be applied.
        /// 
        ///  The list is sorted ascending by session index. Also, this list can only contain at most
        ///  2 items: for the next session and for the `scheduled_session`.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration>> GetPendingConfigs();
        
        /// <summary>
        /// >> BypassConsistencyCheck
        ///  If this is set, then the configuration setters will bypass the consistency checks. This
        ///  is meant to be used only as the last resort.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetBypassConsistencyCheck();
    }
    
    /// <summary>
    /// ConfigurationStorage class definition.
    /// </summary>
    public sealed class ConfigurationStorage : IConfigurationStorage
    {
        
        /// <summary>
        /// _activeConfigTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration> _activeConfigTypedStorage;
        
        /// <summary>
        /// _pendingConfigsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration>>> _pendingConfigsTypedStorage;
        
        /// <summary>
        /// _bypassConsistencyCheckTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _bypassConsistencyCheckTypedStorage;
        
        /// <summary>
        /// ConfigurationStorage constructor.
        /// </summary>
        public ConfigurationStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ActiveConfigTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration>("Configuration.ActiveConfig", storageDataProvider, storageChangeDelegates);
            this.PendingConfigsTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration>>>("Configuration.PendingConfigs", storageDataProvider, storageChangeDelegates);
            this.BypassConsistencyCheckTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("Configuration.BypassConsistencyCheck", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _activeConfigTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration> ActiveConfigTypedStorage
        {
            get
            {
                return _activeConfigTypedStorage;
            }
            set
            {
                _activeConfigTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _pendingConfigsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration>>> PendingConfigsTypedStorage
        {
            get
            {
                return _pendingConfigsTypedStorage;
            }
            set
            {
                _pendingConfigsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bypassConsistencyCheckTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> BypassConsistencyCheckTypedStorage
        {
            get
            {
                return _bypassConsistencyCheckTypedStorage;
            }
            set
            {
                _bypassConsistencyCheckTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ActiveConfigTypedStorage.InitializeAsync("Configuration", "ActiveConfig");
            await PendingConfigsTypedStorage.InitializeAsync("Configuration", "PendingConfigs");
            await BypassConsistencyCheckTypedStorage.InitializeAsync("Configuration", "BypassConsistencyCheck");
        }
        
        /// <summary>
        /// Implements any storage change for Configuration.ActiveConfig
        /// </summary>
        [StorageChange("Configuration", "ActiveConfig")]
        public void OnUpdateActiveConfig(string data)
        {
            ActiveConfigTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ActiveConfig
        ///  The active configuration for the current session.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration GetActiveConfig()
        {
            return ActiveConfigTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Configuration.PendingConfigs
        /// </summary>
        [StorageChange("Configuration", "PendingConfigs")]
        public void OnUpdatePendingConfigs(string data)
        {
            PendingConfigsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PendingConfigs
        ///  Pending configuration changes.
        /// 
        ///  This is a list of configuration changes, each with a session index at which it should
        ///  be applied.
        /// 
        ///  The list is sorted ascending by session index. Also, this list can only contain at most
        ///  2 items: for the next session and for the `scheduled_session`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.configuration.HostConfiguration>> GetPendingConfigs()
        {
            return PendingConfigsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Configuration.BypassConsistencyCheck
        /// </summary>
        [StorageChange("Configuration", "BypassConsistencyCheck")]
        public void OnUpdateBypassConsistencyCheck(string data)
        {
            BypassConsistencyCheckTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> BypassConsistencyCheck
        ///  If this is set, then the configuration setters will bypass the consistency checks. This
        ///  is meant to be used only as the last resort.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetBypassConsistencyCheck()
        {
            return BypassConsistencyCheckTypedStorage.Get();
        }
    }
}
