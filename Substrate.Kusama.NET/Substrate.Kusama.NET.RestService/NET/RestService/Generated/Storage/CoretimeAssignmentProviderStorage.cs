//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ICoretimeAssignmentProviderStorage interface definition.
    /// </summary>
    public interface ICoretimeAssignmentProviderStorage : IStorage
    {
        
        /// <summary>
        /// >> CoreSchedules
        ///  Scheduled assignment sets.
        /// 
        ///  Assignments as of the given block number. They will go into state once the block number is
        ///  reached (and replace whatever was in there before).
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule GetCoreSchedules(string key);
        
        /// <summary>
        /// >> CoreDescriptors
        ///  Assignments which are currently active.
        /// 
        ///  They will be picked from `PendingAssignments` once we reach the scheduled block number in
        ///  `PendingAssignments`.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor GetCoreDescriptors(string key);
    }
    
    /// <summary>
    /// CoretimeAssignmentProviderStorage class definition.
    /// </summary>
    public sealed class CoretimeAssignmentProviderStorage : ICoretimeAssignmentProviderStorage
    {
        
        /// <summary>
        /// _coreSchedulesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule> _coreSchedulesTypedStorage;
        
        /// <summary>
        /// _coreDescriptorsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor> _coreDescriptorsTypedStorage;
        
        /// <summary>
        /// CoretimeAssignmentProviderStorage constructor.
        /// </summary>
        public CoretimeAssignmentProviderStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.CoreSchedulesTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule>("CoretimeAssignmentProvider.CoreSchedules", storageDataProvider, storageChangeDelegates);
            this.CoreDescriptorsTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor>("CoretimeAssignmentProvider.CoreDescriptors", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _coreSchedulesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule> CoreSchedulesTypedStorage
        {
            get
            {
                return _coreSchedulesTypedStorage;
            }
            set
            {
                _coreSchedulesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _coreDescriptorsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor> CoreDescriptorsTypedStorage
        {
            get
            {
                return _coreDescriptorsTypedStorage;
            }
            set
            {
                _coreDescriptorsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await CoreSchedulesTypedStorage.InitializeAsync("CoretimeAssignmentProvider", "CoreSchedules");
            await CoreDescriptorsTypedStorage.InitializeAsync("CoretimeAssignmentProvider", "CoreDescriptors");
        }
        
        /// <summary>
        /// Implements any storage change for CoretimeAssignmentProvider.CoreSchedules
        /// </summary>
        [StorageChange("CoretimeAssignmentProvider", "CoreSchedules")]
        public void OnUpdateCoreSchedules(string key, string data)
        {
            CoreSchedulesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CoreSchedules
        ///  Scheduled assignment sets.
        /// 
        ///  Assignments as of the given block number. They will go into state once the block number is
        ///  reached (and replace whatever was in there before).
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule GetCoreSchedules(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CoreSchedulesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CoretimeAssignmentProvider.CoreDescriptors
        /// </summary>
        [StorageChange("CoretimeAssignmentProvider", "CoreDescriptors")]
        public void OnUpdateCoreDescriptors(string key, string data)
        {
            CoreDescriptorsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CoreDescriptors
        ///  Assignments which are currently active.
        /// 
        ///  They will be picked from `PendingAssignments` once we reach the scheduled block number in
        ///  `PendingAssignments`.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor GetCoreDescriptors(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CoreDescriptorsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
