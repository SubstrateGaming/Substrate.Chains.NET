//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IRegistrarStorage interface definition.
    /// </summary>
    public interface IRegistrarStorage : IStorage
    {
        
        /// <summary>
        /// >> PendingSwap
        ///  Pending swap operations.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetPendingSwap(string key);
        
        /// <summary>
        /// >> Paras
        ///  Amount held on deposit for each para and the original depositor.
        /// 
        ///  The given account ID is responsible for registering the code and initial head data, but may only do
        ///  so if it isn't yet registered. (After that, it's up to governance to do so.)
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo GetParas(string key);
        
        /// <summary>
        /// >> NextFreeParaId
        ///  The next free `ParaId`.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetNextFreeParaId();
    }
    
    /// <summary>
    /// RegistrarStorage class definition.
    /// </summary>
    public sealed class RegistrarStorage : IRegistrarStorage
    {
        
        /// <summary>
        /// _pendingSwapTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> _pendingSwapTypedStorage;
        
        /// <summary>
        /// _parasTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo> _parasTypedStorage;
        
        /// <summary>
        /// _nextFreeParaIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> _nextFreeParaIdTypedStorage;
        
        /// <summary>
        /// RegistrarStorage constructor.
        /// </summary>
        public RegistrarStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PendingSwapTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>("Registrar.PendingSwap", storageDataProvider, storageChangeDelegates);
            this.ParasTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo>("Registrar.Paras", storageDataProvider, storageChangeDelegates);
            this.NextFreeParaIdTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>("Registrar.NextFreeParaId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _pendingSwapTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> PendingSwapTypedStorage
        {
            get
            {
                return _pendingSwapTypedStorage;
            }
            set
            {
                _pendingSwapTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _parasTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo> ParasTypedStorage
        {
            get
            {
                return _parasTypedStorage;
            }
            set
            {
                _parasTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextFreeParaIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> NextFreeParaIdTypedStorage
        {
            get
            {
                return _nextFreeParaIdTypedStorage;
            }
            set
            {
                _nextFreeParaIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PendingSwapTypedStorage.InitializeAsync("Registrar", "PendingSwap");
            await ParasTypedStorage.InitializeAsync("Registrar", "Paras");
            await NextFreeParaIdTypedStorage.InitializeAsync("Registrar", "NextFreeParaId");
        }
        
        /// <summary>
        /// Implements any storage change for Registrar.PendingSwap
        /// </summary>
        [StorageChange("Registrar", "PendingSwap")]
        public void OnUpdatePendingSwap(string key, string data)
        {
            PendingSwapTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PendingSwap
        ///  Pending swap operations.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetPendingSwap(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PendingSwapTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Registrar.Paras
        /// </summary>
        [StorageChange("Registrar", "Paras")]
        public void OnUpdateParas(string key, string data)
        {
            ParasTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Paras
        ///  Amount held on deposit for each para and the original depositor.
        /// 
        ///  The given account ID is responsible for registering the code and initial head data, but may only do
        ///  so if it isn't yet registered. (After that, it's up to governance to do so.)
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo GetParas(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ParasTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar.ParaInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Registrar.NextFreeParaId
        /// </summary>
        [StorageChange("Registrar", "NextFreeParaId")]
        public void OnUpdateNextFreeParaId(string data)
        {
            NextFreeParaIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextFreeParaId
        ///  The next free `ParaId`.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetNextFreeParaId()
        {
            return NextFreeParaIdTypedStorage.Get();
        }
    }
}
