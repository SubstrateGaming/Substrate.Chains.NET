//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBeefyStorage interface definition.
    /// </summary>
    public interface IBeefyStorage : IStorage
    {
        
        /// <summary>
        /// >> Authorities
        ///  The current authorities set
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49 GetAuthorities();
        
        /// <summary>
        /// >> ValidatorSetId
        ///  The current validator set id
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetValidatorSetId();
        
        /// <summary>
        /// >> NextAuthorities
        ///  Authorities set scheduled to be used with the next session
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49 GetNextAuthorities();
        
        /// <summary>
        /// >> SetIdSession
        ///  A mapping from BEEFY set ID to the index of the *most recent* session for which its
        ///  members were responsible.
        /// 
        ///  This is only used for validating equivocation proofs. An equivocation proof must
        ///  contains a key-ownership proof for a given session, therefore we need a way to tie
        ///  together sessions and BEEFY set ids, i.e. we need to validate that a validator
        ///  was the owner of a given key on a given session, and what the active set ID was
        ///  during that session.
        /// 
        ///  TWOX-NOTE: `ValidatorSetId` is not under user control.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetSetIdSession(string key);
        
        /// <summary>
        /// >> GenesisBlock
        ///  Block number where BEEFY consensus is enabled/started.
        ///  By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively
        ///  restarted from the newly set block number.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> GetGenesisBlock();
    }
    
    /// <summary>
    /// BeefyStorage class definition.
    /// </summary>
    public sealed class BeefyStorage : IBeefyStorage
    {
        
        /// <summary>
        /// _authoritiesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49> _authoritiesTypedStorage;
        
        /// <summary>
        /// _validatorSetIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> _validatorSetIdTypedStorage;
        
        /// <summary>
        /// _nextAuthoritiesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49> _nextAuthoritiesTypedStorage;
        
        /// <summary>
        /// _setIdSessionTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _setIdSessionTypedStorage;
        
        /// <summary>
        /// _genesisBlockTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>> _genesisBlockTypedStorage;
        
        /// <summary>
        /// BeefyStorage constructor.
        /// </summary>
        public BeefyStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AuthoritiesTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49>("Beefy.Authorities", storageDataProvider, storageChangeDelegates);
            this.ValidatorSetIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64>("Beefy.ValidatorSetId", storageDataProvider, storageChangeDelegates);
            this.NextAuthoritiesTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49>("Beefy.NextAuthorities", storageDataProvider, storageChangeDelegates);
            this.SetIdSessionTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Beefy.SetIdSession", storageDataProvider, storageChangeDelegates);
            this.GenesisBlockTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>>("Beefy.GenesisBlock", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _authoritiesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49> AuthoritiesTypedStorage
        {
            get
            {
                return _authoritiesTypedStorage;
            }
            set
            {
                _authoritiesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _validatorSetIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> ValidatorSetIdTypedStorage
        {
            get
            {
                return _validatorSetIdTypedStorage;
            }
            set
            {
                _validatorSetIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextAuthoritiesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49> NextAuthoritiesTypedStorage
        {
            get
            {
                return _nextAuthoritiesTypedStorage;
            }
            set
            {
                _nextAuthoritiesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _setIdSessionTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> SetIdSessionTypedStorage
        {
            get
            {
                return _setIdSessionTypedStorage;
            }
            set
            {
                _setIdSessionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _genesisBlockTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>> GenesisBlockTypedStorage
        {
            get
            {
                return _genesisBlockTypedStorage;
            }
            set
            {
                _genesisBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AuthoritiesTypedStorage.InitializeAsync("Beefy", "Authorities");
            await ValidatorSetIdTypedStorage.InitializeAsync("Beefy", "ValidatorSetId");
            await NextAuthoritiesTypedStorage.InitializeAsync("Beefy", "NextAuthorities");
            await SetIdSessionTypedStorage.InitializeAsync("Beefy", "SetIdSession");
            await GenesisBlockTypedStorage.InitializeAsync("Beefy", "GenesisBlock");
        }
        
        /// <summary>
        /// Implements any storage change for Beefy.Authorities
        /// </summary>
        [StorageChange("Beefy", "Authorities")]
        public void OnUpdateAuthorities(string data)
        {
            AuthoritiesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Authorities
        ///  The current authorities set
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49 GetAuthorities()
        {
            return AuthoritiesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Beefy.ValidatorSetId
        /// </summary>
        [StorageChange("Beefy", "ValidatorSetId")]
        public void OnUpdateValidatorSetId(string data)
        {
            ValidatorSetIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ValidatorSetId
        ///  The current validator set id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetValidatorSetId()
        {
            return ValidatorSetIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Beefy.NextAuthorities
        /// </summary>
        [StorageChange("Beefy", "NextAuthorities")]
        public void OnUpdateNextAuthorities(string data)
        {
            NextAuthoritiesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextAuthorities
        ///  Authorities set scheduled to be used with the next session
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT49 GetNextAuthorities()
        {
            return NextAuthoritiesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Beefy.SetIdSession
        /// </summary>
        [StorageChange("Beefy", "SetIdSession")]
        public void OnUpdateSetIdSession(string key, string data)
        {
            SetIdSessionTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SetIdSession
        ///  A mapping from BEEFY set ID to the index of the *most recent* session for which its
        ///  members were responsible.
        /// 
        ///  This is only used for validating equivocation proofs. An equivocation proof must
        ///  contains a key-ownership proof for a given session, therefore we need a way to tie
        ///  together sessions and BEEFY set ids, i.e. we need to validate that a validator
        ///  was the owner of a given key on a given session, and what the active set ID was
        ///  during that session.
        /// 
        ///  TWOX-NOTE: `ValidatorSetId` is not under user control.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetSetIdSession(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SetIdSessionTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Beefy.GenesisBlock
        /// </summary>
        [StorageChange("Beefy", "GenesisBlock")]
        public void OnUpdateGenesisBlock(string data)
        {
            GenesisBlockTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> GenesisBlock
        ///  Block number where BEEFY consensus is enabled/started.
        ///  By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively
        ///  restarted from the newly set block number.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> GetGenesisBlock()
        {
            return GenesisBlockTypedStorage.Get();
        }
    }
}
