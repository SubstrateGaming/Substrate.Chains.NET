//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ISocietyStorage interface definition.
    /// </summary>
    public interface ISocietyStorage : IStorage
    {
        
        /// <summary>
        /// >> Parameters
        ///  The max number of members for the society at one time.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.GroupParams GetParameters();
        
        /// <summary>
        /// >> Pot
        ///  Amount of our account balance that is specifically for the next round's bid(s).
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetPot();
        
        /// <summary>
        /// >> Founder
        ///  The first member.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetFounder();
        
        /// <summary>
        /// >> Head
        ///  The most primary from the most recently approved rank 0 members in the society.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetHead();
        
        /// <summary>
        /// >> Rules
        ///  A hash of the rules of this society concerning membership. Can only be set once and
        ///  only by the founder.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetRules();
        
        /// <summary>
        /// >> Members
        ///  The current members and their rank. Doesn't include `SuspendedMembers`.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord GetMembers(string key);
        
        /// <summary>
        /// >> Payouts
        ///  Information regarding rank-0 payouts, past and future.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.PayoutRecord GetPayouts(string key);
        
        /// <summary>
        /// >> MemberCount
        ///  The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetMemberCount();
        
        /// <summary>
        /// >> MemberByIndex
        ///  The current items in `Members` keyed by their unique index. Keys are densely populated
        ///  `0..MemberCount` (does not include `MemberCount`).
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetMemberByIndex(string key);
        
        /// <summary>
        /// >> SuspendedMembers
        ///  The set of suspended members, with their old membership record.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord GetSuspendedMembers(string key);
        
        /// <summary>
        /// >> RoundCount
        ///  The number of rounds which have passed.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetRoundCount();
        
        /// <summary>
        /// >> Bids
        ///  The current bids, stored ordered by the value of the bid.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31 GetBids();
        
        /// <summary>
        /// >> Candidates
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Candidacy GetCandidates(string key);
        
        /// <summary>
        /// >> Skeptic
        ///  The current skeptic.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetSkeptic();
        
        /// <summary>
        /// >> Votes
        ///  Double map from Candidate -> Voter -> (Maybe) Vote.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote GetVotes(string key);
        
        /// <summary>
        /// >> VoteClearCursor
        ///  Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32 GetVoteClearCursor(string key);
        
        /// <summary>
        /// >> NextHead
        ///  At the end of the claim period, this contains the most recently approved members (along with
        ///  their bid and round ID) who is from the most recent round with the lowest bid. They will
        ///  become the new `Head`.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.IntakeRecord GetNextHead();
        
        /// <summary>
        /// >> ChallengeRoundCount
        ///  The number of challenge rounds there have been. Used to identify stale DefenderVotes.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetChallengeRoundCount();
        
        /// <summary>
        /// >> Defending
        ///  The defending member currently being challenged, along with a running tally of votes.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Tally> GetDefending();
        
        /// <summary>
        /// >> DefenderVotes
        ///  Votes for the defender, keyed by challenge round.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote GetDefenderVotes(string key);
    }
    
    /// <summary>
    /// SocietyStorage class definition.
    /// </summary>
    public sealed class SocietyStorage : ISocietyStorage
    {
        
        /// <summary>
        /// _parametersTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.GroupParams> _parametersTypedStorage;
        
        /// <summary>
        /// _potTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _potTypedStorage;
        
        /// <summary>
        /// _founderTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _founderTypedStorage;
        
        /// <summary>
        /// _headTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _headTypedStorage;
        
        /// <summary>
        /// _rulesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256> _rulesTypedStorage;
        
        /// <summary>
        /// _membersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord> _membersTypedStorage;
        
        /// <summary>
        /// _payoutsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.PayoutRecord> _payoutsTypedStorage;
        
        /// <summary>
        /// _memberCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _memberCountTypedStorage;
        
        /// <summary>
        /// _memberByIndexTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _memberByIndexTypedStorage;
        
        /// <summary>
        /// _suspendedMembersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord> _suspendedMembersTypedStorage;
        
        /// <summary>
        /// _roundCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _roundCountTypedStorage;
        
        /// <summary>
        /// _bidsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> _bidsTypedStorage;
        
        /// <summary>
        /// _candidatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Candidacy> _candidatesTypedStorage;
        
        /// <summary>
        /// _skepticTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _skepticTypedStorage;
        
        /// <summary>
        /// _votesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote> _votesTypedStorage;
        
        /// <summary>
        /// _voteClearCursorTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32> _voteClearCursorTypedStorage;
        
        /// <summary>
        /// _nextHeadTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.IntakeRecord> _nextHeadTypedStorage;
        
        /// <summary>
        /// _challengeRoundCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _challengeRoundCountTypedStorage;
        
        /// <summary>
        /// _defendingTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Tally>> _defendingTypedStorage;
        
        /// <summary>
        /// _defenderVotesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote> _defenderVotesTypedStorage;
        
        /// <summary>
        /// SocietyStorage constructor.
        /// </summary>
        public SocietyStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ParametersTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.GroupParams>("Society.Parameters", storageDataProvider, storageChangeDelegates);
            this.PotTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Society.Pot", storageDataProvider, storageChangeDelegates);
            this.FounderTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Society.Founder", storageDataProvider, storageChangeDelegates);
            this.HeadTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Society.Head", storageDataProvider, storageChangeDelegates);
            this.RulesTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256>("Society.Rules", storageDataProvider, storageChangeDelegates);
            this.MembersTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord>("Society.Members", storageDataProvider, storageChangeDelegates);
            this.PayoutsTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.PayoutRecord>("Society.Payouts", storageDataProvider, storageChangeDelegates);
            this.MemberCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Society.MemberCount", storageDataProvider, storageChangeDelegates);
            this.MemberByIndexTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Society.MemberByIndex", storageDataProvider, storageChangeDelegates);
            this.SuspendedMembersTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord>("Society.SuspendedMembers", storageDataProvider, storageChangeDelegates);
            this.RoundCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Society.RoundCount", storageDataProvider, storageChangeDelegates);
            this.BidsTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31>("Society.Bids", storageDataProvider, storageChangeDelegates);
            this.CandidatesTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Candidacy>("Society.Candidates", storageDataProvider, storageChangeDelegates);
            this.SkepticTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Society.Skeptic", storageDataProvider, storageChangeDelegates);
            this.VotesTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote>("Society.Votes", storageDataProvider, storageChangeDelegates);
            this.VoteClearCursorTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32>("Society.VoteClearCursor", storageDataProvider, storageChangeDelegates);
            this.NextHeadTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.IntakeRecord>("Society.NextHead", storageDataProvider, storageChangeDelegates);
            this.ChallengeRoundCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Society.ChallengeRoundCount", storageDataProvider, storageChangeDelegates);
            this.DefendingTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Tally>>("Society.Defending", storageDataProvider, storageChangeDelegates);
            this.DefenderVotesTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote>("Society.DefenderVotes", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _parametersTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.GroupParams> ParametersTypedStorage
        {
            get
            {
                return _parametersTypedStorage;
            }
            set
            {
                _parametersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _potTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> PotTypedStorage
        {
            get
            {
                return _potTypedStorage;
            }
            set
            {
                _potTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _founderTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> FounderTypedStorage
        {
            get
            {
                return _founderTypedStorage;
            }
            set
            {
                _founderTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _headTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> HeadTypedStorage
        {
            get
            {
                return _headTypedStorage;
            }
            set
            {
                _headTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _rulesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256> RulesTypedStorage
        {
            get
            {
                return _rulesTypedStorage;
            }
            set
            {
                _rulesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _membersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord> MembersTypedStorage
        {
            get
            {
                return _membersTypedStorage;
            }
            set
            {
                _membersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _payoutsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.PayoutRecord> PayoutsTypedStorage
        {
            get
            {
                return _payoutsTypedStorage;
            }
            set
            {
                _payoutsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _memberCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> MemberCountTypedStorage
        {
            get
            {
                return _memberCountTypedStorage;
            }
            set
            {
                _memberCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _memberByIndexTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> MemberByIndexTypedStorage
        {
            get
            {
                return _memberByIndexTypedStorage;
            }
            set
            {
                _memberByIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _suspendedMembersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord> SuspendedMembersTypedStorage
        {
            get
            {
                return _suspendedMembersTypedStorage;
            }
            set
            {
                _suspendedMembersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _roundCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> RoundCountTypedStorage
        {
            get
            {
                return _roundCountTypedStorage;
            }
            set
            {
                _roundCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bidsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> BidsTypedStorage
        {
            get
            {
                return _bidsTypedStorage;
            }
            set
            {
                _bidsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Candidacy> CandidatesTypedStorage
        {
            get
            {
                return _candidatesTypedStorage;
            }
            set
            {
                _candidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _skepticTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> SkepticTypedStorage
        {
            get
            {
                return _skepticTypedStorage;
            }
            set
            {
                _skepticTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _votesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote> VotesTypedStorage
        {
            get
            {
                return _votesTypedStorage;
            }
            set
            {
                _votesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _voteClearCursorTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32> VoteClearCursorTypedStorage
        {
            get
            {
                return _voteClearCursorTypedStorage;
            }
            set
            {
                _voteClearCursorTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextHeadTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.IntakeRecord> NextHeadTypedStorage
        {
            get
            {
                return _nextHeadTypedStorage;
            }
            set
            {
                _nextHeadTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _challengeRoundCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> ChallengeRoundCountTypedStorage
        {
            get
            {
                return _challengeRoundCountTypedStorage;
            }
            set
            {
                _challengeRoundCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _defendingTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Tally>> DefendingTypedStorage
        {
            get
            {
                return _defendingTypedStorage;
            }
            set
            {
                _defendingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _defenderVotesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote> DefenderVotesTypedStorage
        {
            get
            {
                return _defenderVotesTypedStorage;
            }
            set
            {
                _defenderVotesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ParametersTypedStorage.InitializeAsync("Society", "Parameters");
            await PotTypedStorage.InitializeAsync("Society", "Pot");
            await FounderTypedStorage.InitializeAsync("Society", "Founder");
            await HeadTypedStorage.InitializeAsync("Society", "Head");
            await RulesTypedStorage.InitializeAsync("Society", "Rules");
            await MembersTypedStorage.InitializeAsync("Society", "Members");
            await PayoutsTypedStorage.InitializeAsync("Society", "Payouts");
            await MemberCountTypedStorage.InitializeAsync("Society", "MemberCount");
            await MemberByIndexTypedStorage.InitializeAsync("Society", "MemberByIndex");
            await SuspendedMembersTypedStorage.InitializeAsync("Society", "SuspendedMembers");
            await RoundCountTypedStorage.InitializeAsync("Society", "RoundCount");
            await BidsTypedStorage.InitializeAsync("Society", "Bids");
            await CandidatesTypedStorage.InitializeAsync("Society", "Candidates");
            await SkepticTypedStorage.InitializeAsync("Society", "Skeptic");
            await VotesTypedStorage.InitializeAsync("Society", "Votes");
            await VoteClearCursorTypedStorage.InitializeAsync("Society", "VoteClearCursor");
            await NextHeadTypedStorage.InitializeAsync("Society", "NextHead");
            await ChallengeRoundCountTypedStorage.InitializeAsync("Society", "ChallengeRoundCount");
            await DefendingTypedStorage.InitializeAsync("Society", "Defending");
            await DefenderVotesTypedStorage.InitializeAsync("Society", "DefenderVotes");
        }
        
        /// <summary>
        /// Implements any storage change for Society.Parameters
        /// </summary>
        [StorageChange("Society", "Parameters")]
        public void OnUpdateParameters(string data)
        {
            ParametersTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Parameters
        ///  The max number of members for the society at one time.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.GroupParams GetParameters()
        {
            return ParametersTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Pot
        /// </summary>
        [StorageChange("Society", "Pot")]
        public void OnUpdatePot(string data)
        {
            PotTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Pot
        ///  Amount of our account balance that is specifically for the next round's bid(s).
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetPot()
        {
            return PotTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Founder
        /// </summary>
        [StorageChange("Society", "Founder")]
        public void OnUpdateFounder(string data)
        {
            FounderTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Founder
        ///  The first member.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetFounder()
        {
            return FounderTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Head
        /// </summary>
        [StorageChange("Society", "Head")]
        public void OnUpdateHead(string data)
        {
            HeadTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Head
        ///  The most primary from the most recently approved rank 0 members in the society.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetHead()
        {
            return HeadTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Rules
        /// </summary>
        [StorageChange("Society", "Rules")]
        public void OnUpdateRules(string data)
        {
            RulesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Rules
        ///  A hash of the rules of this society concerning membership. Can only be set once and
        ///  only by the founder.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetRules()
        {
            return RulesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Members
        /// </summary>
        [StorageChange("Society", "Members")]
        public void OnUpdateMembers(string key, string data)
        {
            MembersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Members
        ///  The current members and their rank. Doesn't include `SuspendedMembers`.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord GetMembers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MembersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Society.Payouts
        /// </summary>
        [StorageChange("Society", "Payouts")]
        public void OnUpdatePayouts(string key, string data)
        {
            PayoutsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Payouts
        ///  Information regarding rank-0 payouts, past and future.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.PayoutRecord GetPayouts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PayoutsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.PayoutRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Society.MemberCount
        /// </summary>
        [StorageChange("Society", "MemberCount")]
        public void OnUpdateMemberCount(string data)
        {
            MemberCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MemberCount
        ///  The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetMemberCount()
        {
            return MemberCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.MemberByIndex
        /// </summary>
        [StorageChange("Society", "MemberByIndex")]
        public void OnUpdateMemberByIndex(string key, string data)
        {
            MemberByIndexTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MemberByIndex
        ///  The current items in `Members` keyed by their unique index. Keys are densely populated
        ///  `0..MemberCount` (does not include `MemberCount`).
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetMemberByIndex(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MemberByIndexTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Society.SuspendedMembers
        /// </summary>
        [StorageChange("Society", "SuspendedMembers")]
        public void OnUpdateSuspendedMembers(string key, string data)
        {
            SuspendedMembersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SuspendedMembers
        ///  The set of suspended members, with their old membership record.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord GetSuspendedMembers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SuspendedMembersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.MemberRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Society.RoundCount
        /// </summary>
        [StorageChange("Society", "RoundCount")]
        public void OnUpdateRoundCount(string data)
        {
            RoundCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> RoundCount
        ///  The number of rounds which have passed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetRoundCount()
        {
            return RoundCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Bids
        /// </summary>
        [StorageChange("Society", "Bids")]
        public void OnUpdateBids(string data)
        {
            BidsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Bids
        ///  The current bids, stored ordered by the value of the bid.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31 GetBids()
        {
            return BidsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Candidates
        /// </summary>
        [StorageChange("Society", "Candidates")]
        public void OnUpdateCandidates(string key, string data)
        {
            CandidatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Candidates
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Candidacy GetCandidates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CandidatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Candidacy result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Society.Skeptic
        /// </summary>
        [StorageChange("Society", "Skeptic")]
        public void OnUpdateSkeptic(string data)
        {
            SkepticTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Skeptic
        ///  The current skeptic.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetSkeptic()
        {
            return SkepticTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Votes
        /// </summary>
        [StorageChange("Society", "Votes")]
        public void OnUpdateVotes(string key, string data)
        {
            VotesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Votes
        ///  Double map from Candidate -> Voter -> (Maybe) Vote.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote GetVotes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (VotesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Society.VoteClearCursor
        /// </summary>
        [StorageChange("Society", "VoteClearCursor")]
        public void OnUpdateVoteClearCursor(string key, string data)
        {
            VoteClearCursorTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> VoteClearCursor
        ///  Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32 GetVoteClearCursor(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (VoteClearCursorTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Society.NextHead
        /// </summary>
        [StorageChange("Society", "NextHead")]
        public void OnUpdateNextHead(string data)
        {
            NextHeadTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextHead
        ///  At the end of the claim period, this contains the most recently approved members (along with
        ///  their bid and round ID) who is from the most recent round with the lowest bid. They will
        ///  become the new `Head`.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.IntakeRecord GetNextHead()
        {
            return NextHeadTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.ChallengeRoundCount
        /// </summary>
        [StorageChange("Society", "ChallengeRoundCount")]
        public void OnUpdateChallengeRoundCount(string data)
        {
            ChallengeRoundCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ChallengeRoundCount
        ///  The number of challenge rounds there have been. Used to identify stale DefenderVotes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetChallengeRoundCount()
        {
            return ChallengeRoundCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.Defending
        /// </summary>
        [StorageChange("Society", "Defending")]
        public void OnUpdateDefending(string data)
        {
            DefendingTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Defending
        ///  The defending member currently being challenged, along with a running tally of votes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Tally> GetDefending()
        {
            return DefendingTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Society.DefenderVotes
        /// </summary>
        [StorageChange("Society", "DefenderVotes")]
        public void OnUpdateDefenderVotes(string key, string data)
        {
            DefenderVotesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DefenderVotes
        ///  Votes for the defender, keyed by challenge round.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote GetDefenderVotes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DefenderVotesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society.Vote result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
