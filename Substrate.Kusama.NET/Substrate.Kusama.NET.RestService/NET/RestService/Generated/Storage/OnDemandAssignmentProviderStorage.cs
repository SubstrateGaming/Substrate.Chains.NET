//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IOnDemandAssignmentProviderStorage interface definition.
    /// </summary>
    public interface IOnDemandAssignmentProviderStorage : IStorage
    {
        
        /// <summary>
        /// >> SpotTraffic
        ///  Keeps track of the multiplier used to calculate the current spot price for the on demand
        ///  assigner.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetSpotTraffic();
        
        /// <summary>
        /// >> OnDemandQueue
        ///  The order storage entry. Uses a VecDeque to be able to push to the front of the
        ///  queue from the scheduler on session boundaries.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.EnqueuedOrder> GetOnDemandQueue();
        
        /// <summary>
        /// >> ParaIdAffinity
        ///  Maps a `ParaId` to `CoreIndex` and keeps track of how many assignments the scheduler has in
        ///  it's lookahead. Keeping track of this affinity prevents parallel execution of the same
        ///  `ParaId` on two or more `CoreIndex`es.
        /// </summary>
        Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.CoreAffinityCount GetParaIdAffinity(string key);
    }
    
    /// <summary>
    /// OnDemandAssignmentProviderStorage class definition.
    /// </summary>
    public sealed class OnDemandAssignmentProviderStorage : IOnDemandAssignmentProviderStorage
    {
        
        /// <summary>
        /// _spotTrafficTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> _spotTrafficTypedStorage;
        
        /// <summary>
        /// _onDemandQueueTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.EnqueuedOrder>> _onDemandQueueTypedStorage;
        
        /// <summary>
        /// _paraIdAffinityTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.CoreAffinityCount> _paraIdAffinityTypedStorage;
        
        /// <summary>
        /// OnDemandAssignmentProviderStorage constructor.
        /// </summary>
        public OnDemandAssignmentProviderStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.SpotTrafficTypedStorage = new TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>("OnDemandAssignmentProvider.SpotTraffic", storageDataProvider, storageChangeDelegates);
            this.OnDemandQueueTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.EnqueuedOrder>>("OnDemandAssignmentProvider.OnDemandQueue", storageDataProvider, storageChangeDelegates);
            this.ParaIdAffinityTypedStorage = new TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.CoreAffinityCount>("OnDemandAssignmentProvider.ParaIdAffinity", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _spotTrafficTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> SpotTrafficTypedStorage
        {
            get
            {
                return _spotTrafficTypedStorage;
            }
            set
            {
                _spotTrafficTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _onDemandQueueTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.EnqueuedOrder>> OnDemandQueueTypedStorage
        {
            get
            {
                return _onDemandQueueTypedStorage;
            }
            set
            {
                _onDemandQueueTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _paraIdAffinityTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.CoreAffinityCount> ParaIdAffinityTypedStorage
        {
            get
            {
                return _paraIdAffinityTypedStorage;
            }
            set
            {
                _paraIdAffinityTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await SpotTrafficTypedStorage.InitializeAsync("OnDemandAssignmentProvider", "SpotTraffic");
            await OnDemandQueueTypedStorage.InitializeAsync("OnDemandAssignmentProvider", "OnDemandQueue");
            await ParaIdAffinityTypedStorage.InitializeAsync("OnDemandAssignmentProvider", "ParaIdAffinity");
        }
        
        /// <summary>
        /// Implements any storage change for OnDemandAssignmentProvider.SpotTraffic
        /// </summary>
        [StorageChange("OnDemandAssignmentProvider", "SpotTraffic")]
        public void OnUpdateSpotTraffic(string data)
        {
            SpotTrafficTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SpotTraffic
        ///  Keeps track of the multiplier used to calculate the current spot price for the on demand
        ///  assigner.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetSpotTraffic()
        {
            return SpotTrafficTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for OnDemandAssignmentProvider.OnDemandQueue
        /// </summary>
        [StorageChange("OnDemandAssignmentProvider", "OnDemandQueue")]
        public void OnUpdateOnDemandQueue(string data)
        {
            OnDemandQueueTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> OnDemandQueue
        ///  The order storage entry. Uses a VecDeque to be able to push to the front of the
        ///  queue from the scheduler on session boundaries.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.EnqueuedOrder> GetOnDemandQueue()
        {
            return OnDemandQueueTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for OnDemandAssignmentProvider.ParaIdAffinity
        /// </summary>
        [StorageChange("OnDemandAssignmentProvider", "ParaIdAffinity")]
        public void OnUpdateParaIdAffinity(string key, string data)
        {
            ParaIdAffinityTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ParaIdAffinity
        ///  Maps a `ParaId` to `CoreIndex` and keeps track of how many assignments the scheduler has in
        ///  it's lookahead. Keeping track of this affinity prevents parallel execution of the same
        ///  `ParaId` on two or more `CoreIndex`es.
        /// </summary>
        public Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.CoreAffinityCount GetParaIdAffinity(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ParaIdAffinityTypedStorage.Dictionary.TryGetValue(key, out Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_on_demand.CoreAffinityCount result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
