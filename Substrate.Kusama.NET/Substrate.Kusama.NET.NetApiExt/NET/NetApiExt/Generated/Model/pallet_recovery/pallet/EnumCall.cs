//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_recovery.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> as_recovered
        /// Send a call through a recovered account.
        /// 
        /// The dispatch origin for this call must be _Signed_ and registered to
        /// be able to make calls on behalf of the recovered account.
        /// 
        /// Parameters:
        /// - `account`: The recovered account you want to make a call on-behalf-of.
        /// - `call`: The call you want to make with the recovered account.
        /// </summary>
        as_recovered = 0,
        
        /// <summary>
        /// >> set_recovered
        /// Allow ROOT to bypass the recovery process and set an a rescuer account
        /// for a lost account directly.
        /// 
        /// The dispatch origin for this call must be _ROOT_.
        /// 
        /// Parameters:
        /// - `lost`: The "lost account" to be recovered.
        /// - `rescuer`: The "rescuer account" which can call as the lost account.
        /// </summary>
        set_recovered = 1,
        
        /// <summary>
        /// >> create_recovery
        /// Create a recovery configuration for your account. This makes your account recoverable.
        /// 
        /// Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance
        /// will be reserved for storing the recovery configuration. This deposit is returned
        /// in full when the user calls `remove_recovery`.
        /// 
        /// The dispatch origin for this call must be _Signed_.
        /// 
        /// Parameters:
        /// - `friends`: A list of friends you trust to vouch for recovery attempts. Should be
        ///   ordered and contain no duplicate values.
        /// - `threshold`: The number of friends that must vouch for a recovery attempt before the
        ///   account can be recovered. Should be less than or equal to the length of the list of
        ///   friends.
        /// - `delay_period`: The number of blocks after a recovery attempt is initialized that
        ///   needs to pass before the account can be recovered.
        /// </summary>
        create_recovery = 2,
        
        /// <summary>
        /// >> initiate_recovery
        /// Initiate the process for recovering a recoverable account.
        /// 
        /// Payment: `RecoveryDeposit` balance will be reserved for initiating the
        /// recovery process. This deposit will always be repatriated to the account
        /// trying to be recovered. See `close_recovery`.
        /// 
        /// The dispatch origin for this call must be _Signed_.
        /// 
        /// Parameters:
        /// - `account`: The lost account that you want to recover. This account needs to be
        ///   recoverable (i.e. have a recovery configuration).
        /// </summary>
        initiate_recovery = 3,
        
        /// <summary>
        /// >> vouch_recovery
        /// Allow a "friend" of a recoverable account to vouch for an active recovery
        /// process for that account.
        /// 
        /// The dispatch origin for this call must be _Signed_ and must be a "friend"
        /// for the recoverable account.
        /// 
        /// Parameters:
        /// - `lost`: The lost account that you want to recover.
        /// - `rescuer`: The account trying to rescue the lost account that you want to vouch for.
        /// 
        /// The combination of these two parameters must point to an active recovery
        /// process.
        /// </summary>
        vouch_recovery = 4,
        
        /// <summary>
        /// >> claim_recovery
        /// Allow a successful rescuer to claim their recovered account.
        /// 
        /// The dispatch origin for this call must be _Signed_ and must be a "rescuer"
        /// who has successfully completed the account recovery process: collected
        /// `threshold` or more vouches, waited `delay_period` blocks since initiation.
        /// 
        /// Parameters:
        /// - `account`: The lost account that you want to claim has been successfully recovered by
        ///   you.
        /// </summary>
        claim_recovery = 5,
        
        /// <summary>
        /// >> close_recovery
        /// As the controller of a recoverable account, close an active recovery
        /// process for your account.
        /// 
        /// Payment: By calling this function, the recoverable account will receive
        /// the recovery deposit `RecoveryDeposit` placed by the rescuer.
        /// 
        /// The dispatch origin for this call must be _Signed_ and must be a
        /// recoverable account with an active recovery process for it.
        /// 
        /// Parameters:
        /// - `rescuer`: The account trying to rescue this recoverable account.
        /// </summary>
        close_recovery = 6,
        
        /// <summary>
        /// >> remove_recovery
        /// Remove the recovery process for your account. Recovered accounts are still accessible.
        /// 
        /// NOTE: The user must make sure to call `close_recovery` on all active
        /// recovery attempts before calling this function else it will fail.
        /// 
        /// Payment: By calling this function the recoverable account will unreserve
        /// their recovery configuration deposit.
        /// (`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)
        /// 
        /// The dispatch origin for this call must be _Signed_ and must be a
        /// recoverable account (i.e. has a recovery configuration).
        /// </summary>
        remove_recovery = 7,
        
        /// <summary>
        /// >> cancel_recovered
        /// Cancel the ability to use `as_recovered` for `account`.
        /// 
        /// The dispatch origin for this call must be _Signed_ and registered to
        /// be able to make calls on behalf of the recovered account.
        /// 
        /// Parameters:
        /// - `account`: The recovered account you are able to call on-behalf-of.
        /// </summary>
        cancel_recovered = 8,
    }
    
    /// <summary>
    /// >> 184 - Variant[pallet_recovery.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Kusama.NET.NetApiExt.Generated.Model.staging_kusama_runtime.EnumRuntimeCall>>(Call.as_recovered);
				AddTypeDecoder<BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>>(Call.set_recovered);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>, Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.create_recovery);
				AddTypeDecoder<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>(Call.initiate_recovery);
				AddTypeDecoder<BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>>(Call.vouch_recovery);
				AddTypeDecoder<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>(Call.claim_recovery);
				AddTypeDecoder<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>(Call.close_recovery);
				AddTypeDecoder<BaseVoid>(Call.remove_recovery);
				AddTypeDecoder<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress>(Call.cancel_recovered);
        }
    }
}
