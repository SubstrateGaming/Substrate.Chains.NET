//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> CoretimeAssignmentProviderStorage
    /// </summary>
    public sealed class CoretimeAssignmentProviderStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CoretimeAssignmentProviderStorage Constructor
        /// </summary>
        public CoretimeAssignmentProviderStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CoretimeAssignmentProvider", "CoreSchedules"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox256}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v6.CoreIndex>), typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CoretimeAssignmentProvider", "CoreDescriptors"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox256}, typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v6.CoreIndex), typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor)));
        }
        
        /// <summary>
        /// >> CoreSchedulesParams
        ///  Scheduled assignment sets.
        /// 
        ///  Assignments as of the given block number. They will go into state once the block number is
        ///  reached (and replace whatever was in there before).
        /// </summary>
        public static string CoreSchedulesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v6.CoreIndex> key)
        {
            return RequestGenerator.GetStorage("CoretimeAssignmentProvider", "CoreSchedules", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox256}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CoreSchedulesDefault
        /// Default value as hex string
        /// </summary>
        public static string CoreSchedulesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CoreSchedules
        ///  Scheduled assignment sets.
        /// 
        ///  Assignments as of the given block number. They will go into state once the block number is
        ///  reached (and replace whatever was in there before).
        /// </summary>
        public async Task<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule> CoreSchedules(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v6.CoreIndex> key, string blockhash, CancellationToken token)
        {
            string parameters = CoretimeAssignmentProviderStorage.CoreSchedulesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.Schedule>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CoreDescriptorsParams
        ///  Assignments which are currently active.
        /// 
        ///  They will be picked from `PendingAssignments` once we reach the scheduled block number in
        ///  `PendingAssignments`.
        /// </summary>
        public static string CoreDescriptorsParams(Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v6.CoreIndex key)
        {
            return RequestGenerator.GetStorage("CoretimeAssignmentProvider", "CoreDescriptors", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox256}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CoreDescriptorsDefault
        /// Default value as hex string
        /// </summary>
        public static string CoreDescriptorsDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> CoreDescriptors
        ///  Assignments which are currently active.
        /// 
        ///  They will be picked from `PendingAssignments` once we reach the scheduled block number in
        ///  `PendingAssignments`.
        /// </summary>
        public async Task<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor> CoreDescriptors(Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v6.CoreIndex key, string blockhash, CancellationToken token)
        {
            string parameters = CoretimeAssignmentProviderStorage.CoreDescriptorsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.assigner_coretime.CoreDescriptor>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CoretimeAssignmentProviderCalls
    /// </summary>
    public sealed class CoretimeAssignmentProviderCalls
    {
    }
    
    /// <summary>
    /// >> CoretimeAssignmentProviderConstants
    /// </summary>
    public sealed class CoretimeAssignmentProviderConstants
    {
    }
    
    /// <summary>
    /// >> CoretimeAssignmentProviderErrors
    /// </summary>
    public enum CoretimeAssignmentProviderErrors
    {
        
        /// <summary>
        /// >> AssignmentsEmpty
        /// </summary>
        AssignmentsEmpty,
        
        /// <summary>
        /// >> OverScheduled
        /// Assignments together exceeded 57600.
        /// </summary>
        OverScheduled,
        
        /// <summary>
        /// >> UnderScheduled
        /// Assignments together less than 57600
        /// </summary>
        UnderScheduled,
        
        /// <summary>
        /// >> DisallowedInsert
        /// assign_core is only allowed to append new assignments at the end of already existing
        /// ones.
        /// </summary>
        DisallowedInsert,
        
        /// <summary>
        /// >> DuplicateInsert
        /// Tried to insert a schedule for the same core and block number as an existing schedule
        /// </summary>
        DuplicateInsert,
        
        /// <summary>
        /// >> AssignmentsNotSorted
        /// Tried to add an unsorted set of assignments
        /// </summary>
        AssignmentsNotSorted,
    }
}
