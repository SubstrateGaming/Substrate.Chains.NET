//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Kusama.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class RecoveryStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public RecoveryStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Recovery", "Recoverable"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_recovery.RecoveryConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Recovery", "ActiveRecoveries"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_recovery.ActiveRecovery)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Recovery", "Proxy"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
        }
        
        /// <summary>
        /// >> RecoverableParams
        ///  The set of recoverable accounts and their recovery configuration.
        /// </summary>
        public static string RecoverableParams(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Recovery", "Recoverable", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RecoverableDefault
        /// Default value as hex string
        /// </summary>
        public static string RecoverableDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Recoverable
        ///  The set of recoverable accounts and their recovery configuration.
        /// </summary>
        public async Task<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_recovery.RecoveryConfig> Recoverable(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = RecoveryStorage.RecoverableParams(key);
            var result = await _client.GetStorageAsync<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_recovery.RecoveryConfig>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ActiveRecoveriesParams
        ///  Active recovery attempts.
        /// 
        ///  First account is the account to be recovered, and the second account
        ///  is the user trying to recover the account.
        /// </summary>
        public static string ActiveRecoveriesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Recovery", "ActiveRecoveries", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ActiveRecoveriesDefault
        /// Default value as hex string
        /// </summary>
        public static string ActiveRecoveriesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ActiveRecoveries
        ///  Active recovery attempts.
        /// 
        ///  First account is the account to be recovered, and the second account
        ///  is the user trying to recover the account.
        /// </summary>
        public async Task<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_recovery.ActiveRecovery> ActiveRecoveries(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, CancellationToken token)
        {
            string parameters = RecoveryStorage.ActiveRecoveriesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_recovery.ActiveRecovery>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ProxyParams
        ///  The list of allowed proxy accounts.
        /// 
        ///  Map from the user who can access it to the recovered account.
        /// </summary>
        public static string ProxyParams(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Recovery", "Proxy", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProxyDefault
        /// Default value as hex string
        /// </summary>
        public static string ProxyDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Proxy
        ///  The list of allowed proxy accounts.
        /// 
        ///  Map from the user who can access it to the recovered account.
        /// </summary>
        public async Task<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> Proxy(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = RecoveryStorage.ProxyParams(key);
            var result = await _client.GetStorageAsync<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, token);
            return result;
        }
    }
    
    public sealed class RecoveryCalls
    {
        
        /// <summary>
        /// >> as_recovered
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AsRecovered(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress account, Substrate.Kusama.NET.NetApiExt.Generated.Model.staging_kusama_runtime.EnumRuntimeCall call)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(call.Encode());
            return new Method(27, "Recovery", 0, "as_recovered", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_recovered
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRecovered(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress lost, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress rescuer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(lost.Encode());
            byteArray.AddRange(rescuer.Encode());
            return new Method(27, "Recovery", 1, "set_recovered", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_recovery
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateRecovery(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> friends, Substrate.NetApi.Model.Types.Primitive.U16 threshold, Substrate.NetApi.Model.Types.Primitive.U32 delay_period)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(friends.Encode());
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(delay_period.Encode());
            return new Method(27, "Recovery", 2, "create_recovery", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> initiate_recovery
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InitiateRecovery(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(27, "Recovery", 3, "initiate_recovery", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vouch_recovery
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method VouchRecovery(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress lost, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress rescuer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(lost.Encode());
            byteArray.AddRange(rescuer.Encode());
            return new Method(27, "Recovery", 4, "vouch_recovery", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_recovery
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRecovery(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(27, "Recovery", 5, "claim_recovery", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close_recovery
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CloseRecovery(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress rescuer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rescuer.Encode());
            return new Method(27, "Recovery", 6, "close_recovery", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_recovery
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveRecovery()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(27, "Recovery", 7, "remove_recovery", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_recovered
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelRecovered(Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(27, "Recovery", 8, "cancel_recovered", byteArray.ToArray());
        }
    }
    
    public sealed class RecoveryConstants
    {
        
        /// <summary>
        /// >> ConfigDepositBase
        ///  The base amount of currency needed to reserve for creating a recovery configuration.
        /// 
        ///  This is held for an additional storage item whose value size is
        ///  `2 + sizeof(BlockNumber, Balance)` bytes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ConfigDepositBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x04821BCE260000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> FriendDepositFactor
        ///  The amount of currency needed per additional user when creating a recovery
        ///  configuration.
        /// 
        ///  This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage
        ///  value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 FriendDepositFactor()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x9A2669E1030000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxFriends
        ///  The maximum amount of friends allowed in a recovery configuration.
        /// 
        ///  NOTE: The threshold programmed in this Pallet uses u16, so it does
        ///  not really make sense to have a limit here greater than u16::MAX.
        ///  But also, that is a lot more than you should probably set this value
        ///  to anyway...
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFriends()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x09000000");
            return result;
        }
        
        /// <summary>
        /// >> RecoveryDeposit
        ///  The base amount of currency needed to reserve for starting a recovery.
        /// 
        ///  This is primarily held for deterring malicious recovery attempts, and should
        ///  have a value large enough that a bad actor would choose not to place this
        ///  deposit. It also acts to fund additional storage item whose value size is
        ///  `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable
        ///  threshold.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RecoveryDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x04821BCE260000000000000000000000");
            return result;
        }
    }
    
    public enum RecoveryErrors
    {
        
        /// <summary>
        /// >> NotAllowed
        /// User is not allowed to make a call on behalf of this account
        /// </summary>
        NotAllowed,
        
        /// <summary>
        /// >> ZeroThreshold
        /// Threshold must be greater than zero
        /// </summary>
        ZeroThreshold,
        
        /// <summary>
        /// >> NotEnoughFriends
        /// Friends list must be greater than zero and threshold
        /// </summary>
        NotEnoughFriends,
        
        /// <summary>
        /// >> MaxFriends
        /// Friends list must be less than max friends
        /// </summary>
        MaxFriends,
        
        /// <summary>
        /// >> NotSorted
        /// Friends list must be sorted and free of duplicates
        /// </summary>
        NotSorted,
        
        /// <summary>
        /// >> NotRecoverable
        /// This account is not set up for recovery
        /// </summary>
        NotRecoverable,
        
        /// <summary>
        /// >> AlreadyRecoverable
        /// This account is already set up for recovery
        /// </summary>
        AlreadyRecoverable,
        
        /// <summary>
        /// >> AlreadyStarted
        /// A recovery process has already started for this account
        /// </summary>
        AlreadyStarted,
        
        /// <summary>
        /// >> NotStarted
        /// A recovery process has not started for this rescuer
        /// </summary>
        NotStarted,
        
        /// <summary>
        /// >> NotFriend
        /// This account is not a friend who can vouch
        /// </summary>
        NotFriend,
        
        /// <summary>
        /// >> DelayPeriod
        /// The friend must wait until the delay period to vouch for this recovery
        /// </summary>
        DelayPeriod,
        
        /// <summary>
        /// >> AlreadyVouched
        /// This user has already vouched for this recovery
        /// </summary>
        AlreadyVouched,
        
        /// <summary>
        /// >> Threshold
        /// The threshold for recovering this account has not been met
        /// </summary>
        Threshold,
        
        /// <summary>
        /// >> StillActive
        /// There are still active recovery attempts that need to be closed
        /// </summary>
        StillActive,
        
        /// <summary>
        /// >> AlreadyProxy
        /// This account is already set up for recovery
        /// </summary>
        AlreadyProxy,
        
        /// <summary>
        /// >> BadState
        /// Some internal state is broken.
        /// </summary>
        BadState,
    }
}
