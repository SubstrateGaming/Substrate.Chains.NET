//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_parachain.primitives;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_common.paras_registrar;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class RegistrarControllerMockupClient : MockupBaseClient, IRegistrarControllerMockupClient
   {
      private HttpClient _httpClient;
      public RegistrarControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetPendingSwap(Id value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Registrar/PendingSwap", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.RegistrarStorage.PendingSwapParams(key));
      }
      public async Task<bool> SetParas(ParaInfo value, Id key)
      {
         return await SendMockupRequestAsync(_httpClient, "Registrar/Paras", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.RegistrarStorage.ParasParams(key));
      }
      public async Task<bool> SetNextFreeParaId(Id value)
      {
         return await SendMockupRequestAsync(_httpClient, "Registrar/NextFreeParaId", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.RegistrarStorage.NextFreeParaIdParams());
      }
   }
}
