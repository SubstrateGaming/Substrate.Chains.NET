//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_conviction_voting.vote;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class ConvictionVotingControllerMockupClient : MockupBaseClient, IConvictionVotingControllerMockupClient
   {
      private HttpClient _httpClient;
      public ConvictionVotingControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetVotingFor(EnumVoting value, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16> key)
      {
         return await SendMockupRequestAsync(_httpClient, "ConvictionVoting/VotingFor", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.ConvictionVotingStorage.VotingForParams(key));
      }
      public async Task<bool> SetClassLocksFor(BoundedVecT17 value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "ConvictionVoting/ClassLocksFor", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.ConvictionVotingStorage.ClassLocksForParams(key));
      }
   }
}
