//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_runtime_parachains.scheduler.pallet;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Kusama.NET.NetApiExt.Generated.Types.Base;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class ParaSchedulerControllerMockupClient : MockupBaseClient, IParaSchedulerControllerMockupClient
   {
      private HttpClient _httpClient;
      public ParaSchedulerControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetValidatorGroups(BaseVec<BaseVec<Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v6.ValidatorIndex>> value)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaScheduler/ValidatorGroups", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParaSchedulerStorage.ValidatorGroupsParams());
      }
      public async Task<bool> SetAvailabilityCores(BaseVec<EnumCoreOccupied> value)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaScheduler/AvailabilityCores", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParaSchedulerStorage.AvailabilityCoresParams());
      }
      public async Task<bool> SetSessionStartBlock(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaScheduler/SessionStartBlock", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParaSchedulerStorage.SessionStartBlockParams());
      }
      public async Task<bool> SetClaimQueue(BTreeMapT4 value)
      {
         return await SendMockupRequestAsync(_httpClient, "ParaScheduler/ClaimQueue", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParaSchedulerStorage.ClaimQueueParams());
      }
   }
}
