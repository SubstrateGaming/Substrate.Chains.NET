//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_elections_phragmen;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class PhragmenElectionControllerMockupClient : MockupBaseClient, IPhragmenElectionControllerMockupClient
   {
      private HttpClient _httpClient;
      public PhragmenElectionControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetMembers(BaseVec<SeatHolder> value)
      {
         return await SendMockupRequestAsync(_httpClient, "PhragmenElection/Members", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.PhragmenElectionStorage.MembersParams());
      }
      public async Task<bool> SetRunnersUp(BaseVec<SeatHolder> value)
      {
         return await SendMockupRequestAsync(_httpClient, "PhragmenElection/RunnersUp", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.PhragmenElectionStorage.RunnersUpParams());
      }
      public async Task<bool> SetCandidates(BaseVec<BaseTuple<Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, U128>> value)
      {
         return await SendMockupRequestAsync(_httpClient, "PhragmenElection/Candidates", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.PhragmenElectionStorage.CandidatesParams());
      }
      public async Task<bool> SetElectionRounds(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "PhragmenElection/ElectionRounds", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.PhragmenElectionStorage.ElectionRoundsParams());
      }
      public async Task<bool> SetVoting(Voter value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "PhragmenElection/Voting", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.PhragmenElectionStorage.VotingParams(key));
      }
   }
}
