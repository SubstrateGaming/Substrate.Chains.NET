//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_balances.types;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class NisCounterpartBalancesControllerMockupClient : MockupBaseClient, INisCounterpartBalancesControllerMockupClient
   {
      private HttpClient _httpClient;
      public NisCounterpartBalancesControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetTotalIssuance(U128 value)
      {
         return await SendMockupRequestAsync(_httpClient, "NisCounterpartBalances/TotalIssuance", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.NisCounterpartBalancesStorage.TotalIssuanceParams());
      }
      public async Task<bool> SetInactiveIssuance(U128 value)
      {
         return await SendMockupRequestAsync(_httpClient, "NisCounterpartBalances/InactiveIssuance", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.NisCounterpartBalancesStorage.InactiveIssuanceParams());
      }
      public async Task<bool> SetAccount(AccountData value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "NisCounterpartBalances/Account", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.NisCounterpartBalancesStorage.AccountParams(key));
      }
      public async Task<bool> SetLocks(WeakBoundedVecT6 value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "NisCounterpartBalances/Locks", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.NisCounterpartBalancesStorage.LocksParams(key));
      }
      public async Task<bool> SetReserves(BoundedVecT42 value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "NisCounterpartBalances/Reserves", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.NisCounterpartBalancesStorage.ReservesParams(key));
      }
      public async Task<bool> SetHolds(BoundedVecT43 value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "NisCounterpartBalances/Holds", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.NisCounterpartBalancesStorage.HoldsParams(key));
      }
      public async Task<bool> SetFreezes(BoundedVecT44 value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "NisCounterpartBalances/Freezes", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.NisCounterpartBalancesStorage.FreezesParams(key));
      }
   }
}
