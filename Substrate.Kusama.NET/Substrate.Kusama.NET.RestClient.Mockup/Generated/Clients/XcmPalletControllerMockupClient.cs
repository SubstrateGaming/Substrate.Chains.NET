//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_xcm.pallet;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_weights.weight_v2;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.staging_xcm.v4;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class XcmPalletControllerMockupClient : MockupBaseClient, IXcmPalletControllerMockupClient
   {
      private HttpClient _httpClient;
      public XcmPalletControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetQueryCounter(U64 value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/QueryCounter", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.QueryCounterParams());
      }
      public async Task<bool> SetQueries(EnumQueryStatus value, U64 key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/Queries", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.QueriesParams(key));
      }
      public async Task<bool> SetAssetTraps(U32 value, Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/AssetTraps", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.AssetTrapsParams(key));
      }
      public async Task<bool> SetSafeXcmVersion(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/SafeXcmVersion", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.SafeXcmVersionParams());
      }
      public async Task<bool> SetSupportedVersion(U32 value, BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.xcm.EnumVersionedLocation> key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/SupportedVersion", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.SupportedVersionParams(key));
      }
      public async Task<bool> SetVersionNotifiers(U64 value, BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.xcm.EnumVersionedLocation> key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/VersionNotifiers", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.VersionNotifiersParams(key));
      }
      public async Task<bool> SetVersionNotifyTargets(BaseTuple<U64, Weight, U32> value, BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.xcm.EnumVersionedLocation> key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/VersionNotifyTargets", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.VersionNotifyTargetsParams(key));
      }
      public async Task<bool> SetVersionDiscoveryQueue(BoundedVecT45 value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/VersionDiscoveryQueue", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.VersionDiscoveryQueueParams());
      }
      public async Task<bool> SetCurrentMigration(EnumVersionMigrationStage value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/CurrentMigration", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.CurrentMigrationParams());
      }
      public async Task<bool> SetRemoteLockedFungibles(RemoteLockedFungibleRecord value, BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Kusama.NET.NetApiExt.Generated.Model.xcm.EnumVersionedAssetId> key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/RemoteLockedFungibles", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.RemoteLockedFungiblesParams(key));
      }
      public async Task<bool> SetLockedFungibles(BoundedVecT47 value, Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/LockedFungibles", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.LockedFungiblesParams(key));
      }
      public async Task<bool> SetXcmExecutionSuspended(Bool value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/XcmExecutionSuspended", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.XcmExecutionSuspendedParams());
      }
      public async Task<bool> SetShouldRecordXcm(Bool value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/ShouldRecordXcm", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.ShouldRecordXcmParams());
      }
      public async Task<bool> SetRecordedXcm(XcmT1 value)
      {
         return await SendMockupRequestAsync(_httpClient, "XcmPallet/RecordedXcm", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.XcmPalletStorage.RecordedXcmParams());
      }
   }
}
