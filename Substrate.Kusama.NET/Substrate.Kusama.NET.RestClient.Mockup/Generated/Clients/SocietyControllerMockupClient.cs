//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Kusama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class SocietyControllerMockupClient : MockupBaseClient, ISocietyControllerMockupClient
   {
      private HttpClient _httpClient;
      public SocietyControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetParameters(GroupParams value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Parameters", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.ParametersParams());
      }
      public async Task<bool> SetPot(U128 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Pot", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.PotParams());
      }
      public async Task<bool> SetFounder(AccountId32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Founder", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.FounderParams());
      }
      public async Task<bool> SetHead(AccountId32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Head", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.HeadParams());
      }
      public async Task<bool> SetRules(H256 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Rules", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.RulesParams());
      }
      public async Task<bool> SetMembers(MemberRecord value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Members", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.MembersParams(key));
      }
      public async Task<bool> SetPayouts(PayoutRecord value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Payouts", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.PayoutsParams(key));
      }
      public async Task<bool> SetMemberCount(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/MemberCount", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.MemberCountParams());
      }
      public async Task<bool> SetMemberByIndex(AccountId32 value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/MemberByIndex", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.MemberByIndexParams(key));
      }
      public async Task<bool> SetSuspendedMembers(MemberRecord value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/SuspendedMembers", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.SuspendedMembersParams(key));
      }
      public async Task<bool> SetRoundCount(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/RoundCount", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.RoundCountParams());
      }
      public async Task<bool> SetBids(BoundedVecT28 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Bids", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.BidsParams());
      }
      public async Task<bool> SetCandidates(Candidacy value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Candidates", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.CandidatesParams(key));
      }
      public async Task<bool> SetSkeptic(AccountId32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Skeptic", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.SkepticParams());
      }
      public async Task<bool> SetVotes(Vote value, BaseTuple<AccountId32, AccountId32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Votes", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.VotesParams(key));
      }
      public async Task<bool> SetVoteClearCursor(BoundedVecT29 value, AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/VoteClearCursor", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.VoteClearCursorParams(key));
      }
      public async Task<bool> SetNextHead(IntakeRecord value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/NextHead", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.NextHeadParams());
      }
      public async Task<bool> SetChallengeRoundCount(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/ChallengeRoundCount", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.ChallengeRoundCountParams());
      }
      public async Task<bool> SetDefending(BaseTuple<AccountId32, AccountId32, Tally> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/Defending", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.DefendingParams());
      }
      public async Task<bool> SetDefenderVotes(Vote value, BaseTuple<U32, AccountId32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "Society/DefenderVotes", value.Encode(), Substrate.Kusama.NET.NetApiExt.Generated.Storage.SocietyStorage.DefenderVotesParams(key));
      }
   }
}
