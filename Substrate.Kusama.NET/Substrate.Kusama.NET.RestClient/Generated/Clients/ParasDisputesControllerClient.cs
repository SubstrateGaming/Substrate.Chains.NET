//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_primitives.v5;
   using Substrate.Kusama.NET.NetApiExt.Generated.Types.Base;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Kusama.NET.RestClient.Generated.Interfaces;
   
   public sealed class ParasDisputesControllerClient : BaseClient, IParasDisputesControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public ParasDisputesControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<U32> GetLastPrunedSession()
      {
         return await SendRequestAsync<U32>(_httpClient, "parasdisputes/lastprunedsession");
      }
      public async Task<bool> SubscribeLastPrunedSession()
      {
         return await _subscriptionClient.SubscribeAsync("ParasDisputes.LastPrunedSession");
      }
      public async Task<DisputeState> GetDisputes(BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
      {
         return await SendRequestAsync<DisputeState>(_httpClient, "parasdisputes/disputes", Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParasDisputesStorage.DisputesParams(key));
      }
      public async Task<bool> SubscribeDisputes(BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
      {
         return await _subscriptionClient.SubscribeAsync("ParasDisputes.Disputes", Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParasDisputesStorage.DisputesParams(key));
      }
      public async Task<BTreeSet> GetBackersOnDisputes(BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
      {
         return await SendRequestAsync<BTreeSet>(_httpClient, "parasdisputes/backersondisputes", Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParasDisputesStorage.BackersOnDisputesParams(key));
      }
      public async Task<bool> SubscribeBackersOnDisputes(BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
      {
         return await _subscriptionClient.SubscribeAsync("ParasDisputes.BackersOnDisputes", Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParasDisputesStorage.BackersOnDisputesParams(key));
      }
      public async Task<U32> GetIncluded(BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
      {
         return await SendRequestAsync<U32>(_httpClient, "parasdisputes/included", Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParasDisputesStorage.IncludedParams(key));
      }
      public async Task<bool> SubscribeIncluded(BaseTuple<U32, Substrate.Kusama.NET.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
      {
         return await _subscriptionClient.SubscribeAsync("ParasDisputes.Included", Substrate.Kusama.NET.NetApiExt.Generated.Storage.ParasDisputesStorage.IncludedParams(key));
      }
      public async Task<BaseOpt<U32>> GetFrozen()
      {
         return await SendRequestAsync<BaseOpt<U32>>(_httpClient, "parasdisputes/frozen");
      }
      public async Task<bool> SubscribeFrozen()
      {
         return await _subscriptionClient.SubscribeAsync("ParasDisputes.Frozen");
      }
   }
}
