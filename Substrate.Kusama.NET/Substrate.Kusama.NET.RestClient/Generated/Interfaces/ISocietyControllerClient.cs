//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Kusama.NET.RestClient.Generated.Interfaces
{
   using System;
   using System.Threading.Tasks;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.pallet_society;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.Kusama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.NetApi.Model.Types.Base;
   
   public interface ISocietyControllerClient
   {
      Task<GroupParams> GetParameters();
      Task<bool> SubscribeParameters();
      Task<U128> GetPot();
      Task<bool> SubscribePot();
      Task<AccountId32> GetFounder();
      Task<bool> SubscribeFounder();
      Task<AccountId32> GetHead();
      Task<bool> SubscribeHead();
      Task<H256> GetRules();
      Task<bool> SubscribeRules();
      Task<MemberRecord> GetMembers(AccountId32 key);
      Task<bool> SubscribeMembers(AccountId32 key);
      Task<PayoutRecord> GetPayouts(AccountId32 key);
      Task<bool> SubscribePayouts(AccountId32 key);
      Task<U32> GetMemberCount();
      Task<bool> SubscribeMemberCount();
      Task<AccountId32> GetMemberByIndex(U32 key);
      Task<bool> SubscribeMemberByIndex(U32 key);
      Task<MemberRecord> GetSuspendedMembers(AccountId32 key);
      Task<bool> SubscribeSuspendedMembers(AccountId32 key);
      Task<U32> GetRoundCount();
      Task<bool> SubscribeRoundCount();
      Task<BoundedVecT25> GetBids();
      Task<bool> SubscribeBids();
      Task<Candidacy> GetCandidates(AccountId32 key);
      Task<bool> SubscribeCandidates(AccountId32 key);
      Task<AccountId32> GetSkeptic();
      Task<bool> SubscribeSkeptic();
      Task<Vote> GetVotes(BaseTuple<AccountId32, AccountId32> key);
      Task<bool> SubscribeVotes(BaseTuple<AccountId32, AccountId32> key);
      Task<BoundedVecT26> GetVoteClearCursor(AccountId32 key);
      Task<bool> SubscribeVoteClearCursor(AccountId32 key);
      Task<IntakeRecord> GetNextHead();
      Task<bool> SubscribeNextHead();
      Task<U32> GetChallengeRoundCount();
      Task<bool> SubscribeChallengeRoundCount();
      Task<BaseTuple<AccountId32, AccountId32, Tally>> GetDefending();
      Task<bool> SubscribeDefending();
      Task<Vote> GetDefenderVotes(BaseTuple<U32, AccountId32> key);
      Task<bool> SubscribeDefenderVotes(BaseTuple<U32, AccountId32> key);
   }
}
