//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class RandomnessControllerMockupClient : MockupBaseClient, IRandomnessControllerMockupClient
   {
      private HttpClient _httpClient;
      public RandomnessControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetRequests(RequestState value, U64 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/Requests", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RequestsParams(key));
      }
      public async Task<bool> SetRequestCount(U64 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/RequestCount", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RequestCountParams());
      }
      public async Task<bool> SetLocalVrfOutput(BaseOpt<H256> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/LocalVrfOutput", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.LocalVrfOutputParams());
      }
      public async Task<bool> SetRelayEpoch(U64 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/RelayEpoch", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RelayEpochParams());
      }
      public async Task<bool> SetInherentIncluded(BaseTuple value)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/InherentIncluded", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.InherentIncludedParams());
      }
      public async Task<bool> SetNotFirstBlock(BaseTuple value)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/NotFirstBlock", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.NotFirstBlockParams());
      }
      public async Task<bool> SetRandomnessResults(RandomnessResult value, EnumRequestType key)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/RandomnessResults", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RandomnessResultsParams(key));
      }
      public async Task<bool> SetPreviousLocalVrfOutput(H256 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Randomness/PreviousLocalVrfOutput", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.PreviousLocalVrfOutputParams());
      }
   }
}
