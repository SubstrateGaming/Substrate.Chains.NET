//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class MultiTokenControllerMockupClient : MockupBaseClient, IMultiTokenControllerMockupClient
   {
      private HttpClient _httpClient;
      public MultiTokenControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetCollection(CollectionDetails value, U128 key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/Collection", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.CollectionParams(key));
      }
      public async Task<bool> SetOwnershipAcceptance(U128 value, AccountId20 key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/OwnershipAcceptance", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.OwnershipAcceptanceParams(key));
      }
      public async Task<bool> SetAccount(AccountData value, BaseTuple<AccountId20, U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/Account", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.AccountParams(key));
      }
      public async Task<bool> SetHolds(BoundedVecT29 value, BaseTuple<AccountId20, U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/Holds", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.HoldsParams(key));
      }
      public async Task<bool> SetNftOwners(AccountId20 value, BaseTuple<U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/NftOwners", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.NftOwnersParams(key));
      }
      public async Task<bool> SetCollectionAccount(BaseTuple value, BaseTuple<AccountId20, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/CollectionAccount", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.CollectionAccountParams(key));
      }
      public async Task<bool> SetCollectionRoleOf(BitFlagsT3 value, BaseTuple<U128, AccountId20> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/CollectionRoleOf", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.CollectionRoleOfParams(key));
      }
      public async Task<bool> SetItem(ItemDetails value, BaseTuple<U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/Item", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.ItemParams(key));
      }
      public async Task<bool> SetCollectionMetadataOf(CollectionMetadata value, U128 key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/CollectionMetadataOf", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.CollectionMetadataOfParams(key));
      }
      public async Task<bool> SetItemMetadataOf(ItemMetadata value, BaseTuple<U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/ItemMetadataOf", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.ItemMetadataOfParams(key));
      }
      public async Task<bool> SetAttribute(BaseTuple<BoundedVecT6, AttributeDeposit> value, BaseTuple<U128, BaseOpt<U128>, EnumAttributeNamespace, BoundedVecT5> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/Attribute", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.AttributeParams(key));
      }
      public async Task<bool> SetItemAttributesApprovalsOf(BoundedBTreeSet value, BaseTuple<U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/ItemAttributesApprovalsOf", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.ItemAttributesApprovalsOfParams(key));
      }
      public async Task<bool> SetNextCollectionId(U128 value)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/NextCollectionId", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.NextCollectionIdParams());
      }
      public async Task<bool> SetNextItemId(U128 value, U128 key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/NextItemId", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.NextItemIdParams(key));
      }
      public async Task<bool> SetCollectionConfigOf(CollectionConfig value, U128 key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/CollectionConfigOf", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.CollectionConfigOfParams(key));
      }
      public async Task<bool> SetItemConfigOf(ItemConfig value, BaseTuple<U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/ItemConfigOf", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.ItemConfigOfParams(key));
      }
      public async Task<bool> SetApprovals(BaseTuple<BaseOpt<U32>, U128> value, BaseTuple<U128, U128, AccountId20, AccountId20> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/Approvals", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.ApprovalsParams(key));
      }
      public async Task<bool> SetApprovalsForAll(Bool value, BaseTuple<AccountId20, AccountId20> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/ApprovalsForAll", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.ApprovalsForAllParams(key));
      }
      public async Task<bool> SetSoulboundPermissionedDestination(Bool value, BaseTuple<AccountId20, U128, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/SoulboundPermissionedDestination", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.SoulboundPermissionedDestinationParams(key));
      }
      public async Task<bool> SetSoulboundGlobalPermissioned(AllowedAsSourceOrDest value, BaseTuple<AccountId20, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "MultiToken/SoulboundGlobalPermissioned", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.MultiTokenStorage.SoulboundGlobalPermissionedParams(key));
      }
   }
}
