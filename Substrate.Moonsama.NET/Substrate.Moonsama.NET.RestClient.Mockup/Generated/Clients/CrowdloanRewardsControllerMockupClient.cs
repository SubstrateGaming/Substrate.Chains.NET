//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class CrowdloanRewardsControllerMockupClient : MockupBaseClient, ICrowdloanRewardsControllerMockupClient
   {
      private HttpClient _httpClient;
      public CrowdloanRewardsControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetAccountsPayable(RewardInfo value, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/AccountsPayable", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.AccountsPayableParams(key));
      }
      public async Task<bool> SetClaimedRelayChainIds(BaseTuple value, Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 key)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/ClaimedRelayChainIds", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.ClaimedRelayChainIdsParams(key));
      }
      public async Task<bool> SetUnassociatedContributions(RewardInfo value, Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 key)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/UnassociatedContributions", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.UnassociatedContributionsParams(key));
      }
      public async Task<bool> SetInitialized(Bool value)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/Initialized", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.InitializedParams());
      }
      public async Task<bool> SetInitRelayBlock(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/InitRelayBlock", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.InitRelayBlockParams());
      }
      public async Task<bool> SetEndRelayBlock(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/EndRelayBlock", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.EndRelayBlockParams());
      }
      public async Task<bool> SetInitializedRewardAmount(U128 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/InitializedRewardAmount", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.InitializedRewardAmountParams());
      }
      public async Task<bool> SetTotalContributors(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "CrowdloanRewards/TotalContributors", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.CrowdloanRewardsStorage.TotalContributorsParams());
      }
   }
}
