//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class AssetManagerControllerMockupClient : MockupBaseClient, IAssetManagerControllerMockupClient
   {
      private HttpClient _httpClient;
      public AssetManagerControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetAssetIdType(EnumAssetType value, U128 key)
      {
         return await SendMockupRequestAsync(_httpClient, "AssetManager/AssetIdType", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage.AssetIdTypeParams(key));
      }
      public async Task<bool> SetAssetTypeId(U128 value, EnumAssetType key)
      {
         return await SendMockupRequestAsync(_httpClient, "AssetManager/AssetTypeId", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage.AssetTypeIdParams(key));
      }
      public async Task<bool> SetAssetTypeUnitsPerSecond(U128 value, EnumAssetType key)
      {
         return await SendMockupRequestAsync(_httpClient, "AssetManager/AssetTypeUnitsPerSecond", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage.AssetTypeUnitsPerSecondParams(key));
      }
      public async Task<bool> SetLocalAssetCounter(U128 value)
      {
         return await SendMockupRequestAsync(_httpClient, "AssetManager/LocalAssetCounter", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage.LocalAssetCounterParams());
      }
      public async Task<bool> SetLocalAssetDeposit(AssetInfo value, U128 key)
      {
         return await SendMockupRequestAsync(_httpClient, "AssetManager/LocalAssetDeposit", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage.LocalAssetDepositParams(key));
      }
      public async Task<bool> SetSupportedFeePaymentAssets(BaseVec<EnumAssetType> value)
      {
         return await SendMockupRequestAsync(_httpClient, "AssetManager/SupportedFeePaymentAssets", value.Encode(), Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage.SupportedFeePaymentAssetsParams());
      }
   }
}
