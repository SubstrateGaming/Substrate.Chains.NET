//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Moonsama.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class MultiTokenStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public MultiTokenStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "Collection"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "OwnershipAcceptance"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "Account"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "Holds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "NftOwners"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "CollectionAccount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "CollectionRoleOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "Item"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "CollectionMetadataOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "ItemMetadataOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "Attribute"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumAttributeNamespace, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "ItemAttributesApprovalsOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "NextCollectionId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "NextItemId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "CollectionConfigOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U128), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "ItemConfigOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "Approvals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "ApprovalsForAll"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "SoulboundPermissionedDestination"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MultiToken", "SoulboundGlobalPermissioned"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest)));
        }
        
        /// <summary>
        /// >> CollectionParams
        ///  Details of a collection.
        /// </summary>
        public static string CollectionParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("MultiToken", "Collection", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Collection
        ///  Details of a collection.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails> Collection(Substrate.NetApi.Model.Types.Primitive.U128 key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.CollectionParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> OwnershipAcceptanceParams
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        public static string OwnershipAcceptanceParams(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("MultiToken", "OwnershipAcceptance", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OwnershipAcceptanceDefault
        /// Default value as hex string
        /// </summary>
        public static string OwnershipAcceptanceDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OwnershipAcceptance
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> OwnershipAcceptance(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.OwnershipAcceptanceParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AccountParams
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        public static string AccountParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "Account", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AccountDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Account
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData> Account(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.AccountParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> HoldsParams
        ///  Reserves on account balances.
        /// </summary>
        public static string HoldsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "Holds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> HoldsDefault
        /// Default value as hex string
        /// </summary>
        public static string HoldsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Holds
        ///  Reserves on account balances.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29> Holds(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.HoldsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NftOwnersParams
        ///  NFTs (tokens with max_supply == 1) owners
        /// </summary>
        public static string NftOwnersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "NftOwners", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> NftOwnersDefault
        /// Default value as hex string
        /// </summary>
        public static string NftOwnersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NftOwners
        ///  NFTs (tokens with max_supply == 1) owners
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> NftOwners(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.NftOwnersParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionAccountParams
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        public static string CollectionAccountParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "CollectionAccount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> CollectionAccountDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionAccountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionAccount
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> CollectionAccount(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.CollectionAccountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionRoleOfParams
        ///  Stores collection roles as per account.
        /// </summary>
        public static string CollectionRoleOfParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "CollectionRoleOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> CollectionRoleOfDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionRoleOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionRoleOf
        ///  Stores collection roles as per account.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3> CollectionRoleOf(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.CollectionRoleOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ItemParams
        ///  The items in existence and their ownership details.
        /// </summary>
        public static string ItemParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "Item", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ItemDefault
        /// Default value as hex string
        /// </summary>
        public static string ItemDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Item
        ///  The items in existence and their ownership details.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails> Item(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.ItemParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionMetadataOfParams
        ///  Metadata of a collection.
        /// </summary>
        public static string CollectionMetadataOfParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("MultiToken", "CollectionMetadataOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionMetadataOfDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionMetadataOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionMetadataOf
        ///  Metadata of a collection.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata> CollectionMetadataOf(Substrate.NetApi.Model.Types.Primitive.U128 key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.CollectionMetadataOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ItemMetadataOfParams
        ///  Metadata of an item.
        /// </summary>
        public static string ItemMetadataOfParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "ItemMetadataOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ItemMetadataOfDefault
        /// Default value as hex string
        /// </summary>
        public static string ItemMetadataOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ItemMetadataOf
        ///  Metadata of an item.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata> ItemMetadataOf(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.ItemMetadataOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AttributeParams
        ///  Attributes of a collection.
        /// </summary>
        public static string AttributeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumAttributeNamespace, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "Attribute", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AttributeDefault
        /// Default value as hex string
        /// </summary>
        public static string AttributeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Attribute
        ///  Attributes of a collection.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit>> Attribute(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumAttributeNamespace, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.AttributeParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ItemAttributesApprovalsOfParams
        ///  Item attribute approvals.
        /// </summary>
        public static string ItemAttributesApprovalsOfParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "ItemAttributesApprovalsOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ItemAttributesApprovalsOfDefault
        /// Default value as hex string
        /// </summary>
        public static string ItemAttributesApprovalsOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ItemAttributesApprovalsOf
        ///  Item attribute approvals.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet> ItemAttributesApprovalsOf(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.ItemAttributesApprovalsOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NextCollectionIdParams
        ///  Stores the `CollectionId` that is going to be used for the next collection.
        ///  This gets incremented whenever a new collection is created.
        /// </summary>
        public static string NextCollectionIdParams()
        {
            return RequestGenerator.GetStorage("MultiToken", "NextCollectionId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextCollectionIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextCollectionIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextCollectionId
        ///  Stores the `CollectionId` that is going to be used for the next collection.
        ///  This gets incremented whenever a new collection is created.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NextCollectionId(CancellationToken token)
        {
            string parameters = MultiTokenStorage.NextCollectionIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NextItemIdParams
        ///  Stores the `ItemId` that is going to be used for the next item.
        ///  This gets incremented whenever a new item is created.
        /// </summary>
        public static string NextItemIdParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("MultiToken", "NextItemId", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NextItemIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextItemIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextItemId
        ///  Stores the `ItemId` that is going to be used for the next item.
        ///  This gets incremented whenever a new item is created.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NextItemId(Substrate.NetApi.Model.Types.Primitive.U128 key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.NextItemIdParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectionConfigOfParams
        ///  Config of a collection.
        /// </summary>
        public static string CollectionConfigOfParams(Substrate.NetApi.Model.Types.Primitive.U128 key)
        {
            return RequestGenerator.GetStorage("MultiToken", "CollectionConfigOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionConfigOfDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectionConfigOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollectionConfigOf
        ///  Config of a collection.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig> CollectionConfigOf(Substrate.NetApi.Model.Types.Primitive.U128 key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.CollectionConfigOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ItemConfigOfParams
        ///  Config of an item.
        /// </summary>
        public static string ItemConfigOfParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "ItemConfigOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ItemConfigOfDefault
        /// Default value as hex string
        /// </summary>
        public static string ItemConfigOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ItemConfigOf
        ///  Config of an item.
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig> ItemConfigOf(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.ItemConfigOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ApprovalsParams
        ///  Approvals
        /// </summary>
        public static string ApprovalsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "Approvals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ApprovalsDefault
        /// Default value as hex string
        /// </summary>
        public static string ApprovalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Approvals
        ///  Approvals
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128>> Approvals(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.ApprovalsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ApprovalsForAllParams
        ///  ApprovalForAll
        /// </summary>
        public static string ApprovalsForAllParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "ApprovalsForAll", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ApprovalsForAllDefault
        /// Default value as hex string
        /// </summary>
        public static string ApprovalsForAllDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ApprovalsForAll
        ///  ApprovalForAll
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> ApprovalsForAll(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.ApprovalsForAllParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> SoulboundPermissionedDestinationParams
        /// </summary>
        public static string SoulboundPermissionedDestinationParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "SoulboundPermissionedDestination", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> SoulboundPermissionedDestinationDefault
        /// Default value as hex string
        /// </summary>
        public static string SoulboundPermissionedDestinationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SoulboundPermissionedDestination
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> SoulboundPermissionedDestination(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.SoulboundPermissionedDestinationParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> SoulboundGlobalPermissionedParams
        /// </summary>
        public static string SoulboundGlobalPermissionedParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("MultiToken", "SoulboundGlobalPermissioned", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> SoulboundGlobalPermissionedDefault
        /// Default value as hex string
        /// </summary>
        public static string SoulboundGlobalPermissionedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SoulboundGlobalPermissioned
        /// </summary>
        public async Task<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest> SoulboundGlobalPermissioned(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20, Substrate.NetApi.Model.Types.Primitive.U128> key, CancellationToken token)
        {
            string parameters = MultiTokenStorage.SoulboundGlobalPermissionedParams(key);
            var result = await _client.GetStorageAsync<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest>(parameters, token);
            return result;
        }
    }
    
    public sealed class MultiTokenCalls
    {
        
        /// <summary>
        /// >> create
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Create(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 admin, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig config, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AssetMetadata asset_metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(admin.Encode());
            byteArray.AddRange(config.Encode());
            byteArray.AddRange(asset_metadata.Encode());
            return new Method(120, "MultiToken", 0, "create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_create
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceCreate(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 owner, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig config, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AssetMetadata asset_metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(config.Encode());
            byteArray.AddRange(asset_metadata.Encode());
            return new Method(120, "MultiToken", 1, "force_create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> destroy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Destroy(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.DestroyWitness witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(witness.Encode());
            return new Method(120, "MultiToken", 2, "destroy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Mint(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_amount, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mint_to, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig> maybe_config, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6> maybe_custom_uri, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.RoyaltyInfo> maybe_royalty)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(maybe_amount.Encode());
            byteArray.AddRange(mint_to.Encode());
            byteArray.AddRange(maybe_config.Encode());
            byteArray.AddRange(maybe_custom_uri.Encode());
            byteArray.AddRange(maybe_royalty.Encode());
            return new Method(120, "MultiToken", 3, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_mint
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceMint(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_amount, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mint_to, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig item_config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(maybe_amount.Encode());
            byteArray.AddRange(mint_to.Encode());
            byteArray.AddRange(item_config.Encode());
            return new Method(120, "MultiToken", 4, "force_mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> burn
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Burn(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> maybe_owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(maybe_amount.Encode());
            byteArray.AddRange(maybe_owner.Encode());
            return new Method(120, "MultiToken", 5, "burn", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Transfer(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> maybe_from, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 dest)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(maybe_amount.Encode());
            byteArray.AddRange(maybe_from.Encode());
            byteArray.AddRange(dest.Encode());
            return new Method(120, "MultiToken", 6, "transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Redeposit(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U128> items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(items.Encode());
            return new Method(120, "MultiToken", 7, "redeposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> lock_item_transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method LockItemTransfer(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(120, "MultiToken", 8, "lock_item_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_item_transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UnlockItemTransfer(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(120, "MultiToken", 9, "unlock_item_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> lock_collection
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method LockCollection(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT1 lock_settings)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(lock_settings.Encode());
            return new Method(120, "MultiToken", 10, "lock_collection", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_ownership
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method TransferOwnership(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(owner.Encode());
            return new Method(120, "MultiToken", 11, "transfer_ownership", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_team
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetTeam(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> issuer, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> admin, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> freezer, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> manager, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> governance, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> creator, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> composite_creator, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> trader)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(issuer.Encode());
            byteArray.AddRange(admin.Encode());
            byteArray.AddRange(freezer.Encode());
            byteArray.AddRange(manager.Encode());
            byteArray.AddRange(governance.Encode());
            byteArray.AddRange(creator.Encode());
            byteArray.AddRange(composite_creator.Encode());
            byteArray.AddRange(trader.Encode());
            return new Method(120, "MultiToken", 12, "set_team", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_collection_owner
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceCollectionOwner(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(owner.Encode());
            return new Method(120, "MultiToken", 13, "force_collection_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_collection_config
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceCollectionConfig(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(config.Encode());
            return new Method(120, "MultiToken", 14, "force_collection_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ApproveTransfer(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> maybe_owner, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 @delegate, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> maybe_deadline)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(maybe_amount.Encode());
            byteArray.AddRange(maybe_owner.Encode());
            byteArray.AddRange(@delegate.Encode());
            byteArray.AddRange(maybe_deadline.Encode());
            return new Method(120, "MultiToken", 15, "approve_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_approval
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelApproval(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> maybe_owner, Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 @delegate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_owner.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(@delegate.Encode());
            return new Method(120, "MultiToken", 16, "cancel_approval", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_transfer_approvals
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearTransferApprovals(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> maybe_owner, Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Primitive.U32 max_items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_owner.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(max_items.Encode());
            return new Method(120, "MultiToken", 17, "clear_transfer_approvals", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_approval_for_all
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetApprovalForAll(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 @delegate, Substrate.NetApi.Model.Types.Primitive.Bool approved)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@delegate.Encode());
            byteArray.AddRange(approved.Encode());
            return new Method(120, "MultiToken", 18, "set_approval_for_all", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> lock_item_properties
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method LockItemProperties(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Primitive.Bool lock_max_supply, Substrate.NetApi.Model.Types.Primitive.Bool lock_metadata, Substrate.NetApi.Model.Types.Primitive.Bool lock_attributes)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(lock_max_supply.Encode());
            byteArray.AddRange(lock_metadata.Encode());
            byteArray.AddRange(lock_attributes.Encode());
            return new Method(120, "MultiToken", 19, "lock_item_properties", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_attribute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAttribute(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumAttributeNamespace @namespace, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 key, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(@namespace.Encode());
            byteArray.AddRange(key.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(120, "MultiToken", 20, "set_attribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_set_attribute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceSetAttribute(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> set_as, Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumAttributeNamespace @namespace, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 key, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(set_as.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(@namespace.Encode());
            byteArray.AddRange(key.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(120, "MultiToken", 21, "force_set_attribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_attribute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearAttribute(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumAttributeNamespace @namespace, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(@namespace.Encode());
            byteArray.AddRange(key.Encode());
            return new Method(120, "MultiToken", 22, "clear_attribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_uri
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetUri(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumAttributeKeys uri_type, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(uri_type.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(120, "MultiToken", 23, "set_uri", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_item_attributes
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ApproveItemAttributes(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 @delegate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(@delegate.Encode());
            return new Method(120, "MultiToken", 24, "approve_item_attributes", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_item_attributes_approval
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelItemAttributesApproval(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 @delegate, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CancelAttributesApprovalWitness witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(@delegate.Encode());
            byteArray.AddRange(witness.Encode());
            return new Method(120, "MultiToken", 25, "cancel_item_attributes_approval", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 data)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(data.Encode());
            return new Method(120, "MultiToken", 26, "set_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(120, "MultiToken", 27, "clear_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collection_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetCollectionMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 data)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(data.Encode());
            return new Method(120, "MultiToken", 28, "set_collection_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_collection_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearCollectionMetadata(Substrate.NetApi.Model.Types.Primitive.U128 collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            return new Method(120, "MultiToken", 29, "clear_collection_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_accept_ownership
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAcceptOwnership(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_collection.Encode());
            return new Method(120, "MultiToken", 30, "set_accept_ownership", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collection_max_supply
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetCollectionMaxSupply(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 max_supply)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(max_supply.Encode());
            return new Method(120, "MultiToken", 31, "set_collection_max_supply", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_mint_settings
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateMintSettings(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.MintSettings mint_settings)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(mint_settings.Encode());
            return new Method(120, "MultiToken", 32, "update_mint_settings", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint_pre_signed
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method MintPreSigned(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.PreSignedMint mint_data, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.EthereumSignature signature, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 signer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(mint_data.Encode());
            byteArray.AddRange(signature.Encode());
            byteArray.AddRange(signer.Encode());
            return new Method(120, "MultiToken", 33, "mint_pre_signed", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_attributes_pre_signed
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAttributesPreSigned(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.PreSignedAttributes data, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.EthereumSignature signature, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 signer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(data.Encode());
            byteArray.AddRange(signature.Encode());
            byteArray.AddRange(signer.Encode());
            return new Method(120, "MultiToken", 34, "set_attributes_pre_signed", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_default_royalty
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetDefaultRoyalty(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.RoyaltyInfo royalty)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(royalty.Encode());
            return new Method(120, "MultiToken", 35, "set_default_royalty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_royalty
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetRoyalty(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.RoyaltyInfo royalty)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(royalty.Encode());
            return new Method(120, "MultiToken", 36, "set_royalty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_soulbound
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetSoulbound(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_item, Substrate.NetApi.Model.Types.Primitive.Bool soulbound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(soulbound.Encode());
            return new Method(120, "MultiToken", 37, "set_soulbound", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_soulbound_global_permissioned_source
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetSoulboundGlobalPermissionedSource(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 source, Substrate.NetApi.Model.Types.Primitive.Bool allowed)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(source.Encode());
            byteArray.AddRange(allowed.Encode());
            return new Method(120, "MultiToken", 38, "set_soulbound_global_permissioned_source", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_soulbound_global_permissioned_dest
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetSoulboundGlobalPermissionedDest(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 destination, Substrate.NetApi.Model.Types.Primitive.Bool allowed)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(destination.Encode());
            byteArray.AddRange(allowed.Encode());
            return new Method(120, "MultiToken", 39, "set_soulbound_global_permissioned_dest", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_soulbound_permissioned_dest
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetSoulboundPermissionedDest(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 destination, Substrate.NetApi.Model.Types.Primitive.Bool allowed)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(destination.Encode());
            byteArray.AddRange(allowed.Encode());
            return new Method(120, "MultiToken", 40, "set_soulbound_permissioned_dest", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> grant_collection_role
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method GrantCollectionRole(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 who, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumCollectionRole role)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(role.Encode());
            return new Method(120, "MultiToken", 41, "grant_collection_role", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> revoke_collection_role
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RevokeCollectionRole(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 who, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumCollectionRole role)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(role.Encode());
            return new Method(120, "MultiToken", 42, "revoke_collection_role", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> renounce_collection_role
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RenounceCollectionRole(Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 who, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.EnumCollectionRole role)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(role.Encode());
            return new Method(120, "MultiToken", 43, "renounce_collection_role", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> hold_item
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method HoldItem(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 who, Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(120, "MultiToken", 44, "hold_item", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> release_item
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReleaseItem(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 who, Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.Bool best_effort)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(best_effort.Encode());
            return new Method(120, "MultiToken", 45, "release_item", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_release_all
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceReleaseAll(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 who, Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(120, "MultiToken", 46, "force_release_all", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_transfer_on_hold
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceTransferOnHold(Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr8U8 id, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 from, Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 to, Substrate.NetApi.Model.Types.Primitive.U128 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.Bool on_hold)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(on_hold.Encode());
            return new Method(120, "MultiToken", 47, "force_transfer_on_hold", byteArray.ToArray());
        }
    }
    
    public sealed class MultiTokenConstants
    {
        
        /// <summary>
        /// >> CollectionDeposit
        ///  The basic amount of funds that must be reserved for collection.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 CollectionDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ItemDeposit
        ///  The basic amount of funds that must be reserved for an item.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ItemDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MetadataDepositBase
        ///  The basic amount of funds that must be reserved when adding metadata to your item.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MetadataDepositBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AttributeDepositBase
        ///  The basic amount of funds that must be reserved when adding an attribute to an item.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AttributeDepositBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DepositPerByte
        ///  The additional funds that must be reserved for the number of bytes store in metadata,
        ///  either "normal" metadata or attribute metadata.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DepositPerByte()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of data stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF4010000");
            return result;
        }
        
        /// <summary>
        /// >> KeyLimit
        ///  The maximum length of an attribute key.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 KeyLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
        
        /// <summary>
        /// >> ValueLimit
        ///  The maximum length of an attribute value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ValueLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xF4010000");
            return result;
        }
        
        /// <summary>
        /// >> ApprovalsLimit
        ///  The maximum approvals an item could have.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ApprovalsLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> ItemAttributesApprovalsLimit
        ///  The maximum attributes approvals an item could have.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ItemAttributesApprovalsLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxAttributesPerCall
        ///  The max number of attributes a user could set per call.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxAttributesPerCall()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxPreSignedMintItems
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPreSignedMintItems()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> Features
        ///  Disables some of pallet's features.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT4 Features()
        {
            var result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT4();
            result.Create("0x0000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxHolds
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxHolds()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> PalletHoldId
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr8U8 PalletHoldId()
        {
            var result = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr8U8();
            result.Create("0x6E66742F686F6C64");
            return result;
        }
    }
    
    public enum MultiTokenErrors
    {
        
        /// <summary>
        /// >> NoPermission
        /// The signing account has no permission to do the operation.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> UnknownCollection
        /// The given item ID is unknown.
        /// </summary>
        UnknownCollection,
        
        /// <summary>
        /// >> AlreadyExists
        /// The item ID has already been used for an item.
        /// </summary>
        AlreadyExists,
        
        /// <summary>
        /// >> ApprovalExpired
        /// The approval had a deadline that expired, so the approval isn't valid anymore.
        /// </summary>
        ApprovalExpired,
        
        /// <summary>
        /// >> ApprovalsNotCleared
        /// </summary>
        ApprovalsNotCleared,
        
        /// <summary>
        /// >> WrongOwner
        /// The owner turned out to be different to what was expected.
        /// </summary>
        WrongOwner,
        
        /// <summary>
        /// >> BadWitness
        /// The witness data given does not match the current state of the chain.
        /// </summary>
        BadWitness,
        
        /// <summary>
        /// >> CollectionIdInUse
        /// Collection ID is already taken.
        /// </summary>
        CollectionIdInUse,
        
        /// <summary>
        /// >> ItemsNonTransferable
        /// Items within that collection are non-transferable.
        /// </summary>
        ItemsNonTransferable,
        
        /// <summary>
        /// >> NotDelegate
        /// The provided account is not a delegate.
        /// </summary>
        NotDelegate,
        
        /// <summary>
        /// >> WrongDelegate
        /// The delegate turned out to be different to what was expected.
        /// </summary>
        WrongDelegate,
        
        /// <summary>
        /// >> Unapproved
        /// No approval exists that would allow the transfer.
        /// </summary>
        Unapproved,
        
        /// <summary>
        /// >> Unaccepted
        /// The named owner has not signed ownership acceptance of the collection.
        /// </summary>
        Unaccepted,
        
        /// <summary>
        /// >> ItemLocked
        /// The item is locked (non-transferable).
        /// </summary>
        ItemLocked,
        
        /// <summary>
        /// >> LockedItemAttributes
        /// Item's attributes are locked.
        /// </summary>
        LockedItemAttributes,
        
        /// <summary>
        /// >> LockedCollectionAttributes
        /// Collection's attributes are locked.
        /// </summary>
        LockedCollectionAttributes,
        
        /// <summary>
        /// >> LockedItemMetadata
        /// Item's metadata is locked.
        /// </summary>
        LockedItemMetadata,
        
        /// <summary>
        /// >> LockedCollectionMetadata
        /// Collection's metadata is locked.
        /// </summary>
        LockedCollectionMetadata,
        
        /// <summary>
        /// >> MaxSupplyReached
        /// All items have been minted.
        /// </summary>
        MaxSupplyReached,
        
        /// <summary>
        /// >> MaxSupplyLocked
        /// The max supply is locked and can't be changed.
        /// </summary>
        MaxSupplyLocked,
        
        /// <summary>
        /// >> MaxSupplyTooSmall
        /// The provided max supply is less than the number of items a collection already has.
        /// </summary>
        MaxSupplyTooSmall,
        
        /// <summary>
        /// >> UnknownItem
        /// The given item ID is unknown.
        /// </summary>
        UnknownItem,
        
        /// <summary>
        /// >> MetadataNotFound
        /// The given item has no metadata set.
        /// </summary>
        MetadataNotFound,
        
        /// <summary>
        /// >> AttributeNotFound
        /// The provided attribute can't be found.
        /// </summary>
        AttributeNotFound,
        
        /// <summary>
        /// >> UnknownOrder
        /// Item is not for sale.
        /// </summary>
        UnknownOrder,
        
        /// <summary>
        /// >> BidTooLow
        /// The provided bid is too low.
        /// </summary>
        BidTooLow,
        
        /// <summary>
        /// >> ReachedApprovalLimit
        /// The item has reached its approval limit.
        /// </summary>
        ReachedApprovalLimit,
        
        /// <summary>
        /// >> DeadlineExpired
        /// The deadline has already expired.
        /// </summary>
        DeadlineExpired,
        
        /// <summary>
        /// >> DeadlineMissing
        /// An inconsistent state where a non-BuyNow auction has an empty deadline.
        /// </summary>
        DeadlineMissing,
        
        /// <summary>
        /// >> WrongDuration
        /// The duration provided should be less than or equal to `MaxDeadlineDuration`.
        /// </summary>
        WrongDuration,
        
        /// <summary>
        /// >> MethodDisabled
        /// The method is disabled by system settings.
        /// </summary>
        MethodDisabled,
        
        /// <summary>
        /// >> WrongSetting
        /// The provided setting can't be set.
        /// </summary>
        WrongSetting,
        
        /// <summary>
        /// >> InconsistentItemConfig
        /// Item's config already exists and should be equal to the provided one.
        /// </summary>
        InconsistentItemConfig,
        
        /// <summary>
        /// >> NoConfig
        /// Config for a collection or an item can't be found.
        /// </summary>
        NoConfig,
        
        /// <summary>
        /// >> RolesNotCleared
        /// Some roles were not cleared.
        /// </summary>
        RolesNotCleared,
        
        /// <summary>
        /// >> MintNotStarted
        /// Mint has not started yet.
        /// </summary>
        MintNotStarted,
        
        /// <summary>
        /// >> MintEnded
        /// Mint has already ended.
        /// </summary>
        MintEnded,
        
        /// <summary>
        /// >> AlreadyClaimed
        /// The provided Item was already used for claiming.
        /// </summary>
        AlreadyClaimed,
        
        /// <summary>
        /// >> IncorrectData
        /// The provided data is incorrect.
        /// </summary>
        IncorrectData,
        
        /// <summary>
        /// >> WrongOrigin
        /// The extrinsic was sent by the wrong origin.
        /// </summary>
        WrongOrigin,
        
        /// <summary>
        /// >> WrongSignature
        /// The provided signature is incorrect.
        /// </summary>
        WrongSignature,
        
        /// <summary>
        /// >> IncorrectMetadata
        /// The provided metadata might be too long.
        /// </summary>
        IncorrectMetadata,
        
        /// <summary>
        /// >> MaxAttributesLimitReached
        /// Can't set more attributes per one call.
        /// </summary>
        MaxAttributesLimitReached,
        
        /// <summary>
        /// >> WrongNamespace
        /// The provided namespace isn't supported in this call.
        /// </summary>
        WrongNamespace,
        
        /// <summary>
        /// >> CollectionNotEmpty
        /// Can't delete non-empty collections.
        /// </summary>
        CollectionNotEmpty,
        
        /// <summary>
        /// >> InsufficientBalance
        /// Not enough funds.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> CollectionLevelURI
        /// This uri type isn't supported by items.
        /// </summary>
        CollectionLevelURI,
        
        /// <summary>
        /// >> WrongAmount
        /// Depends on the context, but maybe_amount arg is wrong.
        /// </summary>
        WrongAmount,
        
        /// <summary>
        /// >> TooManyHolds
        /// Exceeded T::MaxHolds
        /// </summary>
        TooManyHolds,
        
        /// <summary>
        /// >> NoAccount
        /// Account was not found in Account<T, I> storage map.
        /// </summary>
        NoAccount,
    }
}
