//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Moonsama.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class MaintenanceModeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public MaintenanceModeStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MaintenanceMode", "MaintenanceMode"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> MaintenanceModeParams
        ///  Whether the site is in maintenance mode
        /// </summary>
        public static string MaintenanceModeParams()
        {
            return RequestGenerator.GetStorage("MaintenanceMode", "MaintenanceMode", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaintenanceModeDefault
        /// Default value as hex string
        /// </summary>
        public static string MaintenanceModeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MaintenanceMode
        ///  Whether the site is in maintenance mode
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> MaintenanceMode(CancellationToken token)
        {
            string parameters = MaintenanceModeStorage.MaintenanceModeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
    }
    
    public sealed class MaintenanceModeCalls
    {
        
        /// <summary>
        /// >> enter_maintenance_mode
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method EnterMaintenanceMode()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(52, "MaintenanceMode", 0, "enter_maintenance_mode", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> resume_normal_operation
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ResumeNormalOperation()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(52, "MaintenanceMode", 1, "resume_normal_operation", byteArray.ToArray());
        }
    }
    
    public sealed class MaintenanceModeConstants
    {
    }
    
    public enum MaintenanceModeErrors
    {
        
        /// <summary>
        /// >> AlreadyInMaintenanceMode
        /// The chain cannot enter maintenance mode because it is already in maintenance mode
        /// </summary>
        AlreadyInMaintenanceMode,
        
        /// <summary>
        /// >> NotInMaintenanceMode
        /// The chain cannot resume normal operation because it is not in maintenance mode
        /// </summary>
        NotInMaintenanceMode,
    }
}
