//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonsama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IContractsStorage interface definition.
    /// </summary>
    public interface IContractsStorage : IStorage
    {
        
        /// <summary>
        /// >> PristineCode
        ///  A mapping from an original code hash to the original code, untouched by instrumentation.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25 GetPristineCode(string key);
        
        /// <summary>
        /// >> CodeStorage
        ///  A mapping between an original code hash and instrumented wasm code, ready for execution.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.PrefabWasmModule GetCodeStorage(string key);
        
        /// <summary>
        /// >> OwnerInfoOf
        ///  A mapping between an original code hash and its owner information.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.OwnerInfo GetOwnerInfoOf(string key);
        
        /// <summary>
        /// >> Nonce
        ///  This is a **monotonic** counter incremented on contract instantiation.
        /// 
        ///  This is used in order to generate unique trie ids for contracts.
        ///  The trie id of a new contract is calculated from hash(account_id, nonce).
        ///  The nonce is required because otherwise the following sequence would lead to
        ///  a possible collision of storage:
        /// 
        ///  1. Create a new contract.
        ///  2. Terminate the contract.
        ///  3. Immediately recreate the contract with the same account_id.
        /// 
        ///  This is bad because the contents of a trie are deleted lazily and there might be
        ///  storage of the old instantiation still in it when the new contract is created. Please
        ///  note that we can't replace the counter by the block number because the sequence above
        ///  can happen in the same block. We also can't keep the account counter in memory only
        ///  because storage is the only way to communicate across different extrinsics in the
        ///  same block.
        /// 
        ///  # Note
        /// 
        ///  Do not use it to determine the number of contracts. It won't be decremented if
        ///  a contract is destroyed.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetNonce();
        
        /// <summary>
        /// >> ContractInfoOf
        ///  The code associated with a given account.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.ContractInfo GetContractInfoOf(string key);
        
        /// <summary>
        /// >> DeletionQueue
        ///  Evicted contracts that await child trie deletion.
        /// 
        ///  Child trie deletion is a heavy operation depending on the amount of storage items
        ///  stored in said trie. Therefore this operation is performed lazily in `on_idle`.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT26 GetDeletionQueue(string key);
        
        /// <summary>
        /// >> DeletionQueueCounter
        ///  A pair of monotonic counters used to track the latest contract marked for deletion
        ///  and the latest deleted contract in queue.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.DeletionQueueManager GetDeletionQueueCounter();
    }
    
    /// <summary>
    /// ContractsStorage class definition.
    /// </summary>
    public sealed class ContractsStorage : IContractsStorage
    {
        
        /// <summary>
        /// _pristineCodeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25> _pristineCodeTypedStorage;
        
        /// <summary>
        /// _codeStorageTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.PrefabWasmModule> _codeStorageTypedStorage;
        
        /// <summary>
        /// _ownerInfoOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.OwnerInfo> _ownerInfoOfTypedStorage;
        
        /// <summary>
        /// _nonceTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> _nonceTypedStorage;
        
        /// <summary>
        /// _contractInfoOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.ContractInfo> _contractInfoOfTypedStorage;
        
        /// <summary>
        /// _deletionQueueTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT26> _deletionQueueTypedStorage;
        
        /// <summary>
        /// _deletionQueueCounterTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.DeletionQueueManager> _deletionQueueCounterTypedStorage;
        
        /// <summary>
        /// ContractsStorage constructor.
        /// </summary>
        public ContractsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PristineCodeTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25>("Contracts.PristineCode", storageDataProvider, storageChangeDelegates);
            this.CodeStorageTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.PrefabWasmModule>("Contracts.CodeStorage", storageDataProvider, storageChangeDelegates);
            this.OwnerInfoOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.OwnerInfo>("Contracts.OwnerInfoOf", storageDataProvider, storageChangeDelegates);
            this.NonceTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64>("Contracts.Nonce", storageDataProvider, storageChangeDelegates);
            this.ContractInfoOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.ContractInfo>("Contracts.ContractInfoOf", storageDataProvider, storageChangeDelegates);
            this.DeletionQueueTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT26>("Contracts.DeletionQueue", storageDataProvider, storageChangeDelegates);
            this.DeletionQueueCounterTypedStorage = new TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.DeletionQueueManager>("Contracts.DeletionQueueCounter", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _pristineCodeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25> PristineCodeTypedStorage
        {
            get
            {
                return _pristineCodeTypedStorage;
            }
            set
            {
                _pristineCodeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _codeStorageTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.PrefabWasmModule> CodeStorageTypedStorage
        {
            get
            {
                return _codeStorageTypedStorage;
            }
            set
            {
                _codeStorageTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ownerInfoOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.OwnerInfo> OwnerInfoOfTypedStorage
        {
            get
            {
                return _ownerInfoOfTypedStorage;
            }
            set
            {
                _ownerInfoOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nonceTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> NonceTypedStorage
        {
            get
            {
                return _nonceTypedStorage;
            }
            set
            {
                _nonceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _contractInfoOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.ContractInfo> ContractInfoOfTypedStorage
        {
            get
            {
                return _contractInfoOfTypedStorage;
            }
            set
            {
                _contractInfoOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _deletionQueueTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT26> DeletionQueueTypedStorage
        {
            get
            {
                return _deletionQueueTypedStorage;
            }
            set
            {
                _deletionQueueTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _deletionQueueCounterTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.DeletionQueueManager> DeletionQueueCounterTypedStorage
        {
            get
            {
                return _deletionQueueCounterTypedStorage;
            }
            set
            {
                _deletionQueueCounterTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PristineCodeTypedStorage.InitializeAsync("Contracts", "PristineCode");
            await CodeStorageTypedStorage.InitializeAsync("Contracts", "CodeStorage");
            await OwnerInfoOfTypedStorage.InitializeAsync("Contracts", "OwnerInfoOf");
            await NonceTypedStorage.InitializeAsync("Contracts", "Nonce");
            await ContractInfoOfTypedStorage.InitializeAsync("Contracts", "ContractInfoOf");
            await DeletionQueueTypedStorage.InitializeAsync("Contracts", "DeletionQueue");
            await DeletionQueueCounterTypedStorage.InitializeAsync("Contracts", "DeletionQueueCounter");
        }
        
        /// <summary>
        /// Implements any storage change for Contracts.PristineCode
        /// </summary>
        [StorageChange("Contracts", "PristineCode")]
        public void OnUpdatePristineCode(string key, string data)
        {
            PristineCodeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PristineCode
        ///  A mapping from an original code hash to the original code, untouched by instrumentation.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25 GetPristineCode(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PristineCodeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT25 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Contracts.CodeStorage
        /// </summary>
        [StorageChange("Contracts", "CodeStorage")]
        public void OnUpdateCodeStorage(string key, string data)
        {
            CodeStorageTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CodeStorage
        ///  A mapping between an original code hash and instrumented wasm code, ready for execution.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.PrefabWasmModule GetCodeStorage(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CodeStorageTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.PrefabWasmModule result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Contracts.OwnerInfoOf
        /// </summary>
        [StorageChange("Contracts", "OwnerInfoOf")]
        public void OnUpdateOwnerInfoOf(string key, string data)
        {
            OwnerInfoOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OwnerInfoOf
        ///  A mapping between an original code hash and its owner information.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.OwnerInfo GetOwnerInfoOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OwnerInfoOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.wasm.OwnerInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Contracts.Nonce
        /// </summary>
        [StorageChange("Contracts", "Nonce")]
        public void OnUpdateNonce(string data)
        {
            NonceTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Nonce
        ///  This is a **monotonic** counter incremented on contract instantiation.
        /// 
        ///  This is used in order to generate unique trie ids for contracts.
        ///  The trie id of a new contract is calculated from hash(account_id, nonce).
        ///  The nonce is required because otherwise the following sequence would lead to
        ///  a possible collision of storage:
        /// 
        ///  1. Create a new contract.
        ///  2. Terminate the contract.
        ///  3. Immediately recreate the contract with the same account_id.
        /// 
        ///  This is bad because the contents of a trie are deleted lazily and there might be
        ///  storage of the old instantiation still in it when the new contract is created. Please
        ///  note that we can't replace the counter by the block number because the sequence above
        ///  can happen in the same block. We also can't keep the account counter in memory only
        ///  because storage is the only way to communicate across different extrinsics in the
        ///  same block.
        /// 
        ///  # Note
        /// 
        ///  Do not use it to determine the number of contracts. It won't be decremented if
        ///  a contract is destroyed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetNonce()
        {
            return NonceTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Contracts.ContractInfoOf
        /// </summary>
        [StorageChange("Contracts", "ContractInfoOf")]
        public void OnUpdateContractInfoOf(string key, string data)
        {
            ContractInfoOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ContractInfoOf
        ///  The code associated with a given account.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.ContractInfo GetContractInfoOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ContractInfoOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.ContractInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Contracts.DeletionQueue
        /// </summary>
        [StorageChange("Contracts", "DeletionQueue")]
        public void OnUpdateDeletionQueue(string key, string data)
        {
            DeletionQueueTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DeletionQueue
        ///  Evicted contracts that await child trie deletion.
        /// 
        ///  Child trie deletion is a heavy operation depending on the amount of storage items
        ///  stored in said trie. Therefore this operation is performed lazily in `on_idle`.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT26 GetDeletionQueue(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DeletionQueueTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT26 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Contracts.DeletionQueueCounter
        /// </summary>
        [StorageChange("Contracts", "DeletionQueueCounter")]
        public void OnUpdateDeletionQueueCounter(string data)
        {
            DeletionQueueCounterTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> DeletionQueueCounter
        ///  A pair of monotonic counters used to track the latest contract marked for deletion
        ///  and the latest deleted contract in queue.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_contracts.storage.DeletionQueueManager GetDeletionQueueCounter()
        {
            return DeletionQueueCounterTypedStorage.Get();
        }
    }
}
