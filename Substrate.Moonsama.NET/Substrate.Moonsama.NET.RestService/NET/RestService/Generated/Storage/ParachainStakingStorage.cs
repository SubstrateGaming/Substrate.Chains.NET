//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonsama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IParachainStakingStorage interface definition.
    /// </summary>
    public interface IParachainStakingStorage : IStorage
    {
        
        /// <summary>
        /// >> MaxSelectedCandidates
        ///  The maximum number of collator candidates selected at each round.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetMaxSelectedCandidates();
        
        /// <summary>
        /// >> Round
        ///  Current round number and next round scheduled transition.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo GetRound();
        
        /// <summary>
        /// >> LastDelegation
        ///  Delegation information for the latest session in which a delegator
        ///  delegated.
        /// 
        ///  It maps from an account to the number of delegations in the last
        ///  session in which they (re-)delegated.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter GetLastDelegation(string key);
        
        /// <summary>
        /// >> DelegatorState
        ///  Delegation staking information.
        /// 
        ///  It maps from an account to its delegation details.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake GetDelegatorState(string key);
        
        /// <summary>
        /// >> CandidatePool
        ///  The staking information for a candidate.
        /// 
        ///  It maps from an account to its information.
        ///  Moreover, it counts the number of candidates.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate GetCandidatePool(string key);
        
        /// <summary>
        /// >> CounterForCandidatePool
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForCandidatePool();
        
        /// <summary>
        /// >> TotalCollatorStake
        ///  Total funds locked to back the currently selected collators.
        ///  The sum of all collator and their delegator stakes.
        /// 
        ///  Note: There are more funds locked by this pallet, since the backing for
        ///  non collating candidates is not included in [TotalCollatorStake].
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake GetTotalCollatorStake();
        
        /// <summary>
        /// >> TopCandidates
        ///  The collator candidates with the highest amount of stake.
        /// 
        ///  Each time the stake of a collator is increased, it is checked whether
        ///  this pushes another candidate out of the list. When the stake is
        ///  reduced however, it is not checked if another candidate has more stake,
        ///  since this would require iterating over the entire [CandidatePool].
        /// 
        ///  There must always be more candidates than [MaxSelectedCandidates] so
        ///  that a collator can drop out of the collator set by reducing their
        ///  stake.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2 GetTopCandidates();
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo GetInflationConfig();
        
        /// <summary>
        /// >> Unstaking
        ///  The funds waiting to be unstaked.
        /// 
        ///  It maps from accounts to all the funds addressed to them in the future
        ///  blocks.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap GetUnstaking(string key);
        
        /// <summary>
        /// >> MaxCollatorCandidateStake
        ///  The maximum amount a collator candidate can stake.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMaxCollatorCandidateStake();
        
        /// <summary>
        /// >> LastRewardReduction
        ///  The year in which the last automatic reduction of the reward rates
        ///  occurred.
        /// 
        ///  It starts at zero at genesis and increments by one every BLOCKS_PER_YEAR
        ///  many blocks.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetLastRewardReduction();
        
        /// <summary>
        /// >> BlocksAuthored
        ///  The number of authored blocks for collators. It is updated via the
        ///  `note_author` hook when authoring a block .
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetBlocksAuthored(string key);
        
        /// <summary>
        /// >> BlocksRewarded
        ///  The number of blocks for which rewards have been claimed by an address.
        /// 
        ///  For collators, this can be at most BlocksAuthored. It is updated when
        ///  incrementing collator rewards, either when calling
        ///  `inc_collator_rewards` or updating the `InflationInfo`.
        /// 
        ///  For delegators, this can be at most BlocksAuthored of the collator.It is
        ///  updated when incrementing delegator rewards, either when calling
        ///  `inc_delegator_rewards` or updating the `InflationInfo`.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetBlocksRewarded(string key);
        
        /// <summary>
        /// >> Rewards
        ///  The accumulated rewards for collator candidates and delegators.
        /// 
        ///  It maps from accounts to their total rewards since the last payout.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetRewards(string key);
        
        /// <summary>
        /// >> ForceNewRound
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetForceNewRound();
    }
    
    /// <summary>
    /// ParachainStakingStorage class definition.
    /// </summary>
    public sealed class ParachainStakingStorage : IParachainStakingStorage
    {
        
        /// <summary>
        /// _maxSelectedCandidatesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _maxSelectedCandidatesTypedStorage;
        
        /// <summary>
        /// _roundTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo> _roundTypedStorage;
        
        /// <summary>
        /// _lastDelegationTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter> _lastDelegationTypedStorage;
        
        /// <summary>
        /// _delegatorStateTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake> _delegatorStateTypedStorage;
        
        /// <summary>
        /// _candidatePoolTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate> _candidatePoolTypedStorage;
        
        /// <summary>
        /// _counterForCandidatePoolTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForCandidatePoolTypedStorage;
        
        /// <summary>
        /// _totalCollatorStakeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake> _totalCollatorStakeTypedStorage;
        
        /// <summary>
        /// _topCandidatesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2> _topCandidatesTypedStorage;
        
        /// <summary>
        /// _inflationConfigTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo> _inflationConfigTypedStorage;
        
        /// <summary>
        /// _unstakingTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap> _unstakingTypedStorage;
        
        /// <summary>
        /// _maxCollatorCandidateStakeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _maxCollatorCandidateStakeTypedStorage;
        
        /// <summary>
        /// _lastRewardReductionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _lastRewardReductionTypedStorage;
        
        /// <summary>
        /// _blocksAuthoredTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _blocksAuthoredTypedStorage;
        
        /// <summary>
        /// _blocksRewardedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _blocksRewardedTypedStorage;
        
        /// <summary>
        /// _rewardsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _rewardsTypedStorage;
        
        /// <summary>
        /// _forceNewRoundTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _forceNewRoundTypedStorage;
        
        /// <summary>
        /// ParachainStakingStorage constructor.
        /// </summary>
        public ParachainStakingStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.MaxSelectedCandidatesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.MaxSelectedCandidates", storageDataProvider, storageChangeDelegates);
            this.RoundTypedStorage = new TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo>("ParachainStaking.Round", storageDataProvider, storageChangeDelegates);
            this.LastDelegationTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter>("ParachainStaking.LastDelegation", storageDataProvider, storageChangeDelegates);
            this.DelegatorStateTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake>("ParachainStaking.DelegatorState", storageDataProvider, storageChangeDelegates);
            this.CandidatePoolTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate>("ParachainStaking.CandidatePool", storageDataProvider, storageChangeDelegates);
            this.CounterForCandidatePoolTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.CounterForCandidatePool", storageDataProvider, storageChangeDelegates);
            this.TotalCollatorStakeTypedStorage = new TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake>("ParachainStaking.TotalCollatorStake", storageDataProvider, storageChangeDelegates);
            this.TopCandidatesTypedStorage = new TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2>("ParachainStaking.TopCandidates", storageDataProvider, storageChangeDelegates);
            this.InflationConfigTypedStorage = new TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo>("ParachainStaking.InflationConfig", storageDataProvider, storageChangeDelegates);
            this.UnstakingTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap>("ParachainStaking.Unstaking", storageDataProvider, storageChangeDelegates);
            this.MaxCollatorCandidateStakeTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("ParachainStaking.MaxCollatorCandidateStake", storageDataProvider, storageChangeDelegates);
            this.LastRewardReductionTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.LastRewardReduction", storageDataProvider, storageChangeDelegates);
            this.BlocksAuthoredTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.BlocksAuthored", storageDataProvider, storageChangeDelegates);
            this.BlocksRewardedTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("ParachainStaking.BlocksRewarded", storageDataProvider, storageChangeDelegates);
            this.RewardsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("ParachainStaking.Rewards", storageDataProvider, storageChangeDelegates);
            this.ForceNewRoundTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("ParachainStaking.ForceNewRound", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _maxSelectedCandidatesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> MaxSelectedCandidatesTypedStorage
        {
            get
            {
                return _maxSelectedCandidatesTypedStorage;
            }
            set
            {
                _maxSelectedCandidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _roundTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo> RoundTypedStorage
        {
            get
            {
                return _roundTypedStorage;
            }
            set
            {
                _roundTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _lastDelegationTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter> LastDelegationTypedStorage
        {
            get
            {
                return _lastDelegationTypedStorage;
            }
            set
            {
                _lastDelegationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _delegatorStateTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake> DelegatorStateTypedStorage
        {
            get
            {
                return _delegatorStateTypedStorage;
            }
            set
            {
                _delegatorStateTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidatePoolTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate> CandidatePoolTypedStorage
        {
            get
            {
                return _candidatePoolTypedStorage;
            }
            set
            {
                _candidatePoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForCandidatePoolTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForCandidatePoolTypedStorage
        {
            get
            {
                return _counterForCandidatePoolTypedStorage;
            }
            set
            {
                _counterForCandidatePoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _totalCollatorStakeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake> TotalCollatorStakeTypedStorage
        {
            get
            {
                return _totalCollatorStakeTypedStorage;
            }
            set
            {
                _totalCollatorStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _topCandidatesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2> TopCandidatesTypedStorage
        {
            get
            {
                return _topCandidatesTypedStorage;
            }
            set
            {
                _topCandidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _inflationConfigTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo> InflationConfigTypedStorage
        {
            get
            {
                return _inflationConfigTypedStorage;
            }
            set
            {
                _inflationConfigTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _unstakingTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap> UnstakingTypedStorage
        {
            get
            {
                return _unstakingTypedStorage;
            }
            set
            {
                _unstakingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _maxCollatorCandidateStakeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> MaxCollatorCandidateStakeTypedStorage
        {
            get
            {
                return _maxCollatorCandidateStakeTypedStorage;
            }
            set
            {
                _maxCollatorCandidateStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _lastRewardReductionTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> LastRewardReductionTypedStorage
        {
            get
            {
                return _lastRewardReductionTypedStorage;
            }
            set
            {
                _lastRewardReductionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _blocksAuthoredTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> BlocksAuthoredTypedStorage
        {
            get
            {
                return _blocksAuthoredTypedStorage;
            }
            set
            {
                _blocksAuthoredTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _blocksRewardedTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> BlocksRewardedTypedStorage
        {
            get
            {
                return _blocksRewardedTypedStorage;
            }
            set
            {
                _blocksRewardedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _rewardsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> RewardsTypedStorage
        {
            get
            {
                return _rewardsTypedStorage;
            }
            set
            {
                _rewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _forceNewRoundTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.Bool> ForceNewRoundTypedStorage
        {
            get
            {
                return _forceNewRoundTypedStorage;
            }
            set
            {
                _forceNewRoundTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MaxSelectedCandidatesTypedStorage.InitializeAsync("ParachainStaking", "MaxSelectedCandidates");
            await RoundTypedStorage.InitializeAsync("ParachainStaking", "Round");
            await LastDelegationTypedStorage.InitializeAsync("ParachainStaking", "LastDelegation");
            await DelegatorStateTypedStorage.InitializeAsync("ParachainStaking", "DelegatorState");
            await CandidatePoolTypedStorage.InitializeAsync("ParachainStaking", "CandidatePool");
            await CounterForCandidatePoolTypedStorage.InitializeAsync("ParachainStaking", "CounterForCandidatePool");
            await TotalCollatorStakeTypedStorage.InitializeAsync("ParachainStaking", "TotalCollatorStake");
            await TopCandidatesTypedStorage.InitializeAsync("ParachainStaking", "TopCandidates");
            await InflationConfigTypedStorage.InitializeAsync("ParachainStaking", "InflationConfig");
            await UnstakingTypedStorage.InitializeAsync("ParachainStaking", "Unstaking");
            await MaxCollatorCandidateStakeTypedStorage.InitializeAsync("ParachainStaking", "MaxCollatorCandidateStake");
            await LastRewardReductionTypedStorage.InitializeAsync("ParachainStaking", "LastRewardReduction");
            await BlocksAuthoredTypedStorage.InitializeAsync("ParachainStaking", "BlocksAuthored");
            await BlocksRewardedTypedStorage.InitializeAsync("ParachainStaking", "BlocksRewarded");
            await RewardsTypedStorage.InitializeAsync("ParachainStaking", "Rewards");
            await ForceNewRoundTypedStorage.InitializeAsync("ParachainStaking", "ForceNewRound");
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.MaxSelectedCandidates
        /// </summary>
        [StorageChange("ParachainStaking", "MaxSelectedCandidates")]
        public void OnUpdateMaxSelectedCandidates(string data)
        {
            MaxSelectedCandidatesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MaxSelectedCandidates
        ///  The maximum number of collator candidates selected at each round.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetMaxSelectedCandidates()
        {
            return MaxSelectedCandidatesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.Round
        /// </summary>
        [StorageChange("ParachainStaking", "Round")]
        public void OnUpdateRound(string data)
        {
            RoundTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Round
        ///  Current round number and next round scheduled transition.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo GetRound()
        {
            return RoundTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.LastDelegation
        /// </summary>
        [StorageChange("ParachainStaking", "LastDelegation")]
        public void OnUpdateLastDelegation(string key, string data)
        {
            LastDelegationTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LastDelegation
        ///  Delegation information for the latest session in which a delegator
        ///  delegated.
        /// 
        ///  It maps from an account to the number of delegations in the last
        ///  session in which they (re-)delegated.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter GetLastDelegation(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LastDelegationTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.DelegatorState
        /// </summary>
        [StorageChange("ParachainStaking", "DelegatorState")]
        public void OnUpdateDelegatorState(string key, string data)
        {
            DelegatorStateTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DelegatorState
        ///  Delegation staking information.
        /// 
        ///  It maps from an account to its delegation details.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake GetDelegatorState(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DelegatorStateTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.CandidatePool
        /// </summary>
        [StorageChange("ParachainStaking", "CandidatePool")]
        public void OnUpdateCandidatePool(string key, string data)
        {
            CandidatePoolTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CandidatePool
        ///  The staking information for a candidate.
        /// 
        ///  It maps from an account to its information.
        ///  Moreover, it counts the number of candidates.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate GetCandidatePool(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CandidatePoolTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.CounterForCandidatePool
        /// </summary>
        [StorageChange("ParachainStaking", "CounterForCandidatePool")]
        public void OnUpdateCounterForCandidatePool(string data)
        {
            CounterForCandidatePoolTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForCandidatePool
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForCandidatePool()
        {
            return CounterForCandidatePoolTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.TotalCollatorStake
        /// </summary>
        [StorageChange("ParachainStaking", "TotalCollatorStake")]
        public void OnUpdateTotalCollatorStake(string data)
        {
            TotalCollatorStakeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TotalCollatorStake
        ///  Total funds locked to back the currently selected collators.
        ///  The sum of all collator and their delegator stakes.
        /// 
        ///  Note: There are more funds locked by this pallet, since the backing for
        ///  non collating candidates is not included in [TotalCollatorStake].
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake GetTotalCollatorStake()
        {
            return TotalCollatorStakeTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.TopCandidates
        /// </summary>
        [StorageChange("ParachainStaking", "TopCandidates")]
        public void OnUpdateTopCandidates(string data)
        {
            TopCandidatesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TopCandidates
        ///  The collator candidates with the highest amount of stake.
        /// 
        ///  Each time the stake of a collator is increased, it is checked whether
        ///  this pushes another candidate out of the list. When the stake is
        ///  reduced however, it is not checked if another candidate has more stake,
        ///  since this would require iterating over the entire [CandidatePool].
        /// 
        ///  There must always be more candidates than [MaxSelectedCandidates] so
        ///  that a collator can drop out of the collator set by reducing their
        ///  stake.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2 GetTopCandidates()
        {
            return TopCandidatesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.InflationConfig
        /// </summary>
        [StorageChange("ParachainStaking", "InflationConfig")]
        public void OnUpdateInflationConfig(string data)
        {
            InflationConfigTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> InflationConfig
        ///  Inflation configuration.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo GetInflationConfig()
        {
            return InflationConfigTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.Unstaking
        /// </summary>
        [StorageChange("ParachainStaking", "Unstaking")]
        public void OnUpdateUnstaking(string key, string data)
        {
            UnstakingTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Unstaking
        ///  The funds waiting to be unstaked.
        /// 
        ///  It maps from accounts to all the funds addressed to them in the future
        ///  blocks.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap GetUnstaking(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (UnstakingTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.MaxCollatorCandidateStake
        /// </summary>
        [StorageChange("ParachainStaking", "MaxCollatorCandidateStake")]
        public void OnUpdateMaxCollatorCandidateStake(string data)
        {
            MaxCollatorCandidateStakeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MaxCollatorCandidateStake
        ///  The maximum amount a collator candidate can stake.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMaxCollatorCandidateStake()
        {
            return MaxCollatorCandidateStakeTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.LastRewardReduction
        /// </summary>
        [StorageChange("ParachainStaking", "LastRewardReduction")]
        public void OnUpdateLastRewardReduction(string data)
        {
            LastRewardReductionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LastRewardReduction
        ///  The year in which the last automatic reduction of the reward rates
        ///  occurred.
        /// 
        ///  It starts at zero at genesis and increments by one every BLOCKS_PER_YEAR
        ///  many blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetLastRewardReduction()
        {
            return LastRewardReductionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.BlocksAuthored
        /// </summary>
        [StorageChange("ParachainStaking", "BlocksAuthored")]
        public void OnUpdateBlocksAuthored(string key, string data)
        {
            BlocksAuthoredTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BlocksAuthored
        ///  The number of authored blocks for collators. It is updated via the
        ///  `note_author` hook when authoring a block .
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetBlocksAuthored(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BlocksAuthoredTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.BlocksRewarded
        /// </summary>
        [StorageChange("ParachainStaking", "BlocksRewarded")]
        public void OnUpdateBlocksRewarded(string key, string data)
        {
            BlocksRewardedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BlocksRewarded
        ///  The number of blocks for which rewards have been claimed by an address.
        /// 
        ///  For collators, this can be at most BlocksAuthored. It is updated when
        ///  incrementing collator rewards, either when calling
        ///  `inc_collator_rewards` or updating the `InflationInfo`.
        /// 
        ///  For delegators, this can be at most BlocksAuthored of the collator.It is
        ///  updated when incrementing delegator rewards, either when calling
        ///  `inc_delegator_rewards` or updating the `InflationInfo`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetBlocksRewarded(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BlocksRewardedTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.Rewards
        /// </summary>
        [StorageChange("ParachainStaking", "Rewards")]
        public void OnUpdateRewards(string key, string data)
        {
            RewardsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Rewards
        ///  The accumulated rewards for collator candidates and delegators.
        /// 
        ///  It maps from accounts to their total rewards since the last payout.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetRewards(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RewardsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParachainStaking.ForceNewRound
        /// </summary>
        [StorageChange("ParachainStaking", "ForceNewRound")]
        public void OnUpdateForceNewRound(string data)
        {
            ForceNewRoundTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ForceNewRound
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetForceNewRound()
        {
            return ForceNewRoundTypedStorage.Get();
        }
    }
}
