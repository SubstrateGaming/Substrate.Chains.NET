//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonsama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMultiTokenStorage interface definition.
    /// </summary>
    public interface IMultiTokenStorage : IStorage
    {
        
        /// <summary>
        /// >> Collection
        ///  Details of a collection.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails GetCollection(string key);
        
        /// <summary>
        /// >> OwnershipAcceptance
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetOwnershipAcceptance(string key);
        
        /// <summary>
        /// >> Account
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData GetAccount(string key);
        
        /// <summary>
        /// >> Holds
        ///  Reserves on account balances.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29 GetHolds(string key);
        
        /// <summary>
        /// >> NftOwners
        ///  NFTs (tokens with max_supply == 1) owners
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetNftOwners(string key);
        
        /// <summary>
        /// >> CollectionAccount
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetCollectionAccount(string key);
        
        /// <summary>
        /// >> CollectionRoleOf
        ///  Stores collection roles as per account.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3 GetCollectionRoleOf(string key);
        
        /// <summary>
        /// >> Item
        ///  The items in existence and their ownership details.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails GetItem(string key);
        
        /// <summary>
        /// >> CollectionMetadataOf
        ///  Metadata of a collection.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata GetCollectionMetadataOf(string key);
        
        /// <summary>
        /// >> ItemMetadataOf
        ///  Metadata of an item.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata GetItemMetadataOf(string key);
        
        /// <summary>
        /// >> Attribute
        ///  Attributes of a collection.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit> GetAttribute(string key);
        
        /// <summary>
        /// >> ItemAttributesApprovalsOf
        ///  Item attribute approvals.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet GetItemAttributesApprovalsOf(string key);
        
        /// <summary>
        /// >> NextCollectionId
        ///  Stores the `CollectionId` that is going to be used for the next collection.
        ///  This gets incremented whenever a new collection is created.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextCollectionId();
        
        /// <summary>
        /// >> NextItemId
        ///  Stores the `ItemId` that is going to be used for the next item.
        ///  This gets incremented whenever a new item is created.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextItemId(string key);
        
        /// <summary>
        /// >> CollectionConfigOf
        ///  Config of a collection.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig GetCollectionConfigOf(string key);
        
        /// <summary>
        /// >> ItemConfigOf
        ///  Config of an item.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig GetItemConfigOf(string key);
        
        /// <summary>
        /// >> Approvals
        ///  Approvals
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128> GetApprovals(string key);
        
        /// <summary>
        /// >> ApprovalsForAll
        ///  ApprovalForAll
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetApprovalsForAll(string key);
        
        /// <summary>
        /// >> SoulboundPermissionedDestination
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetSoulboundPermissionedDestination(string key);
        
        /// <summary>
        /// >> SoulboundGlobalPermissioned
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest GetSoulboundGlobalPermissioned(string key);
    }
    
    /// <summary>
    /// MultiTokenStorage class definition.
    /// </summary>
    public sealed class MultiTokenStorage : IMultiTokenStorage
    {
        
        /// <summary>
        /// _collectionTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails> _collectionTypedStorage;
        
        /// <summary>
        /// _ownershipAcceptanceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _ownershipAcceptanceTypedStorage;
        
        /// <summary>
        /// _accountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData> _accountTypedStorage;
        
        /// <summary>
        /// _holdsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29> _holdsTypedStorage;
        
        /// <summary>
        /// _nftOwnersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> _nftOwnersTypedStorage;
        
        /// <summary>
        /// _collectionAccountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _collectionAccountTypedStorage;
        
        /// <summary>
        /// _collectionRoleOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3> _collectionRoleOfTypedStorage;
        
        /// <summary>
        /// _itemTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails> _itemTypedStorage;
        
        /// <summary>
        /// _collectionMetadataOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata> _collectionMetadataOfTypedStorage;
        
        /// <summary>
        /// _itemMetadataOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata> _itemMetadataOfTypedStorage;
        
        /// <summary>
        /// _attributeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit>> _attributeTypedStorage;
        
        /// <summary>
        /// _itemAttributesApprovalsOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet> _itemAttributesApprovalsOfTypedStorage;
        
        /// <summary>
        /// _nextCollectionIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextCollectionIdTypedStorage;
        
        /// <summary>
        /// _nextItemIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextItemIdTypedStorage;
        
        /// <summary>
        /// _collectionConfigOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig> _collectionConfigOfTypedStorage;
        
        /// <summary>
        /// _itemConfigOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig> _itemConfigOfTypedStorage;
        
        /// <summary>
        /// _approvalsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128>> _approvalsTypedStorage;
        
        /// <summary>
        /// _approvalsForAllTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _approvalsForAllTypedStorage;
        
        /// <summary>
        /// _soulboundPermissionedDestinationTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _soulboundPermissionedDestinationTypedStorage;
        
        /// <summary>
        /// _soulboundGlobalPermissionedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest> _soulboundGlobalPermissionedTypedStorage;
        
        /// <summary>
        /// MultiTokenStorage constructor.
        /// </summary>
        public MultiTokenStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.CollectionTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails>("MultiToken.Collection", storageDataProvider, storageChangeDelegates);
            this.OwnershipAcceptanceTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("MultiToken.OwnershipAcceptance", storageDataProvider, storageChangeDelegates);
            this.AccountTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData>("MultiToken.Account", storageDataProvider, storageChangeDelegates);
            this.HoldsTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29>("MultiToken.Holds", storageDataProvider, storageChangeDelegates);
            this.NftOwnersTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20>("MultiToken.NftOwners", storageDataProvider, storageChangeDelegates);
            this.CollectionAccountTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("MultiToken.CollectionAccount", storageDataProvider, storageChangeDelegates);
            this.CollectionRoleOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3>("MultiToken.CollectionRoleOf", storageDataProvider, storageChangeDelegates);
            this.ItemTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails>("MultiToken.Item", storageDataProvider, storageChangeDelegates);
            this.CollectionMetadataOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata>("MultiToken.CollectionMetadataOf", storageDataProvider, storageChangeDelegates);
            this.ItemMetadataOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata>("MultiToken.ItemMetadataOf", storageDataProvider, storageChangeDelegates);
            this.AttributeTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit>>("MultiToken.Attribute", storageDataProvider, storageChangeDelegates);
            this.ItemAttributesApprovalsOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet>("MultiToken.ItemAttributesApprovalsOf", storageDataProvider, storageChangeDelegates);
            this.NextCollectionIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("MultiToken.NextCollectionId", storageDataProvider, storageChangeDelegates);
            this.NextItemIdTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("MultiToken.NextItemId", storageDataProvider, storageChangeDelegates);
            this.CollectionConfigOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig>("MultiToken.CollectionConfigOf", storageDataProvider, storageChangeDelegates);
            this.ItemConfigOfTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig>("MultiToken.ItemConfigOf", storageDataProvider, storageChangeDelegates);
            this.ApprovalsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128>>("MultiToken.Approvals", storageDataProvider, storageChangeDelegates);
            this.ApprovalsForAllTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("MultiToken.ApprovalsForAll", storageDataProvider, storageChangeDelegates);
            this.SoulboundPermissionedDestinationTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("MultiToken.SoulboundPermissionedDestination", storageDataProvider, storageChangeDelegates);
            this.SoulboundGlobalPermissionedTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest>("MultiToken.SoulboundGlobalPermissioned", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _collectionTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails> CollectionTypedStorage
        {
            get
            {
                return _collectionTypedStorage;
            }
            set
            {
                _collectionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ownershipAcceptanceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> OwnershipAcceptanceTypedStorage
        {
            get
            {
                return _ownershipAcceptanceTypedStorage;
            }
            set
            {
                _ownershipAcceptanceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _accountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData> AccountTypedStorage
        {
            get
            {
                return _accountTypedStorage;
            }
            set
            {
                _accountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _holdsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29> HoldsTypedStorage
        {
            get
            {
                return _holdsTypedStorage;
            }
            set
            {
                _holdsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nftOwnersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20> NftOwnersTypedStorage
        {
            get
            {
                return _nftOwnersTypedStorage;
            }
            set
            {
                _nftOwnersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _collectionAccountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> CollectionAccountTypedStorage
        {
            get
            {
                return _collectionAccountTypedStorage;
            }
            set
            {
                _collectionAccountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _collectionRoleOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3> CollectionRoleOfTypedStorage
        {
            get
            {
                return _collectionRoleOfTypedStorage;
            }
            set
            {
                _collectionRoleOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _itemTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails> ItemTypedStorage
        {
            get
            {
                return _itemTypedStorage;
            }
            set
            {
                _itemTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _collectionMetadataOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata> CollectionMetadataOfTypedStorage
        {
            get
            {
                return _collectionMetadataOfTypedStorage;
            }
            set
            {
                _collectionMetadataOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _itemMetadataOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata> ItemMetadataOfTypedStorage
        {
            get
            {
                return _itemMetadataOfTypedStorage;
            }
            set
            {
                _itemMetadataOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _attributeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit>> AttributeTypedStorage
        {
            get
            {
                return _attributeTypedStorage;
            }
            set
            {
                _attributeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _itemAttributesApprovalsOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet> ItemAttributesApprovalsOfTypedStorage
        {
            get
            {
                return _itemAttributesApprovalsOfTypedStorage;
            }
            set
            {
                _itemAttributesApprovalsOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextCollectionIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextCollectionIdTypedStorage
        {
            get
            {
                return _nextCollectionIdTypedStorage;
            }
            set
            {
                _nextCollectionIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextItemIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextItemIdTypedStorage
        {
            get
            {
                return _nextItemIdTypedStorage;
            }
            set
            {
                _nextItemIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _collectionConfigOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig> CollectionConfigOfTypedStorage
        {
            get
            {
                return _collectionConfigOfTypedStorage;
            }
            set
            {
                _collectionConfigOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _itemConfigOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig> ItemConfigOfTypedStorage
        {
            get
            {
                return _itemConfigOfTypedStorage;
            }
            set
            {
                _itemConfigOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _approvalsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128>> ApprovalsTypedStorage
        {
            get
            {
                return _approvalsTypedStorage;
            }
            set
            {
                _approvalsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _approvalsForAllTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> ApprovalsForAllTypedStorage
        {
            get
            {
                return _approvalsForAllTypedStorage;
            }
            set
            {
                _approvalsForAllTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _soulboundPermissionedDestinationTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> SoulboundPermissionedDestinationTypedStorage
        {
            get
            {
                return _soulboundPermissionedDestinationTypedStorage;
            }
            set
            {
                _soulboundPermissionedDestinationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _soulboundGlobalPermissionedTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest> SoulboundGlobalPermissionedTypedStorage
        {
            get
            {
                return _soulboundGlobalPermissionedTypedStorage;
            }
            set
            {
                _soulboundGlobalPermissionedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await CollectionTypedStorage.InitializeAsync("MultiToken", "Collection");
            await OwnershipAcceptanceTypedStorage.InitializeAsync("MultiToken", "OwnershipAcceptance");
            await AccountTypedStorage.InitializeAsync("MultiToken", "Account");
            await HoldsTypedStorage.InitializeAsync("MultiToken", "Holds");
            await NftOwnersTypedStorage.InitializeAsync("MultiToken", "NftOwners");
            await CollectionAccountTypedStorage.InitializeAsync("MultiToken", "CollectionAccount");
            await CollectionRoleOfTypedStorage.InitializeAsync("MultiToken", "CollectionRoleOf");
            await ItemTypedStorage.InitializeAsync("MultiToken", "Item");
            await CollectionMetadataOfTypedStorage.InitializeAsync("MultiToken", "CollectionMetadataOf");
            await ItemMetadataOfTypedStorage.InitializeAsync("MultiToken", "ItemMetadataOf");
            await AttributeTypedStorage.InitializeAsync("MultiToken", "Attribute");
            await ItemAttributesApprovalsOfTypedStorage.InitializeAsync("MultiToken", "ItemAttributesApprovalsOf");
            await NextCollectionIdTypedStorage.InitializeAsync("MultiToken", "NextCollectionId");
            await NextItemIdTypedStorage.InitializeAsync("MultiToken", "NextItemId");
            await CollectionConfigOfTypedStorage.InitializeAsync("MultiToken", "CollectionConfigOf");
            await ItemConfigOfTypedStorage.InitializeAsync("MultiToken", "ItemConfigOf");
            await ApprovalsTypedStorage.InitializeAsync("MultiToken", "Approvals");
            await ApprovalsForAllTypedStorage.InitializeAsync("MultiToken", "ApprovalsForAll");
            await SoulboundPermissionedDestinationTypedStorage.InitializeAsync("MultiToken", "SoulboundPermissionedDestination");
            await SoulboundGlobalPermissionedTypedStorage.InitializeAsync("MultiToken", "SoulboundGlobalPermissioned");
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.Collection
        /// </summary>
        [StorageChange("MultiToken", "Collection")]
        public void OnUpdateCollection(string key, string data)
        {
            CollectionTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Collection
        ///  Details of a collection.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails GetCollection(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CollectionTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.OwnershipAcceptance
        /// </summary>
        [StorageChange("MultiToken", "OwnershipAcceptance")]
        public void OnUpdateOwnershipAcceptance(string key, string data)
        {
            OwnershipAcceptanceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OwnershipAcceptance
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetOwnershipAcceptance(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OwnershipAcceptanceTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.Account
        /// </summary>
        [StorageChange("MultiToken", "Account")]
        public void OnUpdateAccount(string key, string data)
        {
            AccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Account
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData GetAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AccountData result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.Holds
        /// </summary>
        [StorageChange("MultiToken", "Holds")]
        public void OnUpdateHolds(string key, string data)
        {
            HoldsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Holds
        ///  Reserves on account balances.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29 GetHolds(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (HoldsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT29 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.NftOwners
        /// </summary>
        [StorageChange("MultiToken", "NftOwners")]
        public void OnUpdateNftOwners(string key, string data)
        {
            NftOwnersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> NftOwners
        ///  NFTs (tokens with max_supply == 1) owners
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetNftOwners(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NftOwnersTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.CollectionAccount
        /// </summary>
        [StorageChange("MultiToken", "CollectionAccount")]
        public void OnUpdateCollectionAccount(string key, string data)
        {
            CollectionAccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CollectionAccount
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetCollectionAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CollectionAccountTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.CollectionRoleOf
        /// </summary>
        [StorageChange("MultiToken", "CollectionRoleOf")]
        public void OnUpdateCollectionRoleOf(string key, string data)
        {
            CollectionRoleOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CollectionRoleOf
        ///  Stores collection roles as per account.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3 GetCollectionRoleOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CollectionRoleOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.BitFlagsT3 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.Item
        /// </summary>
        [StorageChange("MultiToken", "Item")]
        public void OnUpdateItem(string key, string data)
        {
            ItemTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Item
        ///  The items in existence and their ownership details.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails GetItem(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ItemTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.CollectionMetadataOf
        /// </summary>
        [StorageChange("MultiToken", "CollectionMetadataOf")]
        public void OnUpdateCollectionMetadataOf(string key, string data)
        {
            CollectionMetadataOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CollectionMetadataOf
        ///  Metadata of a collection.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata GetCollectionMetadataOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CollectionMetadataOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.ItemMetadataOf
        /// </summary>
        [StorageChange("MultiToken", "ItemMetadataOf")]
        public void OnUpdateItemMetadataOf(string key, string data)
        {
            ItemMetadataOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ItemMetadataOf
        ///  Metadata of an item.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata GetItemMetadataOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ItemMetadataOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.Attribute
        /// </summary>
        [StorageChange("MultiToken", "Attribute")]
        public void OnUpdateAttribute(string key, string data)
        {
            AttributeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Attribute
        ///  Attributes of a collection.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit> GetAttribute(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AttributeTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6, Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AttributeDeposit> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.ItemAttributesApprovalsOf
        /// </summary>
        [StorageChange("MultiToken", "ItemAttributesApprovalsOf")]
        public void OnUpdateItemAttributesApprovalsOf(string key, string data)
        {
            ItemAttributesApprovalsOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ItemAttributesApprovalsOf
        ///  Item attribute approvals.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet GetItemAttributesApprovalsOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ItemAttributesApprovalsOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSet result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.NextCollectionId
        /// </summary>
        [StorageChange("MultiToken", "NextCollectionId")]
        public void OnUpdateNextCollectionId(string data)
        {
            NextCollectionIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextCollectionId
        ///  Stores the `CollectionId` that is going to be used for the next collection.
        ///  This gets incremented whenever a new collection is created.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextCollectionId()
        {
            return NextCollectionIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.NextItemId
        /// </summary>
        [StorageChange("MultiToken", "NextItemId")]
        public void OnUpdateNextItemId(string key, string data)
        {
            NextItemIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> NextItemId
        ///  Stores the `ItemId` that is going to be used for the next item.
        ///  This gets incremented whenever a new item is created.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextItemId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NextItemIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.CollectionConfigOf
        /// </summary>
        [StorageChange("MultiToken", "CollectionConfigOf")]
        public void OnUpdateCollectionConfigOf(string key, string data)
        {
            CollectionConfigOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CollectionConfigOf
        ///  Config of a collection.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig GetCollectionConfigOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CollectionConfigOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.CollectionConfig result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.ItemConfigOf
        /// </summary>
        [StorageChange("MultiToken", "ItemConfigOf")]
        public void OnUpdateItemConfigOf(string key, string data)
        {
            ItemConfigOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ItemConfigOf
        ///  Config of an item.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig GetItemConfigOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ItemConfigOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.ItemConfig result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.Approvals
        /// </summary>
        [StorageChange("MultiToken", "Approvals")]
        public void OnUpdateApprovals(string key, string data)
        {
            ApprovalsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Approvals
        ///  Approvals
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128> GetApprovals(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ApprovalsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U128> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.ApprovalsForAll
        /// </summary>
        [StorageChange("MultiToken", "ApprovalsForAll")]
        public void OnUpdateApprovalsForAll(string key, string data)
        {
            ApprovalsForAllTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ApprovalsForAll
        ///  ApprovalForAll
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetApprovalsForAll(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ApprovalsForAllTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.SoulboundPermissionedDestination
        /// </summary>
        [StorageChange("MultiToken", "SoulboundPermissionedDestination")]
        public void OnUpdateSoulboundPermissionedDestination(string key, string data)
        {
            SoulboundPermissionedDestinationTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SoulboundPermissionedDestination
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetSoulboundPermissionedDestination(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SoulboundPermissionedDestinationTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiToken.SoulboundGlobalPermissioned
        /// </summary>
        [StorageChange("MultiToken", "SoulboundGlobalPermissioned")]
        public void OnUpdateSoulboundGlobalPermissioned(string key, string data)
        {
            SoulboundGlobalPermissionedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SoulboundGlobalPermissioned
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest GetSoulboundGlobalPermissioned(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SoulboundGlobalPermissionedTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_multi_token.types.AllowedAsSourceOrDest result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
