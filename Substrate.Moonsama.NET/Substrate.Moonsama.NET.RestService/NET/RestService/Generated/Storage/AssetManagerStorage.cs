//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonsama.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAssetManagerStorage interface definition.
    /// </summary>
    public interface IAssetManagerStorage : IStorage
    {
        
        /// <summary>
        /// >> AssetIdType
        ///  Mapping from an asset id to asset type.
        ///  This is mostly used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType GetAssetIdType(string key);
        
        /// <summary>
        /// >> AssetTypeId
        ///  Reverse mapping of AssetIdType. Mapping from an asset type to an asset id.
        ///  This is mostly used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetAssetTypeId(string key);
        
        /// <summary>
        /// >> AssetTypeUnitsPerSecond
        ///  Stores the units per second for local execution for a AssetType.
        ///  This is used to know how to charge for XCM execution in a particular
        ///  asset
        ///  Not all assets might contain units per second, hence the different storage
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetAssetTypeUnitsPerSecond(string key);
        
        /// <summary>
        /// >> LocalAssetCounter
        ///  Stores the counter of the number of local assets that have been
        ///  created so far
        ///  This value can be used to salt the creation of an assetId, e.g.,
        ///  by hashing it. This is particularly useful for cases like moonbeam
        ///  where letting users choose their assetId would result in collision
        ///  in the evm side.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetLocalAssetCounter();
        
        /// <summary>
        /// >> LocalAssetDeposit
        ///  Local asset deposits, a mapping from assetId to a struct
        ///  holding the creator (from which the deposit was reserved) and
        ///  the deposit amount
        /// </summary>
        Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet.AssetInfo GetLocalAssetDeposit(string key);
        
        /// <summary>
        /// >> SupportedFeePaymentAssets
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType> GetSupportedFeePaymentAssets();
    }
    
    /// <summary>
    /// AssetManagerStorage class definition.
    /// </summary>
    public sealed class AssetManagerStorage : IAssetManagerStorage
    {
        
        /// <summary>
        /// _assetIdTypeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType> _assetIdTypeTypedStorage;
        
        /// <summary>
        /// _assetTypeIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _assetTypeIdTypedStorage;
        
        /// <summary>
        /// _assetTypeUnitsPerSecondTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _assetTypeUnitsPerSecondTypedStorage;
        
        /// <summary>
        /// _localAssetCounterTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _localAssetCounterTypedStorage;
        
        /// <summary>
        /// _localAssetDepositTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet.AssetInfo> _localAssetDepositTypedStorage;
        
        /// <summary>
        /// _supportedFeePaymentAssetsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType>> _supportedFeePaymentAssetsTypedStorage;
        
        /// <summary>
        /// AssetManagerStorage constructor.
        /// </summary>
        public AssetManagerStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssetIdTypeTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType>("AssetManager.AssetIdType", storageDataProvider, storageChangeDelegates);
            this.AssetTypeIdTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("AssetManager.AssetTypeId", storageDataProvider, storageChangeDelegates);
            this.AssetTypeUnitsPerSecondTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("AssetManager.AssetTypeUnitsPerSecond", storageDataProvider, storageChangeDelegates);
            this.LocalAssetCounterTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("AssetManager.LocalAssetCounter", storageDataProvider, storageChangeDelegates);
            this.LocalAssetDepositTypedStorage = new TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet.AssetInfo>("AssetManager.LocalAssetDeposit", storageDataProvider, storageChangeDelegates);
            this.SupportedFeePaymentAssetsTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType>>("AssetManager.SupportedFeePaymentAssets", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assetIdTypeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType> AssetIdTypeTypedStorage
        {
            get
            {
                return _assetIdTypeTypedStorage;
            }
            set
            {
                _assetIdTypeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetTypeIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> AssetTypeIdTypedStorage
        {
            get
            {
                return _assetTypeIdTypedStorage;
            }
            set
            {
                _assetTypeIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetTypeUnitsPerSecondTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> AssetTypeUnitsPerSecondTypedStorage
        {
            get
            {
                return _assetTypeUnitsPerSecondTypedStorage;
            }
            set
            {
                _assetTypeUnitsPerSecondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _localAssetCounterTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> LocalAssetCounterTypedStorage
        {
            get
            {
                return _localAssetCounterTypedStorage;
            }
            set
            {
                _localAssetCounterTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _localAssetDepositTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet.AssetInfo> LocalAssetDepositTypedStorage
        {
            get
            {
                return _localAssetDepositTypedStorage;
            }
            set
            {
                _localAssetDepositTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _supportedFeePaymentAssetsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType>> SupportedFeePaymentAssetsTypedStorage
        {
            get
            {
                return _supportedFeePaymentAssetsTypedStorage;
            }
            set
            {
                _supportedFeePaymentAssetsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssetIdTypeTypedStorage.InitializeAsync("AssetManager", "AssetIdType");
            await AssetTypeIdTypedStorage.InitializeAsync("AssetManager", "AssetTypeId");
            await AssetTypeUnitsPerSecondTypedStorage.InitializeAsync("AssetManager", "AssetTypeUnitsPerSecond");
            await LocalAssetCounterTypedStorage.InitializeAsync("AssetManager", "LocalAssetCounter");
            await LocalAssetDepositTypedStorage.InitializeAsync("AssetManager", "LocalAssetDeposit");
            await SupportedFeePaymentAssetsTypedStorage.InitializeAsync("AssetManager", "SupportedFeePaymentAssets");
        }
        
        /// <summary>
        /// Implements any storage change for AssetManager.AssetIdType
        /// </summary>
        [StorageChange("AssetManager", "AssetIdType")]
        public void OnUpdateAssetIdType(string key, string data)
        {
            AssetIdTypeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetIdType
        ///  Mapping from an asset id to asset type.
        ///  This is mostly used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType GetAssetIdType(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetIdTypeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetManager.AssetTypeId
        /// </summary>
        [StorageChange("AssetManager", "AssetTypeId")]
        public void OnUpdateAssetTypeId(string key, string data)
        {
            AssetTypeIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetTypeId
        ///  Reverse mapping of AssetIdType. Mapping from an asset type to an asset id.
        ///  This is mostly used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetAssetTypeId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetTypeIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetManager.AssetTypeUnitsPerSecond
        /// </summary>
        [StorageChange("AssetManager", "AssetTypeUnitsPerSecond")]
        public void OnUpdateAssetTypeUnitsPerSecond(string key, string data)
        {
            AssetTypeUnitsPerSecondTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetTypeUnitsPerSecond
        ///  Stores the units per second for local execution for a AssetType.
        ///  This is used to know how to charge for XCM execution in a particular
        ///  asset
        ///  Not all assets might contain units per second, hence the different storage
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetAssetTypeUnitsPerSecond(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetTypeUnitsPerSecondTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetManager.LocalAssetCounter
        /// </summary>
        [StorageChange("AssetManager", "LocalAssetCounter")]
        public void OnUpdateLocalAssetCounter(string data)
        {
            LocalAssetCounterTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LocalAssetCounter
        ///  Stores the counter of the number of local assets that have been
        ///  created so far
        ///  This value can be used to salt the creation of an assetId, e.g.,
        ///  by hashing it. This is particularly useful for cases like moonbeam
        ///  where letting users choose their assetId would result in collision
        ///  in the evm side.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetLocalAssetCounter()
        {
            return LocalAssetCounterTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for AssetManager.LocalAssetDeposit
        /// </summary>
        [StorageChange("AssetManager", "LocalAssetDeposit")]
        public void OnUpdateLocalAssetDeposit(string key, string data)
        {
            LocalAssetDepositTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LocalAssetDeposit
        ///  Local asset deposits, a mapping from assetId to a struct
        ///  holding the creator (from which the deposit was reserved) and
        ///  the deposit amount
        /// </summary>
        public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet.AssetInfo GetLocalAssetDeposit(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LocalAssetDepositTypedStorage.Dictionary.TryGetValue(key, out Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet.AssetInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetManager.SupportedFeePaymentAssets
        /// </summary>
        [StorageChange("AssetManager", "SupportedFeePaymentAssets")]
        public void OnUpdateSupportedFeePaymentAssets(string data)
        {
            SupportedFeePaymentAssetsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SupportedFeePaymentAssets
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType> GetSupportedFeePaymentAssets()
        {
            return SupportedFeePaymentAssetsTypedStorage.Get();
        }
    }
}
