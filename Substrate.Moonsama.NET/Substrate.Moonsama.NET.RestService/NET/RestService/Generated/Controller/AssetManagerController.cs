//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Moonsama.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Moonsama.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// AssetManagerController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class AssetManagerController : ControllerBase
    {
        
        private IAssetManagerStorage _assetManagerStorage;
        
        /// <summary>
        /// AssetManagerController constructor.
        /// </summary>
        public AssetManagerController(IAssetManagerStorage assetManagerStorage)
        {
            _assetManagerStorage = assetManagerStorage;
        }
        
        /// <summary>
        /// >> AssetIdType
        ///  Mapping from an asset id to asset type.
        ///  This is mostly used when receiving transaction specifying an asset directly,
        ///  like transferring an asset from this chain to another.
        /// </summary>
        [HttpGet("AssetIdType")]
        [ProducesResponseType(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage), "AssetIdTypeParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetAssetIdType(string key)
        {
            return this.Ok(_assetManagerStorage.GetAssetIdType(key));
        }
        
        /// <summary>
        /// >> AssetTypeId
        ///  Reverse mapping of AssetIdType. Mapping from an asset type to an asset id.
        ///  This is mostly used when receiving a multilocation XCM message to retrieve
        ///  the corresponding asset in which tokens should me minted.
        /// </summary>
        [HttpGet("AssetTypeId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage), "AssetTypeIdParams", typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType))]
        public IActionResult GetAssetTypeId(string key)
        {
            return this.Ok(_assetManagerStorage.GetAssetTypeId(key));
        }
        
        /// <summary>
        /// >> AssetTypeUnitsPerSecond
        ///  Stores the units per second for local execution for a AssetType.
        ///  This is used to know how to charge for XCM execution in a particular
        ///  asset
        ///  Not all assets might contain units per second, hence the different storage
        /// </summary>
        [HttpGet("AssetTypeUnitsPerSecond")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage), "AssetTypeUnitsPerSecondParams", typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType))]
        public IActionResult GetAssetTypeUnitsPerSecond(string key)
        {
            return this.Ok(_assetManagerStorage.GetAssetTypeUnitsPerSecond(key));
        }
        
        /// <summary>
        /// >> LocalAssetCounter
        ///  Stores the counter of the number of local assets that have been
        ///  created so far
        ///  This value can be used to salt the creation of an assetId, e.g.,
        ///  by hashing it. This is particularly useful for cases like moonbeam
        ///  where letting users choose their assetId would result in collision
        ///  in the evm side.
        /// </summary>
        [HttpGet("LocalAssetCounter")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage), "LocalAssetCounterParams")]
        public IActionResult GetLocalAssetCounter()
        {
            return this.Ok(_assetManagerStorage.GetLocalAssetCounter());
        }
        
        /// <summary>
        /// >> LocalAssetDeposit
        ///  Local asset deposits, a mapping from assetId to a struct
        ///  holding the creator (from which the deposit was reserved) and
        ///  the deposit amount
        /// </summary>
        [HttpGet("LocalAssetDeposit")]
        [ProducesResponseType(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_asset_manager.pallet.AssetInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage), "LocalAssetDepositParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetLocalAssetDeposit(string key)
        {
            return this.Ok(_assetManagerStorage.GetLocalAssetDeposit(key));
        }
        
        /// <summary>
        /// >> SupportedFeePaymentAssets
        /// </summary>
        [HttpGet("SupportedFeePaymentAssets")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.moonsama_runtime.xcm_config.EnumAssetType>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Moonsama.NET.NetApiExt.Generated.Storage.AssetManagerStorage), "SupportedFeePaymentAssetsParams")]
        public IActionResult GetSupportedFeePaymentAssets()
        {
            return this.Ok(_assetManagerStorage.GetSupportedFeePaymentAssets());
        }
    }
}
