//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Moonsama.NET.RestClient.Generated.Clients;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types;
   
   public class RandomnessControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RequestState GetTestValue2()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RequestState result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RequestState();
         result.Request = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.Request();
         result.Request = this.GetTestValue3();
         result.Deposit = this.GetTestValueU128();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.Request GetTestValue3()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.Request result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.Request();
         result.RefundAddress = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.RefundAddress = this.GetTestValue4();
         result.ContractAddress = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.ContractAddress = this.GetTestValue5();
         result.Fee = this.GetTestValueU128();
         result.GasLimit = this.GetTestValueU64();
         result.NumWords = this.GetTestValueU8();
         result.Salt = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Salt = this.GetTestValue6();
         result.Info = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.EnumRequestInfo();
         result.Info.Create(this.GetTestValueEnum<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RequestInfo>(), this.GetTestValue7());
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160 GetTestValue4()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160 GetTestValue5()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H160();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue6()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U64, Substrate.NetApi.Model.Types.Primitive.U64> GetTestValue7()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U64, Substrate.NetApi.Model.Types.Primitive.U64> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U64, Substrate.NetApi.Model.Types.Primitive.U64>();
         result.Create(this.GetTestValueU64(), this.GetTestValueU64());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRequests()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RequestState mockupValue = this.GetTestValue2();
         Substrate.NetApi.Model.Types.Primitive.U64 mockupKey = this.GetTestValueU64();

         Assert.IsTrue(await rpcClient.SubscribeRequests(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRequests(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RequestState rpcResult = await rpcClient.GetRequests(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRequestCount()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U64 mockupValue = this.GetTestValueU64();


         Assert.IsTrue(await rpcClient.SubscribeRequestCount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRequestCount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U64 rpcResult = await rpcClient.GetRequestCount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256> GetTestValue10()
      {
         Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256>();
         result.Create(this.GetTestValue11());
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue11()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLocalVrfOutput()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256> mockupValue = this.GetTestValue10();


         Assert.IsTrue(await rpcClient.SubscribeLocalVrfOutput());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLocalVrfOutput(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256> rpcResult = await rpcClient.GetLocalVrfOutput();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRelayEpoch()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U64 mockupValue = this.GetTestValueU64();


         Assert.IsTrue(await rpcClient.SubscribeRelayEpoch());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRelayEpoch(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U64 rpcResult = await rpcClient.GetRelayEpoch();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue14()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInherentIncluded()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue14();


         Assert.IsTrue(await rpcClient.SubscribeInherentIncluded());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInherentIncluded(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetInherentIncluded();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue16()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNotFirstBlock()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue16();


         Assert.IsTrue(await rpcClient.SubscribeNotFirstBlock());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNotFirstBlock(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetNotFirstBlock();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RandomnessResult GetTestValue18()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RandomnessResult result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RandomnessResult();
         result.Randomness = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256>();
         result.Randomness.Create(this.GetTestValue19());
         result.RequestCount = this.GetTestValueU64();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue19()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.EnumRequestType GetTestValue20()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.EnumRequestType result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.EnumRequestType();
         result.Create(this.GetTestValueEnum<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RequestType>(), this.GetTestValueU64());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRandomnessResults()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RandomnessResult mockupValue = this.GetTestValue18();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.EnumRequestType mockupKey = this.GetTestValue20();

         Assert.IsTrue(await rpcClient.SubscribeRandomnessResults(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRandomnessResults(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types.RandomnessResult rpcResult = await rpcClient.GetRandomnessResults(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue22()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPreviousLocalVrfOutput()
      {
         // Construct new Mockup client to test with.
         RandomnessControllerMockupClient mockupClient = new RandomnessControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         RandomnessControllerClient rpcClient = new RandomnessControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 mockupValue = this.GetTestValue22();


         Assert.IsTrue(await rpcClient.SubscribePreviousLocalVrfOutput());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPreviousLocalVrfOutput(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types.H256 rpcResult = await rpcClient.GetPreviousLocalVrfOutput();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
