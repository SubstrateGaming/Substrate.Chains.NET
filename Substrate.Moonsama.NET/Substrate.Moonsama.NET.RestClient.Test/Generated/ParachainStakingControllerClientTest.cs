//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Moonsama.NET.RestClient.Generated.Clients;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map;
   
   public class ParachainStakingControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      [Test()]
      public async System.Threading.Tasks.Task TestMaxSelectedCandidates()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeMaxSelectedCandidates());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetMaxSelectedCandidates(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetMaxSelectedCandidates();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo GetTestValue3()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo();
         result.Current = this.GetTestValueU32();
         result.First = this.GetTestValueU32();
         result.Length = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRound()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo mockupValue = this.GetTestValue3();


         Assert.IsTrue(await rpcClient.SubscribeRound());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRound(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.RoundInfo rpcResult = await rpcClient.GetRound();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter GetTestValue5()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter();
         result.Round = this.GetTestValueU32();
         result.Counter = this.GetTestValueU32();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue6()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLastDelegation()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter mockupValue = this.GetTestValue5();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue6();

         Assert.IsTrue(await rpcClient.SubscribeLastDelegation(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLastDelegation(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.DelegationCounter rpcResult = await rpcClient.GetLastDelegation(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake GetTestValue8()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake();
         result.Owner = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Owner = this.GetTestValue9();
         result.Amount = this.GetTestValueU128();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue9()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue10()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestDelegatorState()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake mockupValue = this.GetTestValue8();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue10();

         Assert.IsTrue(await rpcClient.SubscribeDelegatorState(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetDelegatorState(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake rpcResult = await rpcClient.GetDelegatorState(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate GetTestValue12()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate();
         result.Id = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Id = this.GetTestValue13();
         result.Stake = this.GetTestValueU128();
         result.Delegators = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT1();
         result.Delegators = this.GetTestValue14();
         result.Total = this.GetTestValueU128();
         result.Status = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.EnumCandidateStatus();
         result.Status.Create(this.GetTestValueEnum<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.CandidateStatus>(), this.GetTestValueBaseVoid());
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue13()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT1 GetTestValue14()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT1 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT1();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10();
         result.Value = this.GetTestValue15();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10 GetTestValue15()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT10();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake>();
         result.Value.Create(new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake[] {
                  this.GetTestValue16()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake GetTestValue16()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake();
         result.Owner = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Owner = this.GetTestValue17();
         result.Amount = this.GetTestValueU128();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue17()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue18()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCandidatePool()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate mockupValue = this.GetTestValue12();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue18();

         Assert.IsTrue(await rpcClient.SubscribeCandidatePool(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCandidatePool(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Candidate rpcResult = await rpcClient.GetCandidatePool(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCounterForCandidatePool()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeCounterForCandidatePool());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCounterForCandidatePool(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetCounterForCandidatePool();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake GetTestValue21()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake();
         result.Collators = this.GetTestValueU128();
         result.Delegators = this.GetTestValueU128();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestTotalCollatorStake()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake mockupValue = this.GetTestValue21();


         Assert.IsTrue(await rpcClient.SubscribeTotalCollatorStake());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetTotalCollatorStake(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.TotalStake rpcResult = await rpcClient.GetTotalCollatorStake();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2 GetTestValue23()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11();
         result.Value = this.GetTestValue24();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 GetTestValue24()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake>();
         result.Value.Create(new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake[] {
                  this.GetTestValue25()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake GetTestValue25()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types.Stake();
         result.Owner = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Owner = this.GetTestValue26();
         result.Amount = this.GetTestValueU128();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue26()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestTopCandidates()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2 mockupValue = this.GetTestValue23();


         Assert.IsTrue(await rpcClient.SubscribeTopCandidates());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetTopCandidates(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set.OrderedSetT2 rpcResult = await rpcClient.GetTopCandidates();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo GetTestValue28()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo();
         result.Collator = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo();
         result.Collator = this.GetTestValue29();
         result.Delegator = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo();
         result.Delegator = this.GetTestValue34();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo GetTestValue29()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo();
         result.MaxRate = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.MaxRate = this.GetTestValue30();
         result.RewardRate = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate();
         result.RewardRate = this.GetTestValue31();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTestValue30()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate GetTestValue31()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate();
         result.Annual = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Annual = this.GetTestValue32();
         result.PerBlock = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.PerBlock = this.GetTestValue33();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTestValue32()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTestValue33()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo GetTestValue34()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.StakingInfo();
         result.MaxRate = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.MaxRate = this.GetTestValue35();
         result.RewardRate = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate();
         result.RewardRate = this.GetTestValue36();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTestValue35()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate GetTestValue36()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.RewardRate();
         result.Annual = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Annual = this.GetTestValue37();
         result.PerBlock = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.PerBlock = this.GetTestValue38();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTestValue37()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTestValue38()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInflationConfig()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo mockupValue = this.GetTestValue28();


         Assert.IsTrue(await rpcClient.SubscribeInflationConfig());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInflationConfig(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation.InflationInfo rpcResult = await rpcClient.GetInflationConfig();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap GetTestValue40()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.BTreeMapT3();
         result.Value = this.GetTestValue41();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.BTreeMapT3 GetTestValue41()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.BTreeMapT3 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.BTreeMapT3();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>();
         result.Value.Create(new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>[] {
                  this.GetTestValue42()});
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128> GetTestValue42()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Create(this.GetTestValueU32(), this.GetTestValueU128());
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue43()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUnstaking()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap mockupValue = this.GetTestValue40();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue43();

         Assert.IsTrue(await rpcClient.SubscribeUnstaking(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUnstaking(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap rpcResult = await rpcClient.GetUnstaking(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestMaxCollatorCandidateStake()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U128 mockupValue = this.GetTestValueU128();


         Assert.IsTrue(await rpcClient.SubscribeMaxCollatorCandidateStake());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetMaxCollatorCandidateStake(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U128 rpcResult = await rpcClient.GetMaxCollatorCandidateStake();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLastRewardReduction()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeLastRewardReduction());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLastRewardReduction(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetLastRewardReduction();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue47()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBlocksAuthored()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue47();

         Assert.IsTrue(await rpcClient.SubscribeBlocksAuthored(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBlocksAuthored(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetBlocksAuthored(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue49()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBlocksRewarded()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue49();

         Assert.IsTrue(await rpcClient.SubscribeBlocksRewarded(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBlocksRewarded(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetBlocksRewarded(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue51()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRewards()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U128 mockupValue = this.GetTestValueU128();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue51();

         Assert.IsTrue(await rpcClient.SubscribeRewards(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRewards(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U128 rpcResult = await rpcClient.GetRewards(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestForceNewRound()
      {
         // Construct new Mockup client to test with.
         ParachainStakingControllerMockupClient mockupClient = new ParachainStakingControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParachainStakingControllerClient rpcClient = new ParachainStakingControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();


         Assert.IsTrue(await rpcClient.SubscribeForceNewRound());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetForceNewRound(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetForceNewRound();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
