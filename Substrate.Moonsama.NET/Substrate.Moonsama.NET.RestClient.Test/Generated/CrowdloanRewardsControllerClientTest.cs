//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Moonsama.NET.RestClient.Generated.Clients;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.NetApi.Model.Types.Primitive;
   
   public class CrowdloanRewardsControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo GetTestValue2()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo();
         result.TotalReward = this.GetTestValueU128();
         result.ClaimedReward = this.GetTestValueU128();
         result.ContributedRelayAddresses = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8>();
         result.ContributedRelayAddresses.Create(new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8[] {
                  this.GetTestValue3()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetTestValue3()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue4()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAccountsPayable()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo mockupValue = this.GetTestValue2();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue4();

         Assert.IsTrue(await rpcClient.SubscribeAccountsPayable(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAccountsPayable(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo rpcResult = await rpcClient.GetAccountsPayable(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue6()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetTestValue7()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestClaimedRelayChainIds()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue6();
         Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 mockupKey = this.GetTestValue7();

         Assert.IsTrue(await rpcClient.SubscribeClaimedRelayChainIds(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetClaimedRelayChainIds(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetClaimedRelayChainIds(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo GetTestValue9()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo();
         result.TotalReward = this.GetTestValueU128();
         result.ClaimedReward = this.GetTestValueU128();
         result.ContributedRelayAddresses = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8>();
         result.ContributedRelayAddresses.Create(new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8[] {
                  this.GetTestValue10()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetTestValue10()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetTestValue11()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUnassociatedContributions()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo mockupValue = this.GetTestValue9();
         Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr32U8 mockupKey = this.GetTestValue11();

         Assert.IsTrue(await rpcClient.SubscribeUnassociatedContributions(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUnassociatedContributions(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_crowdloan_rewards.pallet.RewardInfo rpcResult = await rpcClient.GetUnassociatedContributions(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInitialized()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();


         Assert.IsTrue(await rpcClient.SubscribeInitialized());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInitialized(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetInitialized();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInitRelayBlock()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeInitRelayBlock());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInitRelayBlock(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetInitRelayBlock();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestEndRelayBlock()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeEndRelayBlock());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetEndRelayBlock(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetEndRelayBlock();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInitializedRewardAmount()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U128 mockupValue = this.GetTestValueU128();


         Assert.IsTrue(await rpcClient.SubscribeInitializedRewardAmount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInitializedRewardAmount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U128 rpcResult = await rpcClient.GetInitializedRewardAmount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestTotalContributors()
      {
         // Construct new Mockup client to test with.
         CrowdloanRewardsControllerMockupClient mockupClient = new CrowdloanRewardsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CrowdloanRewardsControllerClient rpcClient = new CrowdloanRewardsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeTotalContributors());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetTotalContributors(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetTotalContributors();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
