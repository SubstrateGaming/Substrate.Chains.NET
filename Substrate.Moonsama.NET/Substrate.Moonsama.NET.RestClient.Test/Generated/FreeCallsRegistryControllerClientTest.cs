//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Moonsama.NET.RestClient.Generated.Clients;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types;
   
   public class FreeCallsRegistryControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue2()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCall GetTestValue3()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCall result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCall();
         result.Target = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Target = this.GetTestValue4();
         result.Selector = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr4U8();
         result.Selector.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         result.CallType = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EnumFreeCallType();
         result.CallType.Create(this.GetTestValueEnum<Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.FreeCallType>());
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue4()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestFreeCallsRegistry()
      {
         // Construct new Mockup client to test with.
         FreeCallsRegistryControllerMockupClient mockupClient = new FreeCallsRegistryControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         FreeCallsRegistryControllerClient rpcClient = new FreeCallsRegistryControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue2();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCall mockupKey = this.GetTestValue3();

         Assert.IsTrue(await rpcClient.SubscribeFreeCallsRegistry(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetFreeCallsRegistry(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetFreeCallsRegistry(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue6()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRequestExpiryDate()
      {
         // Construct new Mockup client to test with.
         FreeCallsRegistryControllerMockupClient mockupClient = new FreeCallsRegistryControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         FreeCallsRegistryControllerClient rpcClient = new FreeCallsRegistryControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue6();

         Assert.IsTrue(await rpcClient.SubscribeRequestExpiryDate(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRequestExpiryDate(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetRequestExpiryDate(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCallCounter GetTestValue8()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCallCounter result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCallCounter();
         result.AvailableCalls = this.GetTestValueU32();
         result.ExpiryDate = this.GetTestValueU32();
         return result;
      }
      public Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 GetTestValue9()
      {
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 result;
         result = new Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20();
         result.Value = new Substrate.Moonsama.NET.NetApiExt.Generated.Types.Base.Arr20U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestFreeCallsAvailable()
      {
         // Construct new Mockup client to test with.
         FreeCallsRegistryControllerMockupClient mockupClient = new FreeCallsRegistryControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         FreeCallsRegistryControllerClient rpcClient = new FreeCallsRegistryControllerClient(_httpClient, subscriptionClient);
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCallCounter mockupValue = this.GetTestValue8();
         Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 mockupKey = this.GetTestValue9();

         Assert.IsTrue(await rpcClient.SubscribeFreeCallsAvailable(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetFreeCallsAvailable(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_evm_calls_registry.types.EvmCallCounter rpcResult = await rpcClient.GetFreeCallsAvailable(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
