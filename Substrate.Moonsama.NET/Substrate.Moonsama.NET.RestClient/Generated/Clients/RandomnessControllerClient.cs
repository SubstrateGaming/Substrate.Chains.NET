//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.pallet_randomness.types;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.Moonsama.NET.RestClient.Generated.Interfaces;
   
   public sealed class RandomnessControllerClient : BaseClient, IRandomnessControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public RandomnessControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<RequestState> GetRequests(U64 key)
      {
         return await SendRequestAsync<RequestState>(_httpClient, "randomness/requests", Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RequestsParams(key));
      }
      public async Task<bool> SubscribeRequests(U64 key)
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.Requests", Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RequestsParams(key));
      }
      public async Task<U64> GetRequestCount()
      {
         return await SendRequestAsync<U64>(_httpClient, "randomness/requestcount");
      }
      public async Task<bool> SubscribeRequestCount()
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.RequestCount");
      }
      public async Task<BaseOpt<H256>> GetLocalVrfOutput()
      {
         return await SendRequestAsync<BaseOpt<H256>>(_httpClient, "randomness/localvrfoutput");
      }
      public async Task<bool> SubscribeLocalVrfOutput()
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.LocalVrfOutput");
      }
      public async Task<U64> GetRelayEpoch()
      {
         return await SendRequestAsync<U64>(_httpClient, "randomness/relayepoch");
      }
      public async Task<bool> SubscribeRelayEpoch()
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.RelayEpoch");
      }
      public async Task<BaseTuple> GetInherentIncluded()
      {
         return await SendRequestAsync<BaseTuple>(_httpClient, "randomness/inherentincluded");
      }
      public async Task<bool> SubscribeInherentIncluded()
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.InherentIncluded");
      }
      public async Task<BaseTuple> GetNotFirstBlock()
      {
         return await SendRequestAsync<BaseTuple>(_httpClient, "randomness/notfirstblock");
      }
      public async Task<bool> SubscribeNotFirstBlock()
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.NotFirstBlock");
      }
      public async Task<RandomnessResult> GetRandomnessResults(EnumRequestType key)
      {
         return await SendRequestAsync<RandomnessResult>(_httpClient, "randomness/randomnessresults", Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RandomnessResultsParams(key));
      }
      public async Task<bool> SubscribeRandomnessResults(EnumRequestType key)
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.RandomnessResults", Substrate.Moonsama.NET.NetApiExt.Generated.Storage.RandomnessStorage.RandomnessResultsParams(key));
      }
      public async Task<H256> GetPreviousLocalVrfOutput()
      {
         return await SendRequestAsync<H256>(_httpClient, "randomness/previouslocalvrfoutput");
      }
      public async Task<bool> SubscribePreviousLocalVrfOutput()
      {
         return await _subscriptionClient.SubscribeAsync("Randomness.PreviousLocalVrfOutput");
      }
   }
}
