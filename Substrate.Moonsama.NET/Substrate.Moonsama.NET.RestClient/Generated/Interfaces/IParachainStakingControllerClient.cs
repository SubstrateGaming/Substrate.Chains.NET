//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Moonsama.NET.RestClient.Generated.Interfaces
{
   using System;
   using System.Threading.Tasks;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.types;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.set;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.parachain_staking.inflation;
   using Substrate.Moonsama.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map;
   
   public interface IParachainStakingControllerClient
   {
      Task<U32> GetMaxSelectedCandidates();
      Task<bool> SubscribeMaxSelectedCandidates();
      Task<RoundInfo> GetRound();
      Task<bool> SubscribeRound();
      Task<DelegationCounter> GetLastDelegation(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<bool> SubscribeLastDelegation(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<Stake> GetDelegatorState(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<bool> SubscribeDelegatorState(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<Candidate> GetCandidatePool(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<bool> SubscribeCandidatePool(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<U32> GetCounterForCandidatePool();
      Task<bool> SubscribeCounterForCandidatePool();
      Task<TotalStake> GetTotalCollatorStake();
      Task<bool> SubscribeTotalCollatorStake();
      Task<OrderedSetT2> GetTopCandidates();
      Task<bool> SubscribeTopCandidates();
      Task<InflationInfo> GetInflationConfig();
      Task<bool> SubscribeInflationConfig();
      Task<BoundedBTreeMap> GetUnstaking(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<bool> SubscribeUnstaking(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<U128> GetMaxCollatorCandidateStake();
      Task<bool> SubscribeMaxCollatorCandidateStake();
      Task<U32> GetLastRewardReduction();
      Task<bool> SubscribeLastRewardReduction();
      Task<U32> GetBlocksAuthored(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<bool> SubscribeBlocksAuthored(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<U32> GetBlocksRewarded(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<bool> SubscribeBlocksRewarded(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<U128> GetRewards(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<bool> SubscribeRewards(Substrate.Moonsama.NET.NetApiExt.Generated.Model.fp_account.AccountId20 key);
      Task<Bool> GetForceNewRound();
      Task<bool> SubscribeForceNewRound();
   }
}
