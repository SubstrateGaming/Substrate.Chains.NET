//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Aventus.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Aventus.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// NftManagerController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class NftManagerController : ControllerBase
    {
        
        private INftManagerStorage _nftManagerStorage;
        
        /// <summary>
        /// NftManagerController constructor.
        /// </summary>
        public NftManagerController(INftManagerStorage nftManagerStorage)
        {
            _nftManagerStorage = nftManagerStorage;
        }
        
        /// <summary>
        /// >> Nfts
        ///  A mapping between NFT Id and data
        /// </summary>
        [HttpGet("Nfts")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_nft_manager.nft_data.Nft), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "NftsParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256))]
        public IActionResult GetNfts(string key)
        {
            return this.Ok(_nftManagerStorage.GetNfts(key));
        }
        
        /// <summary>
        /// >> NftInfos
        ///  A mapping between NFT info Id and info data
        /// </summary>
        [HttpGet("NftInfos")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_nft_manager.nft_data.NftInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "NftInfosParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256))]
        public IActionResult GetNftInfos(string key)
        {
            return this.Ok(_nftManagerStorage.GetNftInfos(key));
        }
        
        /// <summary>
        /// >> NftBatches
        ///  A mapping between the external batch id and its nft Ids
        /// </summary>
        [HttpGet("NftBatches")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "NftBatchesParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256))]
        public IActionResult GetNftBatches(string key)
        {
            return this.Ok(_nftManagerStorage.GetNftBatches(key));
        }
        
        /// <summary>
        /// >> BatchInfoId
        ///  A mapping between the external batch id and its corresponding NtfInfoId
        /// </summary>
        [HttpGet("BatchInfoId")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "BatchInfoIdParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256))]
        public IActionResult GetBatchInfoId(string key)
        {
            return this.Ok(_nftManagerStorage.GetBatchInfoId(key));
        }
        
        /// <summary>
        /// >> UsedExternalReferences
        ///  A mapping between an ExternalRef and a flag to show that an NFT has used it
        /// </summary>
        [HttpGet("UsedExternalReferences")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.Bool), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "UsedExternalReferencesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>))]
        public IActionResult GetUsedExternalReferences(string key)
        {
            return this.Ok(_nftManagerStorage.GetUsedExternalReferences(key));
        }
        
        /// <summary>
        /// >> NextInfoId
        ///  The Id that will be used when creating the new NftInfo record
        /// </summary>
        [HttpGet("NextInfoId")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "NextInfoIdParams")]
        public IActionResult GetNextInfoId()
        {
            return this.Ok(_nftManagerStorage.GetNextInfoId());
        }
        
        /// <summary>
        /// >> NextSingleNftUniqueId
        ///  The Id that will be used when creating the new single Nft
        /// </summary>
        [HttpGet("NextSingleNftUniqueId")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "NextSingleNftUniqueIdParams")]
        public IActionResult GetNextSingleNftUniqueId()
        {
            return this.Ok(_nftManagerStorage.GetNextSingleNftUniqueId());
        }
        
        /// <summary>
        /// >> NftOpenForSale
        ///  A mapping that keeps all the nfts that are open to sale in a specific market
        /// </summary>
        [HttpGet("NftOpenForSale")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_nft_manager.nft_data.EnumNftSaleType), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "NftOpenForSaleParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256))]
        public IActionResult GetNftOpenForSale(string key)
        {
            return this.Ok(_nftManagerStorage.GetNftOpenForSale(key));
        }
        
        /// <summary>
        /// >> OwnedNfts
        ///  A mapping between the external batch id and its nft Ids
        /// </summary>
        [HttpGet("OwnedNfts")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "OwnedNftsParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetOwnedNfts(string key)
        {
            return this.Ok(_nftManagerStorage.GetOwnedNfts(key));
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  The version of this storage
        /// </summary>
        [HttpGet("StorageVersion")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_nft_manager.EnumReleases), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "StorageVersionParams")]
        public IActionResult GetStorageVersion()
        {
            return this.Ok(_nftManagerStorage.GetStorageVersion());
        }
        
        /// <summary>
        /// >> BatchNonces
        ///  An account nonce that represents the number of proxy transactions from this account
        /// </summary>
        [HttpGet("BatchNonces")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U64), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "BatchNoncesParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetBatchNonces(string key)
        {
            return this.Ok(_nftManagerStorage.GetBatchNonces(key));
        }
        
        /// <summary>
        /// >> BatchOpenForSale
        ///  A mapping that keeps all the batches that are open to sale in a specific market
        /// </summary>
        [HttpGet("BatchOpenForSale")]
        [ProducesResponseType(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_nft_manager.nft_data.EnumNftSaleType), 200)]
        [StorageKeyBuilder(typeof(Substrate.Aventus.NET.NetApiExt.Generated.Storage.NftManagerStorage), "BatchOpenForSaleParams", typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.U256))]
        public IActionResult GetBatchOpenForSale(string key)
        {
            return this.Ok(_nftManagerStorage.GetBatchOpenForSale(key));
        }
    }
}
