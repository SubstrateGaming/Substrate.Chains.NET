{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Index",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Index",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "misc_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee_frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 8
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 9
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 9
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeId": 10,
        "TypeDef": "Compact"
      },
      "10": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "11": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "12": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "13": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 15,
        "TypeDef": "Sequence"
      },
      "15": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 16
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "16": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "17": {
        "TypeId": 18,
        "TypeDef": "Sequence"
      },
      "18": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 129
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 19
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 130
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 19
          },
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "19": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 20
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 29
              }
            ],
            "Index": 1
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 30
              }
            ],
            "Index": 10
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 32
              }
            ],
            "Index": 11
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 33
              }
            ],
            "Index": 22
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "pallet_parachain_staking::Event<Runtime>",
                "TypeId": 34
              }
            ],
            "Index": 96
          },
          {
            "Name": "ValidatorsManager",
            "TypeFields": [
              {
                "TypeName": "pallet_validators_manager::Event<Runtime>",
                "TypeId": 40
              }
            ],
            "Index": 18
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 47
              }
            ],
            "Index": 30
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 51
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 90
              }
            ],
            "Index": 32
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                "TypeId": 91
              }
            ],
            "Index": 33
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "pallet_assets::Event<Runtime>",
                "TypeId": 92
              }
            ],
            "Index": 60
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 93
              }
            ],
            "Index": 62
          },
          {
            "Name": "Offences",
            "TypeFields": [
              {
                "TypeName": "pallet_offences::Event",
                "TypeId": 97
              }
            ],
            "Index": 72
          },
          {
            "Name": "ImOnline",
            "TypeFields": [
              {
                "TypeName": "pallet_im_online::Event<Runtime>",
                "TypeId": 98
              }
            ],
            "Index": 73
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 101
              }
            ],
            "Index": 74
          },
          {
            "Name": "AvnFinalityTracker",
            "TypeFields": [
              {
                "TypeName": "pallet_avn_finality_tracker::Event<Runtime>",
                "TypeId": 102
              }
            ],
            "Index": 82
          },
          {
            "Name": "AvnOffenceHandler",
            "TypeFields": [
              {
                "TypeName": "pallet_avn_offence_handler::Event<Runtime>",
                "TypeId": 103
              }
            ],
            "Index": 83
          },
          {
            "Name": "EthereumEvents",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum_events::Event<Runtime>",
                "TypeId": 104
              }
            ],
            "Index": 84
          },
          {
            "Name": "EthereumTransactions",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum_transactions::Event<Runtime>",
                "TypeId": 110
              }
            ],
            "Index": 85
          },
          {
            "Name": "NftManager",
            "TypeFields": [
              {
                "TypeName": "pallet_nft_manager::Event<Runtime>",
                "TypeId": 111
              }
            ],
            "Index": 86
          },
          {
            "Name": "TokenManager",
            "TypeFields": [
              {
                "TypeName": "pallet_token_manager::Event<Runtime>",
                "TypeId": 115
              }
            ],
            "Index": 87
          },
          {
            "Name": "Summary",
            "TypeFields": [
              {
                "TypeName": "pallet_summary::Event<Runtime>",
                "TypeId": 116
              }
            ],
            "Index": 88
          },
          {
            "Name": "AvnProxy",
            "TypeFields": [
              {
                "TypeName": "pallet_avn_proxy::Event<Runtime>",
                "TypeId": 121
              }
            ],
            "Index": 89
          },
          {
            "Name": "AvnTransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_avn_transaction_payment::Event<Runtime>",
                "TypeId": 122
              }
            ],
            "Index": 90
          }
        ],
        "Path": [
          "avn_parachain_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "20": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 24
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 21
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "21": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 22
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 23
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "22": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "23": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 25
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 26
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 27
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 28
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "26": {
        "Variants": [
          {
            "Name": "NoFunds",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3,
            "Docs": [
              "An upgrade has been authorized."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "30": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 31
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "31": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "32": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "33": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "34": {
        "Variants": [
          {
            "Name": "NewEra",
            "TypeFields": [
              {
                "Name": "starting_block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "selected_collators_number",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "total_balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Started new era."
            ]
          },
          {
            "Name": "JoinedCollatorCandidates",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_amt_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Account joined the set of collator candidates."
            ]
          },
          {
            "Name": "CollatorChosen",
            "TypeFields": [
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "collator_account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "total_exposed_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Candidate selected for collators. Total Exposed Amount includes all nominations."
            ]
          },
          {
            "Name": "CandidateBondLessRequested",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_to_decrease",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Candidate requested to decrease a self bond."
            ]
          },
          {
            "Name": "CandidateBondedMore",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Candidate has increased a self bond."
            ]
          },
          {
            "Name": "CandidateBondedLess",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Candidate has decreased a self bond."
            ]
          },
          {
            "Name": "CandidateWentOffline",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Candidate temporarily leave the set of collator candidates without unbonding."
            ]
          },
          {
            "Name": "CandidateBackOnline",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Candidate rejoins the set of collator candidates."
            ]
          },
          {
            "Name": "CandidateScheduledExit",
            "TypeFields": [
              {
                "Name": "exit_allowed_era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Candidate has requested to leave the set of candidates."
            ]
          },
          {
            "Name": "CancelledCandidateExit",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "Cancelled request to leave the set of candidates."
            ]
          },
          {
            "Name": "CancelledCandidateBondLess",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Cancelled request to decrease candidate's bond."
            ]
          },
          {
            "Name": "CandidateLeft",
            "TypeFields": [
              {
                "Name": "ex_candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unlocked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "new_total_amt_locked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Candidate has left the set of candidates."
            ]
          },
          {
            "Name": "NominationDecreaseScheduled",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_to_decrease",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "execute_era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "Nominator requested to decrease a bond for the collator candidate."
            ]
          },
          {
            "Name": "NominationIncreased",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "in_top",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 13
          },
          {
            "Name": "NominationDecreased",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "in_top",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 14
          },
          {
            "Name": "NominatorExitScheduled",
            "TypeFields": [
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Nominator requested to leave the set of nominators."
            ]
          },
          {
            "Name": "NominationRevocationScheduled",
            "TypeFields": [
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "scheduled_exit",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Nominator requested to revoke nomination."
            ]
          },
          {
            "Name": "NominatorLeft",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Nominator has left the set of nominators."
            ]
          },
          {
            "Name": "NominationRevoked",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Nomination revoked."
            ]
          },
          {
            "Name": "NominationKicked",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Nomination kicked."
            ]
          },
          {
            "Name": "NominatorExitCancelled",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 20,
            "Docs": [
              "Cancelled a pending request to exit the set of nominators."
            ]
          },
          {
            "Name": "CancelledNominationRequest",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "cancelled_request",
                "TypeName": "CancelledScheduledRequest<BalanceOf<T>>",
                "TypeId": 36
              },
              {
                "Name": "collator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 21,
            "Docs": [
              "Cancelled request to change an existing nomination."
            ]
          },
          {
            "Name": "Nomination",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "locked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "nominator_position",
                "TypeName": "NominatorAdded<BalanceOf<T>>",
                "TypeId": 38
              }
            ],
            "Index": 22,
            "Docs": [
              "New nomination (increase of the existing one)."
            ]
          },
          {
            "Name": "NominatorLeftCandidate",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unstaked_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "total_candidate_staked",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 23,
            "Docs": [
              "Nomination from candidate state has been remove."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rewards",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Paid the account (nominator or collator) the balance as liquid rewards."
            ]
          },
          {
            "Name": "ErrorPayingStakingReward",
            "TypeFields": [
              {
                "Name": "payee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rewards",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "There was an error attempting to pay the nominator their staking reward."
            ]
          },
          {
            "Name": "TotalSelectedSet",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 26,
            "Docs": [
              "Set total selected candidates to this value."
            ]
          },
          {
            "Name": "BlocksPerEraSet",
            "TypeFields": [
              {
                "Name": "current_era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "first_block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "old",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 27,
            "Docs": [
              "Set blocks per era"
            ]
          },
          {
            "Name": "NotEnoughFundsForEraPayment",
            "TypeFields": [
              {
                "Name": "reward_pot_balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 28,
            "Docs": [
              "Not enough fund to cover the staking reward payment."
            ]
          },
          {
            "Name": "CollatorPaid",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "period",
                "TypeName": "GrowthPeriodIndex",
                "TypeId": 4
              }
            ],
            "Index": 29,
            "Docs": [
              "A collator has been paid for producing blocks"
            ]
          },
          {
            "Name": "AdminSettingsUpdated",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "AdminSettings<BalanceOf<T>>",
                "TypeId": 39
              }
            ],
            "Index": 30,
            "Docs": [
              "An admin settings value has been updated"
            ]
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "35": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "36": {
        "TypeFields": [
          {
            "Name": "when_executable",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "action",
            "TypeName": "NominationAction<Balance>",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "nomination_requests",
          "CancelledScheduledRequest"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "37": {
        "Variants": [
          {
            "Name": "Revoke",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "nomination_requests",
          "NominationAction"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "38": {
        "Variants": [
          {
            "Name": "AddedToTop",
            "TypeFields": [
              {
                "Name": "new_total",
                "TypeName": "B",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "AddedToBottom",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "NominatorAdded"
        ],
        "TypeParams": [
          {
            "Name": "B",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "39": {
        "Variants": [
          {
            "Name": "Delay",
            "TypeFields": [
              {
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "MinCollatorStake",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "MinTotalNominatorStake",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "AdminSettings"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "40": {
        "Variants": [
          {
            "Name": "ValidatorRegistered",
            "TypeFields": [
              {
                "Name": "validator_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "eth_key",
                "TypeName": "ecdsa::Public",
                "TypeId": 41
              }
            ],
            "Index": 0
          },
          {
            "Name": "ValidatorDeregistered",
            "TypeFields": [
              {
                "Name": "validator_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "ValidatorActivationStarted",
            "TypeFields": [
              {
                "Name": "validator_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "VoteAdded",
            "TypeFields": [
              {
                "Name": "voter_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "action_id",
                "TypeName": "ActionId<T::AccountId>",
                "TypeId": 43
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 3
          },
          {
            "Name": "VotingEnded",
            "TypeFields": [
              {
                "Name": "action_id",
                "TypeName": "ActionId<T::AccountId>",
                "TypeId": 43
              },
              {
                "Name": "vote_approved",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 4
          },
          {
            "Name": "ValidatorActionConfirmed",
            "TypeFields": [
              {
                "Name": "action_id",
                "TypeName": "ActionId<T::AccountId>",
                "TypeId": 43
              }
            ],
            "Index": 5
          },
          {
            "Name": "ValidatorSlashed",
            "TypeFields": [
              {
                "Name": "action_id",
                "TypeName": "ActionId<T::AccountId>",
                "TypeId": 43
              }
            ],
            "Index": 6
          },
          {
            "Name": "OffenceReported",
            "TypeFields": [
              {
                "Name": "offence_type",
                "TypeName": "ValidatorOffenceType",
                "TypeId": 44
              },
              {
                "Name": "offenders",
                "TypeName": "Vec<IdentificationTuple<T>>",
                "TypeId": 45
              }
            ],
            "Index": 7
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "41": {
        "TypeFields": [
          {
            "TypeName": "[u8; 33]",
            "TypeId": 42
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "42": {
        "Length": 33,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "43": {
        "TypeFields": [
          {
            "Name": "action_account_id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ingress_counter",
            "TypeName": "IngressCounter",
            "TypeId": 10
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "ActionId"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "44": {
        "Variants": [
          {
            "Name": "InvalidSignatureSubmitted",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "RejectedValidAction",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ApprovedInvalidAction",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "offence",
          "ValidatorOffenceType"
        ],
        "TypeDef": "Variant"
      },
      "45": {
        "TypeId": 46,
        "TypeDef": "Sequence"
      },
      "46": {
        "TypeIds": [
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "47": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 48
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 0,
            "Docs": [
              "Some XCM was executed ok."
            ]
          },
          {
            "Name": "Fail",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 48
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 49
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Some XCM failed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 48
              }
            ],
            "Index": 2,
            "Docs": [
              "Bad XCM version used."
            ]
          },
          {
            "Name": "BadFormat",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 48
              }
            ],
            "Index": 3,
            "Docs": [
              "Bad XCM format used."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 48
              }
            ],
            "Index": 4,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          },
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 48
              }
            ],
            "Index": 5,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 50
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "required",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "An XCM exceeded the individual message weight budget."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 7,
            "Docs": [
              "An XCM from the overweight queue was executed with the given actual weight used."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "48": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "49": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "50": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "51": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 52
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted.",
              "",
              "\\[ outcome \\]"
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent.",
              "",
              "\\[ origin, destination, message \\]"
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "Response",
                "TypeId": 74
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call.",
              "",
              "\\[ id, response \\]"
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification could",
              "not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result.",
              "",
              "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`.",
              "",
              "\\[ id, pallet index, call index \\]"
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 83
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon.",
              "",
              "\\[ origin location, id, expected location \\]"
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed.",
              "",
              "\\[ origin location, id \\]"
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed.",
              "",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 84
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap.",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "\\[ destination, result \\]"
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention.",
              "",
              "\\[ location, XCM version \\]"
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "TypeName": "XcmError",
                "TypeId": 49
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it.",
              "",
              "\\[ location, query ID, error \\]"
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "TypeName": "VersionedMultiLocation",
                "TypeId": 89
              },
              {
                "TypeName": "QueryId",
                "TypeId": 10
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format.",
              "",
              "\\[ location, query ID \\]"
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "TypeName": "VersionedMultiAssets",
                "TypeId": 84
              }
            ],
            "Index": 16,
            "Docs": [
              "Some assets have been claimed from an asset trap",
              "",
              "\\[ hash, origin, assets \\]"
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "52": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "TypeName": "Error",
                "TypeId": 49
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Error",
                "TypeId": 49
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "53": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 54
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "54": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              },
              {
                "TypeName": "Junction",
                "TypeId": 55
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "55": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 57
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 57
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 57
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 59
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 60
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 58
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 61
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 62
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "56": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "57": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 58
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "58": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "59": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "60": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "61": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 58
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "62": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 64
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "64": {
        "TypeId": 65,
        "TypeDef": "Sequence"
      },
      "65": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 74
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 77
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 78
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 54
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 68
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 82
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 63
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 63
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "66": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 67
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "67": {
        "TypeId": 68,
        "TypeDef": "Sequence"
      },
      "68": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 69
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 70
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "69": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "70": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 60
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 71
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "71": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 60
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 16
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 72
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 73
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "72": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "73": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "74": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 75
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "75": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 76
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 76
          }
        ],
        "TypeDef": "Variant"
      },
      "76": {
        "TypeIds": [
          4,
          49
        ],
        "TypeDef": "Tuple"
      },
      "77": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "78": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "79": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 80
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "80": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 69
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 81
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "81": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "82": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "83": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 53
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 53
          }
        ],
        "TypeDef": "Variant"
      },
      "84": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": [
              {
                "TypeName": "Vec<v0::MultiAsset>",
                "TypeId": 85
              }
            ],
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": [
              {
                "TypeName": "v1::MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiAssets"
        ],
        "TypeDef": "Variant"
      },
      "85": {
        "TypeId": 86,
        "TypeDef": "Sequence"
      },
      "86": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "AllFungible",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "AllNonFungible",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "AllAbstractFungible",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 4
          },
          {
            "Name": "AllAbstractNonFungible",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 5
          },
          {
            "Name": "AllConcreteFungible",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MultiLocation",
                "TypeId": 87
              }
            ],
            "Index": 6
          },
          {
            "Name": "AllConcreteNonFungible",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "MultiLocation",
                "TypeId": 87
              }
            ],
            "Index": 7
          },
          {
            "Name": "AbstractFungible",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 60
              }
            ],
            "Index": 8
          },
          {
            "Name": "AbstractNonFungible",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "instance",
                "TypeName": "AssetInstance",
                "TypeId": 71
              }
            ],
            "Index": 9
          },
          {
            "Name": "ConcreteFungible",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 60
              }
            ],
            "Index": 10
          },
          {
            "Name": "ConcreteNonFungible",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "instance",
                "TypeName": "AssetInstance",
                "TypeId": 71
              }
            ],
            "Index": 11
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "multi_asset",
          "MultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              },
              {
                "TypeName": "Junction",
                "TypeId": 88
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "multi_location",
          "MultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "88": {
        "Variants": [
          {
            "Name": "Parent",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 57
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 57
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 57
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 59
              }
            ],
            "Index": 4
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 60
              }
            ],
            "Index": 6
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 58
              }
            ],
            "Index": 7
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 61
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 62
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "89": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": [
              {
                "TypeName": "v0::MultiLocation",
                "TypeId": 87
              }
            ],
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": [
              {
                "TypeName": "v1::MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "VersionedMultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "90": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 72
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 72
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 72
              },
              {
                "TypeName": "Outcome",
                "TypeId": 52
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "91": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM."
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM."
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "outcome",
                "TypeName": "Outcome",
                "TypeId": 52
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome."
            ]
          },
          {
            "Name": "WeightExhausted",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "remaining_weight",
                "TypeName": "Weight",
                "TypeId": 8
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "The weight limit for handling downward messages was reached."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 1
              },
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward message is overweight and was placed in the overweight queue."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward message from the overweight queue was executed."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "92": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Some asset class was created."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "total_supply",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some assets were issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some assets were transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some assets were destroyed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Some account `who` was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Some account `who` was thawed."
            ]
          },
          {
            "Name": "AssetFrozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Some asset `asset_id` was frozen."
            ]
          },
          {
            "Name": "AssetThawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Some asset `asset_id` was thawed."
            ]
          },
          {
            "Name": "AccountsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "accounts_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "accounts_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Accounts were destroyed for given asset."
            ]
          },
          {
            "Name": "ApprovalsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "approvals_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "approvals_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Approvals were destroyed for given asset."
            ]
          },
          {
            "Name": "DestructionStarted",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An asset class is in the process of being destroyed."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "An asset class was destroyed."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "Some asset class was force-created."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 15,
            "Docs": [
              "New metadata has been set for an asset."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been cleared for an asset."
            ]
          },
          {
            "Name": "ApprovedTransfer",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 18,
            "Docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ]
          },
          {
            "Name": "TransferredApproved",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ]
          },
          {
            "Name": "AssetStatusChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "93": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 94
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old_sudoer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 96
              }
            ],
            "Index": 1,
            "Docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 94
              }
            ],
            "Index": 2,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "94": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 95
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 24
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 95
          },
          {
            "Name": "E",
            "TypeId": 24
          }
        ],
        "TypeDef": "Variant"
      },
      "95": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "96": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "97": {
        "Variants": [
          {
            "Name": "Offence",
            "TypeFields": [
              {
                "Name": "kind",
                "TypeName": "Kind",
                "TypeId": 73
              },
              {
                "Name": "timeslot",
                "TypeName": "OpaqueTimeSlot",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "There is an offence reported of the given `kind` happened at the `session_index` and",
              "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
              "\\[kind, timeslot\\]."
            ]
          }
        ],
        "Path": [
          "pallet_offences",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "98": {
        "Variants": [
          {
            "Name": "HeartbeatReceived",
            "TypeFields": [
              {
                "Name": "authority_id",
                "TypeName": "T::AuthorityId",
                "TypeId": 99
              }
            ],
            "Index": 0,
            "Docs": [
              "A new heartbeat was received from `AuthorityId`."
            ]
          },
          {
            "Name": "AllGood",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "At the end of the session, no offence was committed."
            ]
          },
          {
            "Name": "SomeOffline",
            "TypeFields": [
              {
                "Name": "offline",
                "TypeName": "Vec<IdentificationTuple<T>>",
                "TypeId": 45
              }
            ],
            "Index": 2,
            "Docs": [
              "At the end of the session, at least one validator was found to be offline."
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "99": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 100
          }
        ],
        "Path": [
          "pallet_im_online",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "100": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "101": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 94
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "102": {
        "Variants": [
          {
            "Name": "FinalisedBlockUpdated",
            "TypeFields": [
              {
                "Name": "block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "BlockNumber is the new finalised block number"
            ]
          },
          {
            "Name": "FinalisedBlockUpdateStalled",
            "TypeFields": [
              {
                "Name": "block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "BlockNumber is the last block number data was updated"
            ]
          }
        ],
        "Path": [
          "pallet_avn_finality_tracker",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "This attribute generate the function `deposit_event` to deposit one of this pallet event,",
          "it is optional, it is also possible to provide a custom implementation."
        ]
      },
      "103": {
        "Variants": [
          {
            "Name": "ReportedOffence",
            "TypeFields": [
              {
                "Name": "offender",
                "TypeName": "T::ValidatorId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "One validator has been reported."
            ]
          },
          {
            "Name": "SlashingConfigurationUpdated",
            "TypeFields": [
              {
                "Name": "slashing_enabled",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 1,
            "Docs": [
              "True if slashing is enable, otherwise False"
            ]
          }
        ],
        "Path": [
          "pallet_avn_offence_handler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "This attribute generate the function `deposit_event` to deposit one of this pallet event,",
          "it is optional, it is also possible to provide a custom implementation."
        ]
      },
      "104": {
        "Variants": [
          {
            "Name": "EthereumEventAdded",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "added_by",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "t1_contract_address",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 0,
            "Docs": [
              "EthereumEventAdded(EthEventId, AddedBy, T1 contract address)"
            ]
          },
          {
            "Name": "EventValidated",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "check_result",
                "TypeName": "CheckResult",
                "TypeId": 107
              },
              {
                "Name": "validated_by",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "EventValidated(EthEventId, CheckResult, ValidatedBy)"
            ]
          },
          {
            "Name": "EventProcessed",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "processor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "outcome",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 2,
            "Docs": [
              "EventProcessed(EthEventId, Processor, Outcome)"
            ]
          },
          {
            "Name": "EventChallenged",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "challenger",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "challenge_reason",
                "TypeName": "ChallengeReason",
                "TypeId": 108
              }
            ],
            "Index": 3,
            "Docs": [
              "EventChallenged(EthEventId, Challenger, ChallengeReason)"
            ]
          },
          {
            "Name": "ChallengeSucceeded",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "check_result",
                "TypeName": "CheckResult",
                "TypeId": 107
              }
            ],
            "Index": 4,
            "Docs": [
              "ChallengeSucceeded(T1 event, CheckResult)"
            ]
          },
          {
            "Name": "OffenceReported",
            "TypeFields": [
              {
                "Name": "offence_type",
                "TypeName": "EthereumLogOffenceType",
                "TypeId": 109
              },
              {
                "Name": "offenders",
                "TypeName": "Vec<IdentificationTuple<T>>",
                "TypeId": 45
              }
            ],
            "Index": 5,
            "Docs": [
              "OffenceReported(OffenceType, Offenders)"
            ]
          },
          {
            "Name": "EventAccepted",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              }
            ],
            "Index": 6,
            "Docs": [
              "EventAccepted(EthEventId)"
            ]
          },
          {
            "Name": "EventRejected",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "check_result",
                "TypeName": "CheckResult",
                "TypeId": 107
              },
              {
                "Name": "successful_challenge",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 7,
            "Docs": [
              "EventRejected(EthEventId, CheckResult, HasSuccessfullChallenge)"
            ]
          },
          {
            "Name": "EventChallengePeriodUpdated",
            "TypeFields": [
              {
                "Name": "block",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "EventChallengePeriodUpdated(EventChallengePeriodInBlocks)"
            ]
          },
          {
            "Name": "CallDispatched",
            "TypeFields": [
              {
                "Name": "relayer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 9
          },
          {
            "Name": "NftEthereumEventAdded",
            "TypeFields": [
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "NFT related Ethereum event was added(EthEventId, AddedBy)"
            ]
          }
        ],
        "Path": [
          "pallet_ethereum_events",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "105": {
        "TypeFields": [
          {
            "Name": "signature",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "transaction_hash",
            "TypeName": "H256",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "EthEventId"
        ],
        "TypeDef": "Composite"
      },
      "106": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 59
          }
        ],
        "Path": [
          "primitive_types",
          "H160"
        ],
        "TypeDef": "Composite"
      },
      "107": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Invalid",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "HttpErrorCheckingEvent",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "InsufficientConfirmations",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "CheckResult"
        ],
        "TypeDef": "Variant"
      },
      "108": {
        "Variants": [
          {
            "Name": "IncorrectResult",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "IncorrectEventData",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "ChallengeReason"
        ],
        "TypeDef": "Variant"
      },
      "109": {
        "Variants": [
          {
            "Name": "IncorrectValidationResultSubmitted",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ChallengeAttemptedOnValidResult",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ethereum_events",
          "offence",
          "EthereumLogOffenceType"
        ],
        "TypeDef": "Variant"
      },
      "110": {
        "Variants": [
          {
            "Name": "TransactionReadyToSend",
            "TypeFields": [
              {
                "Name": "transaction_id",
                "TypeName": "TransactionId",
                "TypeId": 10
              },
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "EthereumTransactionHashAdded",
            "TypeFields": [
              {
                "Name": "transaction_id",
                "TypeName": "TransactionId",
                "TypeId": 10
              },
              {
                "Name": "transaction_hash",
                "TypeName": "EthereumTransactionHash",
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "This attribute generate the function `deposit_event` to deposit one of this pallet event,",
          "it is optional, it is also possible to provide a custom implementation."
        ]
      },
      "111": {
        "Variants": [
          {
            "Name": "SingleNftMinted",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "authority",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 0
          },
          {
            "Name": "BatchNftMinted",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "batch_nft_id",
                "TypeName": "NftBatchId",
                "TypeId": 112
              },
              {
                "Name": "authority",
                "TypeName": "H160",
                "TypeId": 106
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "nft_id, batch_id, provenance, owner"
            ]
          },
          {
            "Name": "NftOpenForSale",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "sale_type",
                "TypeName": "NftSaleType",
                "TypeId": 114
              }
            ],
            "Index": 2,
            "Docs": [
              "nft_id, sale_type"
            ]
          },
          {
            "Name": "BatchOpenForSale",
            "TypeFields": [
              {
                "Name": "batch_nft_id",
                "TypeName": "NftBatchId",
                "TypeId": 112
              },
              {
                "Name": "sale_type",
                "TypeName": "NftSaleType",
                "TypeId": 114
              }
            ],
            "Index": 3,
            "Docs": [
              "batch_id, sale_type"
            ]
          },
          {
            "Name": "EthNftTransfer",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "new_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "sale_type",
                "TypeName": "NftSaleType",
                "TypeId": 114
              },
              {
                "Name": "op_id",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              }
            ],
            "Index": 4,
            "Docs": [
              "EthNftTransfer(NftId, NewOwnerAccountId, NftSaleType, u64, EthEventId),"
            ]
          },
          {
            "Name": "FiatNftTransfer",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "sale_type",
                "TypeName": "NftSaleType",
                "TypeId": 114
              },
              {
                "Name": "op_id",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "FiatNftTransfer(NftId, SenderAccountId, NewOwnerAccountId, NftSaleType, NftNonce)"
            ]
          },
          {
            "Name": "CancelSingleEthNftListing",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "sale_type",
                "TypeName": "NftSaleType",
                "TypeId": 114
              },
              {
                "Name": "op_id",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "eth_event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              }
            ],
            "Index": 6,
            "Docs": [
              "CancelSingleEthNftListing(NftId, NftSaleType, u64, EthEventId),"
            ]
          },
          {
            "Name": "CancelSingleFiatNftListing",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "sale_type",
                "TypeName": "NftSaleType",
                "TypeId": 114
              },
              {
                "Name": "op_id",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 7,
            "Docs": [
              "CancelSingleFiatNftListing(NftId, NftSaleType, NftNonce)"
            ]
          },
          {
            "Name": "CallDispatched",
            "TypeFields": [
              {
                "Name": "relayer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "Call dispatched by `relayer` with `hash`"
            ]
          },
          {
            "Name": "BatchCreated",
            "TypeFields": [
              {
                "Name": "batch_nft_id",
                "TypeName": "NftBatchId",
                "TypeId": 112
              },
              {
                "Name": "total_supply",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "batch_creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "authority",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 9,
            "Docs": [
              "batch_id, total_supply, batch_creator, provenance"
            ]
          },
          {
            "Name": "BatchSaleEnded",
            "TypeFields": [
              {
                "Name": "batch_nft_id",
                "TypeName": "NftBatchId",
                "TypeId": 112
              },
              {
                "Name": "sale_type",
                "TypeName": "NftSaleType",
                "TypeId": 114
              }
            ],
            "Index": 10,
            "Docs": [
              "batch_id, market"
            ]
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "This attribute generate the function `deposit_event` to deposit one of this pallet event,",
          "it is optional, it is also possible to provide a custom implementation."
        ]
      },
      "112": {
        "TypeFields": [
          {
            "TypeName": "[u64; 4]",
            "TypeId": 113
          }
        ],
        "Path": [
          "primitive_types",
          "U256"
        ],
        "TypeDef": "Composite"
      },
      "113": {
        "Length": 4,
        "TypeId": 10,
        "TypeDef": "Array"
      },
      "114": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Ethereum",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Fiat",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "nft_data",
          "NftSaleType"
        ],
        "TypeDef": "Variant"
      },
      "115": {
        "Variants": [
          {
            "Name": "AVTLifted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "eth_tx_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 0
          },
          {
            "Name": "TokenLifted",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 106
              },
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "token_balance",
                "TypeName": "T::TokenBalance",
                "TypeId": 6
              },
              {
                "Name": "eth_tx_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 1
          },
          {
            "Name": "TokenTransferred",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 106
              },
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "token_balance",
                "TypeName": "T::TokenBalance",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "CallDispatched",
            "TypeFields": [
              {
                "Name": "relayer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 3
          },
          {
            "Name": "TokenLowered",
            "TypeFields": [
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 106
              },
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 6
              },
              {
                "Name": "t1_recipient",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 4
          },
          {
            "Name": "AvtTransferredFromTreasury",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5
          },
          {
            "Name": "AVTGrowthLifted",
            "TypeFields": [
              {
                "Name": "treasury_share",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "collators_share",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "eth_tx_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "pallet_token_manager",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "This attribute generate the function `deposit_event` to deposit one of this pallet event,",
          "it is optional, it is also possible to provide a custom implementation."
        ]
      },
      "116": {
        "Variants": [
          {
            "Name": "SchedulePeriodAndVotingPeriodUpdated",
            "TypeFields": [
              {
                "Name": "schedule_period",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "voting_period",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Schedule period and voting period are updated"
            ]
          },
          {
            "Name": "SummaryCalculated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "to",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "root_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "submitter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Root hash of summary between from block number and to block number is calculated by a",
              "validator"
            ]
          },
          {
            "Name": "VoteAdded",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "root_id",
                "TypeName": "RootId<T::BlockNumber>",
                "TypeId": 117
              },
              {
                "Name": "agree_vote",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 2,
            "Docs": [
              "Vote by a voter for a root id is added"
            ]
          },
          {
            "Name": "VotingEnded",
            "TypeFields": [
              {
                "Name": "root_id",
                "TypeName": "RootId<T::BlockNumber>",
                "TypeId": 117
              },
              {
                "Name": "vote_approved",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 3,
            "Docs": [
              "Voting for the root id is finished, true means the root is approved"
            ]
          },
          {
            "Name": "SummaryOffenceReported",
            "TypeFields": [
              {
                "Name": "offence_type",
                "TypeName": "SummaryOffenceType",
                "TypeId": 119
              },
              {
                "Name": "offenders",
                "TypeName": "Vec<IdentificationTuple<T>>",
                "TypeId": 45
              }
            ],
            "Index": 4,
            "Docs": [
              "A summary offence by a list of offenders is reported"
            ]
          },
          {
            "Name": "SlotAdvanced",
            "TypeFields": [
              {
                "Name": "advanced_by",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new_slot",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "slot_validator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "slot_end",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A new slot between a range of blocks for a validator is advanced by an account"
            ]
          },
          {
            "Name": "ChallengeAdded",
            "TypeFields": [
              {
                "Name": "challenge_reason",
                "TypeName": "SummaryChallengeReason",
                "TypeId": 120
              },
              {
                "Name": "challenger",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "challengee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "A summary created by a challengee is challenged by a challenger for a reason"
            ]
          },
          {
            "Name": "SummaryNotPublishedOffence",
            "TypeFields": [
              {
                "Name": "challengee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "void_slot",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "last_published",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "end_vote",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "An offence about a summary not be published by a challengee is reported"
            ]
          },
          {
            "Name": "SummaryRootValidated",
            "TypeFields": [
              {
                "Name": "root_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "ingress_counter",
                "TypeName": "IngressCounter",
                "TypeId": 10
              },
              {
                "Name": "block_range",
                "TypeName": "RootRange<T::BlockNumber>",
                "TypeId": 118
              }
            ],
            "Index": 8,
            "Docs": [
              "A summary root validated"
            ]
          }
        ],
        "Path": [
          "pallet_summary",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "This attribute generate the function `deposit_event` to deposit one of this pallet event,",
          "it is optional, it is also possible to provide a custom implementation."
        ]
      },
      "117": {
        "TypeFields": [
          {
            "Name": "range",
            "TypeName": "RootRange<BlockNumber>",
            "TypeId": 118
          },
          {
            "Name": "ingress_counter",
            "TypeName": "IngressCounter",
            "TypeId": 10
          }
        ],
        "Path": [
          "pallet_summary",
          "RootId"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "118": {
        "TypeFields": [
          {
            "Name": "from_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "to_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_summary",
          "RootRange"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "119": {
        "Variants": [
          {
            "Name": "InvalidSignatureSubmitted",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "InvalidVoteSubmitted",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SlotNotAdvanced",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NoSummaryCreated",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "RejectedValidRoot",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CreatedInvalidRoot",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "ApprovedInvalidRoot",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_summary",
          "offence",
          "SummaryOffenceType"
        ],
        "TypeDef": "Variant"
      },
      "120": {
        "Variants": [
          {
            "Name": "SlotNotAdvanced",
            "TypeFields": [
              {
                "TypeName": "SlotNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_summary",
          "challenge",
          "SummaryChallengeReason"
        ],
        "TypeDef": "Variant"
      },
      "121": {
        "Variants": [
          {
            "Name": "CallDispatched",
            "TypeFields": [
              {
                "Name": "relayer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 0
          },
          {
            "Name": "InnerCallFailed",
            "TypeFields": [
              {
                "Name": "relayer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              },
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 24
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_avn_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "122": {
        "Variants": [
          {
            "Name": "KnownSenderAdded",
            "TypeFields": [
              {
                "Name": "known_sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "adjustment",
                "TypeName": "FeeAdjustmentConfig<T>",
                "TypeId": 123
              }
            ],
            "Index": 0,
            "Docs": [
              "A new known sender has been added"
            ]
          },
          {
            "Name": "KnownSenderUpdated",
            "TypeFields": [
              {
                "Name": "known_sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "adjustment",
                "TypeName": "FeeAdjustmentConfig<T>",
                "TypeId": 123
              }
            ],
            "Index": 1,
            "Docs": [
              "Adjustments have been updated for an existing known sender"
            ]
          },
          {
            "Name": "KnownSenderRemoved",
            "TypeFields": [
              {
                "Name": "known_sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "AdjustedTransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "An adjusted transaction fee of `fee` has been paid by `who`"
            ]
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
        ]
      },
      "123": {
        "Variants": [
          {
            "Name": "FixedFee",
            "TypeFields": [
              {
                "TypeName": "FixedFeeConfig<T>",
                "TypeId": 124
              }
            ],
            "Index": 0
          },
          {
            "Name": "PercentageFee",
            "TypeFields": [
              {
                "TypeName": "PercentageFeeConfig<T>",
                "TypeId": 125
              }
            ],
            "Index": 1
          },
          {
            "Name": "TimeBased",
            "TypeFields": [
              {
                "TypeName": "TimeBasedConfig<T>",
                "TypeId": 126
              }
            ],
            "Index": 2
          },
          {
            "Name": "TransactionBased",
            "TypeFields": [
              {
                "TypeName": "TransactionBasedConfig<T>",
                "TypeId": 128
              }
            ],
            "Index": 3
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "FeeAdjustmentConfig"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant"
      },
      "124": {
        "TypeFields": [
          {
            "Name": "fee",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "FixedFeeConfig"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "125": {
        "TypeFields": [
          {
            "Name": "percentage",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "PercentageFeeConfig"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "126": {
        "TypeFields": [
          {
            "Name": "fee_type",
            "TypeName": "FeeType<T>",
            "TypeId": 127
          },
          {
            "Name": "end_block_number",
            "TypeName": "T::BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "TimeBasedConfig"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "127": {
        "Variants": [
          {
            "Name": "FixedFee",
            "TypeFields": [
              {
                "TypeName": "FixedFeeConfig<T>",
                "TypeId": 124
              }
            ],
            "Index": 0
          },
          {
            "Name": "PercentageFee",
            "TypeFields": [
              {
                "TypeName": "PercentageFeeConfig<T>",
                "TypeId": 125
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "FeeType"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "TypeFields": [
          {
            "Name": "fee_type",
            "TypeName": "FeeType<T>",
            "TypeId": 127
          },
          {
            "Name": "account",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "end_count",
            "TypeName": "T::Index",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "TransactionBasedConfig"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "129": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "130": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "131": {
        "TypeId": 132,
        "TypeDef": "Sequence"
      },
      "132": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "133": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 56
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 134
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "134": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "135": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "# <weight>",
              "- `O(1)`",
              "# </weight>"
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code.",
              "",
              "# <weight>",
              "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
              "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
              "  expensive).",
              "- 1 storage write (codec `O(C)`).",
              "- 1 digest item.",
              "- 1 event.",
              "The weight of this function is dependent on the runtime, but generally this is very",
              "expensive. We will treat this as a full block.",
              "# </weight>"
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "# <weight>",
              "- `O(C)` where `C` length of `code`",
              "- 1 storage write (codec `O(C)`).",
              "- 1 digest item.",
              "- 1 event.",
              "The weight of this function is dependent on the runtime. We will treat this as a full",
              "block. # </weight>"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 136
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 138
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 12
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "136": {
        "TypeId": 137,
        "TypeDef": "Sequence"
      },
      "137": {
        "TypeIds": [
          12,
          12
        ],
        "TypeDef": "Tuple"
      },
      "138": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "139": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 140
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "140": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 141
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 141
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 141
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 141
          }
        ],
        "TypeDef": "Composite"
      },
      "141": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 142
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 142
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 142
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "142": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 8
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 8
          }
        ],
        "TypeDef": "Variant"
      },
      "143": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 144
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "144": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "145": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "146": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 134
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 134
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 147
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "147": {
        "TypeFields": [
          {
            "TypeId": 148
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 148
          }
        ],
        "TypeDef": "Composite"
      },
      "148": {
        "TypeId": 149,
        "TypeDef": "Sequence"
      },
      "149": {
        "TypeIds": [
          72,
          4
        ],
        "TypeDef": "Tuple"
      },
      "150": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "151": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "152": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 153
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 11
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 11
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "153": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "154": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 155
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 155
          }
        ],
        "TypeDef": "Variant"
      },
      "155": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "156": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 157
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "157": {
        "TypeFields": [
          {
            "TypeId": 138
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "158": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 11
          },
          {
            "Name": "relay_dispatch_queue_size",
            "TypeName": "(u32, u32)",
            "TypeId": 132
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 159
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 159
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "159": {
        "TypeId": 160,
        "TypeDef": "Sequence"
      },
      "160": {
        "TypeIds": [
          50,
          161
        ],
        "TypeDef": "Tuple"
      },
      "161": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 48
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v2",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "163": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 11
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "164": {
        "TypeFields": [
          {
            "TypeId": 165
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 50
          },
          {
            "Name": "V",
            "TypeId": 163
          }
        ],
        "TypeDef": "Composite"
      },
      "165": {
        "TypeId": 166,
        "TypeDef": "Sequence"
      },
      "166": {
        "TypeIds": [
          50,
          163
        ],
        "TypeDef": "Tuple"
      },
      "167": {
        "TypeId": 168,
        "TypeDef": "Sequence"
      },
      "168": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 50
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 50
          }
        ],
        "TypeDef": "Composite"
      },
      "169": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 170
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "enact_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "170": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 152
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 156
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 171
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 173
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "171": {
        "TypeId": 172,
        "TypeDef": "Sequence"
      },
      "172": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "173": {
        "TypeFields": [
          {
            "TypeId": 176
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 50
          },
          {
            "Name": "V",
            "TypeId": 174
          }
        ],
        "TypeDef": "Composite"
      },
      "174": {
        "TypeId": 175,
        "TypeDef": "Sequence"
      },
      "175": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "176": {
        "TypeId": 177,
        "TypeDef": "Sequence"
      },
      "177": {
        "TypeIds": [
          50,
          174
        ],
        "TypeDef": "Tuple"
      },
      "178": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending"
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function"
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run"
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block"
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block"
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "179": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "# <weight>",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "180": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 183
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 181
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "181": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 72
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 182
          }
        ],
        "Path": [
          "pallet_balances",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "182": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "183": {
        "TypeId": 181,
        "TypeDef": "Sequence"
      },
      "184": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 186
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 185
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "185": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 72
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 72
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "186": {
        "TypeId": 185,
        "TypeDef": "Sequence"
      },
      "187": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor.",
              "",
              "# <weight>",
              "- Dependent on arguments but not critical, given proper implementations for input config",
              "  types. See related functions below.",
              "- It contains a limited number of reads and writes internally and no complex",
              "  computation.",
              "",
              "Related functions:",
              "",
              "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
              "  - Transferring balances to accounts that did not exist before will cause",
              "    `T::OnNewAccount::on_new_account` to be called.",
              "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
              "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
              "    that the transfer will not kill the origin account.",
              "---------------------------------",
              "- Origin account is already in memory, so no DB operations for them.",
              "# </weight>"
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 60
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the balances of a given account.",
              "",
              "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
              "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
              "If the new free or reserved balance is below the existential deposit,",
              "it will reset the account nonce (`frame_system::AccountNonce`).",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer`, except the origin must be root and the source account may be",
              "specified.",
              "# <weight>",
              "- Same as transfer, but additional read and write because the source account is not",
              "  assumed to be in the overlay.",
              "# </weight>"
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
              "origin account.",
              "",
              "99% of the time you want [`transfer`] instead.",
              "",
              "[`transfer`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true). # <weight>",
              "- O(1). Just like transfer, but reading the user's transferable balance first.",
              "  #</weight>"
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "188": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 189
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 59
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 95
          }
        ],
        "TypeDef": "Variant"
      },
      "189": {
        "TypeId": 95,
        "TypeDef": "Compact"
      },
      "190": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed MaxReserves"
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "191": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "192": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "193": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 195
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 194
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "194": {
        "Variants": [
          {
            "Name": "InclusionHeight",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Uncle",
            "TypeFields": [
              {
                "TypeName": "Hash",
                "TypeId": 11
              },
              {
                "TypeName": "Option<Author>",
                "TypeId": 96
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_authorship",
          "UncleEntryItem"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Hash",
            "TypeId": 11
          },
          {
            "Name": "Author",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "195": {
        "TypeId": 194,
        "TypeDef": "Sequence"
      },
      "196": {
        "Variants": [
          {
            "Name": "set_uncles",
            "TypeFields": [
              {
                "Name": "new_uncles",
                "TypeName": "Vec<T::Header>",
                "TypeId": 197
              }
            ],
            "Index": 0,
            "Docs": [
              "Provide a set of uncles."
            ]
          }
        ],
        "Path": [
          "pallet_authorship",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "197": {
        "TypeId": 198,
        "TypeDef": "Sequence"
      },
      "198": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "Hash::Output",
            "TypeId": 11
          },
          {
            "Name": "number",
            "TypeName": "Number",
            "TypeId": 56
          },
          {
            "Name": "state_root",
            "TypeName": "Hash::Output",
            "TypeId": 11
          },
          {
            "Name": "extrinsics_root",
            "TypeName": "Hash::Output",
            "TypeId": 11
          },
          {
            "Name": "digest",
            "TypeName": "Digest",
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "header",
          "Header"
        ],
        "TypeParams": [
          {
            "Name": "Number",
            "TypeId": 4
          },
          {
            "Name": "Hash",
            "TypeId": 199
          }
        ],
        "TypeDef": "Composite"
      },
      "199": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "200": {
        "Variants": [
          {
            "Name": "InvalidUncleParent",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The uncle parent not in the chain."
            ]
          },
          {
            "Name": "UnclesAlreadySet",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Uncles already set in the block."
            ]
          },
          {
            "Name": "TooManyUncles",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many uncles."
            ]
          },
          {
            "Name": "GenesisUncle",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The uncle is genesis."
            ]
          },
          {
            "Name": "TooHighUncle",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The uncle is too high in chain."
            ]
          },
          {
            "Name": "UncleAlreadyIncluded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The uncle is already included."
            ]
          },
          {
            "Name": "OldUncle",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The uncle isn't recent enough to be included."
            ]
          }
        ],
        "Path": [
          "pallet_authorship",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "201": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "202": {
        "TypeId": 203,
        "TypeDef": "Sequence"
      },
      "203": {
        "TypeIds": [
          0,
          204
        ],
        "TypeDef": "Tuple"
      },
      "204": {
        "TypeFields": [
          {
            "Name": "aura",
            "TypeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 205
          },
          {
            "Name": "authority_discovery",
            "TypeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 206
          },
          {
            "Name": "im_online",
            "TypeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 99
          },
          {
            "Name": "avn",
            "TypeName": "<Avn as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 207
          }
        ],
        "Path": [
          "avn_parachain_runtime",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 100
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "206": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 100
          }
        ],
        "Path": [
          "sp_authority_discovery",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "207": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 100
          }
        ],
        "Path": [
          "pallet_avn",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "208": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "209": {
        "TypeIds": [
          210,
          12
        ],
        "TypeDef": "Tuple"
      },
      "210": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "211": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 204
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "# <weight>",
              "- Complexity: `O(1)`. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed.",
              "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
              "- DbWrites: `origin account`, `NextKeys`",
              "- DbReads per key id: `KeyOwner`",
              "- DbWrites per key id: `KeyOwner`",
              "# </weight>"
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "# <weight>",
              "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
              "  of `T::Keys::key_ids()` which is fixed.",
              "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
              "- DbWrites: `NextKeys`, `origin account`",
              "- DbWrites per key id: `KeyOwner`",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "212": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "213": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 214
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 205
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "214": {
        "TypeId": 205,
        "TypeDef": "Sequence"
      },
      "215": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "216": {
        "TypeFields": [
          {
            "Name": "current",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "first",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "length",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "EraInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "217": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "nominations",
            "TypeName": "OrderedSet<Bond<AccountId, Balance>>",
            "TypeId": 218
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "less_total",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "Nominator"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 220
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "set",
          "OrderedSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 219
          }
        ],
        "TypeDef": "Composite"
      },
      "219": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "Bond"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "220": {
        "TypeId": 219,
        "TypeDef": "Sequence"
      },
      "221": {
        "TypeFields": [
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nomination_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_counted",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "lowest_top_nomination_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "highest_bottom_nomination_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "lowest_bottom_nomination_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "top_capacity",
            "TypeName": "CapacityStatus",
            "TypeId": 222
          },
          {
            "Name": "bottom_capacity",
            "TypeName": "CapacityStatus",
            "TypeId": 222
          },
          {
            "Name": "request",
            "TypeName": "Option<CandidateBondLessRequest<Balance>>",
            "TypeId": 223
          },
          {
            "Name": "status",
            "TypeName": "CollatorStatus",
            "TypeId": 225
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CandidateMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "222": {
        "Variants": [
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Partial",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CapacityStatus"
        ],
        "TypeDef": "Variant"
      },
      "223": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 224
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 224
          }
        ],
        "TypeDef": "Variant"
      },
      "224": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "when_executable",
            "TypeName": "EraIndex",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CandidateBondLessRequest"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "225": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Idle",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Leaving",
            "TypeFields": [
              {
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CollatorStatus"
        ],
        "TypeDef": "Variant"
      },
      "226": {
        "TypeId": 227,
        "TypeDef": "Sequence"
      },
      "227": {
        "TypeFields": [
          {
            "Name": "nominator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "when_executable",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "action",
            "TypeName": "NominationAction<Balance>",
            "TypeId": 37
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "nomination_requests",
          "ScheduledRequest"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "228": {
        "TypeFields": [
          {
            "Name": "nominations",
            "TypeName": "Vec<Bond<AccountId, Balance>>",
            "TypeId": 220
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "Nominations"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "229": {
        "TypeIds": [
          4,
          0
        ],
        "TypeDef": "Tuple"
      },
      "230": {
        "TypeFields": [
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nominations",
            "TypeName": "Vec<Bond<AccountId, Balance>>",
            "TypeId": 220
          },
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CollatorSnapshot"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "231": {
        "TypeFields": [
          {
            "Name": "total_staking_reward",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "DelayedPayout"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "232": {
        "TypeFields": [
          {
            "Name": "start_era_index",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "GrowthPeriodIndex",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "GrowthPeriodInfo"
        ],
        "TypeDef": "Composite"
      },
      "233": {
        "TypeFields": [
          {
            "Name": "number_of_accumulations",
            "TypeName": "GrowthPeriodIndex",
            "TypeId": 4
          },
          {
            "Name": "total_stake_accumulated",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_staker_reward",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_points",
            "TypeName": "RewardPoint",
            "TypeId": 4
          },
          {
            "Name": "collator_scores",
            "TypeName": "Vec<CollatorScore<AccountId>>",
            "TypeId": 234
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "GrowthInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "234": {
        "TypeId": 235,
        "TypeDef": "Sequence"
      },
      "235": {
        "TypeFields": [
          {
            "Name": "collator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "points",
            "TypeName": "RewardPoint",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "types",
          "CollatorScore"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "236": {
        "Variants": [
          {
            "Name": "set_total_selected",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the total number of collator candidates selected per era",
              "- changes are not applied until the start of the next era"
            ]
          },
          {
            "Name": "set_blocks_per_era",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set blocks per era",
              "- if called with `new` less than length of current era, will transition immediately",
              "in the next block"
            ]
          },
          {
            "Name": "join_candidates",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Join the set of collator candidates"
            ]
          },
          {
            "Name": "schedule_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Request to leave the set of candidates. If successful, the account is immediately",
              "removed from the candidate pool to prevent selection as a collator."
            ]
          },
          {
            "Name": "execute_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate_nomination_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Execute leave candidates request"
            ]
          },
          {
            "Name": "cancel_leave_candidates",
            "TypeFields": [
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel open request to leave candidates",
              "- only callable by collator account",
              "- result upon successful call is the candidate is active in the candidate pool"
            ]
          },
          {
            "Name": "go_offline",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Temporarily leave the set of collator candidates without unbonding"
            ]
          },
          {
            "Name": "go_online",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Rejoin the set of collator candidates if previously had called `go_offline`"
            ]
          },
          {
            "Name": "candidate_bond_extra",
            "TypeFields": [
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Increase collator candidate self bond by `more`"
            ]
          },
          {
            "Name": "signed_candidate_bond_extra",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "extra_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Increase collator candidate self bond by `more`"
            ]
          },
          {
            "Name": "schedule_candidate_unbond",
            "TypeFields": [
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Request by collator candidate to decrease self bond by `less`"
            ]
          },
          {
            "Name": "execute_candidate_unbond",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "Execute pending request to adjust the collator candidate self bond"
            ]
          },
          {
            "Name": "signed_execute_candidate_unbond",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "Execute pending request to adjust the collator candidate self bond"
            ]
          },
          {
            "Name": "cancel_candidate_unbond",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Cancel pending request to adjust the collator candidate self bond"
            ]
          },
          {
            "Name": "signed_schedule_candidate_unbond",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Signed request by collator candidate to decrease self bond by `less`"
            ]
          },
          {
            "Name": "nominate",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "candidate_nomination_count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "nomination_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "If caller is not a nominator and not a collator, then join the set of nominators",
              "If caller is a nominator, then makes nomination to change their nomination state"
            ]
          },
          {
            "Name": "signed_nominate",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "targets",
                "TypeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                "TypeId": 244
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 60
              }
            ],
            "Index": 16
          },
          {
            "Name": "schedule_leave_nominators",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "If successful, the caller is scheduled to be",
              "allowed to exit via a [NominationAction::Revoke] towards all existing nominations.",
              "Success forbids future nomination requests until the request is invoked or cancelled."
            ]
          },
          {
            "Name": "signed_schedule_leave_nominators",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              }
            ],
            "Index": 18
          },
          {
            "Name": "execute_leave_nominators",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "nomination_count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 19,
            "Docs": [
              "Execute the right to exit the set of nominators and revoke all ongoing nominations."
            ]
          },
          {
            "Name": "signed_execute_leave_nominators",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 20,
            "Docs": [
              "Execute the right to exit the set of nominators and revoke all ongoing nominations.",
              "Any account can call this extrinsic"
            ]
          },
          {
            "Name": "cancel_leave_nominators",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Cancel a pending request to exit the set of nominators. Success clears the pending exit",
              "request (thereby resetting the delay upon another `leave_nominators` call)."
            ]
          },
          {
            "Name": "schedule_revoke_nomination",
            "TypeFields": [
              {
                "Name": "collator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 22,
            "Docs": [
              "Request to revoke an existing nomination. If successful, the nomination is scheduled",
              "to be allowed to be revoked via the `execute_nomination_request` extrinsic."
            ]
          },
          {
            "Name": "signed_schedule_revoke_nomination",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "collator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "Signed request to revoke an existing nomination. If successful, the nomination is",
              "scheduled to be allowed to be revoked via the `execute_nomination_request`",
              "extrinsic."
            ]
          },
          {
            "Name": "bond_extra",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "more",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Bond more for nominators wrt a specific collator candidate."
            ]
          },
          {
            "Name": "signed_bond_extra",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "extra_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 60
              }
            ],
            "Index": 25,
            "Docs": [
              "Bond a maximum of 'extra_amount' amount."
            ]
          },
          {
            "Name": "schedule_nominator_unbond",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 26,
            "Docs": [
              "Request bond less for nominators wrt a specific collator candidate."
            ]
          },
          {
            "Name": "signed_schedule_nominator_unbond",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "less",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 27
          },
          {
            "Name": "execute_nomination_request",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 28,
            "Docs": [
              "Execute pending request to change an existing nomination"
            ]
          },
          {
            "Name": "signed_execute_nomination_request",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 29,
            "Docs": [
              "Execute pending request to change an existing nomination"
            ]
          },
          {
            "Name": "cancel_nomination_request",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 30,
            "Docs": [
              "Cancel request to change an existing nomination."
            ]
          },
          {
            "Name": "hotfix_remove_nomination_requests_exited_candidates",
            "TypeFields": [
              {
                "Name": "candidates",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 201
              }
            ],
            "Index": 31,
            "Docs": [
              "Hotfix to remove existing empty entries for candidates that have left."
            ]
          },
          {
            "Name": "set_admin_setting",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "AdminSettings<BalanceOf<T>>",
                "TypeId": 39
              }
            ],
            "Index": 32
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "237": {
        "TypeFields": [
          {
            "Name": "signer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "relayer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "signature",
            "TypeName": "Signature",
            "TypeId": 238
          }
        ],
        "Path": [
          "sp_avn_common",
          "Proof"
        ],
        "TypeParams": [
          {
            "Name": "Signature",
            "TypeId": 238
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "238": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 239
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 241
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 242
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "239": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 240
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "240": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "241": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 240
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "242": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 243
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "243": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "244": {
        "TypeId": 188,
        "TypeDef": "Sequence"
      },
      "245": {
        "Variants": [
          {
            "Name": "NominatorDNE",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CandidateDNE",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NominationDNE",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NominatorExists",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "CandidateExists",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CandidateBondBelowMin",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "NominatorBondBelowMin",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NominationBelowMin",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "AlreadyOffline",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "AlreadyActive",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "NominatorAlreadyLeaving",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "NominatorNotLeaving",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "NominatorCannotLeaveYet",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "CandidateAlreadyLeaving",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "CandidateNotLeaving",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "CandidateCannotLeaveYet",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "CannotGoOnlineIfLeaving",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "ExceedMaxNominationsPerNominator",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "AlreadyNominatedCandidate",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "InvalidSchedule",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "CannotSetBelowMin",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "EraLengthMustBeAtLeastTotalSelectedCollators",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "NoWritingSameValue",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "TooLowCandidateCountWeightHintJoinCandidates",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "TooLowCandidateCountWeightHintCancelLeaveCandidates",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "TooLowCandidateCountToLeaveCandidates",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "TooLowNominationCountToNominate",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "TooLowCandidateNominationCountToNominate",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "TooLowCandidateNominationCountToLeaveCandidates",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "TooLowNominationCountToLeaveNominators",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "PendingCandidateRequestsDNE",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "PendingCandidateRequestAlreadyExists",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "PendingCandidateRequestNotDueYet",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "PendingNominationRequestDNE",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "PendingNominationRequestAlreadyExists",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "PendingNominationRequestNotDueYet",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "CannotNominateLessThanOrEqualToLowestBottomWhenFull",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "PendingNominationRevoke",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ErrorPayingCollator",
            "TypeFields": null,
            "Index": 39
          },
          {
            "Name": "GrowthAlreadyProcessed",
            "TypeFields": null,
            "Index": 40
          },
          {
            "Name": "UnauthorizedProxyTransaction",
            "TypeFields": null,
            "Index": 41
          },
          {
            "Name": "SenderIsNotSigner",
            "TypeFields": null,
            "Index": 42
          },
          {
            "Name": "UnauthorizedSignedNominateTransaction",
            "TypeFields": null,
            "Index": 43
          },
          {
            "Name": "UnauthorizedSignedBondExtraTransaction",
            "TypeFields": null,
            "Index": 44
          },
          {
            "Name": "UnauthorizedSignedCandidateBondExtraTransaction",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "UnauthorizedSignedCandidateUnbondTransaction",
            "TypeFields": null,
            "Index": 46
          },
          {
            "Name": "UnauthorizedSignedUnbondTransaction",
            "TypeFields": null,
            "Index": 47
          },
          {
            "Name": "UnauthorizedSignedRemoveBondTransaction",
            "TypeFields": null,
            "Index": 48
          },
          {
            "Name": "UnauthorizedSignedScheduleLeaveNominatorsTransaction",
            "TypeFields": null,
            "Index": 49
          },
          {
            "Name": "UnauthorizedSignedExecuteLeaveNominatorsTransaction",
            "TypeFields": null,
            "Index": 50
          },
          {
            "Name": "UnauthorizedSignedExecuteNominationRequestTransaction",
            "TypeFields": null,
            "Index": 51
          },
          {
            "Name": "UnauthorizedSignedExecuteCandidateUnbondTransaction",
            "TypeFields": null,
            "Index": 52
          },
          {
            "Name": "AdminSettingsValueIsNotValid",
            "TypeFields": null,
            "Index": 53
          },
          {
            "Name": "CandidateSessionKeysNotFound",
            "TypeFields": null,
            "Index": 54
          },
          {
            "Name": "FailedToWithdrawFullAmount",
            "TypeFields": null,
            "Index": 55
          }
        ],
        "Path": [
          "pallet_parachain_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "246": {
        "TypeIds": [
          0,
          10
        ],
        "TypeDef": "Tuple"
      },
      "247": {
        "TypeFields": [
          {
            "Name": "status",
            "TypeName": "ValidatorsActionStatus",
            "TypeId": 248
          },
          {
            "Name": "primary_validator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "eth_transaction_id",
            "TypeName": "TransactionId",
            "TypeId": 10
          },
          {
            "Name": "action_type",
            "TypeName": "ValidatorsActionType",
            "TypeId": 249
          },
          {
            "Name": "reserved_eth_transaction",
            "TypeName": "EthTransactionType",
            "TypeId": 250
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "ValidatorsActionData"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "248": {
        "Variants": [
          {
            "Name": "AwaitingConfirmation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Confirmed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Actioned",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "ValidatorsActionStatus"
        ],
        "TypeDef": "Variant"
      },
      "249": {
        "Variants": [
          {
            "Name": "Resignation",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Slashed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Activation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "ValidatorsActionType"
        ],
        "TypeDef": "Variant"
      },
      "250": {
        "Variants": [
          {
            "Name": "PublishRoot",
            "TypeFields": [
              {
                "TypeName": "PublishRootData",
                "TypeId": 251
              }
            ],
            "Index": 0
          },
          {
            "Name": "DeregisterValidator",
            "TypeFields": [
              {
                "TypeName": "DeregisterValidatorData",
                "TypeId": 252
              }
            ],
            "Index": 1
          },
          {
            "Name": "SlashValidator",
            "TypeFields": [
              {
                "TypeName": "SlashValidatorData",
                "TypeId": 253
              }
            ],
            "Index": 2
          },
          {
            "Name": "ActivateValidator",
            "TypeFields": [
              {
                "TypeName": "ActivateValidatorData",
                "TypeId": 254
              }
            ],
            "Index": 3
          },
          {
            "Name": "Invalid",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Discarded",
            "TypeFields": [
              {
                "TypeName": "TransactionId",
                "TypeId": 10
              }
            ],
            "Index": 5
          },
          {
            "Name": "ActivateCollator",
            "TypeFields": [
              {
                "TypeName": "ActivateCollatorData",
                "TypeId": 255
              }
            ],
            "Index": 6
          },
          {
            "Name": "DeregisterCollator",
            "TypeFields": [
              {
                "TypeName": "DeregisterCollatorData",
                "TypeId": 257
              }
            ],
            "Index": 7
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "EthTransactionType"
        ],
        "TypeDef": "Variant"
      },
      "251": {
        "TypeFields": [
          {
            "Name": "root_hash",
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "PublishRootData"
        ],
        "TypeDef": "Composite"
      },
      "252": {
        "TypeFields": [
          {
            "Name": "t2_public_key",
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "DeregisterValidatorData"
        ],
        "TypeDef": "Composite"
      },
      "253": {
        "TypeFields": [
          {
            "Name": "t2_public_key",
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "SlashValidatorData"
        ],
        "TypeDef": "Composite"
      },
      "254": {
        "TypeFields": [
          {
            "Name": "t2_public_key",
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "ActivateValidatorData"
        ],
        "TypeDef": "Composite"
      },
      "255": {
        "TypeFields": [
          {
            "Name": "t1_public_key",
            "TypeName": "H512",
            "TypeId": 256
          },
          {
            "Name": "t2_public_key",
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "ActivateCollatorData"
        ],
        "TypeDef": "Composite"
      },
      "256": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 240
          }
        ],
        "Path": [
          "primitive_types",
          "H512"
        ],
        "TypeDef": "Composite"
      },
      "257": {
        "TypeFields": [
          {
            "Name": "t1_public_key",
            "TypeName": "H512",
            "TypeId": 256
          },
          {
            "Name": "t2_public_key",
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "DeregisterCollatorData"
        ],
        "TypeDef": "Composite"
      },
      "258": {
        "TypeFields": [
          {
            "Name": "voting_session_id",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 201
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 201
          },
          {
            "Name": "end_of_voting_period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "confirmations",
            "TypeName": "Vec<ecdsa::Signature>",
            "TypeId": 259
          },
          {
            "Name": "created_at_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_avn",
          "vote",
          "VotingSessionData"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "259": {
        "TypeId": 242,
        "TypeDef": "Sequence"
      },
      "260": {
        "Variants": [
          {
            "Name": "add_collator",
            "TypeFields": [
              {
                "Name": "collator_account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "collator_eth_public_key",
                "TypeName": "ecdsa::Public",
                "TypeId": 41
              },
              {
                "Name": "deposit",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 261
              }
            ],
            "Index": 0,
            "Docs": [
              "Sudo function to add a collator.",
              "This will call the `join_candidates` method in the parachain_staking pallet.",
              "[transactional]: this makes `add_validator` behave like an ethereum transaction (atomic tx). No need to use VFWL.",
              "see here for more info: https://github.com/paritytech/substrate/issues/10806"
            ]
          },
          {
            "Name": "remove_validator",
            "TypeFields": [
              {
                "Name": "collator_account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "approve_validator_action",
            "TypeFields": [
              {
                "Name": "action_id",
                "TypeName": "ActionId<T::AccountId>",
                "TypeId": 43
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "approval_signature",
                "TypeName": "ecdsa::Signature",
                "TypeId": 242
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 2
          },
          {
            "Name": "reject_validator_action",
            "TypeFields": [
              {
                "Name": "action_id",
                "TypeName": "ActionId<T::AccountId>",
                "TypeId": 43
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 3
          },
          {
            "Name": "end_voting_period",
            "TypeFields": [
              {
                "Name": "action_id",
                "TypeName": "ActionId<T::AccountId>",
                "TypeId": 43
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "261": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "262": {
        "TypeFields": [
          {
            "Name": "account_id",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "key",
            "TypeName": "AuthorityId",
            "TypeId": 207
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "Validator"
        ],
        "TypeParams": [
          {
            "Name": "AuthorityId",
            "TypeId": 207
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "263": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Signature",
            "TypeId": 241
          }
        ],
        "Path": [
          "pallet_avn",
          "sr25519",
          "app_sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "264": {
        "Variants": [
          {
            "Name": "NoTier1EventForAddingValidator",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoTier1EventForRemovingValidator",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NoValidators",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ValidatorAlreadyExists",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "InvalidIngressCounter",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MinimumValidatorsReached",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "ErrorEndingVotingPeriod",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "VotingSessionIsNotValid",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "ErrorSubmitCandidateTxnToTier1",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "ErrorCalculatingPrimaryValidator",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "ErrorGeneratingEthDescription",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "ValidatorsActionDataNotFound",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "RemovalAlreadyRequested",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "ErrorConvertingAccountIdToValidatorId",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "SlashedValidatorIsNotFound",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "ValidatorNotFound",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "InvalidPublicKey",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "ValidatorEthKeyAlreadyExists",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The ethereum public key of this validator alredy exists"
            ]
          },
          {
            "Name": "ErrorRemovingAccountFromCollators",
            "TypeFields": null,
            "Index": 18
          }
        ],
        "Path": [
          "pallet_validators_manager",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "265": {
        "TypeId": 266,
        "TypeDef": "Sequence"
      },
      "266": {
        "TypeFields": [
          {
            "Name": "sender",
            "TypeName": "ParaId",
            "TypeId": 50
          },
          {
            "Name": "state",
            "TypeName": "InboundState",
            "TypeId": 267
          },
          {
            "Name": "message_metadata",
            "TypeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
            "TypeId": 268
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "267": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundState"
        ],
        "TypeDef": "Variant"
      },
      "268": {
        "TypeId": 269,
        "TypeDef": "Sequence"
      },
      "269": {
        "TypeIds": [
          4,
          270
        ],
        "TypeDef": "Tuple"
      },
      "270": {
        "Variants": [
          {
            "Name": "ConcatenatedVersionedXcm",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ConcatenatedEncodedBlob",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Signals",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_parachain",
          "primitives",
          "XcmpMessageFormat"
        ],
        "TypeDef": "Variant"
      },
      "271": {
        "TypeIds": [
          50,
          4
        ],
        "TypeDef": "Tuple"
      },
      "272": {
        "TypeId": 273,
        "TypeDef": "Sequence"
      },
      "273": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 50
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 274
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 35
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 150
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 150
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "274": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "275": {
        "TypeIds": [
          50,
          150
        ],
        "TypeDef": "Tuple"
      },
      "276": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "threshold_weight",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "weight_restrict_decay",
            "TypeName": "Weight",
            "TypeId": 8
          },
          {
            "Name": "xcmp_max_individual_weight",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "277": {
        "TypeIds": [
          50,
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "278": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_limit",
                "TypeName": "XcmWeight",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "Services a single overweight XCM.",
              "",
              "- `origin`: Must pass `ExecuteOverweightOrigin`.",
              "- `index`: The index of the overweight XCM to service",
              "- `weight_limit`: The amount of weight that XCM execution may take.",
              "",
              "Errors:",
              "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
              "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
              "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
              "",
              "Events:",
              "- `OverweightServiced`: On success."
            ]
          },
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
              "suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
              "messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
              "message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          },
          {
            "Name": "update_threshold_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "XcmWeight",
                "TypeId": 10
              }
            ],
            "Index": 6,
            "Docs": [
              "Overwrites the amount of remaining weight under which we stop processing messages.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.threshold_weight`"
            ]
          },
          {
            "Name": "update_weight_restrict_decay",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "XcmWeight",
                "TypeId": 10
              }
            ],
            "Index": 7,
            "Docs": [
              "Overwrites the speed to which the available weight approaches the maximum weight.",
              "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
            ]
          },
          {
            "Name": "update_xcmp_max_individual_weight",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "XcmWeight",
                "TypeId": 10
              }
            ],
            "Index": 8,
            "Docs": [
              "Overwrite the maximum amount of weight any individual message may consume.",
              "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "279": {
        "Variants": [
          {
            "Name": "FailedToSend",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to send XCM message."
            ]
          },
          {
            "Name": "BadXcmOrigin",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Bad XCM origin."
            ]
          },
          {
            "Name": "BadXcm",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bad XCM data."
            ]
          },
          {
            "Name": "BadOverweightIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad overweight index."
            ]
          },
          {
            "Name": "WeightOverLimit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Provided weight is possibly not enough to execute the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "280": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 281
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 84
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 84
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                "TypeId": 292
              },
              {
                "Name": "max_weight",
                "TypeName": "XcmWeight",
                "TypeId": 10
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than the",
              "maximum amount of weight that the message could take to be executed, then no execution",
              "attempt will be made.",
              "",
              "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
              "to completion; only that *some* of it was executed."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 53
              },
              {
                "Name": "xcm_version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 305
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be Root.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be Root.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 84
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 82
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the sovereign account of a destination",
              "chain and forward a notification XCM.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
              "  `dest` side.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 89
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 84
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 82
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the assets send may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
              "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
              "  an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
              "  `dest` side. May not be empty.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "281": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": [
              {
                "TypeName": "v0::Xcm<RuntimeCall>",
                "TypeId": 282
              }
            ],
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": [
              {
                "TypeName": "v1::Xcm<RuntimeCall>",
                "TypeId": 287
              }
            ],
            "Index": 1
          },
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 63
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "282": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 283
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposit",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 283
              }
            ],
            "Index": 1
          },
          {
            "Name": "TeleportAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 283
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 286
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 77
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 78
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 9
          },
          {
            "Name": "RelayedFrom",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "message",
                "TypeName": "alloc::boxed::Box<Xcm<RuntimeCall>>",
                "TypeId": 282
              }
            ],
            "Index": 10
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "283": {
        "TypeId": 284,
        "TypeDef": "Sequence"
      },
      "284": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              }
            ],
            "Index": 1
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 2
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "receive",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              }
            ],
            "Index": 3
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 4
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 5
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              }
            ],
            "Index": 6
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 86
              },
              {
                "Name": "weight",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "debt",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "halt_on_error",
                "TypeName": "bool",
                "TypeId": 35
              },
              {
                "Name": "xcm",
                "TypeName": "Vec<Xcm<RuntimeCall>>",
                "TypeId": 285
              }
            ],
            "Index": 7
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "order",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "285": {
        "TypeId": 282,
        "TypeDef": "Sequence"
      },
      "286": {
        "Variants": [
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "287": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 288
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 288
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 288
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 291
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 77
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 78
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 9
          },
          {
            "Name": "RelayedFrom",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 54
              },
              {
                "Name": "message",
                "TypeName": "alloc::boxed::Box<Xcm<RuntimeCall>>",
                "TypeId": 287
              }
            ],
            "Index": 10
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 11
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "288": {
        "TypeId": 289,
        "TypeDef": "Sequence"
      },
      "289": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 1
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 2
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 3
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 4
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 5
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              }
            ],
            "Index": 6
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 68
              },
              {
                "Name": "weight",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "debt",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "halt_on_error",
                "TypeName": "bool",
                "TypeId": 35
              },
              {
                "Name": "instructions",
                "TypeName": "Vec<Xcm<RuntimeCall>>",
                "TypeId": 290
              }
            ],
            "Index": 7
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "order",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "290": {
        "TypeId": 287,
        "TypeDef": "Sequence"
      },
      "291": {
        "Variants": [
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 0
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "292": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": [
              {
                "TypeName": "v0::Xcm<RuntimeCall>",
                "TypeId": 293
              }
            ],
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": [
              {
                "TypeName": "v1::Xcm<RuntimeCall>",
                "TypeId": 298
              }
            ],
            "Index": 1
          },
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 302
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "293": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 294
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposit",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 294
              }
            ],
            "Index": 1
          },
          {
            "Name": "TeleportAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 294
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 286
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 77
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 297
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 9
          },
          {
            "Name": "RelayedFrom",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "message",
                "TypeName": "alloc::boxed::Box<Xcm<RuntimeCall>>",
                "TypeId": 293
              }
            ],
            "Index": 10
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "294": {
        "TypeId": 295,
        "TypeDef": "Sequence"
      },
      "295": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              }
            ],
            "Index": 1
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 2
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "receive",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              }
            ],
            "Index": 3
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 4
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 283
              }
            ],
            "Index": 5
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 87
              },
              {
                "Name": "assets",
                "TypeName": "Vec<MultiAsset>",
                "TypeId": 85
              }
            ],
            "Index": 6
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 86
              },
              {
                "Name": "weight",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "debt",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "halt_on_error",
                "TypeName": "bool",
                "TypeId": 35
              },
              {
                "Name": "xcm",
                "TypeName": "Vec<Xcm<RuntimeCall>>",
                "TypeId": 296
              }
            ],
            "Index": 7
          }
        ],
        "Path": [
          "xcm",
          "v0",
          "order",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "296": {
        "TypeId": 293,
        "TypeDef": "Sequence"
      },
      "297": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "298": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 299
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 299
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<RuntimeCall>>",
                "TypeId": 299
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 291
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 77
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 297
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 9
          },
          {
            "Name": "RelayedFrom",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 54
              },
              {
                "Name": "message",
                "TypeName": "alloc::boxed::Box<Xcm<RuntimeCall>>",
                "TypeId": 298
              }
            ],
            "Index": 10
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 11
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "299": {
        "TypeId": 300,
        "TypeDef": "Sequence"
      },
      "300": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 1
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 2
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 3
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 4
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "effects",
                "TypeName": "Vec<Order<()>>",
                "TypeId": 288
              }
            ],
            "Index": 5
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              }
            ],
            "Index": 6
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 68
              },
              {
                "Name": "weight",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "debt",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "halt_on_error",
                "TypeName": "bool",
                "TypeId": 35
              },
              {
                "Name": "instructions",
                "TypeName": "Vec<Xcm<RuntimeCall>>",
                "TypeId": 301
              }
            ],
            "Index": 7
          }
        ],
        "Path": [
          "xcm",
          "v1",
          "order",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "301": {
        "TypeId": 298,
        "TypeDef": "Sequence"
      },
      "302": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 303
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "303": {
        "TypeId": 304,
        "TypeDef": "Sequence"
      },
      "304": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 74
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 77
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 297
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 56
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 54
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 56
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 66
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 63
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 53
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 79
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 68
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 82
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 302
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 302
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 66
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 9
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "305": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "306": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
              "a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "307": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "308": {
        "TypeFields": [
          {
            "Name": "max_individual",
            "TypeName": "Weight",
            "TypeId": 8
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "ConfigData"
        ],
        "TypeDef": "Composite"
      },
      "309": {
        "TypeFields": [
          {
            "Name": "begin_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "end_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "overweight_count",
            "TypeName": "OverweightIndex",
            "TypeId": 10
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "PageIndexData"
        ],
        "TypeDef": "Composite"
      },
      "310": {
        "TypeId": 311,
        "TypeDef": "Sequence"
      },
      "311": {
        "TypeIds": [
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "312": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 10
              },
              {
                "Name": "weight_limit",
                "TypeName": "XcmWeight",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "Service a single overweight message.",
              "",
              "- `origin`: Must pass `ExecuteOverweightOrigin`.",
              "- `index`: The index of the overweight message to service.",
              "- `weight_limit`: The amount of weight that message execution may take.",
              "",
              "Errors:",
              "- `Unknown`: Message of `index` is unknown.",
              "- `OverLimit`: Message execution may use greater than `weight_limit`.",
              "",
              "Events:",
              "- `OverweightServiced`: On success."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "313": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message index given is unknown."
            ]
          },
          {
            "Name": "OverLimit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The amount of weight given is possibly not enough for executing the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "314": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "issuer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "admin",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "freezer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "supply",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "min_balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_sufficient",
            "TypeName": "bool",
            "TypeId": 35
          },
          {
            "Name": "accounts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "approvals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "AssetStatus",
            "TypeId": 315
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetDetails"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "315": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Destroying",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetStatus"
        ],
        "TypeDef": "Variant"
      },
      "316": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 35
          },
          {
            "Name": "reason",
            "TypeName": "ExistenceReason<DepositBalance>",
            "TypeId": 317
          },
          {
            "Name": "extra",
            "TypeName": "Extra",
            "TypeId": 95
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetAccount"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "Extra",
            "TypeId": 95
          }
        ],
        "TypeDef": "Composite"
      },
      "317": {
        "Variants": [
          {
            "Name": "Consumer",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Sufficient",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DepositHeld",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "DepositRefunded",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "ExistenceReason"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "318": {
        "TypeIds": [
          4,
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "319": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "Approval"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "name",
            "TypeName": "BoundedString",
            "TypeId": 321
          },
          {
            "Name": "symbol",
            "TypeName": "BoundedString",
            "TypeId": 321
          },
          {
            "Name": "decimals",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 35
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "BoundedString",
            "TypeId": 321
          }
        ],
        "TypeDef": "Composite"
      },
      "321": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "322": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Issue a new class of fungible assets from a public origin.",
              "",
              "This new asset class has no assets initially and its owner is the origin.",
              "",
              "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
              "",
              "Funds of sender are reserved by `AssetDeposit`.",
              "",
              "Parameters:",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `admin`: The admin of this class of assets. The admin is the initial address of each",
              "member of the asset class's admin team.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 35
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue a new class of fungible assets from a privileged origin.",
              "",
              "This new asset class has no assets initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
              "over this asset, but may later change and configure the permissions using",
              "`transfer_ownership` and `set_team`.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "start_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Start the process of destroying a fungible asset class.",
              "",
              "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
              "destruction of an asset class.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "The asset class must be frozen before calling `start_destroy`."
            ]
          },
          {
            "Name": "destroy_accounts",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Destroy all accounts associated with a given asset.",
              "",
              "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedAccounts` event."
            ]
          },
          {
            "Name": "destroy_approvals",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
              "",
              "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedApprovals` event."
            ]
          },
          {
            "Name": "finish_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Complete destroying asset and unreserve currency.",
              "",
              "`finish_destroy` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
              "hand.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each successful call emits the `Event::Destroyed` event."
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 6,
            "Docs": [
              "Mint assets of a particular class.",
              "",
              "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount minted.",
              "- `beneficiary`: The account to be credited with the minted assets.",
              "- `amount`: The amount of the asset to be minted.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 7,
            "Docs": [
              "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
              "",
              "Origin must be Signed and the sender should be the Manager of the asset `id`.",
              "",
              "Bails with `NoAccount` if the `who` is already dead.",
              "",
              "- `id`: The identifier of the asset to have some amount burned.",
              "- `who`: The account to be debited from.",
              "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
              "",
              "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
              "minimum for the asset, then the amount burned is increased to take it to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 8,
            "Docs": [
              "Move some assets from the sender account to another.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 9,
            "Docs": [
              "Move some assets from the sender account to another, keeping the sender account alive.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 10,
            "Docs": [
              "Move some assets from one account to another.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `source`: The account to be debited.",
              "- `dest`: The account to be credited.",
              "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
              "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the `source` balance above zero but",
              "below the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
              "`dest`."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              }
            ],
            "Index": 11,
            "Docs": [
              "Disallow further unprivileged transfers from an account.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              }
            ],
            "Index": 12,
            "Docs": [
              "Allow unprivileged transfers from an account again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be unfrozen.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "freeze_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "Disallow further unprivileged transfers for the asset class.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Allow unprivileged transfers for the asset again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be thawed.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              }
            ],
            "Index": 15,
            "Docs": [
              "Change the Owner of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              }
            ],
            "Index": 16,
            "Docs": [
              "Change the Issuer, Admin and Freezer of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Funds of sender are reserved according to the formula:",
              "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 18,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Any deposit is freed for the asset owner.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 19,
            "Docs": [
              "Force the metadata for an asset to some value.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is left alone.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
            ]
          },
          {
            "Name": "force_clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is returned.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_asset_status",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 60
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 35
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 21,
            "Docs": [
              "Alter the attributes of a given asset.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
              "value to account for the state bloat associated with its balance storage. If set to",
              "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
              "an ED in the Balances pallet or whatever else is used to control user-account state",
              "growth).",
              "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
              "instructions.",
              "",
              "Emits `AssetStatusChanged` with the identity of the asset.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 22,
            "Docs": [
              "Approve an amount of asset for transfer by a delegated third-party account.",
              "",
              "Origin must be Signed.",
              "",
              "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
              "for the purpose of holding the approval. If some non-zero amount of assets is already",
              "approved from signing account to `delegate`, then it is topped up or unreserved to",
              "meet the right value.",
              "",
              "NOTE: The signing account does not need to own `amount` of assets at the point of",
              "making this call.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account to delegate permission to transfer asset.",
              "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
              "already an approval in place, then this acts additively.",
              "",
              "Emits `ApprovedTransfer` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              }
            ],
            "Index": 23,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be Signed and there must be an approval in place between signer and",
              "`delegate`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              }
            ],
            "Index": 24,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
              "account of the asset `id`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_approved",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "destination",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 60
              }
            ],
            "Index": 25,
            "Docs": [
              "Transfer some asset balance from a previously delegated account to some third-party",
              "account.",
              "",
              "Origin must be Signed and there must be an approval in place by the `owner` to the",
              "signer.",
              "",
              "If the entire amount approved for transfer is transferred, then any deposit previously",
              "reserved by `approve_transfer` is unreserved.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The account which previously approved for a transfer of at least `amount` and",
              "from which the asset balance will be withdrawn.",
              "- `destination`: The account to which the asset balance of `amount` will be transferred.",
              "- `amount`: The amount of assets to transfer.",
              "",
              "Emits `TransferredApproved` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "touch",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              }
            ],
            "Index": 26,
            "Docs": [
              "Create an asset account for non-provider assets.",
              "",
              "A deposit will be taken from the signer account.",
              "",
              "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
              "  to be taken.",
              "- `id`: The identifier of the asset for the account to be created.",
              "",
              "Emits `Touched` event when successful."
            ]
          },
          {
            "Name": "refund",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 4
              },
              {
                "Name": "allow_burn",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 27,
            "Docs": [
              "Return the deposit (if any) of an asset account.",
              "",
              "The origin must be Signed.",
              "",
              "- `id`: The identifier of the asset for the account to be created.",
              "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
              "",
              "Emits `Refunded` event when successful."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "323": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account to alter does not exist."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given asset ID is unknown."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The origin account is frozen."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The asset ID is already taken."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid witness data given."
            ]
          },
          {
            "Name": "MinBalanceZero",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "Name": "NoProvider",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
              "maximum number of consumers has been reached."
            ]
          },
          {
            "Name": "BadMetadata",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Invalid metadata given."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The asset-account already exists."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "Name": "WouldBurn",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "Name": "LiveAsset",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "Name": "AssetNotLive",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "Name": "IncorrectStatus",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The asset status is not the expected status."
            ]
          },
          {
            "Name": "NotFrozen",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The asset should be frozen before the given operation."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "324": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              }
            ],
            "Index": 0,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "# <weight>",
              "- O(1).",
              "- Limited storage reads.",
              "- One DB write (event).",
              "- Weight of derivative `call` execution + 10,000.",
              "# </weight>"
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 1,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "# <weight>",
              "- O(1).",
              "- The weight of this call is defined by the caller.",
              "# </weight>"
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              }
            ],
            "Index": 2,
            "Docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "# <weight>",
              "- O(1).",
              "- Limited storage reads.",
              "- One DB change.",
              "# </weight>"
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 188
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              }
            ],
            "Index": 3,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "# <weight>",
              "- O(1).",
              "- Limited storage reads.",
              "- One DB write (event).",
              "- Weight of derivative `call` execution + 10,000.",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "325": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 135
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 169
              }
            ],
            "Index": 1
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 179
              }
            ],
            "Index": 2
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 187
              }
            ],
            "Index": 10
          },
          {
            "Name": "Authorship",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                "TypeId": 196
              }
            ],
            "Index": 20
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 211
              }
            ],
            "Index": 22
          },
          {
            "Name": "ParachainStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>",
                "TypeId": 236
              }
            ],
            "Index": 96
          },
          {
            "Name": "ValidatorsManager",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ValidatorsManager, Runtime>",
                "TypeId": 260
              }
            ],
            "Index": 18
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 278
              }
            ],
            "Index": 30
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 280
              }
            ],
            "Index": 31
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                "TypeId": 312
              }
            ],
            "Index": 33
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                "TypeId": 322
              }
            ],
            "Index": 60
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 324
              }
            ],
            "Index": 62
          },
          {
            "Name": "ImOnline",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                "TypeId": 326
              }
            ],
            "Index": 73
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 333
              }
            ],
            "Index": 74
          },
          {
            "Name": "AvnFinalityTracker",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AvnFinalityTracker, Runtime>",
                "TypeId": 340
              }
            ],
            "Index": 82
          },
          {
            "Name": "AvnOffenceHandler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AvnOffenceHandler, Runtime>",
                "TypeId": 341
              }
            ],
            "Index": 83
          },
          {
            "Name": "EthereumEvents",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthereumEvents, Runtime>",
                "TypeId": 342
              }
            ],
            "Index": 84
          },
          {
            "Name": "EthereumTransactions",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthereumTransactions, Runtime>",
                "TypeId": 356
              }
            ],
            "Index": 85
          },
          {
            "Name": "NftManager",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NftManager, Runtime>",
                "TypeId": 357
              }
            ],
            "Index": 86
          },
          {
            "Name": "TokenManager",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TokenManager, Runtime>",
                "TypeId": 361
              }
            ],
            "Index": 87
          },
          {
            "Name": "Summary",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Summary, Runtime>",
                "TypeId": 362
              }
            ],
            "Index": 88
          },
          {
            "Name": "AvnProxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AvnProxy, Runtime>",
                "TypeId": 364
              }
            ],
            "Index": 89
          },
          {
            "Name": "AvnTransactionPayment",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AvnTransactionPayment, Runtime>",
                "TypeId": 367
              }
            ],
            "Index": 90
          }
        ],
        "Path": [
          "avn_parachain_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "326": {
        "Variants": [
          {
            "Name": "heartbeat",
            "TypeFields": [
              {
                "Name": "heartbeat",
                "TypeName": "Heartbeat<T::BlockNumber>",
                "TypeId": 327
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 332
              }
            ],
            "Index": 0,
            "Docs": [
              "# <weight>",
              "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
              "  length of `heartbeat.network_state.external_address`",
              "  - `O(K)`: decoding of length `K`",
              "  - `O(E)`: decoding/encoding of length `E`",
              "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
              "  `ReceivedHeartbeats`",
              "- DbWrites: `ReceivedHeartbeats`",
              "# </weight>"
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "327": {
        "TypeFields": [
          {
            "Name": "block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "network_state",
            "TypeName": "OpaqueNetworkState",
            "TypeId": 328
          },
          {
            "Name": "session_index",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "authority_index",
            "TypeName": "AuthIndex",
            "TypeId": 4
          },
          {
            "Name": "validators_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_im_online",
          "Heartbeat"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "328": {
        "TypeFields": [
          {
            "Name": "peer_id",
            "TypeName": "OpaquePeerId",
            "TypeId": 329
          },
          {
            "Name": "external_addresses",
            "TypeName": "Vec<OpaqueMultiaddr>",
            "TypeId": 330
          }
        ],
        "Path": [
          "sp_core",
          "offchain",
          "OpaqueNetworkState"
        ],
        "TypeDef": "Composite"
      },
      "329": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "OpaquePeerId"
        ],
        "TypeDef": "Composite"
      },
      "330": {
        "TypeId": 331,
        "TypeDef": "Sequence"
      },
      "331": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "offchain",
          "OpaqueMultiaddr"
        ],
        "TypeDef": "Composite"
      },
      "332": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Signature",
            "TypeId": 241
          }
        ],
        "Path": [
          "pallet_im_online",
          "sr25519",
          "app_sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "333": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 334
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "# <weight>",
              "- Complexity: O(C) where C is the number of calls to be batched.",
              "# </weight>",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 150
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 334
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "# <weight>",
              "- Complexity: O(C) where C is the number of calls to be batched.",
              "# </weight>"
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 335
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "# <weight>",
              "- O(1).",
              "- Limited storage reads.",
              "- One DB write (event).",
              "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
              "# </weight>"
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 334
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "# <weight>",
              "- Complexity: O(C) where C is the number of calls to be batched.",
              "# </weight>"
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 8
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "334": {
        "TypeId": 325,
        "TypeDef": "Sequence"
      },
      "335": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 336
              }
            ],
            "Index": 0
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 337
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 338
              }
            ],
            "Index": 32
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                "TypeId": 339
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "avn_parachain_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "336": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "337": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 53
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "338": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 50
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "339": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "340": {
        "Variants": [
          {
            "Name": "submit_latest_finalised_block_number",
            "TypeFields": [
              {
                "Name": "new_finalised_block_number",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "validator",
                "TypeName": "Validator<<T as avn::Config>::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<<T as avn::Config>::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_avn_finality_tracker",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "341": {
        "Variants": [
          {
            "Name": "configure_slashing",
            "TypeFields": [
              {
                "Name": "enabled",
                "TypeName": "bool",
                "TypeId": 35
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_avn_offence_handler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "342": {
        "Variants": [
          {
            "Name": "add_validator_log",
            "TypeFields": [
              {
                "Name": "tx_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "This extrinsic is being deprecated. Use add_ethereum_log"
            ]
          },
          {
            "Name": "add_lift_log",
            "TypeFields": [
              {
                "Name": "tx_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "This extrinsic is being deprecated. Use add_ethereum_log"
            ]
          },
          {
            "Name": "submit_checkevent_result",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "EthEventCheckResult<T::BlockNumber, T::AccountId>",
                "TypeId": 343
              },
              {
                "Name": "ingress_counter",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AuthorityId, T::AccountId>",
                "TypeId": 262
              }
            ],
            "Index": 2
          },
          {
            "Name": "process_event",
            "TypeFields": [
              {
                "Name": "event_id",
                "TypeName": "EthEventId",
                "TypeId": 105
              },
              {
                "Name": "ingress_counter",
                "TypeName": "IngressCounter",
                "TypeId": 10
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 3
          },
          {
            "Name": "challenge_event",
            "TypeFields": [
              {
                "Name": "challenge",
                "TypeName": "Challenge<T::AccountId>",
                "TypeId": 353
              },
              {
                "Name": "ingress_counter",
                "TypeName": "IngressCounter",
                "TypeId": 10
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AuthorityId, T::AccountId>",
                "TypeId": 262
              }
            ],
            "Index": 4
          },
          {
            "Name": "add_ethereum_log",
            "TypeFields": [
              {
                "Name": "event_type",
                "TypeName": "ValidEvents",
                "TypeId": 354
              },
              {
                "Name": "tx_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 5,
            "Docs": [
              "Submits an ethereum transaction hash into the chain"
            ]
          },
          {
            "Name": "signed_add_ethereum_log",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "event_type",
                "TypeName": "ValidEvents",
                "TypeId": 354
              },
              {
                "Name": "tx_hash",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 6
          },
          {
            "Name": "set_ethereum_contract",
            "TypeFields": [
              {
                "Name": "contract_type",
                "TypeName": "EthereumContracts",
                "TypeId": 355
              },
              {
                "Name": "contract_address",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 7,
            "Docs": [
              "Sets the address for ethereum contracts"
            ]
          },
          {
            "Name": "set_event_challenge_period",
            "TypeFields": [
              {
                "Name": "event_challenge_period_in_blocks",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "pallet_ethereum_events",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "343": {
        "TypeFields": [
          {
            "Name": "event",
            "TypeName": "EthEvent",
            "TypeId": 344
          },
          {
            "Name": "result",
            "TypeName": "CheckResult",
            "TypeId": 107
          },
          {
            "Name": "checked_by",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "checked_at_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "ready_for_processing_after_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "min_challenge_votes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "EthEventCheckResult"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "344": {
        "TypeFields": [
          {
            "Name": "event_id",
            "TypeName": "EthEventId",
            "TypeId": 105
          },
          {
            "Name": "event_data",
            "TypeName": "EventData",
            "TypeId": 345
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "EthEvent"
        ],
        "TypeDef": "Composite"
      },
      "345": {
        "Variants": [
          {
            "Name": "LogAddedValidator",
            "TypeFields": [
              {
                "TypeName": "AddedValidatorData",
                "TypeId": 346
              }
            ],
            "Index": 0
          },
          {
            "Name": "LogLifted",
            "TypeFields": [
              {
                "TypeName": "LiftedData",
                "TypeId": 347
              }
            ],
            "Index": 1
          },
          {
            "Name": "EmptyEvent",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "LogNftMinted",
            "TypeFields": [
              {
                "TypeName": "NftMintData",
                "TypeId": 348
              }
            ],
            "Index": 3
          },
          {
            "Name": "LogNftTransferTo",
            "TypeFields": [
              {
                "TypeName": "NftTransferToData",
                "TypeId": 349
              }
            ],
            "Index": 4
          },
          {
            "Name": "LogNftCancelListing",
            "TypeFields": [
              {
                "TypeName": "NftCancelListingData",
                "TypeId": 350
              }
            ],
            "Index": 5
          },
          {
            "Name": "LogNftEndBatchListing",
            "TypeFields": [
              {
                "TypeName": "NftEndBatchListingData",
                "TypeId": 351
              }
            ],
            "Index": 6
          },
          {
            "Name": "LogAvtGrowthLifted",
            "TypeFields": [
              {
                "TypeName": "AvtGrowthLiftedData",
                "TypeId": 352
              }
            ],
            "Index": 7
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "EventData"
        ],
        "TypeDef": "Variant"
      },
      "346": {
        "TypeFields": [
          {
            "Name": "eth_public_key",
            "TypeName": "H512",
            "TypeId": 256
          },
          {
            "Name": "t2_address",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "validator_account_id",
            "TypeName": "U256",
            "TypeId": 112
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "AddedValidatorData"
        ],
        "TypeDef": "Composite"
      },
      "347": {
        "TypeFields": [
          {
            "Name": "token_contract",
            "TypeName": "H160",
            "TypeId": 106
          },
          {
            "Name": "sender_address",
            "TypeName": "H160",
            "TypeId": 106
          },
          {
            "Name": "receiver_address",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 112
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "LiftedData"
        ],
        "TypeDef": "Composite"
      },
      "348": {
        "TypeFields": [
          {
            "Name": "batch_id",
            "TypeName": "U256",
            "TypeId": 112
          },
          {
            "Name": "t2_owner_public_key",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "op_id",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "t1_contract_issuer",
            "TypeName": "H160",
            "TypeId": 106
          },
          {
            "Name": "sale_index",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "unique_external_ref",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "NftMintData"
        ],
        "TypeDef": "Composite"
      },
      "349": {
        "TypeFields": [
          {
            "Name": "nft_id",
            "TypeName": "U256",
            "TypeId": 112
          },
          {
            "Name": "t2_transfer_to_public_key",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "op_id",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "NftTransferToData"
        ],
        "TypeDef": "Composite"
      },
      "350": {
        "TypeFields": [
          {
            "Name": "nft_id",
            "TypeName": "U256",
            "TypeId": 112
          },
          {
            "Name": "op_id",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "NftCancelListingData"
        ],
        "TypeDef": "Composite"
      },
      "351": {
        "TypeFields": [
          {
            "Name": "batch_id",
            "TypeName": "U256",
            "TypeId": 112
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "NftEndBatchListingData"
        ],
        "TypeDef": "Composite"
      },
      "352": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "period",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "AvtGrowthLiftedData"
        ],
        "TypeDef": "Composite"
      },
      "353": {
        "TypeFields": [
          {
            "Name": "event_id",
            "TypeName": "EthEventId",
            "TypeId": 105
          },
          {
            "Name": "challenge_reason",
            "TypeName": "ChallengeReason",
            "TypeId": 108
          },
          {
            "Name": "challenged_by",
            "TypeName": "AccountId",
            "TypeId": 0
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "Challenge"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "354": {
        "Variants": [
          {
            "Name": "AddedValidator",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Lifted",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NftMint",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NftTransferTo",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "NftCancelListing",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NftEndBatchListing",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "AvtGrowthLifted",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "sp_avn_common",
          "event_types",
          "ValidEvents"
        ],
        "TypeDef": "Variant"
      },
      "355": {
        "Variants": [
          {
            "Name": "ValidatorsManager",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Lifting",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NftMarketplace",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ethereum_events",
          "EthereumContracts"
        ],
        "TypeDef": "Variant"
      },
      "356": {
        "Variants": [
          {
            "Name": "set_transaction_id",
            "TypeFields": [
              {
                "Name": "transaction_id",
                "TypeName": "TransactionId",
                "TypeId": 10
              }
            ],
            "Index": 0
          },
          {
            "Name": "set_eth_tx_hash_for_dispatched_tx",
            "TypeFields": [
              {
                "Name": "submitter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate_tx_id",
                "TypeName": "TransactionId",
                "TypeId": 10
              },
              {
                "Name": "eth_tx_hash",
                "TypeName": "EthereumTransactionHash",
                "TypeId": 11
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 1
          },
          {
            "Name": "unreserve_transaction",
            "TypeFields": [
              {
                "Name": "transaction_type",
                "TypeName": "EthTransactionType",
                "TypeId": 250
              }
            ],
            "Index": 2,
            "Docs": [
              "Removes a reservation for a transaction that was created with reserve_transaction_id",
              "Only sudo should call this to repair a network."
            ]
          },
          {
            "Name": "set_publish_root_contract",
            "TypeFields": [
              {
                "Name": "contract_address",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 3,
            "Docs": [
              "Sets the address for ethereum contracts"
            ]
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "357": {
        "Variants": [
          {
            "Name": "mint_single_nft",
            "TypeFields": [
              {
                "Name": "unique_external_ref",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "royalties",
                "TypeName": "Vec<Royalty>",
                "TypeId": 358
              },
              {
                "Name": "t1_authority",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 0,
            "Docs": [
              "Mint a single NFT"
            ]
          },
          {
            "Name": "signed_mint_single_nft",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "unique_external_ref",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              },
              {
                "Name": "royalties",
                "TypeName": "Vec<Royalty>",
                "TypeId": 358
              },
              {
                "Name": "t1_authority",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 1,
            "Docs": [
              "Mint a single NFT signed by nft owner"
            ]
          },
          {
            "Name": "list_nft_open_for_sale",
            "TypeFields": [
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "market",
                "TypeName": "NftSaleType",
                "TypeId": 114
              }
            ],
            "Index": 2,
            "Docs": [
              "List an nft open for sale"
            ]
          },
          {
            "Name": "signed_list_nft_open_for_sale",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "nft_id",
                "TypeName": "NftId",
                "TypeId": 112
              },
              {
                "Name": "market",
                "TypeName": "NftSaleType",
                "TypeId": 114
              }
            ],
            "Index": 3,
            "Docs": [
              "List an nft open for sale by a relayer"
            ]
          },
          {
            "Name": "signed_transfer_fiat_nft",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "nft_id",
                "TypeName": "U256",
                "TypeId": 112
              },
              {
                "Name": "t2_transfer_to_public_key",
                "TypeName": "H256",
                "TypeId": 11
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer a nft open for sale on fiat market to a new owner by a relayer"
            ]
          },
          {
            "Name": "signed_cancel_list_fiat_nft",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "nft_id",
                "TypeName": "U256",
                "TypeId": 112
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel a nft open for sale on fiat market by a relayer"
            ]
          },
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              }
            ],
            "Index": 6,
            "Docs": [
              "This extrinsic allows a relayer to dispatch a call from this pallet for a sender.",
              "Currently only `signed_list_nft_open_for_sale` is allowed",
              "",
              "As a general rule, every function that can be proxied should follow this convention:",
              "- its first argument (after origin) should be a public verification key and a signature"
            ]
          },
          {
            "Name": "signed_create_batch",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "total_supply",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "royalties",
                "TypeName": "Vec<Royalty>",
                "TypeId": 358
              },
              {
                "Name": "t1_authority",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 7,
            "Docs": [
              "Creates a new batch"
            ]
          },
          {
            "Name": "signed_mint_batch_nft",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "batch_id",
                "TypeName": "NftBatchId",
                "TypeId": 112
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unique_external_ref",
                "TypeName": "Vec<u8>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "Mints an nft that belongs to a batch"
            ]
          },
          {
            "Name": "signed_list_batch_for_sale",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "batch_id",
                "TypeName": "NftBatchId",
                "TypeId": 112
              },
              {
                "Name": "market",
                "TypeName": "NftSaleType",
                "TypeId": 114
              }
            ],
            "Index": 9
          },
          {
            "Name": "signed_end_batch_sale",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "batch_id",
                "TypeName": "NftBatchId",
                "TypeId": 112
              }
            ],
            "Index": 10
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "358": {
        "TypeId": 359,
        "TypeDef": "Sequence"
      },
      "359": {
        "TypeFields": [
          {
            "Name": "recipient_t1_address",
            "TypeName": "H160",
            "TypeId": 106
          },
          {
            "Name": "rate",
            "TypeName": "RoyaltyRate",
            "TypeId": 360
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "nft_data",
          "Royalty"
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "TypeFields": [
          {
            "Name": "parts_per_million",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "nft_data",
          "RoyaltyRate"
        ],
        "TypeDef": "Composite"
      },
      "361": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              }
            ],
            "Index": 0,
            "Docs": [
              "This extrinsic allows relayer to dispatch a `signed_transfer` or `signed_lower` call for",
              "a sender. As a general rule, every function that can be proxied should follow",
              "this convention:",
              "- its first argument (after origin) should be a public verification key and a signature"
            ]
          },
          {
            "Name": "signed_transfer",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 106
              },
              {
                "Name": "amount",
                "TypeName": "T::TokenBalance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer an amount of token with token_id from sender to receiver with a proof"
            ]
          },
          {
            "Name": "lower",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 106
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 6
              },
              {
                "Name": "t1_recipient",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 2,
            "Docs": [
              "Lower an amount of token from tier2 to tier1"
            ]
          },
          {
            "Name": "signed_lower",
            "TypeFields": [
              {
                "Name": "proof",
                "TypeName": "Proof<T::Signature, T::AccountId>",
                "TypeId": 237
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "token_id",
                "TypeName": "T::TokenId",
                "TypeId": 106
              },
              {
                "Name": "amount",
                "TypeName": "u128",
                "TypeId": 6
              },
              {
                "Name": "t1_recipient",
                "TypeName": "H160",
                "TypeId": 106
              }
            ],
            "Index": 3,
            "Docs": [
              "Lower an amount of token from tier2 to tier1 by a relayer"
            ]
          },
          {
            "Name": "transfer_from_treasury",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer AVT from the treasury account. The origin must be root."
            ]
          }
        ],
        "Path": [
          "pallet_token_manager",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "362": {
        "Variants": [
          {
            "Name": "set_periods",
            "TypeFields": [
              {
                "Name": "schedule_period_in_blocks",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "voting_period_in_blocks",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "record_summary_calculation",
            "TypeFields": [
              {
                "Name": "new_block_number",
                "TypeName": "T::BlockNumber",
                "TypeId": 4
              },
              {
                "Name": "root_hash",
                "TypeName": "H256",
                "TypeId": 11
              },
              {
                "Name": "ingress_counter",
                "TypeName": "IngressCounter",
                "TypeId": 10
              },
              {
                "Name": "validator",
                "TypeName": "Validator<<T as avn::Config>::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<<T as avn::Config>::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 1
          },
          {
            "Name": "approve_root",
            "TypeFields": [
              {
                "Name": "root_id",
                "TypeName": "RootId<T::BlockNumber>",
                "TypeId": 117
              },
              {
                "Name": "validator",
                "TypeName": "Validator<<T as avn::Config>::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "approval_signature",
                "TypeName": "ecdsa::Signature",
                "TypeId": 242
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 2
          },
          {
            "Name": "reject_root",
            "TypeFields": [
              {
                "Name": "root_id",
                "TypeName": "RootId<T::BlockNumber>",
                "TypeId": 117
              },
              {
                "Name": "validator",
                "TypeName": "Validator<<T as avn::Config>::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 3
          },
          {
            "Name": "end_voting_period",
            "TypeFields": [
              {
                "Name": "root_id",
                "TypeName": "RootId<T::BlockNumber>",
                "TypeId": 117
              },
              {
                "Name": "validator",
                "TypeName": "Validator<<T as avn::Config>::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 4
          },
          {
            "Name": "advance_slot",
            "TypeFields": [
              {
                "Name": "validator",
                "TypeName": "Validator<<T as avn::Config>::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 5
          },
          {
            "Name": "add_challenge",
            "TypeFields": [
              {
                "Name": "challenge",
                "TypeName": "SummaryChallenge<T::AccountId>",
                "TypeId": 363
              },
              {
                "Name": "validator",
                "TypeName": "Validator<T::AuthorityId, T::AccountId>",
                "TypeId": 262
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 263
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "pallet_summary",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "363": {
        "TypeFields": [
          {
            "Name": "challenge_reason",
            "TypeName": "SummaryChallengeReason",
            "TypeId": 120
          },
          {
            "Name": "challenger",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "challengee",
            "TypeName": "AccountId",
            "TypeId": 0
          }
        ],
        "Path": [
          "pallet_summary",
          "challenge",
          "SummaryChallenge"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 325
              },
              {
                "Name": "payment_info",
                "TypeName": "Option<Box<PaymentInfo<T::AccountId, BalanceOf<T>, T::Signature>\n>>",
                "TypeId": 365
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_avn_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "365": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 366
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 366
          }
        ],
        "TypeDef": "Variant"
      },
      "366": {
        "TypeFields": [
          {
            "Name": "payer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "recipient",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "signature",
            "TypeName": "Signature",
            "TypeId": 238
          }
        ],
        "Path": [
          "pallet_avn_proxy",
          "PaymentInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Signature",
            "TypeId": 238
          }
        ],
        "TypeDef": "Composite"
      },
      "367": {
        "Variants": [
          {
            "Name": "set_known_sender",
            "TypeFields": [
              {
                "Name": "known_sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "config",
                "TypeName": "AdjustmentInput<T>",
                "TypeId": 368
              }
            ],
            "Index": 0
          },
          {
            "Name": "remove_known_sender",
            "TypeFields": [
              {
                "Name": "known_sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains one variant per dispatchable that can be called by an extrinsic."
        ]
      },
      "368": {
        "TypeFields": [
          {
            "Name": "fee_type",
            "TypeName": "FeeType<T>",
            "TypeId": 127
          },
          {
            "Name": "adjustment_type",
            "TypeName": "AdjustmentType<T>",
            "TypeId": 369
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "AdjustmentInput"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "369": {
        "Variants": [
          {
            "Name": "TimeBased",
            "TypeFields": [
              {
                "TypeName": "Duration<T>",
                "TypeId": 370
              }
            ],
            "Index": 0
          },
          {
            "Name": "TransactionBased",
            "TypeFields": [
              {
                "TypeName": "NumberOfTransactions<T>",
                "TypeId": 371
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "AdjustmentType"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant"
      },
      "370": {
        "TypeFields": [
          {
            "Name": "duration",
            "TypeName": "T::BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "Duration"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "TypeFields": [
          {
            "Name": "number_of_transactions",
            "TypeName": "T::Index",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "fee_adjustment_config",
          "NumberOfTransactions"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "372": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet"
        ]
      },
      "373": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 374
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 206
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "374": {
        "TypeId": 206,
        "TypeDef": "Sequence"
      },
      "375": {
        "TypeFields": [
          {
            "Name": "offender",
            "TypeName": "Offender",
            "TypeId": 46
          },
          {
            "Name": "reporters",
            "TypeName": "Vec<Reporter>",
            "TypeId": 201
          }
        ],
        "Path": [
          "sp_staking",
          "offence",
          "OffenceDetails"
        ],
        "TypeParams": [
          {
            "Name": "Reporter",
            "TypeId": 0
          },
          {
            "Name": "Offender",
            "TypeId": 46
          }
        ],
        "TypeDef": "Composite"
      },
      "376": {
        "TypeIds": [
          73,
          12
        ],
        "TypeDef": "Tuple"
      },
      "377": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 378
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 99
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "TypeId": 99,
        "TypeDef": "Sequence"
      },
      "379": {
        "TypeFields": [
          {
            "TypeId": 56
          },
          {
            "TypeName": "T",
            "TypeId": 380
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "misc",
          "WrapperOpaque"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 380
          }
        ],
        "TypeDef": "Composite"
      },
      "380": {
        "TypeFields": [
          {
            "Name": "peer_id",
            "TypeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
            "TypeId": 381
          },
          {
            "Name": "external_addresses",
            "TypeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
            "TypeId": 382
          }
        ],
        "Path": [
          "pallet_im_online",
          "BoundedOpaqueNetworkState"
        ],
        "TypeParams": [
          {
            "Name": "PeerIdEncodingLimit"
          },
          {
            "Name": "MultiAddrEncodingLimit"
          },
          {
            "Name": "AddressesLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "381": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "382": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "sp_core",
          "bounded",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 381
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "383": {
        "TypeId": 381,
        "TypeDef": "Sequence"
      },
      "384": {
        "Variants": [
          {
            "Name": "InvalidKey",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Non existent public key."
            ]
          },
          {
            "Name": "DuplicatedHeartbeat",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicated heartbeat."
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "385": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "386": {
        "TypeId": 262,
        "TypeDef": "Sequence"
      },
      "387": {
        "Variants": [
          {
            "Name": "NotAValidator",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLocalAccounts",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "OffchainWorkerAlreadyRun",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ErrorConvertingAccountId",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ErrorConvertingBlockNumber",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ErrorConvertingUtf8",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "ErrorDecodingHex",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "ErrorRecordingOffchainWorkerRun",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NoValidatorsFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "RequestTimedOut",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "DeadlineReached",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "UnexpectedStatusCode",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "InvalidVotingSession",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "InvalidVote",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "ErrorRecoveringPublicKeyFromSignature",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "InvalidECDSASignature",
            "TypeFields": null,
            "Index": 16
          }
        ],
        "Path": [
          "pallet_avn",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "388": {
        "TypeFields": [
          {
            "Name": "finalised_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "submitted_at_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_avn_finality_tracker",
          "SubmissionData"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "389": {
        "Variants": [
          {
            "Name": "InvalidSubmission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Finalized height above block number"
            ]
          },
          {
            "Name": "ErrorGettingDataFromService",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "InvalidResponseType",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ErrorDecodingResponse",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ErrorSigning",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ErrorSubmittingTransaction",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "SubmitterNotAValidator",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "NotAllowedToSubmitAtThisTime",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "pallet_avn_finality_tracker",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "390": {
        "Variants": null,
        "Path": [
          "pallet_avn_offence_handler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "391": {
        "TypeId": 392,
        "TypeDef": "Sequence"
      },
      "392": {
        "TypeIds": [
          105,
          10,
          4
        ],
        "TypeDef": "Tuple"
      },
      "393": {
        "TypeId": 394,
        "TypeDef": "Sequence"
      },
      "394": {
        "TypeIds": [
          343,
          10,
          4
        ],
        "TypeDef": "Tuple"
      },
      "395": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2_0_0",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "V3_0_0",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ethereum_events",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "396": {
        "Variants": [
          {
            "Name": "DuplicateEvent",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MissingEventToCheck",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UnrecognizedEventSignature",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "EventParsingFailed",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ErrorSigning",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ErrorSubmittingTransaction",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "InvalidKey",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "PendingChallengeEventNotFound",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidEventToChallenge",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "DuplicateChallenge",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "ErrorSavingValidationToLocalDB",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "MalformedHash",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "InvalidEventToProcess",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "ChallengingOwnEvent",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "InvalidContractAddress",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "InvalidContractType",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "InvalidEventChallengePeriod",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "SenderIsNotSigner",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "UnauthorizedTransaction",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "UnauthorizedSignedAddEthereumLogTransaction",
            "TypeFields": null,
            "Index": 20
          }
        ],
        "Path": [
          "pallet_ethereum_events",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "397": {
        "TypeFields": [
          {
            "Name": "tx_id",
            "TypeName": "TransactionId",
            "TypeId": 10
          },
          {
            "Name": "from",
            "TypeName": "Option<[u8; 32]>",
            "TypeId": 398
          },
          {
            "Name": "call_data",
            "TypeName": "EthTransactionType",
            "TypeId": 250
          },
          {
            "Name": "signatures",
            "TypeName": "EthSignatures",
            "TypeId": 399
          },
          {
            "Name": "quorum",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "eth_tx_hash",
            "TypeName": "EthereumTransactionHash",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "EthTransactionCandidate"
        ],
        "TypeDef": "Composite"
      },
      "398": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "399": {
        "TypeFields": [
          {
            "Name": "signatures_list",
            "TypeName": "Vec<ecdsa::Signature>",
            "TypeId": 259
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "ethereum_transaction",
          "EthSignatures"
        ],
        "TypeDef": "Composite"
      },
      "400": {
        "TypeId": 401,
        "TypeDef": "Sequence"
      },
      "401": {
        "TypeFields": [
          {
            "Name": "transaction_id",
            "TypeName": "TransactionId",
            "TypeId": 10
          },
          {
            "Name": "submitted_at_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "DispatchedData"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "402": {
        "Variants": [
          {
            "Name": "TransactionExists",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NotEnoughConfirmations",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ErrorSigning",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ErrorSubmittingTransaction",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "InvalidKey",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "EthTransactionHashValueMutableOnce",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "MissingDispatchedAvnTx",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "MissingDispatchedAvnTxSubmitter",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidTransactionSubmitter",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "InvalidHexString",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "InvalidHashLength",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "InvalidConfirmations",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ReservedMissing",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "ReservedMismatch",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "DeadlineReached",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "InvalidUTF8Bytes",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "RequestTimedOut",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "UnexpectedStatusCode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "InvalidContractAddress",
            "TypeFields": null,
            "Index": 18
          }
        ],
        "Path": [
          "pallet_ethereum_transactions",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "403": {
        "TypeFields": [
          {
            "Name": "nft_id",
            "TypeName": "NftId",
            "TypeId": 112
          },
          {
            "Name": "info_id",
            "TypeName": "NftInfoId",
            "TypeId": 112
          },
          {
            "Name": "unique_external_ref",
            "TypeName": "Vec<u8>",
            "TypeId": 12
          },
          {
            "Name": "nonce",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "is_locked",
            "TypeName": "bool",
            "TypeId": 35
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "nft_data",
          "Nft"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "404": {
        "TypeFields": [
          {
            "Name": "info_id",
            "TypeName": "NftInfoId",
            "TypeId": 112
          },
          {
            "Name": "batch_id",
            "TypeName": "Option<NftBatchId>",
            "TypeId": 405
          },
          {
            "Name": "royalties",
            "TypeName": "Vec<Royalty>",
            "TypeId": 358
          },
          {
            "Name": "total_supply",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "t1_authority",
            "TypeName": "H160",
            "TypeId": 106
          },
          {
            "Name": "creator",
            "TypeName": "Option<AccountId>",
            "TypeId": 96
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "nft_data",
          "NftInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "405": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 112
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 112
          }
        ],
        "TypeDef": "Variant"
      },
      "406": {
        "TypeId": 112,
        "TypeDef": "Sequence"
      },
      "407": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2_0_0",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "V3_0_0",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "408": {
        "Variants": [
          {
            "Name": "NftAlreadyExists",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "RoyaltyRateIsNotValid",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "When specifying rates, parts_per_million must not be greater than 1 million"
            ]
          },
          {
            "Name": "TotalRoyaltyRateIsNotValid",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "When specifying rates, sum of parts_per_millions must not be greater than 1 million"
            ]
          },
          {
            "Name": "T1AuthorityIsMandatory",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ExternalRefIsMandatory",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ExternalRefIsAlreadyInUse",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The external reference is already used"
            ]
          },
          {
            "Name": "NftInfoMissing",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There is not data associated with an nftInfoId"
            ]
          },
          {
            "Name": "NftIdDoesNotExist",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "UnsupportedMarket",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "SenderIsNotSigner",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Signed extrinsic with a proof must be called by the signer of the proof"
            ]
          },
          {
            "Name": "SenderIsNotOwner",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "NftAlreadyListed",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "NftIsLocked",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "NftNotListedForSale",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "NftNotListedForEthereumSale",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "NftNotListedForFiatSale",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "NoTier1EventForNftOperation",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "NftNonceMismatch",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The op_id did not match the nft token nonce for the operation"
            ]
          },
          {
            "Name": "UnauthorizedTransaction",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "UnauthorizedProxyTransaction",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "UnauthorizedSignedLiftNftOpenForSaleTransaction",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "UnauthorizedSignedMintSingleNftTransaction",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "UnauthorizedSignedTransferFiatNftTransaction",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "UnauthorizedSignedCancelListFiatNftTransaction",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "TransactionNotSupported",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "TransferToIsMandatory",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "UnauthorizedSignedCreateBatchTransaction",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "BatchAlreadyExists",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "TotalSupplyZero",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "UnauthorizedSignedMintBatchNftTransaction",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "BatchIdIsMandatory",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "BatchDoesNotExist",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "SenderIsNotBatchCreator",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "TotalSupplyExceeded",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "UnauthorizedSignedListBatchForSaleTransaction",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "BatchAlreadyListed",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "NoNftsToSell",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "BatchNotListed",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "UnauthorizedSignedEndBatchSaleTransaction",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "BatchNotListedForFiatSale",
            "TypeFields": null,
            "Index": 39
          },
          {
            "Name": "BatchNotListedForEthereumSale",
            "TypeFields": null,
            "Index": 40
          }
        ],
        "Path": [
          "pallet_nft_manager",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "409": {
        "TypeIds": [
          106,
          0
        ],
        "TypeDef": "Tuple"
      },
      "410": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "411": {
        "Variants": [
          {
            "Name": "NoTier1EventForLogLifted",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AmountOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DepositFailed",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "LowerFailed",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "AmountIsZero",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "InsufficientSenderBalance",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TransactionNotSupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "SenderNotValid",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "UnauthorizedTransaction",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "UnauthorizedProxyTransaction",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "UnauthorizedSignedTransferTransaction",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "UnauthorizedSignedLowerTransaction",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ErrorConvertingAccountId",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "ErrorConvertingTokenBalance",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "ErrorConvertingToBalance",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "NoTier1EventForLogAvtGrowthLifted",
            "TypeFields": null,
            "Index": 15
          }
        ],
        "Path": [
          "pallet_token_manager",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "412": {
        "TypeIds": [
          118,
          10
        ],
        "TypeDef": "Tuple"
      },
      "413": {
        "TypeFields": [
          {
            "Name": "root_hash",
            "TypeName": "H256",
            "TypeId": 11
          },
          {
            "Name": "added_by",
            "TypeName": "Option<AccountId>",
            "TypeId": 96
          },
          {
            "Name": "is_validated",
            "TypeName": "bool",
            "TypeId": 35
          },
          {
            "Name": "is_finalised",
            "TypeName": "bool",
            "TypeId": 35
          },
          {
            "Name": "tx_id",
            "TypeName": "Option<TransactionId>",
            "TypeId": 414
          }
        ],
        "Path": [
          "pallet_summary",
          "RootData"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "414": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "415": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ErrorCalculatingChosenValidator",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ErrorConvertingBlockNumber",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ErrorGettingSummaryDataFromService",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "InvalidSummaryRange",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ErrorSubmittingTransaction",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "InvalidKey",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "ErrorSigning",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidHexString",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "InvalidUTF8Bytes",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "InvalidRootHashLength",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "SummaryPendingOrApproved",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "RootHasAlreadyBeenRegisteredForVoting",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "InvalidRoot",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "ErrorEndingVotingPeriod",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "ErrorSubmitCandidateTxnToTier1",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "VotingSessionIsNotValid",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "ErrorRecoveringPublicKeyFromSignature",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "ECDSASignatureNotValid",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "RootDataNotFound",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "InvalidChallenge",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "WrongValidator",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "GracePeriodElapsed",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "TooEarlyToAdvance",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "InvalidIngressCounter",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "SchedulePeriodIsTooShort",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "VotingPeriodIsTooShort",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "VotingPeriodIsTooLong",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "VotingPeriodIsLessThanFinalityReportLatency",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "VotingPeriodIsEqualOrLongerThanSchedulePeriod",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "CurrentSlotValidatorNotFound",
            "TypeFields": null,
            "Index": 31
          }
        ],
        "Path": [
          "pallet_summary",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "416": {
        "Variants": [
          {
            "Name": "TransactionNotSupported",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "UnauthorizedFee",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UnauthorizedProxyTransaction",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_avn_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "417": {
        "Variants": [
          {
            "Name": "InvalidFeeConfig",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "InvalidFeeType",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "KnownSenderMustMatchAccount",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownSenderMissing",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_avn_transaction_payment",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
        ]
      },
      "418": {
        "TypeFields": [
          {
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 188
          },
          {
            "Name": "Call",
            "TypeId": 325
          },
          {
            "Name": "Signature",
            "TypeId": 238
          },
          {
            "Name": "Extra",
            "TypeId": 419
          }
        ],
        "TypeDef": "Composite"
      },
      "419": {
        "TypeIds": [
          420,
          421,
          422,
          423,
          424,
          426,
          427,
          428
        ],
        "TypeDef": "Tuple"
      },
      "420": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "421": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "422": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "423": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "424": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 425
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "425": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "426": {
        "TypeFields": [
          {
            "TypeName": "T::Index",
            "TypeId": 56
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "427": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "428": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 60
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "429": {
        "Path": [
          "avn_parachain_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 7,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 17,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 131
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 133,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 129,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 135
        },
        "Events": {
          "TypeId": 20
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 139,
            "Value": "BwDyBSoBAAcAiFJqdAIAQAECZc0dAAEHwNIsdlECAOAAAQcA5r1PVwIA8AABAAACZc0dAAEHwHTBkG4CADABAQcAiFJqdAIAQAEBBwCilBodAgBQAAJlzR0AAAAA",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 143,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "ABAAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 145,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 146,
            "Value": "NGF2bi1wYXJhY2hhaW40YXZuLXBhcmFjaGFpbgEAAAAfAAAAAAAAADDdcY1cxTJi1AEAAADfastomQdgmwQAAAA345f8fJH15AEAAABA/jrUAfiVmgYAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAACrPAVyKR/riwEAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAIAAADz/xTVq1JwWQIAAADqk+Pxbz1pYgIAAABoetRK038DwgEAAAABAAAAAQ==",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 150,
            "Value": "KgA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 151
        },
        "Index": 0
      },
      "1": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                " which will result the next block process with the new validation code. This concludes the upgrade process.",
                "",
                " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 152,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 154,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 156,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 158,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 162,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 163,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 164,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 167,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 138,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 138,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The next authorized upgrade, if there is one."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See [`Pallet::set_custom_validation_head_data`] for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 169
        },
        "Events": {
          "TypeId": 29
        },
        "Constants": [],
        "Errors": {
          "TypeId": 178
        },
        "Index": 1
      },
      "2": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 179
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 10,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 50,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 3
      },
      "10": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 180
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 184
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 187
        },
        "Events": {
          "TypeId": 30
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open."
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 190
        },
        "Index": 10
      },
      "11": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 191,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 192,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 32
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 11
      },
      "20": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Uncles",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 193,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Uncles"
              ]
            },
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            },
            {
              "Name": "DidSetUncles",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether uncles were already set in this block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 196
        },
        "Events": null,
        "Constants": [
          {
            "Name": "UncleGenerations",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The number of blocks back we should accept uncles.",
              " This means that we will deal with uncle-parents that are",
              " `UncleGenerations + 1` before `now`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 200
        },
        "Index": 20
      },
      "22": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 201,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 202,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 208,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 204
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 209,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 211
        },
        "Events": {
          "TypeId": 33
        },
        "Constants": [],
        "Errors": {
          "TypeId": 212
        },
        "Index": 22
      },
      "23": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 213,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 215,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 23
      },
      "24": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 213,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will always",
                " be updated to the latest AuRa authorities in `on_finalize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 24
      },
      "96": {
        "Name": "ParachainStaking",
        "Storage": {
          "Prefix": "ParachainStaking",
          "Entries": [
            {
              "Name": "Delay",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of eras to wait before executing any staking action"
              ]
            },
            {
              "Name": "TotalSelected",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The total candidates selected every era"
              ]
            },
            {
              "Name": "Era",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 216,
                "Item2": null
              },
              "Default": "AQAAAAEAAAAUAAAA",
              "Docs": [
                " Current era index and next era scheduled transition"
              ]
            },
            {
              "Name": "NominatorState",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 217
                }
              },
              "Default": "AA==",
              "Docs": [
                " Get nominator state associated with an account if account is nominating else None"
              ]
            },
            {
              "Name": "CandidateInfo",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 221
                }
              },
              "Default": "AA==",
              "Docs": [
                " Get collator candidate info associated with an account if account is candidate else None"
              ]
            },
            {
              "Name": "NominationScheduledRequests",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 226
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores outstanding nomination requests per collator."
              ]
            },
            {
              "Name": "TopNominations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 228
                }
              },
              "Default": "AA==",
              "Docs": [
                " Top nominations for collator candidate"
              ]
            },
            {
              "Name": "BottomNominations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 228
                }
              },
              "Default": "AA==",
              "Docs": [
                " Bottom nominations for collator candidate"
              ]
            },
            {
              "Name": "SelectedCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 201,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The collator candidates selected for the current era"
              ]
            },
            {
              "Name": "Total",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total capital locked by this staking pallet"
              ]
            },
            {
              "Name": "CandidatePool",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 218,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The pool of collator candidates, each with their total backing stake"
              ]
            },
            {
              "Name": "AtStake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 229,
                  "Value": 230
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Snapshot of collator nomination stake at the start of the era"
              ]
            },
            {
              "Name": "DelayedPayouts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 231
                }
              },
              "Default": "AA==",
              "Docs": [
                " Delayed payouts"
              ]
            },
            {
              "Name": "Staked",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total counted stake for selected candidates in the era"
              ]
            },
            {
              "Name": "Points",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Total points awarded to collators for block production in the era"
              ]
            },
            {
              "Name": "AwardedPts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 229,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Points for each collator per era"
              ]
            },
            {
              "Name": "LockedEraPayout",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total amount of payouts we are waiting to take out of this pallet's pot."
              ]
            },
            {
              "Name": "GrowthPeriod",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 232,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Tracks the current growth period where collator will get paid for producing blocks"
              ]
            },
            {
              "Name": "Growth",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 233
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Data to calculate growth and collator payouts."
              ]
            },
            {
              "Name": "ProcessedGrowthPeriods",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 95
                }
              },
              "Default": "",
              "Docs": []
            },
            {
              "Name": "ForceNewEra",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MinCollatorStake",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum stake required for any candidate to be a collator"
              ]
            },
            {
              "Name": "MinTotalNominatorStake",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum total stake that must be maintained for any registered on-chain account to be a",
                " nominator"
              ]
            },
            {
              "Name": "ProxyNonces",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " An account nonce that represents the number of proxy transactions from this account"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 236
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [
          {
            "Name": "MinBlocksPerEra",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Minimum number of blocks per era"
            ]
          },
          {
            "Name": "RewardPaymentDelay",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " Number of eras after which block authors are rewarded"
            ]
          },
          {
            "Name": "MinSelectedCandidates",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Minimum number of selected candidates every era"
            ]
          },
          {
            "Name": "MaxTopNominationsPerCandidate",
            "TypeId": 4,
            "Value": "LAEAAA==",
            "Docs": [
              " Maximum top nominations counted per candidate"
            ]
          },
          {
            "Name": "MaxBottomNominationsPerCandidate",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Maximum bottom nominations (not counted) per candidate"
            ]
          },
          {
            "Name": "MaxNominationsPerNominator",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum nominations per nominator"
            ]
          },
          {
            "Name": "MinNominationPerCollator",
            "TypeId": 6,
            "Value": "AQAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum stake, per collator, that must be maintained by an account that is nominating"
            ]
          }
        ],
        "Errors": {
          "TypeId": 245
        },
        "Index": 96
      },
      "18": {
        "Name": "ValidatorsManager",
        "Storage": {
          "Prefix": "ValidatorsManager",
          "Entries": [
            {
              "Name": "ValidatorAccountIds",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 201,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ValidatorActions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 246,
                  "Value": 247
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "VotesRepository",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 43,
                  "Value": 258
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "PendingApprovals",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "EthereumPublicKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 41,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "TotalIngresses",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 260
        },
        "Events": {
          "TypeId": 40
        },
        "Constants": [],
        "Errors": {
          "TypeId": 264
        },
        "Index": 18
      },
      "30": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 265,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Status of the inbound XCMP channels."
              ]
            },
            {
              "Name": "InboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 271,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 272,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 275,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 50,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 276,
                "Item2": null
              },
              "Default": "AgAAAAUAAAABAAAAghoGAAAIAAcAyBeoBAIABAA=",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 10,
                  "Value": 277
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages that exceeded max individual message weight budget.",
                "",
                " These message stay in this storage map until they are manually dispatched via",
                " `service_overweight`."
              ]
            },
            {
              "Name": "OverweightCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                " available free overweight index."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 278
        },
        "Events": {
          "TypeId": 47
        },
        "Constants": [],
        "Errors": {
          "TypeId": 279
        },
        "Index": 30
      },
      "31": {
        "Name": "PolkadotXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 280
        },
        "Events": {
          "TypeId": 51
        },
        "Constants": [],
        "Errors": {
          "TypeId": 306
        },
        "Index": 31
      },
      "32": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": null,
        "Events": {
          "TypeId": 90
        },
        "Constants": [],
        "Errors": {
          "TypeId": 307
        },
        "Index": 32
      },
      "33": {
        "Name": "DmpQueue",
        "Storage": {
          "Prefix": "DmpQueue",
          "Entries": [
            {
              "Name": "Configuration",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 308,
                "Item2": null
              },
              "Default": "BwDkC1QCAgAEAA==",
              "Docs": [
                " The configuration."
              ]
            },
            {
              "Name": "PageIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 309,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The page index."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 310
                }
              },
              "Default": "AA==",
              "Docs": [
                " The queue pages."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 10,
                  "Value": 311
                }
              },
              "Default": "AA==",
              "Docs": [
                " The overweight messages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 312
        },
        "Events": {
          "TypeId": 91
        },
        "Constants": [],
        "Errors": {
          "TypeId": 313
        },
        "Index": 33
      },
      "60": {
        "Name": "Assets",
        "Storage": {
          "Prefix": "Assets",
          "Entries": [
            {
              "Name": "Asset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 314
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of an asset."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 229,
                  "Value": 316
                }
              },
              "Default": "AA==",
              "Docs": [
                " The holdings of a specific account for a specific asset."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 318,
                  "Value": 319
                }
              },
              "Default": "AA==",
              "Docs": [
                " Approved balance transfers. First balance is the amount approved for transfer. Second",
                " is the amount of `T::Currency` reserved for storing this.",
                " First key is the asset ID, second key is the owner and third key is the delegate."
              ]
            },
            {
              "Name": "Metadata",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 320
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Metadata of an asset."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 322
        },
        "Events": {
          "TypeId": 92
        },
        "Constants": [
          {
            "Name": "RemoveItemsLimit",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "Name": "AssetDeposit",
            "TypeId": 6,
            "Value": "AADBb/KGIwAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "Name": "AssetAccountDeposit",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "Name": "MetadataDepositPerByte",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "Name": "ApprovalDeposit",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 323
        },
        "Index": 60
      },
      "62": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 324
        },
        "Events": {
          "TypeId": 93
        },
        "Constants": [],
        "Errors": {
          "TypeId": 372
        },
        "Index": 62
      },
      "70": {
        "Name": "AuthorityDiscovery",
        "Storage": {
          "Prefix": "AuthorityDiscovery",
          "Entries": [
            {
              "Name": "Keys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 373,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Keys of the current authority set."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 373,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Keys of the next authority set."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 70
      },
      "71": {
        "Name": "Historical",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 71
      },
      "72": {
        "Name": "Offences",
        "Storage": {
          "Prefix": "Offences",
          "Entries": [
            {
              "Name": "Reports",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 375
                }
              },
              "Default": "AA==",
              "Docs": [
                " The primary structure that holds all offence records keyed by report identifiers."
              ]
            },
            {
              "Name": "ConcurrentReportsIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 376,
                  "Value": 130
                }
              },
              "Default": "AA==",
              "Docs": [
                " A vector of reports of the same kind that happened at the same time slot."
              ]
            },
            {
              "Name": "ReportsByKindIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 73,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " Enumerates all reports of a kind along with the time they happened.",
                "",
                " All reports are sorted by the time of offence.",
                "",
                " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                " different types are not supported at the moment so we are doing the manual serialization."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 97
        },
        "Constants": [],
        "Errors": null,
        "Index": 72
      },
      "73": {
        "Name": "ImOnline",
        "Storage": {
          "Prefix": "ImOnline",
          "Entries": [
            {
              "Name": "HeartbeatAfter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The block number after which it's ok to send heartbeats in the current",
                " session.",
                "",
                " At the beginning of each session we set this to a value that should fall",
                " roughly in the middle of the session duration. The idea is to first wait for",
                " the validators to produce a block in the current session, so that the",
                " heartbeat later on will not be necessary.",
                "",
                " This value will only be used as a fallback if we fail to get a proper session",
                " progress estimate from `NextSessionRotation`, as those estimates should be",
                " more accurate then the value we calculate for `HeartbeatAfter`."
              ]
            },
            {
              "Name": "Keys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 377,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of keys that may issue a heartbeat."
              ]
            },
            {
              "Name": "ReceivedHeartbeats",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 132,
                  "Value": 379
                }
              },
              "Default": "AA==",
              "Docs": [
                " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                " `WrapperOpaque<BoundedOpaqueNetworkState>`."
              ]
            },
            {
              "Name": "AuthoredBlocks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 229,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                " number of blocks authored by the given authority."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 326
        },
        "Events": {
          "TypeId": 98
        },
        "Constants": [
          {
            "Name": "UnsignedPriority",
            "TypeId": 10,
            "Value": "//////////8=",
            "Docs": [
              " A configuration for base priority of unsigned transactions.",
              "",
              " This is exposed so that it can be tuned for particular runtime, when",
              " multiple pallets send unsigned transactions."
            ]
          }
        ],
        "Errors": {
          "TypeId": 384
        },
        "Index": 73
      },
      "74": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 333
        },
        "Events": {
          "TypeId": 101
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 385
        },
        "Index": 74
      },
      "81": {
        "Name": "Avn",
        "Storage": {
          "Prefix": "Avn",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 386,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators (address and key) that may issue a transaction from the",
                " offchain worker."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 387
        },
        "Index": 81
      },
      "82": {
        "Name": "AvnFinalityTracker",
        "Storage": {
          "Prefix": "AvnFinalityTracker",
          "Entries": [
            {
              "Name": "LatestFinalisedBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "LastFinalisedBlockUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "LastFinalisedBlockSubmission",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "SubmittedBlockNumbers",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 388
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 340
        },
        "Events": {
          "TypeId": 102
        },
        "Constants": [],
        "Errors": {
          "TypeId": 389
        },
        "Index": 82
      },
      "83": {
        "Name": "AvnOffenceHandler",
        "Storage": {
          "Prefix": "AvnOffenceHandler",
          "Entries": [
            {
              "Name": "ReportedOffenders",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 35
                }
              },
              "Default": "AA==",
              "Docs": [
                " A false value means the offence for the validator was not applied successfully."
              ]
            },
            {
              "Name": "SlashingEnabled",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 35,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A flag to control if slashing is enabled"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 341
        },
        "Events": {
          "TypeId": 103
        },
        "Constants": [],
        "Errors": {
          "TypeId": 390
        },
        "Index": 83
      },
      "84": {
        "Name": "EthereumEvents",
        "Storage": {
          "Prefix": "EthereumEvents",
          "Entries": [
            {
              "Name": "ValidatorManagerContractAddress",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 106,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "LiftingContractAddress",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 106,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "TotalIngresses",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "UncheckedEvents",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 391,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "EventsPendingChallenge",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 393,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ProcessedEvents",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 105,
                  "Value": 35
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Challenges",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 105,
                  "Value": 201
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "QuorumFactor",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "EventChallengePeriod",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "NftT1Contracts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 106,
                  "Value": 95
                }
              },
              "Default": "",
              "Docs": []
            },
            {
              "Name": "ProxyNonces",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 395,
                "Item2": null
              },
              "Default": "Ag==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 342
        },
        "Events": {
          "TypeId": 104
        },
        "Constants": [],
        "Errors": {
          "TypeId": 396
        },
        "Index": 84
      },
      "85": {
        "Name": "EthereumTransactions",
        "Storage": {
          "Prefix": "EthereumTransactions",
          "Entries": [
            {
              "Name": "Repository",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 10,
                  "Value": 397
                }
              },
              "Default": "AAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "DispatchedAvnTxIds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 400
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ReservedTransactions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 250,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "PublishRootContract",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 106,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "Nonce",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 356
        },
        "Events": {
          "TypeId": 110
        },
        "Constants": [],
        "Errors": {
          "TypeId": 402
        },
        "Index": 85
      },
      "86": {
        "Name": "NftManager",
        "Storage": {
          "Prefix": "NftManager",
          "Entries": [
            {
              "Name": "Nfts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 112,
                  "Value": 403
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between NFT Id and data"
              ]
            },
            {
              "Name": "NftInfos",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 112,
                  "Value": 404
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between NFT info Id and info data"
              ]
            },
            {
              "Name": "NftBatches",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 112,
                  "Value": 406
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between the external batch id and its nft Ids"
              ]
            },
            {
              "Name": "BatchInfoId",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 112,
                  "Value": 112
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " A mapping between the external batch id and its corresponding NtfInfoId"
              ]
            },
            {
              "Name": "UsedExternalReferences",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 35
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between an ExternalRef and a flag to show that an NFT has used it"
              ]
            },
            {
              "Name": "NextInfoId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 112,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The Id that will be used when creating the new NftInfo record"
              ]
            },
            {
              "Name": "NextSingleNftUniqueId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 112,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The Id that will be used when creating the new single Nft"
              ]
            },
            {
              "Name": "NftOpenForSale",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 112,
                  "Value": 114
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping that keeps all the nfts that are open to sale in a specific market"
              ]
            },
            {
              "Name": "OwnedNfts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 406
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping between the external batch id and its nft Ids"
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 407,
                "Item2": null
              },
              "Default": "Ag==",
              "Docs": [
                " The version of this storage"
              ]
            },
            {
              "Name": "BatchNonces",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " An account nonce that represents the number of proxy transactions from this account"
              ]
            },
            {
              "Name": "BatchOpenForSale",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 112,
                  "Value": 114
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping that keeps all the batches that are open to sale in a specific market"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 357
        },
        "Events": {
          "TypeId": 111
        },
        "Constants": [],
        "Errors": {
          "TypeId": 408
        },
        "Index": 86
      },
      "87": {
        "Name": "TokenManager",
        "Storage": {
          "Prefix": "TokenManager",
          "Entries": [
            {
              "Name": "Balances",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 409,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The number of units of tokens held by any given account."
              ]
            },
            {
              "Name": "Nonces",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " An account nonce that represents the number of transfers from this account",
                " It is shared for all tokens held by the account"
              ]
            },
            {
              "Name": "LowerAccountId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " An account without a known private key, that can send transfers (eg Lowering transfers) but",
                " from which no one can send funds. Tokens sent to this account are effectively destroyed."
              ]
            },
            {
              "Name": "AVTTokenContract",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 106,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The ethereum address of the AVT contract. Default value is the Rinkeby address"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 361
        },
        "Events": {
          "TypeId": 115
        },
        "Constants": [
          {
            "Name": "TreasuryGrowthPercentage",
            "TypeId": 410,
            "Value": "gBe0LA==",
            "Docs": [
              " Percentage of growth to store in the treasury"
            ]
          }
        ],
        "Errors": {
          "TypeId": 411
        },
        "Index": 87
      },
      "88": {
        "Name": "Summary",
        "Storage": {
          "Prefix": "Summary",
          "Entries": [
            {
              "Name": "NextBlockToProcess",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "NextSlotAtBlock",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "CurrentSlotsValidator",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "SlotOfLastPublishedSummary",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "Roots",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 412,
                  "Value": 413
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": []
            },
            {
              "Name": "VotesRepository",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 117,
                  "Value": 258
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "PendingApproval",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 118,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "TotalIngresses",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The total ingresses of roots"
              ]
            },
            {
              "Name": "SchedulePeriod",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " A period (in block number) where summaries are calculated"
              ]
            },
            {
              "Name": "VotingPeriod",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " A period (in block number) where validators are allowed to vote on the validity of a root",
                " hash"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 362
        },
        "Events": {
          "TypeId": 116
        },
        "Constants": [],
        "Errors": {
          "TypeId": 415
        },
        "Index": 88
      },
      "89": {
        "Name": "AvnProxy",
        "Storage": {
          "Prefix": "AvnProxy",
          "Entries": [
            {
              "Name": "PaymentNonces",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 10
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " An account nonce that represents the number of payments from this account",
                " It is shared for all proxy transactions performed by that account"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 364
        },
        "Events": {
          "TypeId": 121
        },
        "Constants": [],
        "Errors": {
          "TypeId": 416
        },
        "Index": 89
      },
      "90": {
        "Name": "AvnTransactionPayment",
        "Storage": {
          "Prefix": "AvnTransactionPayment",
          "Entries": [
            {
              "Name": "KnownSenders",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 123
                }
              },
              "Default": "BA==",
              "Docs": [
                " A map of known senders"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 367
        },
        "Events": {
          "TypeId": 122
        },
        "Constants": [],
        "Errors": {
          "TypeId": 417
        },
        "Index": 90
      }
    },
    "Extrinsic": {
      "TypeId": 418,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 420,
          "AddSignedExtType": 95
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 421,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 422,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 423,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 424,
          "AddSignedExtType": 11
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 426,
          "AddSignedExtType": 95
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 427,
          "AddSignedExtType": 95
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 428,
          "AddSignedExtType": 95
        }
      ]
    },
    "TypeId": 429
  }
}