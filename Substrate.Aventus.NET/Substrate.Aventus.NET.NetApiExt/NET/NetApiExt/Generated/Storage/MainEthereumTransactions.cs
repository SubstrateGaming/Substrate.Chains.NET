//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Aventus.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class EthereumTransactionsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public EthereumTransactionsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumTransactions", "Repository"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.ethereum_transaction.EthTransactionCandidate)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumTransactions", "DispatchedAvnTxIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.DispatchedData>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumTransactions", "ReservedTransactions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.ethereum_transaction.EnumEthTransactionType), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumTransactions", "PublishRootContract"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumTransactions", "Nonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> RepositoryParams
        /// </summary>
        public static string RepositoryParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("EthereumTransactions", "Repository", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RepositoryDefault
        /// Default value as hex string
        /// </summary>
        public static string RepositoryDefault()
        {
            return "0x0000000000000000000400000000000000000000000000000000000000000000000000000000000" +
                "000000000000000";
        }
        
        /// <summary>
        /// >> Repository
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.ethereum_transaction.EthTransactionCandidate> Repository(Substrate.NetApi.Model.Types.Primitive.U64 key, CancellationToken token)
        {
            string parameters = EthereumTransactionsStorage.RepositoryParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.ethereum_transaction.EthTransactionCandidate>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> DispatchedAvnTxIdsParams
        /// </summary>
        public static string DispatchedAvnTxIdsParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("EthereumTransactions", "DispatchedAvnTxIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DispatchedAvnTxIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string DispatchedAvnTxIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DispatchedAvnTxIds
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.DispatchedData>> DispatchedAvnTxIds(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = EthereumTransactionsStorage.DispatchedAvnTxIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.DispatchedData>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ReservedTransactionsParams
        /// </summary>
        public static string ReservedTransactionsParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.ethereum_transaction.EnumEthTransactionType key)
        {
            return RequestGenerator.GetStorage("EthereumTransactions", "ReservedTransactions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReservedTransactionsDefault
        /// Default value as hex string
        /// </summary>
        public static string ReservedTransactionsDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> ReservedTransactions
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> ReservedTransactions(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.ethereum_transaction.EnumEthTransactionType key, CancellationToken token)
        {
            string parameters = EthereumTransactionsStorage.ReservedTransactionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> PublishRootContractParams
        /// </summary>
        public static string PublishRootContractParams()
        {
            return RequestGenerator.GetStorage("EthereumTransactions", "PublishRootContract", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PublishRootContractDefault
        /// Default value as hex string
        /// </summary>
        public static string PublishRootContractDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PublishRootContract
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160> PublishRootContract(CancellationToken token)
        {
            string parameters = EthereumTransactionsStorage.PublishRootContractParams();
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NonceParams
        /// </summary>
        public static string NonceParams()
        {
            return RequestGenerator.GetStorage("EthereumTransactions", "Nonce", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NonceDefault
        /// Default value as hex string
        /// </summary>
        public static string NonceDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Nonce
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> Nonce(CancellationToken token)
        {
            string parameters = EthereumTransactionsStorage.NonceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, token);
            return result;
        }
    }
    
    public sealed class EthereumTransactionsCalls
    {
        
        /// <summary>
        /// >> set_transaction_id
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetTransactionId(Substrate.NetApi.Model.Types.Primitive.U64 transaction_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(transaction_id.Encode());
            return new Method(85, "EthereumTransactions", 0, "set_transaction_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_eth_tx_hash_for_dispatched_tx
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetEthTxHashForDispatchedTx(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 submitter, Substrate.NetApi.Model.Types.Primitive.U64 candidate_tx_id, Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H256 eth_tx_hash, Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_avn.sr25519.app_sr25519.Signature signature)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(submitter.Encode());
            byteArray.AddRange(candidate_tx_id.Encode());
            byteArray.AddRange(eth_tx_hash.Encode());
            byteArray.AddRange(signature.Encode());
            return new Method(85, "EthereumTransactions", 1, "set_eth_tx_hash_for_dispatched_tx", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unreserve_transaction
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UnreserveTransaction(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_ethereum_transactions.ethereum_transaction.EnumEthTransactionType transaction_type)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(transaction_type.Encode());
            return new Method(85, "EthereumTransactions", 2, "unreserve_transaction", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_publish_root_contract
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetPublishRootContract(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160 contract_address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_address.Encode());
            return new Method(85, "EthereumTransactions", 3, "set_publish_root_contract", byteArray.ToArray());
        }
    }
    
    public sealed class EthereumTransactionsConstants
    {
    }
    
    public enum EthereumTransactionsErrors
    {
        
        /// <summary>
        /// >> TransactionExists
        /// </summary>
        TransactionExists,
        
        /// <summary>
        /// >> NotEnoughConfirmations
        /// </summary>
        NotEnoughConfirmations,
        
        /// <summary>
        /// >> ErrorSigning
        /// </summary>
        ErrorSigning,
        
        /// <summary>
        /// >> ErrorSubmittingTransaction
        /// </summary>
        ErrorSubmittingTransaction,
        
        /// <summary>
        /// >> InvalidKey
        /// </summary>
        InvalidKey,
        
        /// <summary>
        /// >> EthTransactionHashValueMutableOnce
        /// </summary>
        EthTransactionHashValueMutableOnce,
        
        /// <summary>
        /// >> MissingDispatchedAvnTx
        /// </summary>
        MissingDispatchedAvnTx,
        
        /// <summary>
        /// >> MissingDispatchedAvnTxSubmitter
        /// </summary>
        MissingDispatchedAvnTxSubmitter,
        
        /// <summary>
        /// >> InvalidTransactionSubmitter
        /// </summary>
        InvalidTransactionSubmitter,
        
        /// <summary>
        /// >> InvalidHexString
        /// </summary>
        InvalidHexString,
        
        /// <summary>
        /// >> InvalidHashLength
        /// </summary>
        InvalidHashLength,
        
        /// <summary>
        /// >> InvalidConfirmations
        /// </summary>
        InvalidConfirmations,
        
        /// <summary>
        /// >> ReservedMissing
        /// </summary>
        ReservedMissing,
        
        /// <summary>
        /// >> ReservedMismatch
        /// </summary>
        ReservedMismatch,
        
        /// <summary>
        /// >> DeadlineReached
        /// </summary>
        DeadlineReached,
        
        /// <summary>
        /// >> InvalidUTF8Bytes
        /// </summary>
        InvalidUTF8Bytes,
        
        /// <summary>
        /// >> RequestTimedOut
        /// </summary>
        RequestTimedOut,
        
        /// <summary>
        /// >> UnexpectedStatusCode
        /// </summary>
        UnexpectedStatusCode,
        
        /// <summary>
        /// >> InvalidContractAddress
        /// </summary>
        InvalidContractAddress,
    }
}
