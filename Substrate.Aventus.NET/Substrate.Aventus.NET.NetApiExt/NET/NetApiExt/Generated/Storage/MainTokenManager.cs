//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Aventus.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class TokenManagerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public TokenManagerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenManager", "Balances"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenManager", "Nonces"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenManager", "LowerAccountId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenManager", "AVTTokenContract"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160)));
        }
        
        /// <summary>
        /// >> BalancesParams
        ///  The number of units of tokens held by any given account.
        /// </summary>
        public static string BalancesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("TokenManager", "Balances", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BalancesDefault
        /// Default value as hex string
        /// </summary>
        public static string BalancesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Balances
        ///  The number of units of tokens held by any given account.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Balances(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, CancellationToken token)
        {
            string parameters = TokenManagerStorage.BalancesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NoncesParams
        ///  An account nonce that represents the number of transfers from this account
        ///  It is shared for all tokens held by the account
        /// </summary>
        public static string NoncesParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("TokenManager", "Nonces", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NoncesDefault
        /// Default value as hex string
        /// </summary>
        public static string NoncesDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Nonces
        ///  An account nonce that represents the number of transfers from this account
        ///  It is shared for all tokens held by the account
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> Nonces(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = TokenManagerStorage.NoncesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> LowerAccountIdParams
        ///  An account without a known private key, that can send transfers (eg Lowering transfers) but
        ///  from which no one can send funds. Tokens sent to this account are effectively destroyed.
        /// </summary>
        public static string LowerAccountIdParams()
        {
            return RequestGenerator.GetStorage("TokenManager", "LowerAccountId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LowerAccountIdDefault
        /// Default value as hex string
        /// </summary>
        public static string LowerAccountIdDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> LowerAccountId
        ///  An account without a known private key, that can send transfers (eg Lowering transfers) but
        ///  from which no one can send funds. Tokens sent to this account are effectively destroyed.
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H256> LowerAccountId(CancellationToken token)
        {
            string parameters = TokenManagerStorage.LowerAccountIdParams();
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H256>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AVTTokenContractParams
        ///  The ethereum address of the AVT contract. Default value is the Rinkeby address
        /// </summary>
        public static string AVTTokenContractParams()
        {
            return RequestGenerator.GetStorage("TokenManager", "AVTTokenContract", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AVTTokenContractDefault
        /// Default value as hex string
        /// </summary>
        public static string AVTTokenContractDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AVTTokenContract
        ///  The ethereum address of the AVT contract. Default value is the Rinkeby address
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160> AVTTokenContract(CancellationToken token)
        {
            string parameters = TokenManagerStorage.AVTTokenContractParams();
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160>(parameters, token);
            return result;
        }
    }
    
    public sealed class TokenManagerCalls
    {
        
        /// <summary>
        /// >> proxy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Proxy(Substrate.Aventus.NET.NetApiExt.Generated.Model.avn_parachain_runtime.EnumRuntimeCall call)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call.Encode());
            return new Method(87, "TokenManager", 0, "proxy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedTransfer(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 from, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 to, Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160 token_id, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(87, "TokenManager", 1, "signed_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> lower
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Lower(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 from, Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160 token_id, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160 t1_recipient)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(t1_recipient.Encode());
            return new Method(87, "TokenManager", 2, "lower", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_lower
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedLower(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 from, Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160 token_id, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.Aventus.NET.NetApiExt.Generated.Model.primitive_types.H160 t1_recipient)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(token_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(t1_recipient.Encode());
            return new Method(87, "TokenManager", 3, "signed_lower", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_from_treasury
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method TransferFromTreasury(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 recipient, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(recipient.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(87, "TokenManager", 4, "transfer_from_treasury", byteArray.ToArray());
        }
    }
    
    public sealed class TokenManagerConstants
    {
        
        /// <summary>
        /// >> TreasuryGrowthPercentage
        ///  Percentage of growth to store in the treasury
        /// </summary>
        public Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill TreasuryGrowthPercentage()
        {
            var result = new Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
            result.Create("0x8017B42C");
            return result;
        }
    }
    
    public enum TokenManagerErrors
    {
        
        /// <summary>
        /// >> NoTier1EventForLogLifted
        /// </summary>
        NoTier1EventForLogLifted,
        
        /// <summary>
        /// >> AmountOverflow
        /// </summary>
        AmountOverflow,
        
        /// <summary>
        /// >> DepositFailed
        /// </summary>
        DepositFailed,
        
        /// <summary>
        /// >> LowerFailed
        /// </summary>
        LowerFailed,
        
        /// <summary>
        /// >> AmountIsZero
        /// </summary>
        AmountIsZero,
        
        /// <summary>
        /// >> InsufficientSenderBalance
        /// </summary>
        InsufficientSenderBalance,
        
        /// <summary>
        /// >> TransactionNotSupported
        /// </summary>
        TransactionNotSupported,
        
        /// <summary>
        /// >> SenderNotValid
        /// </summary>
        SenderNotValid,
        
        /// <summary>
        /// >> UnauthorizedTransaction
        /// </summary>
        UnauthorizedTransaction,
        
        /// <summary>
        /// >> UnauthorizedProxyTransaction
        /// </summary>
        UnauthorizedProxyTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedTransferTransaction
        /// </summary>
        UnauthorizedSignedTransferTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedLowerTransaction
        /// </summary>
        UnauthorizedSignedLowerTransaction,
        
        /// <summary>
        /// >> ErrorConvertingAccountId
        /// </summary>
        ErrorConvertingAccountId,
        
        /// <summary>
        /// >> ErrorConvertingTokenBalance
        /// </summary>
        ErrorConvertingTokenBalance,
        
        /// <summary>
        /// >> ErrorConvertingToBalance
        /// </summary>
        ErrorConvertingToBalance,
        
        /// <summary>
        /// >> NoTier1EventForLogAvtGrowthLifted
        /// </summary>
        NoTier1EventForLogAvtGrowthLifted,
    }
}
