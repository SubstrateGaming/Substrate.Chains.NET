//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Aventus.NET.NetApiExt.Generated.Storage
{
    
    
    public sealed class ParachainStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ParachainStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Delay"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "TotalSelected"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Era"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.EraInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "NominatorState"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominator)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "CandidateInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "NominationScheduledRequests"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.nomination_requests.ScheduledRequest>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "TopNominations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominations)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "BottomNominations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominations)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "SelectedCandidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Total"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "CandidatePool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "AtStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "DelayedPayouts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Staked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Points"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "AwardedPts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "LockedEraPayout"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "GrowthPeriod"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.GrowthPeriodInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "Growth"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.GrowthInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "ProcessedGrowthPeriods"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "ForceNewEra"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "MinCollatorStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "MinTotalNominatorStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParachainStaking", "ProxyNonces"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> DelayParams
        ///  Number of eras to wait before executing any staking action
        /// </summary>
        public static string DelayParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Delay", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DelayDefault
        /// Default value as hex string
        /// </summary>
        public static string DelayDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> Delay
        ///  Number of eras to wait before executing any staking action
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Delay(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.DelayParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalSelectedParams
        ///  The total candidates selected every era
        /// </summary>
        public static string TotalSelectedParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "TotalSelected", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalSelectedDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalSelectedDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> TotalSelected
        ///  The total candidates selected every era
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> TotalSelected(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TotalSelectedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> EraParams
        ///  Current era index and next era scheduled transition
        /// </summary>
        public static string EraParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Era", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EraDefault
        /// Default value as hex string
        /// </summary>
        public static string EraDefault()
        {
            return "0x010000000100000014000000";
        }
        
        /// <summary>
        /// >> Era
        ///  Current era index and next era scheduled transition
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.EraInfo> Era(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.EraParams();
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.EraInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NominatorStateParams
        ///  Get nominator state associated with an account if account is nominating else None
        /// </summary>
        public static string NominatorStateParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "NominatorState", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NominatorStateDefault
        /// Default value as hex string
        /// </summary>
        public static string NominatorStateDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NominatorState
        ///  Get nominator state associated with an account if account is nominating else None
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominator> NominatorState(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.NominatorStateParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominator>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidateInfoParams
        ///  Get collator candidate info associated with an account if account is candidate else None
        /// </summary>
        public static string CandidateInfoParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "CandidateInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CandidateInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidateInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CandidateInfo
        ///  Get collator candidate info associated with an account if account is candidate else None
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata> CandidateInfo(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.CandidateInfoParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CandidateMetadata>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> NominationScheduledRequestsParams
        ///  Stores outstanding nomination requests per collator.
        /// </summary>
        public static string NominationScheduledRequestsParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "NominationScheduledRequests", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NominationScheduledRequestsDefault
        /// Default value as hex string
        /// </summary>
        public static string NominationScheduledRequestsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NominationScheduledRequests
        ///  Stores outstanding nomination requests per collator.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.nomination_requests.ScheduledRequest>> NominationScheduledRequests(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.NominationScheduledRequestsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.nomination_requests.ScheduledRequest>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> TopNominationsParams
        ///  Top nominations for collator candidate
        /// </summary>
        public static string TopNominationsParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "TopNominations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TopNominationsDefault
        /// Default value as hex string
        /// </summary>
        public static string TopNominationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TopNominations
        ///  Top nominations for collator candidate
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominations> TopNominations(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TopNominationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominations>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> BottomNominationsParams
        ///  Bottom nominations for collator candidate
        /// </summary>
        public static string BottomNominationsParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "BottomNominations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BottomNominationsDefault
        /// Default value as hex string
        /// </summary>
        public static string BottomNominationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BottomNominations
        ///  Bottom nominations for collator candidate
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominations> BottomNominations(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.BottomNominationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.Nominations>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> SelectedCandidatesParams
        ///  The collator candidates selected for the current era
        /// </summary>
        public static string SelectedCandidatesParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "SelectedCandidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SelectedCandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string SelectedCandidatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SelectedCandidates
        ///  The collator candidates selected for the current era
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> SelectedCandidates(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.SelectedCandidatesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalParams
        ///  Total capital locked by this staking pallet
        /// </summary>
        public static string TotalParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Total", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Total
        ///  Total capital locked by this staking pallet
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Total(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.TotalParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidatePoolParams
        ///  The pool of collator candidates, each with their total backing stake
        /// </summary>
        public static string CandidatePoolParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "CandidatePool", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CandidatePoolDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidatePoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CandidatePool
        ///  The pool of collator candidates, each with their total backing stake
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet> CandidatePool(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.CandidatePoolParams();
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.set.OrderedSet>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AtStakeParams
        ///  Snapshot of collator nomination stake at the start of the era
        /// </summary>
        public static string AtStakeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "AtStake", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AtStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string AtStakeDefault()
        {
            return "0x000000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AtStake
        ///  Snapshot of collator nomination stake at the start of the era
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot> AtStake(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.AtStakeParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.CollatorSnapshot>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> DelayedPayoutsParams
        ///  Delayed payouts
        /// </summary>
        public static string DelayedPayoutsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "DelayedPayouts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DelayedPayoutsDefault
        /// Default value as hex string
        /// </summary>
        public static string DelayedPayoutsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DelayedPayouts
        ///  Delayed payouts
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout> DelayedPayouts(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.DelayedPayoutsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.DelayedPayout>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> StakedParams
        ///  Total counted stake for selected candidates in the era
        /// </summary>
        public static string StakedParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Staked", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> StakedDefault
        /// Default value as hex string
        /// </summary>
        public static string StakedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Staked
        ///  Total counted stake for selected candidates in the era
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Staked(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.StakedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> PointsParams
        ///  Total points awarded to collators for block production in the era
        /// </summary>
        public static string PointsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Points", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PointsDefault
        /// Default value as hex string
        /// </summary>
        public static string PointsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> Points
        ///  Total points awarded to collators for block production in the era
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Points(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.PointsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> AwardedPtsParams
        ///  Points for each collator per era
        /// </summary>
        public static string AwardedPtsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "AwardedPts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AwardedPtsDefault
        /// Default value as hex string
        /// </summary>
        public static string AwardedPtsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> AwardedPts
        ///  Points for each collator per era
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AwardedPts(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.AwardedPtsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> LockedEraPayoutParams
        ///  Total amount of payouts we are waiting to take out of this pallet's pot.
        /// </summary>
        public static string LockedEraPayoutParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "LockedEraPayout", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LockedEraPayoutDefault
        /// Default value as hex string
        /// </summary>
        public static string LockedEraPayoutDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> LockedEraPayout
        ///  Total amount of payouts we are waiting to take out of this pallet's pot.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> LockedEraPayout(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.LockedEraPayoutParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> GrowthPeriodParams
        ///  Tracks the current growth period where collator will get paid for producing blocks
        /// </summary>
        public static string GrowthPeriodParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "GrowthPeriod", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GrowthPeriodDefault
        /// Default value as hex string
        /// </summary>
        public static string GrowthPeriodDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> GrowthPeriod
        ///  Tracks the current growth period where collator will get paid for producing blocks
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.GrowthPeriodInfo> GrowthPeriod(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.GrowthPeriodParams();
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.GrowthPeriodInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> GrowthParams
        ///  Data to calculate growth and collator payouts.
        /// </summary>
        public static string GrowthParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "Growth", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GrowthDefault
        /// Default value as hex string
        /// </summary>
        public static string GrowthDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000";
        }
        
        /// <summary>
        /// >> Growth
        ///  Data to calculate growth and collator payouts.
        /// </summary>
        public async Task<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.GrowthInfo> Growth(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.GrowthParams(key);
            var result = await _client.GetStorageAsync<Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.GrowthInfo>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ProcessedGrowthPeriodsParams
        /// </summary>
        public static string ProcessedGrowthPeriodsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "ProcessedGrowthPeriods", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProcessedGrowthPeriodsDefault
        /// Default value as hex string
        /// </summary>
        public static string ProcessedGrowthPeriodsDefault()
        {
            return "0x";
        }
        
        /// <summary>
        /// >> ProcessedGrowthPeriods
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> ProcessedGrowthPeriods(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.ProcessedGrowthPeriodsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ForceNewEraParams
        /// </summary>
        public static string ForceNewEraParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "ForceNewEra", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ForceNewEraDefault
        /// Default value as hex string
        /// </summary>
        public static string ForceNewEraDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ForceNewEra
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> ForceNewEra(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.ForceNewEraParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> MinCollatorStakeParams
        ///  Minimum stake required for any candidate to be a collator
        /// </summary>
        public static string MinCollatorStakeParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "MinCollatorStake", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinCollatorStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string MinCollatorStakeDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinCollatorStake
        ///  Minimum stake required for any candidate to be a collator
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinCollatorStake(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.MinCollatorStakeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> MinTotalNominatorStakeParams
        ///  Minimum total stake that must be maintained for any registered on-chain account to be a
        ///  nominator
        /// </summary>
        public static string MinTotalNominatorStakeParams()
        {
            return RequestGenerator.GetStorage("ParachainStaking", "MinTotalNominatorStake", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinTotalNominatorStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string MinTotalNominatorStakeDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinTotalNominatorStake
        ///  Minimum total stake that must be maintained for any registered on-chain account to be a
        ///  nominator
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinTotalNominatorStake(CancellationToken token)
        {
            string parameters = ParachainStakingStorage.MinTotalNominatorStakeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, token);
            return result;
        }
        
        /// <summary>
        /// >> ProxyNoncesParams
        ///  An account nonce that represents the number of proxy transactions from this account
        /// </summary>
        public static string ProxyNoncesParams(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ParachainStaking", "ProxyNonces", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProxyNoncesDefault
        /// Default value as hex string
        /// </summary>
        public static string ProxyNoncesDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> ProxyNonces
        ///  An account nonce that represents the number of proxy transactions from this account
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> ProxyNonces(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ParachainStakingStorage.ProxyNoncesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, token);
            return result;
        }
    }
    
    public sealed class ParachainStakingCalls
    {
        
        /// <summary>
        /// >> set_total_selected
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetTotalSelected(Substrate.NetApi.Model.Types.Primitive.U32 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(96, "ParachainStaking", 0, "set_total_selected", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_blocks_per_era
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetBlocksPerEra(Substrate.NetApi.Model.Types.Primitive.U32 @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(96, "ParachainStaking", 1, "set_blocks_per_era", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> join_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JoinCandidates(Substrate.NetApi.Model.Types.Primitive.U128 bond, Substrate.NetApi.Model.Types.Primitive.U32 candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bond.Encode());
            byteArray.AddRange(candidate_count.Encode());
            return new Method(96, "ParachainStaking", 2, "join_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleLeaveCandidates(Substrate.NetApi.Model.Types.Primitive.U32 candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate_count.Encode());
            return new Method(96, "ParachainStaking", 3, "schedule_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteLeaveCandidates(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U32 candidate_nomination_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(candidate_nomination_count.Encode());
            return new Method(96, "ParachainStaking", 4, "execute_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_leave_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelLeaveCandidates(Substrate.NetApi.Model.Types.Primitive.U32 candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate_count.Encode());
            return new Method(96, "ParachainStaking", 5, "cancel_leave_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> go_offline
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method GoOffline()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(96, "ParachainStaking", 6, "go_offline", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> go_online
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method GoOnline()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(96, "ParachainStaking", 7, "go_online", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> candidate_bond_extra
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CandidateBondExtra(Substrate.NetApi.Model.Types.Primitive.U128 more)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(more.Encode());
            return new Method(96, "ParachainStaking", 8, "candidate_bond_extra", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_candidate_bond_extra
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedCandidateBondExtra(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.NetApi.Model.Types.Primitive.U128 extra_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(extra_amount.Encode());
            return new Method(96, "ParachainStaking", 9, "signed_candidate_bond_extra", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_candidate_unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleCandidateUnbond(Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(less.Encode());
            return new Method(96, "ParachainStaking", 10, "schedule_candidate_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_candidate_unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteCandidateUnbond(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            return new Method(96, "ParachainStaking", 11, "execute_candidate_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_execute_candidate_unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedExecuteCandidateUnbond(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(candidate.Encode());
            return new Method(96, "ParachainStaking", 12, "signed_execute_candidate_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_candidate_unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelCandidateUnbond()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(96, "ParachainStaking", 13, "cancel_candidate_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_schedule_candidate_unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedScheduleCandidateUnbond(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(less.Encode());
            return new Method(96, "ParachainStaking", 14, "signed_schedule_candidate_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> nominate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Nominate(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApi.Model.Types.Primitive.U32 candidate_nomination_count, Substrate.NetApi.Model.Types.Primitive.U32 nomination_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(candidate_nomination_count.Encode());
            byteArray.AddRange(nomination_count.Encode());
            return new Method(96, "ParachainStaking", 15, "nominate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_nominate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedNominate(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress> targets, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(targets.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(96, "ParachainStaking", 16, "signed_nominate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_leave_nominators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleLeaveNominators()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(96, "ParachainStaking", 17, "schedule_leave_nominators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_schedule_leave_nominators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedScheduleLeaveNominators(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            return new Method(96, "ParachainStaking", 18, "signed_schedule_leave_nominators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_leave_nominators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteLeaveNominators(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 nominator, Substrate.NetApi.Model.Types.Primitive.U32 nomination_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(nominator.Encode());
            byteArray.AddRange(nomination_count.Encode());
            return new Method(96, "ParachainStaking", 19, "execute_leave_nominators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_execute_leave_nominators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedExecuteLeaveNominators(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 nominator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(nominator.Encode());
            return new Method(96, "ParachainStaking", 20, "signed_execute_leave_nominators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_leave_nominators
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelLeaveNominators()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(96, "ParachainStaking", 21, "cancel_leave_nominators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_revoke_nomination
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleRevokeNomination(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collator.Encode());
            return new Method(96, "ParachainStaking", 22, "schedule_revoke_nomination", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_schedule_revoke_nomination
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedScheduleRevokeNomination(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 collator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(collator.Encode());
            return new Method(96, "ParachainStaking", 23, "signed_schedule_revoke_nomination", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bond_extra
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method BondExtra(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U128 more)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(more.Encode());
            return new Method(96, "ParachainStaking", 24, "bond_extra", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_bond_extra
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedBondExtra(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> extra_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(extra_amount.Encode());
            return new Method(96, "ParachainStaking", 25, "signed_bond_extra", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_nominator_unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ScheduleNominatorUnbond(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate, Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(less.Encode());
            return new Method(96, "ParachainStaking", 26, "schedule_nominator_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_schedule_nominator_unbond
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedScheduleNominatorUnbond(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.NetApi.Model.Types.Primitive.U128 less)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(less.Encode());
            return new Method(96, "ParachainStaking", 27, "signed_schedule_nominator_unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_nomination_request
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExecuteNominationRequest(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 nominator, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(nominator.Encode());
            byteArray.AddRange(candidate.Encode());
            return new Method(96, "ParachainStaking", 28, "execute_nomination_request", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> signed_execute_nomination_request
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SignedExecuteNominationRequest(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_avn_common.Proof proof, Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 nominator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proof.Encode());
            byteArray.AddRange(nominator.Encode());
            return new Method(96, "ParachainStaking", 29, "signed_execute_nomination_request", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_nomination_request
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelNominationRequest(Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 candidate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            return new Method(96, "ParachainStaking", 30, "cancel_nomination_request", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> hotfix_remove_nomination_requests_exited_candidates
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method HotfixRemoveNominationRequestsExitedCandidates(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Aventus.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> candidates)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidates.Encode());
            return new Method(96, "ParachainStaking", 31, "hotfix_remove_nomination_requests_exited_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_admin_setting
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAdminSetting(Substrate.Aventus.NET.NetApiExt.Generated.Model.pallet_parachain_staking.types.EnumAdminSettings value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(96, "ParachainStaking", 32, "set_admin_setting", byteArray.ToArray());
        }
    }
    
    public sealed class ParachainStakingConstants
    {
        
        /// <summary>
        /// >> MinBlocksPerEra
        ///  Minimum number of blocks per era
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinBlocksPerEra()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> RewardPaymentDelay
        ///  Number of eras after which block authors are rewarded
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RewardPaymentDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> MinSelectedCandidates
        ///  Minimum number of selected candidates every era
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinSelectedCandidates()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTopNominationsPerCandidate
        ///  Maximum top nominations counted per candidate
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTopNominationsPerCandidate()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x2C010000");
            return result;
        }
        
        /// <summary>
        /// >> MaxBottomNominationsPerCandidate
        ///  Maximum bottom nominations (not counted) per candidate
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxBottomNominationsPerCandidate()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxNominationsPerNominator
        ///  Maximum nominations per nominator
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNominationsPerNominator()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MinNominationPerCollator
        ///  Minimum stake, per collator, that must be maintained by an account that is nominating
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinNominationPerCollator()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x01000000000000000000000000000000");
            return result;
        }
    }
    
    public enum ParachainStakingErrors
    {
        
        /// <summary>
        /// >> NominatorDNE
        /// </summary>
        NominatorDNE,
        
        /// <summary>
        /// >> CandidateDNE
        /// </summary>
        CandidateDNE,
        
        /// <summary>
        /// >> NominationDNE
        /// </summary>
        NominationDNE,
        
        /// <summary>
        /// >> NominatorExists
        /// </summary>
        NominatorExists,
        
        /// <summary>
        /// >> CandidateExists
        /// </summary>
        CandidateExists,
        
        /// <summary>
        /// >> CandidateBondBelowMin
        /// </summary>
        CandidateBondBelowMin,
        
        /// <summary>
        /// >> InsufficientBalance
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> NominatorBondBelowMin
        /// </summary>
        NominatorBondBelowMin,
        
        /// <summary>
        /// >> NominationBelowMin
        /// </summary>
        NominationBelowMin,
        
        /// <summary>
        /// >> AlreadyOffline
        /// </summary>
        AlreadyOffline,
        
        /// <summary>
        /// >> AlreadyActive
        /// </summary>
        AlreadyActive,
        
        /// <summary>
        /// >> NominatorAlreadyLeaving
        /// </summary>
        NominatorAlreadyLeaving,
        
        /// <summary>
        /// >> NominatorNotLeaving
        /// </summary>
        NominatorNotLeaving,
        
        /// <summary>
        /// >> NominatorCannotLeaveYet
        /// </summary>
        NominatorCannotLeaveYet,
        
        /// <summary>
        /// >> CandidateAlreadyLeaving
        /// </summary>
        CandidateAlreadyLeaving,
        
        /// <summary>
        /// >> CandidateNotLeaving
        /// </summary>
        CandidateNotLeaving,
        
        /// <summary>
        /// >> CandidateCannotLeaveYet
        /// </summary>
        CandidateCannotLeaveYet,
        
        /// <summary>
        /// >> CannotGoOnlineIfLeaving
        /// </summary>
        CannotGoOnlineIfLeaving,
        
        /// <summary>
        /// >> ExceedMaxNominationsPerNominator
        /// </summary>
        ExceedMaxNominationsPerNominator,
        
        /// <summary>
        /// >> AlreadyNominatedCandidate
        /// </summary>
        AlreadyNominatedCandidate,
        
        /// <summary>
        /// >> InvalidSchedule
        /// </summary>
        InvalidSchedule,
        
        /// <summary>
        /// >> CannotSetBelowMin
        /// </summary>
        CannotSetBelowMin,
        
        /// <summary>
        /// >> EraLengthMustBeAtLeastTotalSelectedCollators
        /// </summary>
        EraLengthMustBeAtLeastTotalSelectedCollators,
        
        /// <summary>
        /// >> NoWritingSameValue
        /// </summary>
        NoWritingSameValue,
        
        /// <summary>
        /// >> TooLowCandidateCountWeightHintJoinCandidates
        /// </summary>
        TooLowCandidateCountWeightHintJoinCandidates,
        
        /// <summary>
        /// >> TooLowCandidateCountWeightHintCancelLeaveCandidates
        /// </summary>
        TooLowCandidateCountWeightHintCancelLeaveCandidates,
        
        /// <summary>
        /// >> TooLowCandidateCountToLeaveCandidates
        /// </summary>
        TooLowCandidateCountToLeaveCandidates,
        
        /// <summary>
        /// >> TooLowNominationCountToNominate
        /// </summary>
        TooLowNominationCountToNominate,
        
        /// <summary>
        /// >> TooLowCandidateNominationCountToNominate
        /// </summary>
        TooLowCandidateNominationCountToNominate,
        
        /// <summary>
        /// >> TooLowCandidateNominationCountToLeaveCandidates
        /// </summary>
        TooLowCandidateNominationCountToLeaveCandidates,
        
        /// <summary>
        /// >> TooLowNominationCountToLeaveNominators
        /// </summary>
        TooLowNominationCountToLeaveNominators,
        
        /// <summary>
        /// >> PendingCandidateRequestsDNE
        /// </summary>
        PendingCandidateRequestsDNE,
        
        /// <summary>
        /// >> PendingCandidateRequestAlreadyExists
        /// </summary>
        PendingCandidateRequestAlreadyExists,
        
        /// <summary>
        /// >> PendingCandidateRequestNotDueYet
        /// </summary>
        PendingCandidateRequestNotDueYet,
        
        /// <summary>
        /// >> PendingNominationRequestDNE
        /// </summary>
        PendingNominationRequestDNE,
        
        /// <summary>
        /// >> PendingNominationRequestAlreadyExists
        /// </summary>
        PendingNominationRequestAlreadyExists,
        
        /// <summary>
        /// >> PendingNominationRequestNotDueYet
        /// </summary>
        PendingNominationRequestNotDueYet,
        
        /// <summary>
        /// >> CannotNominateLessThanOrEqualToLowestBottomWhenFull
        /// </summary>
        CannotNominateLessThanOrEqualToLowestBottomWhenFull,
        
        /// <summary>
        /// >> PendingNominationRevoke
        /// </summary>
        PendingNominationRevoke,
        
        /// <summary>
        /// >> ErrorPayingCollator
        /// </summary>
        ErrorPayingCollator,
        
        /// <summary>
        /// >> GrowthAlreadyProcessed
        /// </summary>
        GrowthAlreadyProcessed,
        
        /// <summary>
        /// >> UnauthorizedProxyTransaction
        /// </summary>
        UnauthorizedProxyTransaction,
        
        /// <summary>
        /// >> SenderIsNotSigner
        /// </summary>
        SenderIsNotSigner,
        
        /// <summary>
        /// >> UnauthorizedSignedNominateTransaction
        /// </summary>
        UnauthorizedSignedNominateTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedBondExtraTransaction
        /// </summary>
        UnauthorizedSignedBondExtraTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedCandidateBondExtraTransaction
        /// </summary>
        UnauthorizedSignedCandidateBondExtraTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedCandidateUnbondTransaction
        /// </summary>
        UnauthorizedSignedCandidateUnbondTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedUnbondTransaction
        /// </summary>
        UnauthorizedSignedUnbondTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedRemoveBondTransaction
        /// </summary>
        UnauthorizedSignedRemoveBondTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedScheduleLeaveNominatorsTransaction
        /// </summary>
        UnauthorizedSignedScheduleLeaveNominatorsTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedExecuteLeaveNominatorsTransaction
        /// </summary>
        UnauthorizedSignedExecuteLeaveNominatorsTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedExecuteNominationRequestTransaction
        /// </summary>
        UnauthorizedSignedExecuteNominationRequestTransaction,
        
        /// <summary>
        /// >> UnauthorizedSignedExecuteCandidateUnbondTransaction
        /// </summary>
        UnauthorizedSignedExecuteCandidateUnbondTransaction,
        
        /// <summary>
        /// >> AdminSettingsValueIsNotValid
        /// </summary>
        AdminSettingsValueIsNotValid,
        
        /// <summary>
        /// >> CandidateSessionKeysNotFound
        /// </summary>
        CandidateSessionKeysNotFound,
        
        /// <summary>
        /// >> FailedToWithdrawFullAmount
        /// </summary>
        FailedToWithdrawFullAmount,
    }
}
