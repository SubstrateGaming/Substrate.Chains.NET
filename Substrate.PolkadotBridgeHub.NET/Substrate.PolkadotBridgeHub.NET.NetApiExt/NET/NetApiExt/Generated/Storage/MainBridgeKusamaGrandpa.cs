//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> BridgeKusamaGrandpaStorage
    /// </summary>
    public sealed class BridgeKusamaGrandpaStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BridgeKusamaGrandpaStorage Constructor
        /// </summary>
        public BridgeKusamaGrandpaStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "FreeHeadersRemaining"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "InitialHash"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "BestFinalized"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "ImportedHashes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "ImportedHashesPointer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "ImportedHeaders"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "CurrentAuthoritySet"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "PalletOwner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaGrandpa", "PalletOperatingMode"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode)));
        }
        
        /// <summary>
        /// >> FreeHeadersRemainingParams
        ///  Number of free header submissions that we may yet accept in the current block.
        /// 
        ///  If the `FreeHeadersRemaining` hits zero, all following mandatory headers in the
        ///  current block are accepted with fee (`Pays::Yes` is returned).
        /// 
        ///  The `FreeHeadersRemaining` is an ephemeral value that is set to
        ///  `MaxFreeHeadersPerBlock` at each block initialization and is killed on block
        ///  finalization. So it never ends up in the storage trie.
        /// </summary>
        public static string FreeHeadersRemainingParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "FreeHeadersRemaining", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FreeHeadersRemainingDefault
        /// Default value as hex string
        /// </summary>
        public static string FreeHeadersRemainingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> FreeHeadersRemaining
        ///  Number of free header submissions that we may yet accept in the current block.
        /// 
        ///  If the `FreeHeadersRemaining` hits zero, all following mandatory headers in the
        ///  current block are accepted with fee (`Pays::Yes` is returned).
        /// 
        ///  The `FreeHeadersRemaining` is an ephemeral value that is set to
        ///  `MaxFreeHeadersPerBlock` at each block initialization and is killed on block
        ///  finalization. So it never ends up in the storage trie.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> FreeHeadersRemaining(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.FreeHeadersRemainingParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InitialHashParams
        ///  Hash of the header used to bootstrap the pallet.
        /// </summary>
        public static string InitialHashParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "InitialHash", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> InitialHashDefault
        /// Default value as hex string
        /// </summary>
        public static string InitialHashDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> InitialHash
        ///  Hash of the header used to bootstrap the pallet.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> InitialHash(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.InitialHashParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BestFinalizedParams
        ///  Hash of the best finalized header.
        /// </summary>
        public static string BestFinalizedParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "BestFinalized", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BestFinalizedDefault
        /// Default value as hex string
        /// </summary>
        public static string BestFinalizedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BestFinalized
        ///  Hash of the best finalized header.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId> BestFinalized(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.BestFinalizedParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ImportedHashesParams
        ///  A ring buffer of imported hashes. Ordered by the insertion time.
        /// </summary>
        public static string ImportedHashesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "ImportedHashes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ImportedHashesDefault
        /// Default value as hex string
        /// </summary>
        public static string ImportedHashesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ImportedHashes
        ///  A ring buffer of imported hashes. Ordered by the insertion time.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> ImportedHashes(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.ImportedHashesParams(key);
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ImportedHashesPointerParams
        ///  Current ring buffer position.
        /// </summary>
        public static string ImportedHashesPointerParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "ImportedHashesPointer", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ImportedHashesPointerDefault
        /// Default value as hex string
        /// </summary>
        public static string ImportedHashesPointerDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ImportedHashesPointer
        ///  Current ring buffer position.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ImportedHashesPointer(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.ImportedHashesPointerParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ImportedHeadersParams
        ///  Relevant fields of imported headers.
        /// </summary>
        public static string ImportedHeadersParams(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "ImportedHeaders", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ImportedHeadersDefault
        /// Default value as hex string
        /// </summary>
        public static string ImportedHeadersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ImportedHeaders
        ///  Relevant fields of imported headers.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData> ImportedHeaders(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.ImportedHeadersParams(key);
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentAuthoritySetParams
        ///  The current GRANDPA Authority set.
        /// </summary>
        public static string CurrentAuthoritySetParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "CurrentAuthoritySet", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentAuthoritySetDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentAuthoritySetDefault()
        {
            return "0x000000000000000000";
        }
        
        /// <summary>
        /// >> CurrentAuthoritySet
        ///  The current GRANDPA Authority set.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet> CurrentAuthoritySet(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.CurrentAuthoritySetParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PalletOwnerParams
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume it. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `set_operating_mode`).
        /// </summary>
        public static string PalletOwnerParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "PalletOwner", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PalletOwnerDefault
        /// Default value as hex string
        /// </summary>
        public static string PalletOwnerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PalletOwner
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume it. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `set_operating_mode`).
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> PalletOwner(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.PalletOwnerParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PalletOperatingModeParams
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, or no transactions will be allowed.
        /// </summary>
        public static string PalletOperatingModeParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaGrandpa", "PalletOperatingMode", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PalletOperatingModeDefault
        /// Default value as hex string
        /// </summary>
        public static string PalletOperatingModeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PalletOperatingMode
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, or no transactions will be allowed.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode> PalletOperatingMode(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaGrandpaStorage.PalletOperatingModeParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BridgeKusamaGrandpaCalls
    /// </summary>
    public sealed class BridgeKusamaGrandpaCalls
    {
        
        /// <summary>
        /// >> submit_finality_proof
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SubmitFinalityProof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_runtime.generic.header.Header finality_target, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.justification.GrandpaJustification justification)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(finality_target.Encode());
            byteArray.AddRange(justification.Encode());
            return new Method(51, "BridgeKusamaGrandpa", 0, "submit_finality_proof", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> initialize
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Initialize(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.InitializationData init_data)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(init_data.Encode());
            return new Method(51, "BridgeKusamaGrandpa", 1, "initialize", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_owner
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOwner(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> new_owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_owner.Encode());
            return new Method(51, "BridgeKusamaGrandpa", 2, "set_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_operating_mode
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOperatingMode(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode operating_mode)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(operating_mode.Encode());
            return new Method(51, "BridgeKusamaGrandpa", 3, "set_operating_mode", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit_finality_proof_ex
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SubmitFinalityProofEx(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_runtime.generic.header.Header finality_target, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.justification.GrandpaJustification justification, Substrate.NetApi.Model.Types.Primitive.U64 current_set_id, Substrate.NetApi.Model.Types.Primitive.Bool is_free_execution_expected)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(finality_target.Encode());
            byteArray.AddRange(justification.Encode());
            byteArray.AddRange(current_set_id.Encode());
            byteArray.AddRange(is_free_execution_expected.Encode());
            return new Method(51, "BridgeKusamaGrandpa", 4, "submit_finality_proof_ex", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_set_pallet_state
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSetPalletState(Substrate.NetApi.Model.Types.Primitive.U64 new_current_set_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_consensus_grandpa.app.Public, Substrate.NetApi.Model.Types.Primitive.U64>> new_authorities, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_runtime.generic.header.Header new_best_header)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_current_set_id.Encode());
            byteArray.AddRange(new_authorities.Encode());
            byteArray.AddRange(new_best_header.Encode());
            return new Method(51, "BridgeKusamaGrandpa", 5, "force_set_pallet_state", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BridgeKusamaGrandpaConstants
    /// </summary>
    public sealed class BridgeKusamaGrandpaConstants
    {
        
        /// <summary>
        /// >> MaxFreeHeadersPerBlock
        ///  Maximal number of "free" header transactions per block.
        /// 
        ///  To be able to track the bridged chain, the pallet requires all headers that are
        ///  changing GRANDPA authorities set at the bridged chain (we call them mandatory).
        ///  So it is a common good deed to submit mandatory headers to the pallet.
        /// 
        ///  The pallet may be configured (see `[Self::FreeHeadersInterval]`) to import some
        ///  non-mandatory headers for free as well. It also may be treated as a common good
        ///  deed, because it may help to reduce bridge fees - this cost may be deducted from
        ///  bridge fees, paid by message senders.
        /// 
        ///  However, if the bridged chain gets compromised, its validators may generate as many
        ///  "free" headers as they want. And they may fill the whole block (at this chain) for
        ///  free. This constants limits number of calls that we may refund in a single block.
        ///  All calls above this limit are accepted, but are not refunded.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFreeHeadersPerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x04000000");
            return result;
        }
        
        /// <summary>
        /// >> FreeHeadersInterval
        ///  The distance between bridged chain headers, that may be submitted for free. The
        ///  first free header is header number zero, the next one is header number
        ///  `FreeHeadersInterval::get()` or any of its descendant if that header has not
        ///  been submitted. In other words, interval between free headers should be at least
        ///  `FreeHeadersInterval`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> FreeHeadersInterval()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
            result.Create("0x0105000000");
            return result;
        }
        
        /// <summary>
        /// >> HeadersToKeep
        ///  Maximal number of finalized headers to keep in the storage.
        /// 
        ///  The setting is there to prevent growing the on-chain state indefinitely. Note
        ///  the setting does not relate to block numbers - we will simply keep as much items
        ///  in the storage, so it doesn't guarantee any fixed timeframe for finality headers.
        /// 
        ///  Incautious change of this constant may lead to orphan entries in the runtime storage.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 HeadersToKeep()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xB0040000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BridgeKusamaGrandpaErrors
    /// </summary>
    public enum BridgeKusamaGrandpaErrors
    {
        
        /// <summary>
        /// >> InvalidJustification
        /// The given justification is invalid for the given header.
        /// </summary>
        InvalidJustification,
        
        /// <summary>
        /// >> InvalidAuthoritySet
        /// The authority set from the underlying header chain is invalid.
        /// </summary>
        InvalidAuthoritySet,
        
        /// <summary>
        /// >> OldHeader
        /// The header being imported is older than the best finalized header known to the pallet.
        /// </summary>
        OldHeader,
        
        /// <summary>
        /// >> UnsupportedScheduledChange
        /// The scheduled authority set change found in the header is unsupported by the pallet.
        /// 
        /// This is the case for non-standard (e.g forced) authority set changes.
        /// </summary>
        UnsupportedScheduledChange,
        
        /// <summary>
        /// >> NotInitialized
        /// The pallet is not yet initialized.
        /// </summary>
        NotInitialized,
        
        /// <summary>
        /// >> AlreadyInitialized
        /// The pallet has already been initialized.
        /// </summary>
        AlreadyInitialized,
        
        /// <summary>
        /// >> TooManyAuthoritiesInSet
        /// Too many authorities in the set.
        /// </summary>
        TooManyAuthoritiesInSet,
        
        /// <summary>
        /// >> BridgeModule
        /// Error generated by the `OwnedBridgeModule` trait.
        /// </summary>
        BridgeModule,
        
        /// <summary>
        /// >> InvalidAuthoritySetId
        /// The `current_set_id` argument of the `submit_finality_proof_ex` doesn't match
        /// the id of the current set, known to the pallet.
        /// </summary>
        InvalidAuthoritySetId,
        
        /// <summary>
        /// >> FreeHeadersLimitExceded
        /// The submitter wanted free execution, but we can't fit more free transactions
        /// to the block.
        /// </summary>
        FreeHeadersLimitExceded,
        
        /// <summary>
        /// >> BelowFreeHeaderInterval
        /// The submitter wanted free execution, but the difference between best known and
        /// bundled header numbers is below the `FreeHeadersInterval`.
        /// </summary>
        BelowFreeHeaderInterval,
        
        /// <summary>
        /// >> HeaderOverflowLimits
        /// The header (and its finality) submission overflows hardcoded chain limits: size
        /// and/or weight are larger than expected.
        /// </summary>
        HeaderOverflowLimits,
    }
}
