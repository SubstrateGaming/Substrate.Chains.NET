//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> EthereumOutboundQueueStorage
    /// </summary>
    public sealed class EthereumOutboundQueueStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EthereumOutboundQueueStorage Constructor
        /// </summary>
        public EthereumOutboundQueueStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumOutboundQueue", "Messages"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumOutboundQueue", "MessageLeaves"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumOutboundQueue", "Nonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumOutboundQueue", "OperatingMode"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode)));
        }
        
        /// <summary>
        /// >> MessagesParams
        ///  Messages to be committed in the current block. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// 
        ///  Is never read in the runtime, only by offchain message relayers.
        /// 
        ///  Inspired by the `frame_system::Pallet::Events` storage value
        /// </summary>
        public static string MessagesParams()
        {
            return RequestGenerator.GetStorage("EthereumOutboundQueue", "Messages", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MessagesDefault
        /// Default value as hex string
        /// </summary>
        public static string MessagesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Messages
        ///  Messages to be committed in the current block. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// 
        ///  Is never read in the runtime, only by offchain message relayers.
        /// 
        ///  Inspired by the `frame_system::Pallet::Events` storage value
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage>> Messages(string blockhash, CancellationToken token)
        {
            string parameters = EthereumOutboundQueueStorage.MessagesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MessageLeavesParams
        ///  Hashes of the ABI-encoded messages in the [`Messages`] storage value. Used to generate a
        ///  merkle root during `on_finalize`. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// </summary>
        public static string MessageLeavesParams()
        {
            return RequestGenerator.GetStorage("EthereumOutboundQueue", "MessageLeaves", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MessageLeavesDefault
        /// Default value as hex string
        /// </summary>
        public static string MessageLeavesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MessageLeaves
        ///  Hashes of the ABI-encoded messages in the [`Messages`] storage value. Used to generate a
        ///  merkle root during `on_finalize`. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>> MessageLeaves(string blockhash, CancellationToken token)
        {
            string parameters = EthereumOutboundQueueStorage.MessageLeavesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NonceParams
        ///  The current nonce for each message origin
        /// </summary>
        public static string NonceParams(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId key)
        {
            return RequestGenerator.GetStorage("EthereumOutboundQueue", "Nonce", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NonceDefault
        /// Default value as hex string
        /// </summary>
        public static string NonceDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Nonce
        ///  The current nonce for each message origin
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> Nonce(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId key, string blockhash, CancellationToken token)
        {
            string parameters = EthereumOutboundQueueStorage.NonceParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OperatingModeParams
        ///  The current operating mode of the pallet.
        /// </summary>
        public static string OperatingModeParams()
        {
            return RequestGenerator.GetStorage("EthereumOutboundQueue", "OperatingMode", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OperatingModeDefault
        /// Default value as hex string
        /// </summary>
        public static string OperatingModeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OperatingMode
        ///  The current operating mode of the pallet.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode> OperatingMode(string blockhash, CancellationToken token)
        {
            string parameters = EthereumOutboundQueueStorage.OperatingModeParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EthereumOutboundQueueCalls
    /// </summary>
    public sealed class EthereumOutboundQueueCalls
    {
        
        /// <summary>
        /// >> set_operating_mode
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOperatingMode(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode mode)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(mode.Encode());
            return new Method(81, "EthereumOutboundQueue", 0, "set_operating_mode", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EthereumOutboundQueueConstants
    /// </summary>
    public sealed class EthereumOutboundQueueConstants
    {
        
        /// <summary>
        /// >> Decimals
        ///  Number of decimal places in native currency
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 Decimals()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0A");
            return result;
        }
        
        /// <summary>
        /// >> MaxMessagePayloadSize
        ///  Max bytes in a message payload
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxMessagePayloadSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00080000");
            return result;
        }
        
        /// <summary>
        /// >> MaxMessagesPerBlock
        ///  Max number of messages processed per block
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxMessagesPerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> EthereumOutboundQueueErrors
    /// </summary>
    public enum EthereumOutboundQueueErrors
    {
        
        /// <summary>
        /// >> MessageTooLarge
        /// The message is too large
        /// </summary>
        MessageTooLarge,
        
        /// <summary>
        /// >> Halted
        /// The pallet is halted
        /// </summary>
        Halted,
        
        /// <summary>
        /// >> InvalidChannel
        /// Invalid Channel
        /// </summary>
        InvalidChannel,
    }
}
