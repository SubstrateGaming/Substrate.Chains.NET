//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> EthereumInboundQueueStorage
    /// </summary>
    public sealed class EthereumInboundQueueStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EthereumInboundQueueStorage Constructor
        /// </summary>
        public EthereumInboundQueueStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumInboundQueue", "Nonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId), typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumInboundQueue", "OperatingMode"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode)));
        }
        
        /// <summary>
        /// >> NonceParams
        ///  The current nonce for each channel
        /// </summary>
        public static string NonceParams(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId key)
        {
            return RequestGenerator.GetStorage("EthereumInboundQueue", "Nonce", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NonceDefault
        /// Default value as hex string
        /// </summary>
        public static string NonceDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Nonce
        ///  The current nonce for each channel
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> Nonce(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId key, string blockhash, CancellationToken token)
        {
            string parameters = EthereumInboundQueueStorage.NonceParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OperatingModeParams
        ///  The current operating mode of the pallet.
        /// </summary>
        public static string OperatingModeParams()
        {
            return RequestGenerator.GetStorage("EthereumInboundQueue", "OperatingMode", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OperatingModeDefault
        /// Default value as hex string
        /// </summary>
        public static string OperatingModeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OperatingMode
        ///  The current operating mode of the pallet.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode> OperatingMode(string blockhash, CancellationToken token)
        {
            string parameters = EthereumInboundQueueStorage.OperatingModeParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EthereumInboundQueueCalls
    /// </summary>
    public sealed class EthereumInboundQueueCalls
    {
        
        /// <summary>
        /// >> submit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Submit(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.inbound.Message message)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(message.Encode());
            return new Method(80, "EthereumInboundQueue", 0, "submit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_operating_mode
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOperatingMode(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode mode)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(mode.Encode());
            return new Method(80, "EthereumInboundQueue", 1, "set_operating_mode", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EthereumInboundQueueConstants
    /// </summary>
    public sealed class EthereumInboundQueueConstants
    {
        
        /// <summary>
        /// >> GatewayAddress
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H160 GatewayAddress()
        {
            var result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H160();
            result.Create("0x27CA963C279C93801941E1EB8799C23F407D68E7");
            return result;
        }
    }
    
    /// <summary>
    /// >> EthereumInboundQueueErrors
    /// </summary>
    public enum EthereumInboundQueueErrors
    {
        
        /// <summary>
        /// >> InvalidGateway
        /// Message came from an invalid outbound channel on the Ethereum side.
        /// </summary>
        InvalidGateway,
        
        /// <summary>
        /// >> InvalidEnvelope
        /// Message has an invalid envelope.
        /// </summary>
        InvalidEnvelope,
        
        /// <summary>
        /// >> InvalidNonce
        /// Message has an unexpected nonce.
        /// </summary>
        InvalidNonce,
        
        /// <summary>
        /// >> InvalidPayload
        /// Message has an invalid payload.
        /// </summary>
        InvalidPayload,
        
        /// <summary>
        /// >> InvalidChannel
        /// Message channel is invalid
        /// </summary>
        InvalidChannel,
        
        /// <summary>
        /// >> MaxNonceReached
        /// The max nonce for the type has been reached
        /// </summary>
        MaxNonceReached,
        
        /// <summary>
        /// >> InvalidAccountConversion
        /// Cannot convert location
        /// </summary>
        InvalidAccountConversion,
        
        /// <summary>
        /// >> Halted
        /// Pallet is halted
        /// </summary>
        Halted,
        
        /// <summary>
        /// >> Verification
        /// Message verification error,
        /// </summary>
        Verification,
        
        /// <summary>
        /// >> Send
        /// XCMP send failure
        /// </summary>
        Send,
        
        /// <summary>
        /// >> ConvertMessage
        /// Message conversion error
        /// </summary>
        ConvertMessage,
    }
}
