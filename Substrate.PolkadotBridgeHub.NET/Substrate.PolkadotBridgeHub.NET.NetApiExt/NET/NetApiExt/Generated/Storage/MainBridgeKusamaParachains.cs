//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> BridgeKusamaParachainsStorage
    /// </summary>
    public sealed class BridgeKusamaParachainsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BridgeKusamaParachainsStorage Constructor
        /// </summary>
        public BridgeKusamaParachainsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaParachains", "PalletOwner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaParachains", "PalletOperatingMode"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaParachains", "ParasInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId), typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_parachains.ParaInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaParachains", "ImportedParaHeads"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>), typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_parachains.ParaStoredHeaderData)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BridgeKusamaParachains", "ImportedParaHashes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256)));
        }
        
        /// <summary>
        /// >> PalletOwnerParams
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume them. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `halt_operations`).
        /// </summary>
        public static string PalletOwnerParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaParachains", "PalletOwner", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PalletOwnerDefault
        /// Default value as hex string
        /// </summary>
        public static string PalletOwnerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PalletOwner
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume them. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `halt_operations`).
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> PalletOwner(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaParachainsStorage.PalletOwnerParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PalletOperatingModeParams
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, or no transactions will be allowed.
        /// </summary>
        public static string PalletOperatingModeParams()
        {
            return RequestGenerator.GetStorage("BridgeKusamaParachains", "PalletOperatingMode", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PalletOperatingModeDefault
        /// Default value as hex string
        /// </summary>
        public static string PalletOperatingModeDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PalletOperatingMode
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, or no transactions will be allowed.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode> PalletOperatingMode(string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaParachainsStorage.PalletOperatingModeParams();
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ParasInfoParams
        ///  Parachains info.
        /// 
        ///  Contains the following info:
        ///  - best parachain head hash
        ///  - the head of the `ImportedParaHashes` ring buffer
        /// </summary>
        public static string ParasInfoParams(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId key)
        {
            return RequestGenerator.GetStorage("BridgeKusamaParachains", "ParasInfo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ParasInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string ParasInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ParasInfo
        ///  Parachains info.
        /// 
        ///  Contains the following info:
        ///  - best parachain head hash
        ///  - the head of the `ImportedParaHashes` ring buffer
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_parachains.ParaInfo> ParasInfo(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId key, string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaParachainsStorage.ParasInfoParams(key);
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_parachains.ParaInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ImportedParaHeadsParams
        ///  State roots of parachain heads which have been imported into the pallet.
        /// </summary>
        public static string ImportedParaHeadsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> key)
        {
            return RequestGenerator.GetStorage("BridgeKusamaParachains", "ImportedParaHeads", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ImportedParaHeadsDefault
        /// Default value as hex string
        /// </summary>
        public static string ImportedParaHeadsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ImportedParaHeads
        ///  State roots of parachain heads which have been imported into the pallet.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_parachains.ParaStoredHeaderData> ImportedParaHeads(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> key, string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaParachainsStorage.ImportedParaHeadsParams(key);
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_parachains.ParaStoredHeaderData>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ImportedParaHashesParams
        ///  A ring buffer of imported parachain head hashes. Ordered by the insertion time.
        /// </summary>
        public static string ImportedParaHashesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("BridgeKusamaParachains", "ImportedParaHashes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ImportedParaHashesDefault
        /// Default value as hex string
        /// </summary>
        public static string ImportedParaHashesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ImportedParaHashes
        ///  A ring buffer of imported parachain head hashes. Ordered by the insertion time.
        /// </summary>
        public async Task<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> ImportedParaHashes(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = BridgeKusamaParachainsStorage.ImportedParaHashesParams(key);
            var result = await _client.GetStorageAsync<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BridgeKusamaParachainsCalls
    /// </summary>
    public sealed class BridgeKusamaParachainsCalls
    {
        
        /// <summary>
        /// >> submit_parachain_heads
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SubmitParachainHeads(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> at_relay_block, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaId, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>> parachains, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_polkadot_core.parachains.ParaHeadsProof parachain_heads_proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(at_relay_block.Encode());
            byteArray.AddRange(parachains.Encode());
            byteArray.AddRange(parachain_heads_proof.Encode());
            return new Method(52, "BridgeKusamaParachains", 0, "submit_parachain_heads", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_owner
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOwner(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> new_owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_owner.Encode());
            return new Method(52, "BridgeKusamaParachains", 1, "set_owner", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_operating_mode
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOperatingMode(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode operating_mode)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(operating_mode.Encode());
            return new Method(52, "BridgeKusamaParachains", 2, "set_operating_mode", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BridgeKusamaParachainsConstants
    /// </summary>
    public sealed class BridgeKusamaParachainsConstants
    {
        
        /// <summary>
        /// >> ParasPalletName
        ///  Name of the original `paras` pallet in the `construct_runtime!()` call at the bridged
        ///  chain.
        /// 
        ///  Please keep in mind that this should be the name of the `runtime_parachains::paras`
        ///  pallet from polkadot repository, not the `pallet-bridge-parachains`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Str ParasPalletName()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.Str();
            result.Create("0x145061726173");
            return result;
        }
        
        /// <summary>
        /// >> HeadsToKeep
        ///  Maximal number of single parachain heads to keep in the storage.
        /// 
        ///  The setting is there to prevent growing the on-chain state indefinitely. Note
        ///  the setting does not relate to parachain block numbers - we will simply keep as much
        ///  items in the storage, so it doesn't guarantee any fixed timeframe for heads.
        /// 
        ///  Incautious change of this constant may lead to orphan entries in the runtime storage.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 HeadsToKeep()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x58020000");
            return result;
        }
        
        /// <summary>
        /// >> MaxParaHeadDataSize
        ///  Maximal size (in bytes) of the SCALE-encoded parachain head data
        ///  (`bp_parachains::ParaStoredHeaderData`).
        /// 
        ///  Keep in mind that the size of any tracked parachain header data must not exceed this
        ///  value. So if you're going to track multiple parachains, one of which is using large
        ///  hashes, you shall choose this maximal value.
        /// 
        ///  There's no mandatory headers in this pallet, so it can't stall if there's some header
        ///  that exceeds this bound.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxParaHeadDataSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BridgeKusamaParachainsErrors
    /// </summary>
    public enum BridgeKusamaParachainsErrors
    {
        
        /// <summary>
        /// >> UnknownRelayChainBlock
        /// Relay chain block hash is unknown to us.
        /// </summary>
        UnknownRelayChainBlock,
        
        /// <summary>
        /// >> InvalidRelayChainBlockNumber
        /// The number of stored relay block is different from what the relayer has provided.
        /// </summary>
        InvalidRelayChainBlockNumber,
        
        /// <summary>
        /// >> HeaderChainStorageProof
        /// Parachain heads storage proof is invalid.
        /// </summary>
        HeaderChainStorageProof,
        
        /// <summary>
        /// >> BridgeModule
        /// Error generated by the `OwnedBridgeModule` trait.
        /// </summary>
        BridgeModule,
    }
}
