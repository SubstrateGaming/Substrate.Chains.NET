//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_messages.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> set_owner
        /// Change `PalletOwner`.
        /// 
        /// May only be called either by root, or by `PalletOwner`.
        /// </summary>
        set_owner = 0,
        
        /// <summary>
        /// >> set_operating_mode
        /// Halt or resume all/some pallet operations.
        /// 
        /// May only be called either by root, or by `PalletOwner`.
        /// </summary>
        set_operating_mode = 1,
        
        /// <summary>
        /// >> receive_messages_proof
        /// Receive messages proof from bridged chain.
        /// 
        /// The weight of the call assumes that the transaction always brings outbound lane
        /// state update. Because of that, the submitter (relayer) has no benefit of not including
        /// this data in the transaction, so reward confirmations lags should be minimal.
        /// 
        /// The call fails if:
        /// 
        /// - the pallet is halted;
        /// 
        /// - the call origin is not `Signed(_)`;
        /// 
        /// - there are too many messages in the proof;
        /// 
        /// - the proof verification procedure returns an error - e.g. because header used to craft
        ///   proof is not imported by the associated finality pallet;
        /// 
        /// - the `dispatch_weight` argument is not sufficient to dispatch all bundled messages.
        /// 
        /// The call may succeed, but some messages may not be delivered e.g. if they are not fit
        /// into the unrewarded relayers vector.
        /// </summary>
        receive_messages_proof = 2,
        
        /// <summary>
        /// >> receive_messages_delivery_proof
        /// Receive messages delivery proof from bridged chain.
        /// </summary>
        receive_messages_delivery_proof = 3,
    }
    
    /// <summary>
    /// >> 365 - Variant[pallet_bridge_messages.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(Call.set_owner);
				AddTypeDecoder<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode>(Call.set_operating_mode);
				AddTypeDecoder<BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bridge_runtime_common.messages.target.FromBridgedChainMessagesProof, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight>>(Call.receive_messages_proof);
				AddTypeDecoder<BaseTuple<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bridge_runtime_common.messages.source.FromBridgedChainMessagesDeliveryProof, Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.UnrewardedRelayersState>>(Call.receive_messages_delivery_proof);
        }
    }
}
