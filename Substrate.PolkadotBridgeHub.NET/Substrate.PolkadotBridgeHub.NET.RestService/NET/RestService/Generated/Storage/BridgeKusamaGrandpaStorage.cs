//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBridgeKusamaGrandpaStorage interface definition.
    /// </summary>
    public interface IBridgeKusamaGrandpaStorage : IStorage
    {
        
        /// <summary>
        /// >> FreeHeadersRemaining
        ///  Number of free header submissions that we may yet accept in the current block.
        /// 
        ///  If the `FreeHeadersRemaining` hits zero, all following mandatory headers in the
        ///  current block are accepted with fee (`Pays::Yes` is returned).
        /// 
        ///  The `FreeHeadersRemaining` is an ephemeral value that is set to
        ///  `MaxFreeHeadersPerBlock` at each block initialization and is killed on block
        ///  finalization. So it never ends up in the storage trie.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetFreeHeadersRemaining();
        
        /// <summary>
        /// >> InitialHash
        ///  Hash of the header used to bootstrap the pallet.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 GetInitialHash();
        
        /// <summary>
        /// >> BestFinalized
        ///  Hash of the best finalized header.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId GetBestFinalized();
        
        /// <summary>
        /// >> ImportedHashes
        ///  A ring buffer of imported hashes. Ordered by the insertion time.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 GetImportedHashes(string key);
        
        /// <summary>
        /// >> ImportedHashesPointer
        ///  Current ring buffer position.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetImportedHashesPointer();
        
        /// <summary>
        /// >> ImportedHeaders
        ///  Relevant fields of imported headers.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData GetImportedHeaders(string key);
        
        /// <summary>
        /// >> CurrentAuthoritySet
        ///  The current GRANDPA Authority set.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet GetCurrentAuthoritySet();
        
        /// <summary>
        /// >> PalletOwner
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume it. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `set_operating_mode`).
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetPalletOwner();
        
        /// <summary>
        /// >> PalletOperatingMode
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, or no transactions will be allowed.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode GetPalletOperatingMode();
    }
    
    /// <summary>
    /// BridgeKusamaGrandpaStorage class definition.
    /// </summary>
    public sealed class BridgeKusamaGrandpaStorage : IBridgeKusamaGrandpaStorage
    {
        
        /// <summary>
        /// _freeHeadersRemainingTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _freeHeadersRemainingTypedStorage;
        
        /// <summary>
        /// _initialHashTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> _initialHashTypedStorage;
        
        /// <summary>
        /// _bestFinalizedTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId> _bestFinalizedTypedStorage;
        
        /// <summary>
        /// _importedHashesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> _importedHashesTypedStorage;
        
        /// <summary>
        /// _importedHashesPointerTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _importedHashesPointerTypedStorage;
        
        /// <summary>
        /// _importedHeadersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData> _importedHeadersTypedStorage;
        
        /// <summary>
        /// _currentAuthoritySetTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet> _currentAuthoritySetTypedStorage;
        
        /// <summary>
        /// _palletOwnerTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _palletOwnerTypedStorage;
        
        /// <summary>
        /// _palletOperatingModeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode> _palletOperatingModeTypedStorage;
        
        /// <summary>
        /// BridgeKusamaGrandpaStorage constructor.
        /// </summary>
        public BridgeKusamaGrandpaStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.FreeHeadersRemainingTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("BridgeKusamaGrandpa.FreeHeadersRemaining", storageDataProvider, storageChangeDelegates);
            this.InitialHashTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>("BridgeKusamaGrandpa.InitialHash", storageDataProvider, storageChangeDelegates);
            this.BestFinalizedTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId>("BridgeKusamaGrandpa.BestFinalized", storageDataProvider, storageChangeDelegates);
            this.ImportedHashesTypedStorage = new TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>("BridgeKusamaGrandpa.ImportedHashes", storageDataProvider, storageChangeDelegates);
            this.ImportedHashesPointerTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("BridgeKusamaGrandpa.ImportedHashesPointer", storageDataProvider, storageChangeDelegates);
            this.ImportedHeadersTypedStorage = new TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData>("BridgeKusamaGrandpa.ImportedHeaders", storageDataProvider, storageChangeDelegates);
            this.CurrentAuthoritySetTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet>("BridgeKusamaGrandpa.CurrentAuthoritySet", storageDataProvider, storageChangeDelegates);
            this.PalletOwnerTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("BridgeKusamaGrandpa.PalletOwner", storageDataProvider, storageChangeDelegates);
            this.PalletOperatingModeTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode>("BridgeKusamaGrandpa.PalletOperatingMode", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _freeHeadersRemainingTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> FreeHeadersRemainingTypedStorage
        {
            get
            {
                return _freeHeadersRemainingTypedStorage;
            }
            set
            {
                _freeHeadersRemainingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _initialHashTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> InitialHashTypedStorage
        {
            get
            {
                return _initialHashTypedStorage;
            }
            set
            {
                _initialHashTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bestFinalizedTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId> BestFinalizedTypedStorage
        {
            get
            {
                return _bestFinalizedTypedStorage;
            }
            set
            {
                _bestFinalizedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _importedHashesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> ImportedHashesTypedStorage
        {
            get
            {
                return _importedHashesTypedStorage;
            }
            set
            {
                _importedHashesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _importedHashesPointerTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> ImportedHashesPointerTypedStorage
        {
            get
            {
                return _importedHashesPointerTypedStorage;
            }
            set
            {
                _importedHashesPointerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _importedHeadersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData> ImportedHeadersTypedStorage
        {
            get
            {
                return _importedHeadersTypedStorage;
            }
            set
            {
                _importedHeadersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _currentAuthoritySetTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet> CurrentAuthoritySetTypedStorage
        {
            get
            {
                return _currentAuthoritySetTypedStorage;
            }
            set
            {
                _currentAuthoritySetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _palletOwnerTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> PalletOwnerTypedStorage
        {
            get
            {
                return _palletOwnerTypedStorage;
            }
            set
            {
                _palletOwnerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _palletOperatingModeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode> PalletOperatingModeTypedStorage
        {
            get
            {
                return _palletOperatingModeTypedStorage;
            }
            set
            {
                _palletOperatingModeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await FreeHeadersRemainingTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "FreeHeadersRemaining");
            await InitialHashTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "InitialHash");
            await BestFinalizedTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "BestFinalized");
            await ImportedHashesTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "ImportedHashes");
            await ImportedHashesPointerTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "ImportedHashesPointer");
            await ImportedHeadersTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "ImportedHeaders");
            await CurrentAuthoritySetTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "CurrentAuthoritySet");
            await PalletOwnerTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "PalletOwner");
            await PalletOperatingModeTypedStorage.InitializeAsync("BridgeKusamaGrandpa", "PalletOperatingMode");
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.FreeHeadersRemaining
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "FreeHeadersRemaining")]
        public void OnUpdateFreeHeadersRemaining(string data)
        {
            FreeHeadersRemainingTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> FreeHeadersRemaining
        ///  Number of free header submissions that we may yet accept in the current block.
        /// 
        ///  If the `FreeHeadersRemaining` hits zero, all following mandatory headers in the
        ///  current block are accepted with fee (`Pays::Yes` is returned).
        /// 
        ///  The `FreeHeadersRemaining` is an ephemeral value that is set to
        ///  `MaxFreeHeadersPerBlock` at each block initialization and is killed on block
        ///  finalization. So it never ends up in the storage trie.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetFreeHeadersRemaining()
        {
            return FreeHeadersRemainingTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.InitialHash
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "InitialHash")]
        public void OnUpdateInitialHash(string data)
        {
            InitialHashTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> InitialHash
        ///  Hash of the header used to bootstrap the pallet.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 GetInitialHash()
        {
            return InitialHashTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.BestFinalized
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "BestFinalized")]
        public void OnUpdateBestFinalized(string data)
        {
            BestFinalizedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> BestFinalized
        ///  Hash of the best finalized header.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.HeaderId GetBestFinalized()
        {
            return BestFinalizedTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.ImportedHashes
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "ImportedHashes")]
        public void OnUpdateImportedHashes(string key, string data)
        {
            ImportedHashesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ImportedHashes
        ///  A ring buffer of imported hashes. Ordered by the insertion time.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 GetImportedHashes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ImportedHashesTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.ImportedHashesPointer
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "ImportedHashesPointer")]
        public void OnUpdateImportedHashesPointer(string data)
        {
            ImportedHashesPointerTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ImportedHashesPointer
        ///  Current ring buffer position.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetImportedHashesPointer()
        {
            return ImportedHashesPointerTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.ImportedHeaders
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "ImportedHeaders")]
        public void OnUpdateImportedHeaders(string key, string data)
        {
            ImportedHeadersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ImportedHeaders
        ///  Relevant fields of imported headers.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData GetImportedHeaders(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ImportedHeadersTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain.StoredHeaderData result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.CurrentAuthoritySet
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "CurrentAuthoritySet")]
        public void OnUpdateCurrentAuthoritySet(string data)
        {
            CurrentAuthoritySetTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentAuthoritySet
        ///  The current GRANDPA Authority set.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types.StoredAuthoritySet GetCurrentAuthoritySet()
        {
            return CurrentAuthoritySetTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.PalletOwner
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "PalletOwner")]
        public void OnUpdatePalletOwner(string data)
        {
            PalletOwnerTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PalletOwner
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume it. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `set_operating_mode`).
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetPalletOwner()
        {
            return PalletOwnerTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaGrandpa.PalletOperatingMode
        /// </summary>
        [StorageChange("BridgeKusamaGrandpa", "PalletOperatingMode")]
        public void OnUpdatePalletOperatingMode(string data)
        {
            PalletOperatingModeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PalletOperatingMode
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, or no transactions will be allowed.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime.EnumBasicOperatingMode GetPalletOperatingMode()
        {
            return PalletOperatingModeTypedStorage.Get();
        }
    }
}
