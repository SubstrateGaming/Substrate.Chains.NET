//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBridgeKusamaMessagesStorage interface definition.
    /// </summary>
    public interface IBridgeKusamaMessagesStorage : IStorage
    {
        
        /// <summary>
        /// >> PalletOwner
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume it. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `halt_operations`).
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetPalletOwner();
        
        /// <summary>
        /// >> PalletOperatingMode
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, some, or no transactions will be allowed.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode GetPalletOperatingMode();
        
        /// <summary>
        /// >> InboundLanes
        ///  Map of lane id => inbound lane data.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData GetInboundLanes(string key);
        
        /// <summary>
        /// >> OutboundLanes
        ///  Map of lane id => outbound lane data.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData GetOutboundLanes(string key);
        
        /// <summary>
        /// >> OutboundLanesCongestedSignals
        ///  Map of lane id => is congested signal sent. It is managed by the
        ///  `bridge_runtime_common::LocalXcmQueueManager`.
        /// 
        ///  **bridges-v1**: this map is a temporary hack and will be dropped in the `v2`. We can emulate
        ///  a storage map using `sp_io::unhashed` storage functions, but then benchmarks are not
        ///  accounting its `proof_size`, so it is missing from the final weights. So we need to make it
        ///  a map inside some pallet. We could use a simply value instead of map here, because
        ///  in `v1` we'll only have a single lane. But in the case of adding another lane before `v2`,
        ///  it'll be easier to deal with the isolated storage map instead.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetOutboundLanesCongestedSignals(string key);
        
        /// <summary>
        /// >> OutboundMessages
        ///  All queued outbound messages.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 GetOutboundMessages(string key);
    }
    
    /// <summary>
    /// BridgeKusamaMessagesStorage class definition.
    /// </summary>
    public sealed class BridgeKusamaMessagesStorage : IBridgeKusamaMessagesStorage
    {
        
        /// <summary>
        /// _palletOwnerTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _palletOwnerTypedStorage;
        
        /// <summary>
        /// _palletOperatingModeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode> _palletOperatingModeTypedStorage;
        
        /// <summary>
        /// _inboundLanesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData> _inboundLanesTypedStorage;
        
        /// <summary>
        /// _outboundLanesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData> _outboundLanesTypedStorage;
        
        /// <summary>
        /// _outboundLanesCongestedSignalsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _outboundLanesCongestedSignalsTypedStorage;
        
        /// <summary>
        /// _outboundMessagesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17> _outboundMessagesTypedStorage;
        
        /// <summary>
        /// BridgeKusamaMessagesStorage constructor.
        /// </summary>
        public BridgeKusamaMessagesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PalletOwnerTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("BridgeKusamaMessages.PalletOwner", storageDataProvider, storageChangeDelegates);
            this.PalletOperatingModeTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode>("BridgeKusamaMessages.PalletOperatingMode", storageDataProvider, storageChangeDelegates);
            this.InboundLanesTypedStorage = new TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData>("BridgeKusamaMessages.InboundLanes", storageDataProvider, storageChangeDelegates);
            this.OutboundLanesTypedStorage = new TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData>("BridgeKusamaMessages.OutboundLanes", storageDataProvider, storageChangeDelegates);
            this.OutboundLanesCongestedSignalsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("BridgeKusamaMessages.OutboundLanesCongestedSignals", storageDataProvider, storageChangeDelegates);
            this.OutboundMessagesTypedStorage = new TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17>("BridgeKusamaMessages.OutboundMessages", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _palletOwnerTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> PalletOwnerTypedStorage
        {
            get
            {
                return _palletOwnerTypedStorage;
            }
            set
            {
                _palletOwnerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _palletOperatingModeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode> PalletOperatingModeTypedStorage
        {
            get
            {
                return _palletOperatingModeTypedStorage;
            }
            set
            {
                _palletOperatingModeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _inboundLanesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData> InboundLanesTypedStorage
        {
            get
            {
                return _inboundLanesTypedStorage;
            }
            set
            {
                _inboundLanesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _outboundLanesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData> OutboundLanesTypedStorage
        {
            get
            {
                return _outboundLanesTypedStorage;
            }
            set
            {
                _outboundLanesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _outboundLanesCongestedSignalsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> OutboundLanesCongestedSignalsTypedStorage
        {
            get
            {
                return _outboundLanesCongestedSignalsTypedStorage;
            }
            set
            {
                _outboundLanesCongestedSignalsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _outboundMessagesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17> OutboundMessagesTypedStorage
        {
            get
            {
                return _outboundMessagesTypedStorage;
            }
            set
            {
                _outboundMessagesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PalletOwnerTypedStorage.InitializeAsync("BridgeKusamaMessages", "PalletOwner");
            await PalletOperatingModeTypedStorage.InitializeAsync("BridgeKusamaMessages", "PalletOperatingMode");
            await InboundLanesTypedStorage.InitializeAsync("BridgeKusamaMessages", "InboundLanes");
            await OutboundLanesTypedStorage.InitializeAsync("BridgeKusamaMessages", "OutboundLanes");
            await OutboundLanesCongestedSignalsTypedStorage.InitializeAsync("BridgeKusamaMessages", "OutboundLanesCongestedSignals");
            await OutboundMessagesTypedStorage.InitializeAsync("BridgeKusamaMessages", "OutboundMessages");
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaMessages.PalletOwner
        /// </summary>
        [StorageChange("BridgeKusamaMessages", "PalletOwner")]
        public void OnUpdatePalletOwner(string data)
        {
            PalletOwnerTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PalletOwner
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume it. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `halt_operations`).
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetPalletOwner()
        {
            return PalletOwnerTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaMessages.PalletOperatingMode
        /// </summary>
        [StorageChange("BridgeKusamaMessages", "PalletOperatingMode")]
        public void OnUpdatePalletOperatingMode(string data)
        {
            PalletOperatingModeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PalletOperatingMode
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, some, or no transactions will be allowed.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode GetPalletOperatingMode()
        {
            return PalletOperatingModeTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaMessages.InboundLanes
        /// </summary>
        [StorageChange("BridgeKusamaMessages", "InboundLanes")]
        public void OnUpdateInboundLanes(string key, string data)
        {
            InboundLanesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> InboundLanes
        ///  Map of lane id => inbound lane data.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData GetInboundLanes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (InboundLanesTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaMessages.OutboundLanes
        /// </summary>
        [StorageChange("BridgeKusamaMessages", "OutboundLanes")]
        public void OnUpdateOutboundLanes(string key, string data)
        {
            OutboundLanesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OutboundLanes
        ///  Map of lane id => outbound lane data.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData GetOutboundLanes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OutboundLanesTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaMessages.OutboundLanesCongestedSignals
        /// </summary>
        [StorageChange("BridgeKusamaMessages", "OutboundLanesCongestedSignals")]
        public void OnUpdateOutboundLanesCongestedSignals(string key, string data)
        {
            OutboundLanesCongestedSignalsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OutboundLanesCongestedSignals
        ///  Map of lane id => is congested signal sent. It is managed by the
        ///  `bridge_runtime_common::LocalXcmQueueManager`.
        /// 
        ///  **bridges-v1**: this map is a temporary hack and will be dropped in the `v2`. We can emulate
        ///  a storage map using `sp_io::unhashed` storage functions, but then benchmarks are not
        ///  accounting its `proof_size`, so it is missing from the final weights. So we need to make it
        ///  a map inside some pallet. We could use a simply value instead of map here, because
        ///  in `v1` we'll only have a single lane. But in the case of adding another lane before `v2`,
        ///  it'll be easier to deal with the isolated storage map instead.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetOutboundLanesCongestedSignals(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OutboundLanesCongestedSignalsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for BridgeKusamaMessages.OutboundMessages
        /// </summary>
        [StorageChange("BridgeKusamaMessages", "OutboundMessages")]
        public void OnUpdateOutboundMessages(string key, string data)
        {
            OutboundMessagesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OutboundMessages
        ///  All queued outbound messages.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 GetOutboundMessages(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OutboundMessagesTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
