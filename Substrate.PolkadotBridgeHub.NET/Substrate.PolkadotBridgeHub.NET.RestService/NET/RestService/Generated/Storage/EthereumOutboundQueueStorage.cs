//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IEthereumOutboundQueueStorage interface definition.
    /// </summary>
    public interface IEthereumOutboundQueueStorage : IStorage
    {
        
        /// <summary>
        /// >> Messages
        ///  Messages to be committed in the current block. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// 
        ///  Is never read in the runtime, only by offchain message relayers.
        /// 
        ///  Inspired by the `frame_system::Pallet::Events` storage value
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage> GetMessages();
        
        /// <summary>
        /// >> MessageLeaves
        ///  Hashes of the ABI-encoded messages in the [`Messages`] storage value. Used to generate a
        ///  merkle root during `on_finalize`. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> GetMessageLeaves();
        
        /// <summary>
        /// >> Nonce
        ///  The current nonce for each message origin
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetNonce(string key);
        
        /// <summary>
        /// >> OperatingMode
        ///  The current operating mode of the pallet.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode GetOperatingMode();
    }
    
    /// <summary>
    /// EthereumOutboundQueueStorage class definition.
    /// </summary>
    public sealed class EthereumOutboundQueueStorage : IEthereumOutboundQueueStorage
    {
        
        /// <summary>
        /// _messagesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage>> _messagesTypedStorage;
        
        /// <summary>
        /// _messageLeavesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>> _messageLeavesTypedStorage;
        
        /// <summary>
        /// _nonceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U64> _nonceTypedStorage;
        
        /// <summary>
        /// _operatingModeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode> _operatingModeTypedStorage;
        
        /// <summary>
        /// EthereumOutboundQueueStorage constructor.
        /// </summary>
        public EthereumOutboundQueueStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.MessagesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage>>("EthereumOutboundQueue.Messages", storageDataProvider, storageChangeDelegates);
            this.MessageLeavesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>>("EthereumOutboundQueue.MessageLeaves", storageDataProvider, storageChangeDelegates);
            this.NonceTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U64>("EthereumOutboundQueue.Nonce", storageDataProvider, storageChangeDelegates);
            this.OperatingModeTypedStorage = new TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode>("EthereumOutboundQueue.OperatingMode", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _messagesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage>> MessagesTypedStorage
        {
            get
            {
                return _messagesTypedStorage;
            }
            set
            {
                _messagesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _messageLeavesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256>> MessageLeavesTypedStorage
        {
            get
            {
                return _messageLeavesTypedStorage;
            }
            set
            {
                _messageLeavesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nonceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U64> NonceTypedStorage
        {
            get
            {
                return _nonceTypedStorage;
            }
            set
            {
                _nonceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _operatingModeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode> OperatingModeTypedStorage
        {
            get
            {
                return _operatingModeTypedStorage;
            }
            set
            {
                _operatingModeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MessagesTypedStorage.InitializeAsync("EthereumOutboundQueue", "Messages");
            await MessageLeavesTypedStorage.InitializeAsync("EthereumOutboundQueue", "MessageLeaves");
            await NonceTypedStorage.InitializeAsync("EthereumOutboundQueue", "Nonce");
            await OperatingModeTypedStorage.InitializeAsync("EthereumOutboundQueue", "OperatingMode");
        }
        
        /// <summary>
        /// Implements any storage change for EthereumOutboundQueue.Messages
        /// </summary>
        [StorageChange("EthereumOutboundQueue", "Messages")]
        public void OnUpdateMessages(string data)
        {
            MessagesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Messages
        ///  Messages to be committed in the current block. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// 
        ///  Is never read in the runtime, only by offchain message relayers.
        /// 
        ///  Inspired by the `frame_system::Pallet::Events` storage value
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_pallet_outbound_queue.types.CommittedMessage> GetMessages()
        {
            return MessagesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for EthereumOutboundQueue.MessageLeaves
        /// </summary>
        [StorageChange("EthereumOutboundQueue", "MessageLeaves")]
        public void OnUpdateMessageLeaves(string data)
        {
            MessageLeavesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MessageLeaves
        ///  Hashes of the ABI-encoded messages in the [`Messages`] storage value. Used to generate a
        ///  merkle root during `on_finalize`. This storage value is killed in
        ///  `on_initialize`, so should never go into block PoV.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256> GetMessageLeaves()
        {
            return MessageLeavesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for EthereumOutboundQueue.Nonce
        /// </summary>
        [StorageChange("EthereumOutboundQueue", "Nonce")]
        public void OnUpdateNonce(string key, string data)
        {
            NonceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Nonce
        ///  The current nonce for each message origin
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetNonce(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NonceTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U64 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EthereumOutboundQueue.OperatingMode
        /// </summary>
        [StorageChange("EthereumOutboundQueue", "OperatingMode")]
        public void OnUpdateOperatingMode(string data)
        {
            OperatingModeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> OperatingMode
        ///  The current operating mode of the pallet.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.operating_mode.EnumBasicOperatingMode GetOperatingMode()
        {
            return OperatingModeTypedStorage.Get();
        }
    }
}
