//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBridgeRelayersStorage interface definition.
    /// </summary>
    public interface IBridgeRelayersStorage : IStorage
    {
        
        /// <summary>
        /// >> RelayerRewards
        ///  Map of the relayer => accumulated reward.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetRelayerRewards(string key);
        
        /// <summary>
        /// >> RegisteredRelayers
        ///  Relayers that have reserved some of their balance to get free priority boost
        ///  for their message delivery transactions.
        /// 
        ///  Other relayers may submit transactions as well, but they will have default
        ///  priority and will be rejected (without significant tip) in case if registered
        ///  relayer is present.
        /// </summary>
        Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_relayers.registration.Registration GetRegisteredRelayers(string key);
    }
    
    /// <summary>
    /// BridgeRelayersStorage class definition.
    /// </summary>
    public sealed class BridgeRelayersStorage : IBridgeRelayersStorage
    {
        
        /// <summary>
        /// _relayerRewardsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _relayerRewardsTypedStorage;
        
        /// <summary>
        /// _registeredRelayersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_relayers.registration.Registration> _registeredRelayersTypedStorage;
        
        /// <summary>
        /// BridgeRelayersStorage constructor.
        /// </summary>
        public BridgeRelayersStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.RelayerRewardsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("BridgeRelayers.RelayerRewards", storageDataProvider, storageChangeDelegates);
            this.RegisteredRelayersTypedStorage = new TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_relayers.registration.Registration>("BridgeRelayers.RegisteredRelayers", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _relayerRewardsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> RelayerRewardsTypedStorage
        {
            get
            {
                return _relayerRewardsTypedStorage;
            }
            set
            {
                _relayerRewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _registeredRelayersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_relayers.registration.Registration> RegisteredRelayersTypedStorage
        {
            get
            {
                return _registeredRelayersTypedStorage;
            }
            set
            {
                _registeredRelayersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await RelayerRewardsTypedStorage.InitializeAsync("BridgeRelayers", "RelayerRewards");
            await RegisteredRelayersTypedStorage.InitializeAsync("BridgeRelayers", "RegisteredRelayers");
        }
        
        /// <summary>
        /// Implements any storage change for BridgeRelayers.RelayerRewards
        /// </summary>
        [StorageChange("BridgeRelayers", "RelayerRewards")]
        public void OnUpdateRelayerRewards(string key, string data)
        {
            RelayerRewardsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RelayerRewards
        ///  Map of the relayer => accumulated reward.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetRelayerRewards(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RelayerRewardsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for BridgeRelayers.RegisteredRelayers
        /// </summary>
        [StorageChange("BridgeRelayers", "RegisteredRelayers")]
        public void OnUpdateRegisteredRelayers(string key, string data)
        {
            RegisteredRelayersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RegisteredRelayers
        ///  Relayers that have reserved some of their balance to get free priority boost
        ///  for their message delivery transactions.
        /// 
        ///  Other relayers may submit transactions as well, but they will have default
        ///  priority and will be rejected (without significant tip) in case if registered
        ///  relayer is present.
        /// </summary>
        public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_relayers.registration.Registration GetRegisteredRelayers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RegisteredRelayersTypedStorage.Dictionary.TryGetValue(key, out Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_relayers.registration.Registration result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
