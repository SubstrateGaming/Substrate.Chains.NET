//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.PolkadotBridgeHub.NET.RestService.Generated.Storage;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.PolkadotBridgeHub.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// BridgeKusamaMessagesController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class BridgeKusamaMessagesController : ControllerBase
    {
        
        private IBridgeKusamaMessagesStorage _bridgeKusamaMessagesStorage;
        
        /// <summary>
        /// BridgeKusamaMessagesController constructor.
        /// </summary>
        public BridgeKusamaMessagesController(IBridgeKusamaMessagesStorage bridgeKusamaMessagesStorage)
        {
            _bridgeKusamaMessagesStorage = bridgeKusamaMessagesStorage;
        }
        
        /// <summary>
        /// >> PalletOwner
        ///  Optional pallet owner.
        /// 
        ///  Pallet owner has a right to halt all pallet operations and then resume it. If it is
        ///  `None`, then there are no direct ways to halt/resume pallet operations, but other
        ///  runtime methods may still be used to do that (i.e. democracy::referendum to update halt
        ///  flag directly or call the `halt_operations`).
        /// </summary>
        [HttpGet("PalletOwner")]
        [ProducesResponseType(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaMessagesStorage), "PalletOwnerParams")]
        public IActionResult GetPalletOwner()
        {
            return this.Ok(_bridgeKusamaMessagesStorage.GetPalletOwner());
        }
        
        /// <summary>
        /// >> PalletOperatingMode
        ///  The current operating mode of the pallet.
        /// 
        ///  Depending on the mode either all, some, or no transactions will be allowed.
        /// </summary>
        [HttpGet("PalletOperatingMode")]
        [ProducesResponseType(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaMessagesStorage), "PalletOperatingModeParams")]
        public IActionResult GetPalletOperatingMode()
        {
            return this.Ok(_bridgeKusamaMessagesStorage.GetPalletOperatingMode());
        }
        
        /// <summary>
        /// >> InboundLanes
        ///  Map of lane id => inbound lane data.
        /// </summary>
        [HttpGet("InboundLanes")]
        [ProducesResponseType(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaMessagesStorage), "InboundLanesParams", typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId))]
        public IActionResult GetInboundLanes(string key)
        {
            return this.Ok(_bridgeKusamaMessagesStorage.GetInboundLanes(key));
        }
        
        /// <summary>
        /// >> OutboundLanes
        ///  Map of lane id => outbound lane data.
        /// </summary>
        [HttpGet("OutboundLanes")]
        [ProducesResponseType(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaMessagesStorage), "OutboundLanesParams", typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId))]
        public IActionResult GetOutboundLanes(string key)
        {
            return this.Ok(_bridgeKusamaMessagesStorage.GetOutboundLanes(key));
        }
        
        /// <summary>
        /// >> OutboundLanesCongestedSignals
        ///  Map of lane id => is congested signal sent. It is managed by the
        ///  `bridge_runtime_common::LocalXcmQueueManager`.
        /// 
        ///  **bridges-v1**: this map is a temporary hack and will be dropped in the `v2`. We can emulate
        ///  a storage map using `sp_io::unhashed` storage functions, but then benchmarks are not
        ///  accounting its `proof_size`, so it is missing from the final weights. So we need to make it
        ///  a map inside some pallet. We could use a simply value instead of map here, because
        ///  in `v1` we'll only have a single lane. But in the case of adding another lane before `v2`,
        ///  it'll be easier to deal with the isolated storage map instead.
        /// </summary>
        [HttpGet("OutboundLanesCongestedSignals")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.Bool), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaMessagesStorage), "OutboundLanesCongestedSignalsParams", typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId))]
        public IActionResult GetOutboundLanesCongestedSignals(string key)
        {
            return this.Ok(_bridgeKusamaMessagesStorage.GetOutboundLanesCongestedSignals(key));
        }
        
        /// <summary>
        /// >> OutboundMessages
        ///  All queued outbound messages.
        /// </summary>
        [HttpGet("OutboundMessages")]
        [ProducesResponseType(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17), 200)]
        [StorageKeyBuilder(typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaMessagesStorage), "OutboundMessagesParams", typeof(Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.MessageKey))]
        public IActionResult GetOutboundMessages(string key)
        {
            return this.Ok(_bridgeKusamaMessagesStorage.GetOutboundMessages(key));
        }
    }
}
