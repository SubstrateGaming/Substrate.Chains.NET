//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.PolkadotBridgeHub.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_runtime;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_header_chain;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.pallet_bridge_grandpa.storage_types;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.PolkadotBridgeHub.NET.RestClient.Generated.Interfaces;
   
   public sealed class BridgeKusamaGrandpaControllerClient : BaseClient, IBridgeKusamaGrandpaControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public BridgeKusamaGrandpaControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<U32> GetFreeMandatoryHeadersRemaining()
      {
         return await SendRequestAsync<U32>(_httpClient, "bridgekusamagrandpa/freemandatoryheadersremaining");
      }
      public async Task<bool> SubscribeFreeMandatoryHeadersRemaining()
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.FreeMandatoryHeadersRemaining");
      }
      public async Task<H256> GetInitialHash()
      {
         return await SendRequestAsync<H256>(_httpClient, "bridgekusamagrandpa/initialhash");
      }
      public async Task<bool> SubscribeInitialHash()
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.InitialHash");
      }
      public async Task<HeaderId> GetBestFinalized()
      {
         return await SendRequestAsync<HeaderId>(_httpClient, "bridgekusamagrandpa/bestfinalized");
      }
      public async Task<bool> SubscribeBestFinalized()
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.BestFinalized");
      }
      public async Task<H256> GetImportedHashes(U32 key)
      {
         return await SendRequestAsync<H256>(_httpClient, "bridgekusamagrandpa/importedhashes", Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaGrandpaStorage.ImportedHashesParams(key));
      }
      public async Task<bool> SubscribeImportedHashes(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.ImportedHashes", Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaGrandpaStorage.ImportedHashesParams(key));
      }
      public async Task<U32> GetImportedHashesPointer()
      {
         return await SendRequestAsync<U32>(_httpClient, "bridgekusamagrandpa/importedhashespointer");
      }
      public async Task<bool> SubscribeImportedHashesPointer()
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.ImportedHashesPointer");
      }
      public async Task<StoredHeaderData> GetImportedHeaders(H256 key)
      {
         return await SendRequestAsync<StoredHeaderData>(_httpClient, "bridgekusamagrandpa/importedheaders", Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaGrandpaStorage.ImportedHeadersParams(key));
      }
      public async Task<bool> SubscribeImportedHeaders(H256 key)
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.ImportedHeaders", Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Storage.BridgeKusamaGrandpaStorage.ImportedHeadersParams(key));
      }
      public async Task<StoredAuthoritySet> GetCurrentAuthoritySet()
      {
         return await SendRequestAsync<StoredAuthoritySet>(_httpClient, "bridgekusamagrandpa/currentauthorityset");
      }
      public async Task<bool> SubscribeCurrentAuthoritySet()
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.CurrentAuthoritySet");
      }
      public async Task<AccountId32> GetPalletOwner()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "bridgekusamagrandpa/palletowner");
      }
      public async Task<bool> SubscribePalletOwner()
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.PalletOwner");
      }
      public async Task<EnumBasicOperatingMode> GetPalletOperatingMode()
      {
         return await SendRequestAsync<EnumBasicOperatingMode>(_httpClient, "bridgekusamagrandpa/palletoperatingmode");
      }
      public async Task<bool> SubscribePalletOperatingMode()
      {
         return await _subscriptionClient.SubscribeAsync("BridgeKusamaGrandpa.PalletOperatingMode");
      }
   }
}
