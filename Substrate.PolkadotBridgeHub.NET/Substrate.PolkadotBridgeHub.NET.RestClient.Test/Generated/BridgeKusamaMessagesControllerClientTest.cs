//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.PolkadotBridgeHub.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.PolkadotBridgeHub.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.PolkadotBridgeHub.NET.RestClient.Generated.Clients;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   
   public class BridgeKusamaMessagesControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue2()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPalletOwner()
      {
         // Construct new Mockup client to test with.
         BridgeKusamaMessagesControllerMockupClient mockupClient = new BridgeKusamaMessagesControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BridgeKusamaMessagesControllerClient rpcClient = new BridgeKusamaMessagesControllerClient(_httpClient, subscriptionClient);
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribePalletOwner());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPalletOwner(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 rpcResult = await rpcClient.GetPalletOwner();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode GetTestValue4()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode();
         // NOT IMPLEMENTED >> Initialize Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPalletOperatingMode()
      {
         // Construct new Mockup client to test with.
         BridgeKusamaMessagesControllerMockupClient mockupClient = new BridgeKusamaMessagesControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BridgeKusamaMessagesControllerClient rpcClient = new BridgeKusamaMessagesControllerClient(_httpClient, subscriptionClient);
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode mockupValue = this.GetTestValue4();


         Assert.IsTrue(await rpcClient.SubscribePalletOperatingMode());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPalletOperatingMode(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.EnumMessagesOperatingMode rpcResult = await rpcClient.GetPalletOperatingMode();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData GetTestValue6()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData();
         result.Relayers = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.UnrewardedRelayer>();
         result.Relayers.Create(new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.UnrewardedRelayer[] {
                  this.GetTestValue7()});
         result.LastConfirmedNonce = this.GetTestValueU64();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.UnrewardedRelayer GetTestValue7()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.UnrewardedRelayer result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.UnrewardedRelayer();
         result.Relayer = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Relayer = this.GetTestValue8();
         result.Messages = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.DeliveredMessages();
         result.Messages = this.GetTestValue9();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue8()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.DeliveredMessages GetTestValue9()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.DeliveredMessages result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.DeliveredMessages();
         result.Begin = this.GetTestValueU64();
         result.End = this.GetTestValueU64();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId GetTestValue10()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr4U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInboundLanes()
      {
         // Construct new Mockup client to test with.
         BridgeKusamaMessagesControllerMockupClient mockupClient = new BridgeKusamaMessagesControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BridgeKusamaMessagesControllerClient rpcClient = new BridgeKusamaMessagesControllerClient(_httpClient, subscriptionClient);
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData mockupValue = this.GetTestValue6();
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId mockupKey = this.GetTestValue10();

         Assert.IsTrue(await rpcClient.SubscribeInboundLanes(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInboundLanes(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.InboundLaneData rpcResult = await rpcClient.GetInboundLanes(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData GetTestValue12()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData();
         result.OldestUnprunedNonce = this.GetTestValueU64();
         result.LatestReceivedNonce = this.GetTestValueU64();
         result.LatestGeneratedNonce = this.GetTestValueU64();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId GetTestValue13()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr4U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestOutboundLanes()
      {
         // Construct new Mockup client to test with.
         BridgeKusamaMessagesControllerMockupClient mockupClient = new BridgeKusamaMessagesControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BridgeKusamaMessagesControllerClient rpcClient = new BridgeKusamaMessagesControllerClient(_httpClient, subscriptionClient);
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData mockupValue = this.GetTestValue12();
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId mockupKey = this.GetTestValue13();

         Assert.IsTrue(await rpcClient.SubscribeOutboundLanes(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetOutboundLanes(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.OutboundLaneData rpcResult = await rpcClient.GetOutboundLanes(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId GetTestValue15()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr4U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestOutboundLanesCongestedSignals()
      {
         // Construct new Mockup client to test with.
         BridgeKusamaMessagesControllerMockupClient mockupClient = new BridgeKusamaMessagesControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BridgeKusamaMessagesControllerClient rpcClient = new BridgeKusamaMessagesControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId mockupKey = this.GetTestValue15();

         Assert.IsTrue(await rpcClient.SubscribeOutboundLanesCongestedSignals(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetOutboundLanesCongestedSignals(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetOutboundLanesCongestedSignals(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT18 GetTestValue17()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT18 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT18();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.MessageKey GetTestValue18()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.MessageKey result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.MessageKey();
         result.LaneId = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId();
         result.LaneId = this.GetTestValue19();
         result.Nonce = this.GetTestValueU64();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId GetTestValue19()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.LaneId();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr4U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestOutboundMessages()
      {
         // Construct new Mockup client to test with.
         BridgeKusamaMessagesControllerMockupClient mockupClient = new BridgeKusamaMessagesControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BridgeKusamaMessagesControllerClient rpcClient = new BridgeKusamaMessagesControllerClient(_httpClient, subscriptionClient);
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT18 mockupValue = this.GetTestValue17();
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bp_messages.MessageKey mockupKey = this.GetTestValue18();

         Assert.IsTrue(await rpcClient.SubscribeOutboundMessages(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetOutboundMessages(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT18 rpcResult = await rpcClient.GetOutboundMessages(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
