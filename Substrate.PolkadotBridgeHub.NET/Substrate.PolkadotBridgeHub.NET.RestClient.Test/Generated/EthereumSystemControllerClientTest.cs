//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.PolkadotBridgeHub.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.PolkadotBridgeHub.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.PolkadotBridgeHub.NET.RestClient.Generated.Clients;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core;
   using Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing;
   
   public class EthereumSystemControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue2()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue3()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAgents()
      {
         // Construct new Mockup client to test with.
         EthereumSystemControllerMockupClient mockupClient = new EthereumSystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         EthereumSystemControllerClient rpcClient = new EthereumSystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue2();
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 mockupKey = this.GetTestValue3();

         Assert.IsTrue(await rpcClient.SubscribeAgents(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAgents(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetAgents(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.Channel GetTestValue5()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.Channel result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.Channel();
         result.AgentId = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.AgentId = this.GetTestValue6();
         result.ParaId = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id();
         result.ParaId = this.GetTestValue7();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue6()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id GetTestValue7()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId GetTestValue8()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestChannels()
      {
         // Construct new Mockup client to test with.
         EthereumSystemControllerMockupClient mockupClient = new EthereumSystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         EthereumSystemControllerClient rpcClient = new EthereumSystemControllerClient(_httpClient, subscriptionClient);
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.Channel mockupValue = this.GetTestValue5();
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.ChannelId mockupKey = this.GetTestValue8();

         Assert.IsTrue(await rpcClient.SubscribeChannels(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetChannels(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.Channel rpcResult = await rpcClient.GetChannels(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.PricingParameters GetTestValue10()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.PricingParameters result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.PricingParameters();
         result.ExchangeRate = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
         result.ExchangeRate = this.GetTestValue11();
         result.Rewards = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.Rewards();
         result.Rewards = this.GetTestValue12();
         result.FeePerGas = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256();
         result.FeePerGas = this.GetTestValue14();
         result.Multiplier = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
         result.Multiplier = this.GetTestValue15();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetTestValue11()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
         result.Value = this.GetTestValueU128();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.Rewards GetTestValue12()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.Rewards result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.Rewards();
         result.Local = this.GetTestValueU128();
         result.Remote = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256();
         result.Remote = this.GetTestValue13();
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256 GetTestValue13()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr4U64();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U64[] {
                  this.GetTestValueU64(),
                  this.GetTestValueU64(),
                  this.GetTestValueU64(),
                  this.GetTestValueU64()});
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256 GetTestValue14()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.primitive_types.U256();
         result.Value = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Types.Base.Arr4U64();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U64[] {
                  this.GetTestValueU64(),
                  this.GetTestValueU64(),
                  this.GetTestValueU64(),
                  this.GetTestValueU64()});
         return result;
      }
      public Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetTestValue15()
      {
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 result;
         result = new Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128();
         result.Value = this.GetTestValueU128();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPricingParameters()
      {
         // Construct new Mockup client to test with.
         EthereumSystemControllerMockupClient mockupClient = new EthereumSystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         EthereumSystemControllerClient rpcClient = new EthereumSystemControllerClient(_httpClient, subscriptionClient);
         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.PricingParameters mockupValue = this.GetTestValue10();


         Assert.IsTrue(await rpcClient.SubscribePricingParameters());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPricingParameters(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.PolkadotBridgeHub.NET.NetApiExt.Generated.Model.snowbridge_core.pricing.PricingParameters rpcResult = await rpcClient.GetPricingParameters();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
