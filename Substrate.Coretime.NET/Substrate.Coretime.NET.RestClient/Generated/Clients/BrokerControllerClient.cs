//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Coretime.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Coretime.NET.RestClient.Generated.Interfaces;
   
   public sealed class BrokerControllerClient : BaseClient, IBrokerControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public BrokerControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<ConfigRecord> GetConfiguration()
      {
         return await SendRequestAsync<ConfigRecord>(_httpClient, "broker/configuration");
      }
      public async Task<bool> SubscribeConfiguration()
      {
         return await _subscriptionClient.SubscribeAsync("Broker.Configuration");
      }
      public async Task<BoundedVecT21> GetReservations()
      {
         return await SendRequestAsync<BoundedVecT21>(_httpClient, "broker/reservations");
      }
      public async Task<bool> SubscribeReservations()
      {
         return await _subscriptionClient.SubscribeAsync("Broker.Reservations");
      }
      public async Task<BoundedVecT22> GetLeases()
      {
         return await SendRequestAsync<BoundedVecT22>(_httpClient, "broker/leases");
      }
      public async Task<bool> SubscribeLeases()
      {
         return await _subscriptionClient.SubscribeAsync("Broker.Leases");
      }
      public async Task<StatusRecord> GetStatus()
      {
         return await SendRequestAsync<StatusRecord>(_httpClient, "broker/status");
      }
      public async Task<bool> SubscribeStatus()
      {
         return await _subscriptionClient.SubscribeAsync("Broker.Status");
      }
      public async Task<SaleInfoRecord> GetSaleInfo()
      {
         return await SendRequestAsync<SaleInfoRecord>(_httpClient, "broker/saleinfo");
      }
      public async Task<bool> SubscribeSaleInfo()
      {
         return await _subscriptionClient.SubscribeAsync("Broker.SaleInfo");
      }
      public async Task<PotentialRenewalRecord> GetPotentialRenewals(PotentialRenewalId key)
      {
         return await SendRequestAsync<PotentialRenewalRecord>(_httpClient, "broker/potentialrenewals", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.PotentialRenewalsParams(key));
      }
      public async Task<bool> SubscribePotentialRenewals(PotentialRenewalId key)
      {
         return await _subscriptionClient.SubscribeAsync("Broker.PotentialRenewals", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.PotentialRenewalsParams(key));
      }
      public async Task<RegionRecord> GetRegions(RegionId key)
      {
         return await SendRequestAsync<RegionRecord>(_httpClient, "broker/regions", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.RegionsParams(key));
      }
      public async Task<bool> SubscribeRegions(RegionId key)
      {
         return await _subscriptionClient.SubscribeAsync("Broker.Regions", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.RegionsParams(key));
      }
      public async Task<BoundedVecT4> GetWorkplan(Substrate.NetApi.Model.Types.Base.BaseTuple<U32, U16> key)
      {
         return await SendRequestAsync<BoundedVecT4>(_httpClient, "broker/workplan", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.WorkplanParams(key));
      }
      public async Task<bool> SubscribeWorkplan(Substrate.NetApi.Model.Types.Base.BaseTuple<U32, U16> key)
      {
         return await _subscriptionClient.SubscribeAsync("Broker.Workplan", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.WorkplanParams(key));
      }
      public async Task<BoundedVecT4> GetWorkload(U16 key)
      {
         return await SendRequestAsync<BoundedVecT4>(_httpClient, "broker/workload", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.WorkloadParams(key));
      }
      public async Task<bool> SubscribeWorkload(U16 key)
      {
         return await _subscriptionClient.SubscribeAsync("Broker.Workload", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.WorkloadParams(key));
      }
      public async Task<ContributionRecord> GetInstaPoolContribution(RegionId key)
      {
         return await SendRequestAsync<ContributionRecord>(_httpClient, "broker/instapoolcontribution", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolContributionParams(key));
      }
      public async Task<bool> SubscribeInstaPoolContribution(RegionId key)
      {
         return await _subscriptionClient.SubscribeAsync("Broker.InstaPoolContribution", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolContributionParams(key));
      }
      public async Task<PoolIoRecord> GetInstaPoolIo(U32 key)
      {
         return await SendRequestAsync<PoolIoRecord>(_httpClient, "broker/instapoolio", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolIoParams(key));
      }
      public async Task<bool> SubscribeInstaPoolIo(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Broker.InstaPoolIo", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolIoParams(key));
      }
      public async Task<InstaPoolHistoryRecord> GetInstaPoolHistory(U32 key)
      {
         return await SendRequestAsync<InstaPoolHistoryRecord>(_httpClient, "broker/instapoolhistory", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolHistoryParams(key));
      }
      public async Task<bool> SubscribeInstaPoolHistory(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Broker.InstaPoolHistory", Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolHistoryParams(key));
      }
      public async Task<U16> GetCoreCountInbox()
      {
         return await SendRequestAsync<U16>(_httpClient, "broker/corecountinbox");
      }
      public async Task<bool> SubscribeCoreCountInbox()
      {
         return await _subscriptionClient.SubscribeAsync("Broker.CoreCountInbox");
      }
      public async Task<OnDemandRevenueRecord> GetRevenueInbox()
      {
         return await SendRequestAsync<OnDemandRevenueRecord>(_httpClient, "broker/revenueinbox");
      }
      public async Task<bool> SubscribeRevenueInbox()
      {
         return await _subscriptionClient.SubscribeAsync("Broker.RevenueInbox");
      }
   }
}
