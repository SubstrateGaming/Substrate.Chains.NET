//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Coretime.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBrokerStorage interface definition.
    /// </summary>
    public interface IBrokerStorage : IStorage
    {
        
        /// <summary>
        /// >> Configuration
        ///  The current configuration of this pallet.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord GetConfiguration();
        
        /// <summary>
        /// >> Reservations
        ///  The Polkadot Core reservations (generally tasked with the maintenance of System Chains).
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21 GetReservations();
        
        /// <summary>
        /// >> Leases
        ///  The Polkadot Core legacy leases.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetLeases();
        
        /// <summary>
        /// >> Status
        ///  The current status of miscellaneous subsystems of this pallet.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord GetStatus();
        
        /// <summary>
        /// >> SaleInfo
        ///  The details of the current sale, including its properties and status.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord GetSaleInfo();
        
        /// <summary>
        /// >> PotentialRenewals
        ///  Records of potential renewals.
        /// 
        ///  Renewals will only actually be allowed if `CompletionStatus` is actually `Complete`.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord GetPotentialRenewals(string key);
        
        /// <summary>
        /// >> Regions
        ///  The current (unassigned or provisionally assigend) Regions.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord GetRegions(string key);
        
        /// <summary>
        /// >> Workplan
        ///  The work we plan on having each core do at a particular time in the future.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetWorkplan(string key);
        
        /// <summary>
        /// >> Workload
        ///  The current workload of each core. This gets updated with workplan as timeslices pass.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetWorkload(string key);
        
        /// <summary>
        /// >> InstaPoolContribution
        ///  Record of a single contribution to the Instantaneous Coretime Pool.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord GetInstaPoolContribution(string key);
        
        /// <summary>
        /// >> InstaPoolIo
        ///  Record of Coretime entering or leaving the Instantaneous Coretime Pool.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord GetInstaPoolIo(string key);
        
        /// <summary>
        /// >> InstaPoolHistory
        ///  Total InstaPool rewards for each Timeslice and the number of core parts which contributed.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord GetInstaPoolHistory(string key);
        
        /// <summary>
        /// >> CoreCountInbox
        ///  Received core count change from the relay chain.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U16 GetCoreCountInbox();
        
        /// <summary>
        /// >> RevenueInbox
        ///  Received revenue info from the relay chain.
        /// </summary>
        Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord GetRevenueInbox();
    }
    
    /// <summary>
    /// BrokerStorage class definition.
    /// </summary>
    public sealed class BrokerStorage : IBrokerStorage
    {
        
        /// <summary>
        /// _configurationTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord> _configurationTypedStorage;
        
        /// <summary>
        /// _reservationsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21> _reservationsTypedStorage;
        
        /// <summary>
        /// _leasesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> _leasesTypedStorage;
        
        /// <summary>
        /// _statusTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord> _statusTypedStorage;
        
        /// <summary>
        /// _saleInfoTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord> _saleInfoTypedStorage;
        
        /// <summary>
        /// _potentialRenewalsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord> _potentialRenewalsTypedStorage;
        
        /// <summary>
        /// _regionsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord> _regionsTypedStorage;
        
        /// <summary>
        /// _workplanTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> _workplanTypedStorage;
        
        /// <summary>
        /// _workloadTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> _workloadTypedStorage;
        
        /// <summary>
        /// _instaPoolContributionTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord> _instaPoolContributionTypedStorage;
        
        /// <summary>
        /// _instaPoolIoTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord> _instaPoolIoTypedStorage;
        
        /// <summary>
        /// _instaPoolHistoryTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord> _instaPoolHistoryTypedStorage;
        
        /// <summary>
        /// _coreCountInboxTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U16> _coreCountInboxTypedStorage;
        
        /// <summary>
        /// _revenueInboxTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord> _revenueInboxTypedStorage;
        
        /// <summary>
        /// BrokerStorage constructor.
        /// </summary>
        public BrokerStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ConfigurationTypedStorage = new TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord>("Broker.Configuration", storageDataProvider, storageChangeDelegates);
            this.ReservationsTypedStorage = new TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21>("Broker.Reservations", storageDataProvider, storageChangeDelegates);
            this.LeasesTypedStorage = new TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22>("Broker.Leases", storageDataProvider, storageChangeDelegates);
            this.StatusTypedStorage = new TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord>("Broker.Status", storageDataProvider, storageChangeDelegates);
            this.SaleInfoTypedStorage = new TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord>("Broker.SaleInfo", storageDataProvider, storageChangeDelegates);
            this.PotentialRenewalsTypedStorage = new TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord>("Broker.PotentialRenewals", storageDataProvider, storageChangeDelegates);
            this.RegionsTypedStorage = new TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord>("Broker.Regions", storageDataProvider, storageChangeDelegates);
            this.WorkplanTypedStorage = new TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4>("Broker.Workplan", storageDataProvider, storageChangeDelegates);
            this.WorkloadTypedStorage = new TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4>("Broker.Workload", storageDataProvider, storageChangeDelegates);
            this.InstaPoolContributionTypedStorage = new TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord>("Broker.InstaPoolContribution", storageDataProvider, storageChangeDelegates);
            this.InstaPoolIoTypedStorage = new TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord>("Broker.InstaPoolIo", storageDataProvider, storageChangeDelegates);
            this.InstaPoolHistoryTypedStorage = new TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord>("Broker.InstaPoolHistory", storageDataProvider, storageChangeDelegates);
            this.CoreCountInboxTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U16>("Broker.CoreCountInbox", storageDataProvider, storageChangeDelegates);
            this.RevenueInboxTypedStorage = new TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord>("Broker.RevenueInbox", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _configurationTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord> ConfigurationTypedStorage
        {
            get
            {
                return _configurationTypedStorage;
            }
            set
            {
                _configurationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _reservationsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21> ReservationsTypedStorage
        {
            get
            {
                return _reservationsTypedStorage;
            }
            set
            {
                _reservationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _leasesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> LeasesTypedStorage
        {
            get
            {
                return _leasesTypedStorage;
            }
            set
            {
                _leasesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _statusTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord> StatusTypedStorage
        {
            get
            {
                return _statusTypedStorage;
            }
            set
            {
                _statusTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _saleInfoTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord> SaleInfoTypedStorage
        {
            get
            {
                return _saleInfoTypedStorage;
            }
            set
            {
                _saleInfoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _potentialRenewalsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord> PotentialRenewalsTypedStorage
        {
            get
            {
                return _potentialRenewalsTypedStorage;
            }
            set
            {
                _potentialRenewalsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _regionsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord> RegionsTypedStorage
        {
            get
            {
                return _regionsTypedStorage;
            }
            set
            {
                _regionsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _workplanTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> WorkplanTypedStorage
        {
            get
            {
                return _workplanTypedStorage;
            }
            set
            {
                _workplanTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _workloadTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> WorkloadTypedStorage
        {
            get
            {
                return _workloadTypedStorage;
            }
            set
            {
                _workloadTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _instaPoolContributionTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord> InstaPoolContributionTypedStorage
        {
            get
            {
                return _instaPoolContributionTypedStorage;
            }
            set
            {
                _instaPoolContributionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _instaPoolIoTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord> InstaPoolIoTypedStorage
        {
            get
            {
                return _instaPoolIoTypedStorage;
            }
            set
            {
                _instaPoolIoTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _instaPoolHistoryTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord> InstaPoolHistoryTypedStorage
        {
            get
            {
                return _instaPoolHistoryTypedStorage;
            }
            set
            {
                _instaPoolHistoryTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _coreCountInboxTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U16> CoreCountInboxTypedStorage
        {
            get
            {
                return _coreCountInboxTypedStorage;
            }
            set
            {
                _coreCountInboxTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _revenueInboxTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord> RevenueInboxTypedStorage
        {
            get
            {
                return _revenueInboxTypedStorage;
            }
            set
            {
                _revenueInboxTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ConfigurationTypedStorage.InitializeAsync("Broker", "Configuration");
            await ReservationsTypedStorage.InitializeAsync("Broker", "Reservations");
            await LeasesTypedStorage.InitializeAsync("Broker", "Leases");
            await StatusTypedStorage.InitializeAsync("Broker", "Status");
            await SaleInfoTypedStorage.InitializeAsync("Broker", "SaleInfo");
            await PotentialRenewalsTypedStorage.InitializeAsync("Broker", "PotentialRenewals");
            await RegionsTypedStorage.InitializeAsync("Broker", "Regions");
            await WorkplanTypedStorage.InitializeAsync("Broker", "Workplan");
            await WorkloadTypedStorage.InitializeAsync("Broker", "Workload");
            await InstaPoolContributionTypedStorage.InitializeAsync("Broker", "InstaPoolContribution");
            await InstaPoolIoTypedStorage.InitializeAsync("Broker", "InstaPoolIo");
            await InstaPoolHistoryTypedStorage.InitializeAsync("Broker", "InstaPoolHistory");
            await CoreCountInboxTypedStorage.InitializeAsync("Broker", "CoreCountInbox");
            await RevenueInboxTypedStorage.InitializeAsync("Broker", "RevenueInbox");
        }
        
        /// <summary>
        /// Implements any storage change for Broker.Configuration
        /// </summary>
        [StorageChange("Broker", "Configuration")]
        public void OnUpdateConfiguration(string data)
        {
            ConfigurationTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Configuration
        ///  The current configuration of this pallet.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord GetConfiguration()
        {
            return ConfigurationTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broker.Reservations
        /// </summary>
        [StorageChange("Broker", "Reservations")]
        public void OnUpdateReservations(string data)
        {
            ReservationsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Reservations
        ///  The Polkadot Core reservations (generally tasked with the maintenance of System Chains).
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21 GetReservations()
        {
            return ReservationsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broker.Leases
        /// </summary>
        [StorageChange("Broker", "Leases")]
        public void OnUpdateLeases(string data)
        {
            LeasesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Leases
        ///  The Polkadot Core legacy leases.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetLeases()
        {
            return LeasesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broker.Status
        /// </summary>
        [StorageChange("Broker", "Status")]
        public void OnUpdateStatus(string data)
        {
            StatusTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Status
        ///  The current status of miscellaneous subsystems of this pallet.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord GetStatus()
        {
            return StatusTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broker.SaleInfo
        /// </summary>
        [StorageChange("Broker", "SaleInfo")]
        public void OnUpdateSaleInfo(string data)
        {
            SaleInfoTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SaleInfo
        ///  The details of the current sale, including its properties and status.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord GetSaleInfo()
        {
            return SaleInfoTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broker.PotentialRenewals
        /// </summary>
        [StorageChange("Broker", "PotentialRenewals")]
        public void OnUpdatePotentialRenewals(string key, string data)
        {
            PotentialRenewalsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PotentialRenewals
        ///  Records of potential renewals.
        /// 
        ///  Renewals will only actually be allowed if `CompletionStatus` is actually `Complete`.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord GetPotentialRenewals(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PotentialRenewalsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Broker.Regions
        /// </summary>
        [StorageChange("Broker", "Regions")]
        public void OnUpdateRegions(string key, string data)
        {
            RegionsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Regions
        ///  The current (unassigned or provisionally assigend) Regions.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord GetRegions(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RegionsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Broker.Workplan
        /// </summary>
        [StorageChange("Broker", "Workplan")]
        public void OnUpdateWorkplan(string key, string data)
        {
            WorkplanTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Workplan
        ///  The work we plan on having each core do at a particular time in the future.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetWorkplan(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (WorkplanTypedStorage.Dictionary.TryGetValue(key, out Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Broker.Workload
        /// </summary>
        [StorageChange("Broker", "Workload")]
        public void OnUpdateWorkload(string key, string data)
        {
            WorkloadTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Workload
        ///  The current workload of each core. This gets updated with workplan as timeslices pass.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetWorkload(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (WorkloadTypedStorage.Dictionary.TryGetValue(key, out Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Broker.InstaPoolContribution
        /// </summary>
        [StorageChange("Broker", "InstaPoolContribution")]
        public void OnUpdateInstaPoolContribution(string key, string data)
        {
            InstaPoolContributionTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> InstaPoolContribution
        ///  Record of a single contribution to the Instantaneous Coretime Pool.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord GetInstaPoolContribution(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (InstaPoolContributionTypedStorage.Dictionary.TryGetValue(key, out Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Broker.InstaPoolIo
        /// </summary>
        [StorageChange("Broker", "InstaPoolIo")]
        public void OnUpdateInstaPoolIo(string key, string data)
        {
            InstaPoolIoTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> InstaPoolIo
        ///  Record of Coretime entering or leaving the Instantaneous Coretime Pool.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord GetInstaPoolIo(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (InstaPoolIoTypedStorage.Dictionary.TryGetValue(key, out Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Broker.InstaPoolHistory
        /// </summary>
        [StorageChange("Broker", "InstaPoolHistory")]
        public void OnUpdateInstaPoolHistory(string key, string data)
        {
            InstaPoolHistoryTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> InstaPoolHistory
        ///  Total InstaPool rewards for each Timeslice and the number of core parts which contributed.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord GetInstaPoolHistory(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (InstaPoolHistoryTypedStorage.Dictionary.TryGetValue(key, out Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Broker.CoreCountInbox
        /// </summary>
        [StorageChange("Broker", "CoreCountInbox")]
        public void OnUpdateCoreCountInbox(string data)
        {
            CoreCountInboxTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CoreCountInbox
        ///  Received core count change from the relay chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 GetCoreCountInbox()
        {
            return CoreCountInboxTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broker.RevenueInbox
        /// </summary>
        [StorageChange("Broker", "RevenueInbox")]
        public void OnUpdateRevenueInbox(string data)
        {
            RevenueInboxTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> RevenueInbox
        ///  Received revenue info from the relay chain.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord GetRevenueInbox()
        {
            return RevenueInboxTypedStorage.Get();
        }
    }
}
