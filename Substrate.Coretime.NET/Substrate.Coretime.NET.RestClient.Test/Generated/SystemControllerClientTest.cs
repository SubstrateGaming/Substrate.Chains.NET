//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Coretime.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Coretime.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Coretime.NET.RestClient.Generated.Clients;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.dispatch;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest;
   
   public class SystemControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.AccountInfo GetTestValue2()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.AccountInfo result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.AccountInfo();
         result.Nonce = this.GetTestValueU32();
         result.Consumers = this.GetTestValueU32();
         result.Providers = this.GetTestValueU32();
         result.Sufficients = this.GetTestValueU32();
         result.Data = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.AccountData();
         result.Data = this.GetTestValue3();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.AccountData GetTestValue3()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.AccountData result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.AccountData();
         result.Free = this.GetTestValueU128();
         result.Reserved = this.GetTestValueU128();
         result.Frozen = this.GetTestValueU128();
         result.Flags = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.ExtraFlags();
         result.Flags = this.GetTestValue4();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.ExtraFlags GetTestValue4()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.ExtraFlags result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_balances.types.ExtraFlags();
         result.Value = this.GetTestValueU128();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue5()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAccount()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.AccountInfo mockupValue = this.GetTestValue2();
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 mockupKey = this.GetTestValue5();

         Assert.IsTrue(await rpcClient.SubscribeAccount(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAccount(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.AccountInfo rpcResult = await rpcClient.GetAccount(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestExtrinsicCount()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeExtrinsicCount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetExtrinsicCount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetExtrinsicCount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInherentsApplied()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();


         Assert.IsTrue(await rpcClient.SubscribeInherentsApplied());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInherentsApplied(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetInherentsApplied();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.dispatch.PerDispatchClassT1 GetTestValue9()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.dispatch.PerDispatchClassT1 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.dispatch.PerDispatchClassT1();
         result.Normal = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight();
         result.Normal = this.GetTestValue10();
         result.Operational = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight();
         result.Operational = this.GetTestValue11();
         result.Mandatory = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight();
         result.Mandatory = this.GetTestValue12();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight GetTestValue10()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight();
         result.RefTime = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64>();
         result.RefTime.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU64().Value));
         result.ProofSize = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64>();
         result.ProofSize.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU64().Value));
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight GetTestValue11()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight();
         result.RefTime = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64>();
         result.RefTime.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU64().Value));
         result.ProofSize = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64>();
         result.ProofSize.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU64().Value));
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight GetTestValue12()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_weights.weight_v2.Weight();
         result.RefTime = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64>();
         result.RefTime.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU64().Value));
         result.ProofSize = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U64>();
         result.ProofSize.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU64().Value));
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBlockWeight()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.dispatch.PerDispatchClassT1 mockupValue = this.GetTestValue9();


         Assert.IsTrue(await rpcClient.SubscribeBlockWeight());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBlockWeight(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.dispatch.PerDispatchClassT1 rpcResult = await rpcClient.GetBlockWeight();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAllExtrinsicsLen()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeAllExtrinsicsLen());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAllExtrinsicsLen(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetAllExtrinsicsLen();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue15()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBlockHash()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 mockupValue = this.GetTestValue15();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeBlockHash(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBlockHash(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 rpcResult = await rpcClient.GetBlockHash(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> GetTestValue17()
      {
         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>();
         result.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestExtrinsicData()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> mockupValue = this.GetTestValue17();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeExtrinsicData(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetExtrinsicData(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> rpcResult = await rpcClient.GetExtrinsicData(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNumber()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeNumber());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNumber(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetNumber();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue20()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestParentHash()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 mockupValue = this.GetTestValue20();


         Assert.IsTrue(await rpcClient.SubscribeParentHash());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetParentHash(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 rpcResult = await rpcClient.GetParentHash();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.Digest GetTestValue22()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.Digest result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.Digest();
         result.Logs = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.EnumDigestItem>();
         result.Logs.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.EnumDigestItem[] {
                  this.GetTestValue23()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.EnumDigestItem GetTestValue23()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.EnumDigestItem result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.EnumDigestItem();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.EnumDigestItem
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestDigest()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.Digest mockupValue = this.GetTestValue22();


         Assert.IsTrue(await rpcClient.SubscribeDigest());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetDigest(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_runtime.generic.digest.Digest rpcResult = await rpcClient.GetDigest();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord> GetTestValue25()
      {
         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord>();
         result.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord[] {
                  this.GetTestValue26()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord GetTestValue26()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord();
         result.Phase = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase();
         result.Phase = this.GetTestValue27();
         result.Event = new Substrate.Coretime.NET.NetApiExt.Generated.Model.coretime_polkadot_runtime.EnumRuntimeEvent();
         result.Event = this.GetTestValue28();
         result.Topics = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256>();
         result.Topics.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256[] {
                  this.GetTestValue29()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase GetTestValue27()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.coretime_polkadot_runtime.EnumRuntimeEvent GetTestValue28()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.coretime_polkadot_runtime.EnumRuntimeEvent result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.coretime_polkadot_runtime.EnumRuntimeEvent();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.coretime_polkadot_runtime.EnumRuntimeEvent
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue29()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestEvents()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord> mockupValue = this.GetTestValue25();


         Assert.IsTrue(await rpcClient.SubscribeEvents());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetEvents(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EventRecord> rpcResult = await rpcClient.GetEvents();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestEventCount()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeEventCount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetEventCount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetEventCount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> GetTestValue32()
      {
         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>();
         result.Create(new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>[] {
                  this.GetTestValue33()});
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetTestValue33()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValueU32(), this.GetTestValueU32());
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue34()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestEventTopics()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> mockupValue = this.GetTestValue32();
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 mockupKey = this.GetTestValue34();

         Assert.IsTrue(await rpcClient.SubscribeEventTopics(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetEventTopics(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> rpcResult = await rpcClient.GetEventTopics(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.LastRuntimeUpgradeInfo GetTestValue36()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.LastRuntimeUpgradeInfo result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.LastRuntimeUpgradeInfo();
         result.SpecVersion = new Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.SpecVersion.Create(new Substrate.NetApi.CompactInteger(this.GetTestValueU32().Value));
         result.SpecName = this.GetTestValueStr();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLastRuntimeUpgrade()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.LastRuntimeUpgradeInfo mockupValue = this.GetTestValue36();


         Assert.IsTrue(await rpcClient.SubscribeLastRuntimeUpgrade());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLastRuntimeUpgrade(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.LastRuntimeUpgradeInfo rpcResult = await rpcClient.GetLastRuntimeUpgrade();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUpgradedToU32RefCount()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();


         Assert.IsTrue(await rpcClient.SubscribeUpgradedToU32RefCount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUpgradedToU32RefCount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetUpgradedToU32RefCount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUpgradedToTripleRefCount()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();


         Assert.IsTrue(await rpcClient.SubscribeUpgradedToTripleRefCount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUpgradedToTripleRefCount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetUpgradedToTripleRefCount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase GetTestValue40()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestExecutionPhase()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase mockupValue = this.GetTestValue40();


         Assert.IsTrue(await rpcClient.SubscribeExecutionPhase());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetExecutionPhase(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.EnumPhase rpcResult = await rpcClient.GetExecutionPhase();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.CodeUpgradeAuthorization GetTestValue42()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.CodeUpgradeAuthorization result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.CodeUpgradeAuthorization();
         result.CodeHash = new Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.CodeHash = this.GetTestValue43();
         result.CheckVersion = this.GetTestValueBool();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue43()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAuthorizedUpgrade()
      {
         // Construct new Mockup client to test with.
         SystemControllerMockupClient mockupClient = new SystemControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         SystemControllerClient rpcClient = new SystemControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.CodeUpgradeAuthorization mockupValue = this.GetTestValue42();


         Assert.IsTrue(await rpcClient.SubscribeAuthorizedUpgrade());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAuthorizedUpgrade(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_system.CodeUpgradeAuthorization rpcResult = await rpcClient.GetAuthorizedUpgrade();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
