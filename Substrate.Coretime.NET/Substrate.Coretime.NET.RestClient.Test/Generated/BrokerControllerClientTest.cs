//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Coretime.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Coretime.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Coretime.NET.RestClient.Generated.Clients;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.NetApi.Model.Types.Primitive;
   
   public class BrokerControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord GetTestValue2()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord();
         result.AdvanceNotice = this.GetTestValueU32();
         result.InterludeLength = this.GetTestValueU32();
         result.LeadinLength = this.GetTestValueU32();
         result.RegionLength = this.GetTestValueU32();
         result.IdealBulkProportion = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
         result.IdealBulkProportion = this.GetTestValue3();
         result.LimitCoresOffered = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U16>();
         result.LimitCoresOffered.Create(this.GetTestValueU16());
         result.RenewalBump = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
         result.RenewalBump = this.GetTestValue4();
         result.ContributionTimeout = this.GetTestValueU32();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetTestValue3()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill GetTestValue4()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perbill();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestConfiguration()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeConfiguration());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetConfiguration(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord rpcResult = await rpcClient.GetConfiguration();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21 GetTestValue6()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4>();
         result.Value.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4[] {
                  this.GetTestValue7()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetTestValue7()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem>();
         result.Value.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem[] {
                  this.GetTestValue8()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem GetTestValue8()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem();
         result.Mask = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Mask = this.GetTestValue9();
         result.Assignment = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment();
         result.Assignment = this.GetTestValue10();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask GetTestValue9()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr10U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment GetTestValue10()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestReservations()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21 mockupValue = this.GetTestValue6();


         Assert.IsTrue(await rpcClient.SubscribeReservations());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetReservations(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21 rpcResult = await rpcClient.GetReservations();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 GetTestValue12()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.LeaseRecordItem>();
         result.Value.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.LeaseRecordItem[] {
                  this.GetTestValue13()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.LeaseRecordItem GetTestValue13()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.LeaseRecordItem result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.LeaseRecordItem();
         result.Until = this.GetTestValueU32();
         result.Task = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLeases()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 mockupValue = this.GetTestValue12();


         Assert.IsTrue(await rpcClient.SubscribeLeases());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLeases(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 rpcResult = await rpcClient.GetLeases();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord GetTestValue15()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord();
         result.CoreCount = this.GetTestValueU16();
         result.PrivatePoolSize = this.GetTestValueU32();
         result.SystemPoolSize = this.GetTestValueU32();
         result.LastCommittedTimeslice = this.GetTestValueU32();
         result.LastTimeslice = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestStatus()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord mockupValue = this.GetTestValue15();


         Assert.IsTrue(await rpcClient.SubscribeStatus());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetStatus(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord rpcResult = await rpcClient.GetStatus();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord GetTestValue17()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord();
         result.SaleStart = this.GetTestValueU32();
         result.LeadinLength = this.GetTestValueU32();
         result.EndPrice = this.GetTestValueU128();
         result.RegionBegin = this.GetTestValueU32();
         result.RegionEnd = this.GetTestValueU32();
         result.IdealCoresSold = this.GetTestValueU16();
         result.CoresOffered = this.GetTestValueU16();
         result.FirstCore = this.GetTestValueU16();
         result.SelloutPrice = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.SelloutPrice.Create(this.GetTestValueU128());
         result.CoresSold = this.GetTestValueU16();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSaleInfo()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord mockupValue = this.GetTestValue17();


         Assert.IsTrue(await rpcClient.SubscribeSaleInfo());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSaleInfo(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord rpcResult = await rpcClient.GetSaleInfo();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord GetTestValue19()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord();
         result.Price = this.GetTestValueU128();
         result.Completion = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.EnumCompletionStatus();
         result.Completion = this.GetTestValue20();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.EnumCompletionStatus GetTestValue20()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.EnumCompletionStatus result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.EnumCompletionStatus();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.EnumCompletionStatus
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalId GetTestValue21()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalId result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalId();
         result.Core = this.GetTestValueU16();
         result.When = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPotentialRenewals()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord mockupValue = this.GetTestValue19();
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalId mockupKey = this.GetTestValue21();

         Assert.IsTrue(await rpcClient.SubscribePotentialRenewals(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPotentialRenewals(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord rpcResult = await rpcClient.GetPotentialRenewals(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord GetTestValue23()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord();
         result.End = this.GetTestValueU32();
         result.Owner = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>();
         result.Owner.Create(this.GetTestValue24());
         result.Paid = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.Paid.Create(this.GetTestValueU128());
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue24()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId GetTestValue25()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId();
         result.Begin = this.GetTestValueU32();
         result.Core = this.GetTestValueU16();
         result.Mask = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Mask = this.GetTestValue26();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask GetTestValue26()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr10U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRegions()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord mockupValue = this.GetTestValue23();
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId mockupKey = this.GetTestValue25();

         Assert.IsTrue(await rpcClient.SubscribeRegions(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRegions(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord rpcResult = await rpcClient.GetRegions(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetTestValue28()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem>();
         result.Value.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem[] {
                  this.GetTestValue29()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem GetTestValue29()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem();
         result.Mask = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Mask = this.GetTestValue30();
         result.Assignment = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment();
         result.Assignment = this.GetTestValue31();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask GetTestValue30()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr10U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment GetTestValue31()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16> GetTestValue32()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16>();
         result.Create(this.GetTestValueU32(), this.GetTestValueU16());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestWorkplan()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 mockupValue = this.GetTestValue28();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16> mockupKey = this.GetTestValue32();

         Assert.IsTrue(await rpcClient.SubscribeWorkplan(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetWorkplan(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 rpcResult = await rpcClient.GetWorkplan(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetTestValue34()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem>();
         result.Value.Create(new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem[] {
                  this.GetTestValue35()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem GetTestValue35()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ScheduleItem();
         result.Mask = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Mask = this.GetTestValue36();
         result.Assignment = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment();
         result.Assignment = this.GetTestValue37();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask GetTestValue36()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr10U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment GetTestValue37()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment();
         // NOT IMPLEMENTED >> Initialize Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.coretime_interface.EnumCoreAssignment
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestWorkload()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 mockupValue = this.GetTestValue34();
         Substrate.NetApi.Model.Types.Primitive.U16 mockupKey = this.GetTestValueU16();

         Assert.IsTrue(await rpcClient.SubscribeWorkload(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetWorkload(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 rpcResult = await rpcClient.GetWorkload(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord GetTestValue39()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord();
         result.Length = this.GetTestValueU32();
         result.Payee = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Payee = this.GetTestValue40();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue40()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId GetTestValue41()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId();
         result.Begin = this.GetTestValueU32();
         result.Core = this.GetTestValueU16();
         result.Mask = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Mask = this.GetTestValue42();
         return result;
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask GetTestValue42()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask();
         result.Value = new Substrate.Coretime.NET.NetApiExt.Generated.Types.Base.Arr10U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInstaPoolContribution()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord mockupValue = this.GetTestValue39();
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId mockupKey = this.GetTestValue41();

         Assert.IsTrue(await rpcClient.SubscribeInstaPoolContribution(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInstaPoolContribution(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord rpcResult = await rpcClient.GetInstaPoolContribution(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord GetTestValue44()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord();
         result.Private = this.GetTestValueI32();
         result.System = this.GetTestValueI32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInstaPoolIo()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord mockupValue = this.GetTestValue44();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeInstaPoolIo(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInstaPoolIo(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord rpcResult = await rpcClient.GetInstaPoolIo(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord GetTestValue46()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord();
         result.PrivateContributions = this.GetTestValueU32();
         result.SystemContributions = this.GetTestValueU32();
         result.MaybePayout = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
         result.MaybePayout.Create(this.GetTestValueU128());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInstaPoolHistory()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord mockupValue = this.GetTestValue46();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeInstaPoolHistory(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInstaPoolHistory(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord rpcResult = await rpcClient.GetInstaPoolHistory(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCoreCountInbox()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U16 mockupValue = this.GetTestValueU16();


         Assert.IsTrue(await rpcClient.SubscribeCoreCountInbox());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCoreCountInbox(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U16 rpcResult = await rpcClient.GetCoreCountInbox();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord GetTestValue49()
      {
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord result;
         result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord();
         result.Until = this.GetTestValueU32();
         result.Amount = this.GetTestValueU128();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRevenueInbox()
      {
         // Construct new Mockup client to test with.
         BrokerControllerMockupClient mockupClient = new BrokerControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BrokerControllerClient rpcClient = new BrokerControllerClient(_httpClient, subscriptionClient);
         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord mockupValue = this.GetTestValue49();


         Assert.IsTrue(await rpcClient.SubscribeRevenueInbox());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRevenueInbox(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord rpcResult = await rpcClient.GetRevenueInbox();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
