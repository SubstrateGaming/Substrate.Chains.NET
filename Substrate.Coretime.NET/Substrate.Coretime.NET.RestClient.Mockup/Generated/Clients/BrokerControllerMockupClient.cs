//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Coretime.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types;
   using Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Coretime.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class BrokerControllerMockupClient : MockupBaseClient, IBrokerControllerMockupClient
   {
      private HttpClient _httpClient;
      public BrokerControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetConfiguration(ConfigRecord value)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/Configuration", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.ConfigurationParams());
      }
      public async Task<bool> SetReservations(BoundedVecT21 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/Reservations", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.ReservationsParams());
      }
      public async Task<bool> SetLeases(BoundedVecT22 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/Leases", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.LeasesParams());
      }
      public async Task<bool> SetStatus(StatusRecord value)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/Status", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.StatusParams());
      }
      public async Task<bool> SetSaleInfo(SaleInfoRecord value)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/SaleInfo", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.SaleInfoParams());
      }
      public async Task<bool> SetPotentialRenewals(PotentialRenewalRecord value, PotentialRenewalId key)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/PotentialRenewals", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.PotentialRenewalsParams(key));
      }
      public async Task<bool> SetRegions(RegionRecord value, RegionId key)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/Regions", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.RegionsParams(key));
      }
      public async Task<bool> SetWorkplan(BoundedVecT4 value, Substrate.NetApi.Model.Types.Base.BaseTuple<U32, U16> key)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/Workplan", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.WorkplanParams(key));
      }
      public async Task<bool> SetWorkload(BoundedVecT4 value, U16 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/Workload", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.WorkloadParams(key));
      }
      public async Task<bool> SetInstaPoolContribution(ContributionRecord value, RegionId key)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/InstaPoolContribution", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolContributionParams(key));
      }
      public async Task<bool> SetInstaPoolIo(PoolIoRecord value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/InstaPoolIo", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolIoParams(key));
      }
      public async Task<bool> SetInstaPoolHistory(InstaPoolHistoryRecord value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/InstaPoolHistory", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.InstaPoolHistoryParams(key));
      }
      public async Task<bool> SetCoreCountInbox(U16 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/CoreCountInbox", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.CoreCountInboxParams());
      }
      public async Task<bool> SetRevenueInbox(OnDemandRevenueRecord value)
      {
         return await SendMockupRequestAsync(_httpClient, "Broker/RevenueInbox", value.Encode(), Substrate.Coretime.NET.NetApiExt.Generated.Storage.BrokerStorage.RevenueInboxParams());
      }
   }
}
