//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Coretime.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> BrokerStorage
    /// </summary>
    public sealed class BrokerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BrokerStorage Constructor
        /// </summary>
        public BrokerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "Configuration"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "Reservations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "Leases"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "Status"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "SaleInfo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "PotentialRenewals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalId), typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "Regions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId), typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "Workplan"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16>), typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "Workload"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U16), typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "InstaPoolContribution"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId), typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "InstaPoolIo"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "InstaPoolHistory"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "CoreCountInbox"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U16)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broker", "RevenueInbox"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord)));
        }
        
        /// <summary>
        /// >> ConfigurationParams
        ///  The current configuration of this pallet.
        /// </summary>
        public static string ConfigurationParams()
        {
            return RequestGenerator.GetStorage("Broker", "Configuration", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ConfigurationDefault
        /// Default value as hex string
        /// </summary>
        public static string ConfigurationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Configuration
        ///  The current configuration of this pallet.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord> Configuration(string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.ConfigurationParams();
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReservationsParams
        ///  The Polkadot Core reservations (generally tasked with the maintenance of System Chains).
        /// </summary>
        public static string ReservationsParams()
        {
            return RequestGenerator.GetStorage("Broker", "Reservations", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ReservationsDefault
        /// Default value as hex string
        /// </summary>
        public static string ReservationsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Reservations
        ///  The Polkadot Core reservations (generally tasked with the maintenance of System Chains).
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21> Reservations(string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.ReservationsParams();
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT21>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LeasesParams
        ///  The Polkadot Core legacy leases.
        /// </summary>
        public static string LeasesParams()
        {
            return RequestGenerator.GetStorage("Broker", "Leases", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LeasesDefault
        /// Default value as hex string
        /// </summary>
        public static string LeasesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Leases
        ///  The Polkadot Core legacy leases.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22> Leases(string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.LeasesParams();
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> StatusParams
        ///  The current status of miscellaneous subsystems of this pallet.
        /// </summary>
        public static string StatusParams()
        {
            return RequestGenerator.GetStorage("Broker", "Status", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StatusDefault
        /// Default value as hex string
        /// </summary>
        public static string StatusDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Status
        ///  The current status of miscellaneous subsystems of this pallet.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord> Status(string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.StatusParams();
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.StatusRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SaleInfoParams
        ///  The details of the current sale, including its properties and status.
        /// </summary>
        public static string SaleInfoParams()
        {
            return RequestGenerator.GetStorage("Broker", "SaleInfo", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SaleInfoDefault
        /// Default value as hex string
        /// </summary>
        public static string SaleInfoDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SaleInfo
        ///  The details of the current sale, including its properties and status.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord> SaleInfo(string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.SaleInfoParams();
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.SaleInfoRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PotentialRenewalsParams
        ///  Records of potential renewals.
        /// 
        ///  Renewals will only actually be allowed if `CompletionStatus` is actually `Complete`.
        /// </summary>
        public static string PotentialRenewalsParams(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalId key)
        {
            return RequestGenerator.GetStorage("Broker", "PotentialRenewals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PotentialRenewalsDefault
        /// Default value as hex string
        /// </summary>
        public static string PotentialRenewalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PotentialRenewals
        ///  Records of potential renewals.
        /// 
        ///  Renewals will only actually be allowed if `CompletionStatus` is actually `Complete`.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord> PotentialRenewals(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalId key, string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.PotentialRenewalsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PotentialRenewalRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegionsParams
        ///  The current (unassigned or provisionally assigend) Regions.
        /// </summary>
        public static string RegionsParams(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId key)
        {
            return RequestGenerator.GetStorage("Broker", "Regions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RegionsDefault
        /// Default value as hex string
        /// </summary>
        public static string RegionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Regions
        ///  The current (unassigned or provisionally assigend) Regions.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord> Regions(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId key, string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.RegionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> WorkplanParams
        ///  The work we plan on having each core do at a particular time in the future.
        /// </summary>
        public static string WorkplanParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16> key)
        {
            return RequestGenerator.GetStorage("Broker", "Workplan", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> WorkplanDefault
        /// Default value as hex string
        /// </summary>
        public static string WorkplanDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Workplan
        ///  The work we plan on having each core do at a particular time in the future.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> Workplan(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U16> key, string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.WorkplanParams(key);
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> WorkloadParams
        ///  The current workload of each core. This gets updated with workplan as timeslices pass.
        /// </summary>
        public static string WorkloadParams(Substrate.NetApi.Model.Types.Primitive.U16 key)
        {
            return RequestGenerator.GetStorage("Broker", "Workload", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> WorkloadDefault
        /// Default value as hex string
        /// </summary>
        public static string WorkloadDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Workload
        ///  The current workload of each core. This gets updated with workplan as timeslices pass.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> Workload(Substrate.NetApi.Model.Types.Primitive.U16 key, string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.WorkloadParams(key);
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InstaPoolContributionParams
        ///  Record of a single contribution to the Instantaneous Coretime Pool.
        /// </summary>
        public static string InstaPoolContributionParams(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId key)
        {
            return RequestGenerator.GetStorage("Broker", "InstaPoolContribution", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> InstaPoolContributionDefault
        /// Default value as hex string
        /// </summary>
        public static string InstaPoolContributionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> InstaPoolContribution
        ///  Record of a single contribution to the Instantaneous Coretime Pool.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord> InstaPoolContribution(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId key, string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.InstaPoolContributionParams(key);
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ContributionRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InstaPoolIoParams
        ///  Record of Coretime entering or leaving the Instantaneous Coretime Pool.
        /// </summary>
        public static string InstaPoolIoParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Broker", "InstaPoolIo", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> InstaPoolIoDefault
        /// Default value as hex string
        /// </summary>
        public static string InstaPoolIoDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> InstaPoolIo
        ///  Record of Coretime entering or leaving the Instantaneous Coretime Pool.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord> InstaPoolIo(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.InstaPoolIoParams(key);
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.PoolIoRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> InstaPoolHistoryParams
        ///  Total InstaPool rewards for each Timeslice and the number of core parts which contributed.
        /// </summary>
        public static string InstaPoolHistoryParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Broker", "InstaPoolHistory", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> InstaPoolHistoryDefault
        /// Default value as hex string
        /// </summary>
        public static string InstaPoolHistoryDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> InstaPoolHistory
        ///  Total InstaPool rewards for each Timeslice and the number of core parts which contributed.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord> InstaPoolHistory(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.InstaPoolHistoryParams(key);
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.InstaPoolHistoryRecord>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CoreCountInboxParams
        ///  Received core count change from the relay chain.
        /// </summary>
        public static string CoreCountInboxParams()
        {
            return RequestGenerator.GetStorage("Broker", "CoreCountInbox", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CoreCountInboxDefault
        /// Default value as hex string
        /// </summary>
        public static string CoreCountInboxDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CoreCountInbox
        ///  Received core count change from the relay chain.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U16> CoreCountInbox(string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.CoreCountInboxParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U16>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RevenueInboxParams
        ///  Received revenue info from the relay chain.
        /// </summary>
        public static string RevenueInboxParams()
        {
            return RequestGenerator.GetStorage("Broker", "RevenueInbox", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RevenueInboxDefault
        /// Default value as hex string
        /// </summary>
        public static string RevenueInboxDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RevenueInbox
        ///  Received revenue info from the relay chain.
        /// </summary>
        public async Task<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord> RevenueInbox(string blockhash, CancellationToken token)
        {
            string parameters = BrokerStorage.RevenueInboxParams();
            var result = await _client.GetStorageAsync<Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BrokerCalls
    /// </summary>
    public sealed class BrokerCalls
    {
        
        /// <summary>
        /// >> configure
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Configure(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.ConfigRecord config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(config.Encode());
            return new Method(50, "Broker", 0, "configure", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reserve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Reserve(Substrate.Coretime.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 workload)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(workload.Encode());
            return new Method(50, "Broker", 1, "reserve", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unreserve
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unreserve(Substrate.NetApi.Model.Types.Primitive.U32 item_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(item_index.Encode());
            return new Method(50, "Broker", 2, "unreserve", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_lease
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetLease(Substrate.NetApi.Model.Types.Primitive.U32 task, Substrate.NetApi.Model.Types.Primitive.U32 until)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(task.Encode());
            byteArray.AddRange(until.Encode());
            return new Method(50, "Broker", 3, "set_lease", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> start_sales
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StartSales(Substrate.NetApi.Model.Types.Primitive.U128 end_price, Substrate.NetApi.Model.Types.Primitive.U16 extra_cores)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(end_price.Encode());
            byteArray.AddRange(extra_cores.Encode());
            return new Method(50, "Broker", 4, "start_sales", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> purchase
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Purchase(Substrate.NetApi.Model.Types.Primitive.U128 price_limit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(price_limit.Encode());
            return new Method(50, "Broker", 5, "purchase", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> renew
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Renew(Substrate.NetApi.Model.Types.Primitive.U16 core)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(core.Encode());
            return new Method(50, "Broker", 6, "renew", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Transfer(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id, Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 new_owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(new_owner.Encode());
            return new Method(50, "Broker", 7, "transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> partition
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Partition(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id, Substrate.NetApi.Model.Types.Primitive.U32 pivot)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(pivot.Encode());
            return new Method(50, "Broker", 8, "partition", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> interlace
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Interlace(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id, Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.core_mask.CoreMask pivot)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(pivot.Encode());
            return new Method(50, "Broker", 9, "interlace", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> assign
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Assign(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id, Substrate.NetApi.Model.Types.Primitive.U32 task, Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.EnumFinality finality)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(task.Encode());
            byteArray.AddRange(finality.Encode());
            return new Method(50, "Broker", 10, "assign", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Pool(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id, Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 payee, Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.EnumFinality finality)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(payee.Encode());
            byteArray.AddRange(finality.Encode());
            return new Method(50, "Broker", 11, "pool", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_revenue
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRevenue(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id, Substrate.NetApi.Model.Types.Primitive.U32 max_timeslices)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            byteArray.AddRange(max_timeslices.Encode());
            return new Method(50, "Broker", 12, "claim_revenue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> purchase_credit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PurchaseCredit(Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.Coretime.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 beneficiary)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(beneficiary.Encode());
            return new Method(50, "Broker", 13, "purchase_credit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> drop_region
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DropRegion(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            return new Method(50, "Broker", 14, "drop_region", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> drop_contribution
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DropContribution(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.RegionId region_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(region_id.Encode());
            return new Method(50, "Broker", 15, "drop_contribution", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> drop_history
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DropHistory(Substrate.NetApi.Model.Types.Primitive.U32 when)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(when.Encode());
            return new Method(50, "Broker", 16, "drop_history", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> drop_renewal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DropRenewal(Substrate.NetApi.Model.Types.Primitive.U16 core, Substrate.NetApi.Model.Types.Primitive.U32 when)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(core.Encode());
            byteArray.AddRange(when.Encode());
            return new Method(50, "Broker", 17, "drop_renewal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> request_core_count
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RequestCoreCount(Substrate.NetApi.Model.Types.Primitive.U16 core_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(core_count.Encode());
            return new Method(50, "Broker", 18, "request_core_count", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> notify_core_count
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NotifyCoreCount(Substrate.NetApi.Model.Types.Primitive.U16 core_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(core_count.Encode());
            return new Method(50, "Broker", 19, "notify_core_count", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> notify_revenue
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method NotifyRevenue(Substrate.Coretime.NET.NetApiExt.Generated.Model.pallet_broker.types.OnDemandRevenueRecord revenue)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(revenue.Encode());
            return new Method(50, "Broker", 20, "notify_revenue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> swap_leases
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SwapLeases(Substrate.NetApi.Model.Types.Primitive.U32 id, Substrate.NetApi.Model.Types.Primitive.U32 other)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(id.Encode());
            byteArray.AddRange(other.Encode());
            return new Method(50, "Broker", 99, "swap_leases", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BrokerConstants
    /// </summary>
    public sealed class BrokerConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  Identifier from which the internal Pot is generated.
        /// </summary>
        public Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Coretime.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F62726F6B65");
            return result;
        }
        
        /// <summary>
        /// >> TimeslicePeriod
        ///  Number of Relay-chain blocks per timeslice.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 TimeslicePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x50000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxLeasedCores
        ///  Maximum number of legacy leases.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxLeasedCores()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x37000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxReservedCores
        ///  Maximum number of system cores.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxReservedCores()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BrokerErrors
    /// </summary>
    public enum BrokerErrors
    {
        
        /// <summary>
        /// >> UnknownRegion
        /// The given region identity is not known.
        /// </summary>
        UnknownRegion,
        
        /// <summary>
        /// >> NotOwner
        /// The owner of the region is not the origin.
        /// </summary>
        NotOwner,
        
        /// <summary>
        /// >> PivotTooLate
        /// The pivot point of the partition at or after the end of the region.
        /// </summary>
        PivotTooLate,
        
        /// <summary>
        /// >> PivotTooEarly
        /// The pivot point of the partition at the beginning of the region.
        /// </summary>
        PivotTooEarly,
        
        /// <summary>
        /// >> ExteriorPivot
        /// The pivot mask for the interlacing is not contained within the region's interlace mask.
        /// </summary>
        ExteriorPivot,
        
        /// <summary>
        /// >> VoidPivot
        /// The pivot mask for the interlacing is void (and therefore unschedulable).
        /// </summary>
        VoidPivot,
        
        /// <summary>
        /// >> CompletePivot
        /// The pivot mask for the interlacing is complete (and therefore not a strict subset).
        /// </summary>
        CompletePivot,
        
        /// <summary>
        /// >> CorruptWorkplan
        /// The workplan of the pallet's state is invalid. This indicates a state corruption.
        /// </summary>
        CorruptWorkplan,
        
        /// <summary>
        /// >> NoSales
        /// There is no sale happening currently.
        /// </summary>
        NoSales,
        
        /// <summary>
        /// >> Overpriced
        /// The price limit is exceeded.
        /// </summary>
        Overpriced,
        
        /// <summary>
        /// >> Unavailable
        /// There are no cores available.
        /// </summary>
        Unavailable,
        
        /// <summary>
        /// >> SoldOut
        /// The sale limit has been reached.
        /// </summary>
        SoldOut,
        
        /// <summary>
        /// >> WrongTime
        /// The renewal operation is not valid at the current time (it may become valid in the next
        /// sale).
        /// </summary>
        WrongTime,
        
        /// <summary>
        /// >> NotAllowed
        /// Invalid attempt to renew.
        /// </summary>
        NotAllowed,
        
        /// <summary>
        /// >> Uninitialized
        /// This pallet has not yet been initialized.
        /// </summary>
        Uninitialized,
        
        /// <summary>
        /// >> TooEarly
        /// The purchase cannot happen yet as the sale period is yet to begin.
        /// </summary>
        TooEarly,
        
        /// <summary>
        /// >> NothingToDo
        /// There is no work to be done.
        /// </summary>
        NothingToDo,
        
        /// <summary>
        /// >> TooManyReservations
        /// The maximum amount of reservations has already been reached.
        /// </summary>
        TooManyReservations,
        
        /// <summary>
        /// >> TooManyLeases
        /// The maximum amount of leases has already been reached.
        /// </summary>
        TooManyLeases,
        
        /// <summary>
        /// >> UnknownRevenue
        /// The revenue for the Instantaneous Core Sales of this period is not (yet) known and thus
        /// this operation cannot proceed.
        /// </summary>
        UnknownRevenue,
        
        /// <summary>
        /// >> UnknownContribution
        /// The identified contribution to the Instantaneous Core Pool is unknown.
        /// </summary>
        UnknownContribution,
        
        /// <summary>
        /// >> IncompleteAssignment
        /// The workload assigned for renewal is incomplete. This is unexpected and indicates a
        /// logic error.
        /// </summary>
        IncompleteAssignment,
        
        /// <summary>
        /// >> StillValid
        /// An item cannot be dropped because it is still valid.
        /// </summary>
        StillValid,
        
        /// <summary>
        /// >> NoHistory
        /// The history item does not exist.
        /// </summary>
        NoHistory,
        
        /// <summary>
        /// >> UnknownReservation
        /// No reservation of the given index exists.
        /// </summary>
        UnknownReservation,
        
        /// <summary>
        /// >> UnknownRenewal
        /// The renewal record cannot be found.
        /// </summary>
        UnknownRenewal,
        
        /// <summary>
        /// >> AlreadyExpired
        /// The lease expiry time has already passed.
        /// </summary>
        AlreadyExpired,
        
        /// <summary>
        /// >> InvalidConfig
        /// The configuration could not be applied because it is invalid.
        /// </summary>
        InvalidConfig,
        
        /// <summary>
        /// >> NoClaimTimeslices
        /// The revenue must be claimed for 1 or more timeslices.
        /// </summary>
        NoClaimTimeslices,
    }
}
