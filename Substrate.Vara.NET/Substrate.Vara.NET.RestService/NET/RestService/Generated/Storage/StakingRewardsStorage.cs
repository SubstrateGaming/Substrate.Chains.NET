//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Vara.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IStakingRewardsStorage interface definition.
    /// </summary>
    public interface IStakingRewardsStorage : IStorage
    {
        
        /// <summary>
        /// >> TargetInflation
        ///  Target inflation (at ideal stake)
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTargetInflation();
        
        /// <summary>
        /// >> IdealStakingRatio
        ///  Ideal staking ratio
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetIdealStakingRatio();
        
        /// <summary>
        /// >> NonStakeableShare
        ///  The current share of issued tokens that cannot be staked (e.g. being vested)
        ///  This value is guaranteed to remain unchanged for the first year until vesting kicks in.
        ///  Subsequently, the non-stakeable share should be calculated based on the vesting balances.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetNonStakeableShare();
        
        /// <summary>
        /// >> FilteredAccounts
        ///  List of accounts whose locked balance (due to incomplete vesting) should be excluded from
        ///  the total stakeable quantity.
        ///  During the 1st year the non-stakeable amount is accounted for as a fixed fraction of TTS.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT6 GetFilteredAccounts();
    }
    
    /// <summary>
    /// StakingRewardsStorage class definition.
    /// </summary>
    public sealed class StakingRewardsStorage : IStakingRewardsStorage
    {
        
        /// <summary>
        /// _targetInflationTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> _targetInflationTypedStorage;
        
        /// <summary>
        /// _idealStakingRatioTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> _idealStakingRatioTypedStorage;
        
        /// <summary>
        /// _nonStakeableShareTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> _nonStakeableShareTypedStorage;
        
        /// <summary>
        /// _filteredAccountsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT6> _filteredAccountsTypedStorage;
        
        /// <summary>
        /// StakingRewardsStorage constructor.
        /// </summary>
        public StakingRewardsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.TargetInflationTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill>("StakingRewards.TargetInflation", storageDataProvider, storageChangeDelegates);
            this.IdealStakingRatioTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill>("StakingRewards.IdealStakingRatio", storageDataProvider, storageChangeDelegates);
            this.NonStakeableShareTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill>("StakingRewards.NonStakeableShare", storageDataProvider, storageChangeDelegates);
            this.FilteredAccountsTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT6>("StakingRewards.FilteredAccounts", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _targetInflationTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> TargetInflationTypedStorage
        {
            get
            {
                return _targetInflationTypedStorage;
            }
            set
            {
                _targetInflationTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _idealStakingRatioTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> IdealStakingRatioTypedStorage
        {
            get
            {
                return _idealStakingRatioTypedStorage;
            }
            set
            {
                _idealStakingRatioTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nonStakeableShareTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill> NonStakeableShareTypedStorage
        {
            get
            {
                return _nonStakeableShareTypedStorage;
            }
            set
            {
                _nonStakeableShareTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _filteredAccountsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT6> FilteredAccountsTypedStorage
        {
            get
            {
                return _filteredAccountsTypedStorage;
            }
            set
            {
                _filteredAccountsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await TargetInflationTypedStorage.InitializeAsync("StakingRewards", "TargetInflation");
            await IdealStakingRatioTypedStorage.InitializeAsync("StakingRewards", "IdealStakingRatio");
            await NonStakeableShareTypedStorage.InitializeAsync("StakingRewards", "NonStakeableShare");
            await FilteredAccountsTypedStorage.InitializeAsync("StakingRewards", "FilteredAccounts");
        }
        
        /// <summary>
        /// Implements any storage change for StakingRewards.TargetInflation
        /// </summary>
        [StorageChange("StakingRewards", "TargetInflation")]
        public void OnUpdateTargetInflation(string data)
        {
            TargetInflationTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TargetInflation
        ///  Target inflation (at ideal stake)
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetTargetInflation()
        {
            return TargetInflationTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for StakingRewards.IdealStakingRatio
        /// </summary>
        [StorageChange("StakingRewards", "IdealStakingRatio")]
        public void OnUpdateIdealStakingRatio(string data)
        {
            IdealStakingRatioTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> IdealStakingRatio
        ///  Ideal staking ratio
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetIdealStakingRatio()
        {
            return IdealStakingRatioTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for StakingRewards.NonStakeableShare
        /// </summary>
        [StorageChange("StakingRewards", "NonStakeableShare")]
        public void OnUpdateNonStakeableShare(string data)
        {
            NonStakeableShareTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NonStakeableShare
        ///  The current share of issued tokens that cannot be staked (e.g. being vested)
        ///  This value is guaranteed to remain unchanged for the first year until vesting kicks in.
        ///  Subsequently, the non-stakeable share should be calculated based on the vesting balances.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill GetNonStakeableShare()
        {
            return NonStakeableShareTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for StakingRewards.FilteredAccounts
        /// </summary>
        [StorageChange("StakingRewards", "FilteredAccounts")]
        public void OnUpdateFilteredAccounts(string data)
        {
            FilteredAccountsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> FilteredAccounts
        ///  List of accounts whose locked balance (due to incomplete vesting) should be excluded from
        ///  the total stakeable quantity.
        ///  During the 1st year the non-stakeable amount is accounted for as a fixed fraction of TTS.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT6 GetFilteredAccounts()
        {
            return FilteredAccountsTypedStorage.Get();
        }
    }
}
