//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Vara.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBabeStorage interface definition.
    /// </summary>
    public interface IBabeStorage : IStorage
    {
        
        /// <summary>
        /// >> EpochIndex
        ///  Current epoch index.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetEpochIndex();
        
        /// <summary>
        /// >> Authorities
        ///  Current epoch authorities.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2 GetAuthorities();
        
        /// <summary>
        /// >> GenesisSlot
        ///  The slot at which the first epoch actually started. This is 0
        ///  until the first block of the chain.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot GetGenesisSlot();
        
        /// <summary>
        /// >> CurrentSlot
        ///  Current slot number.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot GetCurrentSlot();
        
        /// <summary>
        /// >> Randomness
        ///  The epoch randomness for the *current* epoch.
        /// 
        ///  # Security
        /// 
        ///  This MUST NOT be used for gambling, as it can be influenced by a
        ///  malicious validator in the short term. It MAY be used in many
        ///  cryptographic protocols, however, so long as one remembers that this
        ///  (like everything else on-chain) it is public. For example, it can be
        ///  used where a number is needed that cannot have been chosen by an
        ///  adversary, for purposes such as public-coin zero-knowledge proofs.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetRandomness();
        
        /// <summary>
        /// >> PendingEpochConfigChange
        ///  Pending epoch configuration change that will be applied when the next epoch is enacted.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumNextConfigDescriptor GetPendingEpochConfigChange();
        
        /// <summary>
        /// >> NextRandomness
        ///  Next epoch randomness.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetNextRandomness();
        
        /// <summary>
        /// >> NextAuthorities
        ///  Next epoch authorities.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2 GetNextAuthorities();
        
        /// <summary>
        /// >> SegmentIndex
        ///  Randomness under construction.
        /// 
        ///  We make a trade-off between storage accesses and list length.
        ///  We store the under-construction randomness in segments of up to
        ///  `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
        /// 
        ///  Once a segment reaches this length, we begin the next one.
        ///  We reset all segments and return to `0` at the beginning of every
        ///  epoch.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetSegmentIndex();
        
        /// <summary>
        /// >> UnderConstruction
        ///  TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3 GetUnderConstruction(string key);
        
        /// <summary>
        /// >> Initialized
        ///  Temporary value (cleared at block finalization) which is `Some`
        ///  if per-block initialization has already been called for current block.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumPreDigest> GetInitialized();
        
        /// <summary>
        /// >> AuthorVrfRandomness
        ///  This field should always be populated during block processing unless
        ///  secondary plain slots are enabled (which don't contain a VRF output).
        /// 
        ///  It is set in `on_finalize`, before it will contain the value from the last block.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8> GetAuthorVrfRandomness();
        
        /// <summary>
        /// >> EpochStart
        ///  The block numbers when the last and current epoch have started, respectively `N-1` and
        ///  `N`.
        ///  NOTE: We track this is in order to annotate the block number when a given pool of
        ///  entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
        ///  slots, which may be skipped, the block numbers may not line up with the slot numbers.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetEpochStart();
        
        /// <summary>
        /// >> Lateness
        ///  How late the current block is compared to its parent.
        /// 
        ///  This entry is populated as part of block execution and is cleaned up
        ///  on block finalization. Querying this storage entry outside of block
        ///  execution context should always yield zero.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetLateness();
        
        /// <summary>
        /// >> EpochConfig
        ///  The configuration for the current epoch. Should never be `None` as it is initialized in
        ///  genesis.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration GetEpochConfig();
        
        /// <summary>
        /// >> NextEpochConfig
        ///  The configuration for the next epoch, `None` if the config will not change
        ///  (you can fallback to `EpochConfig` instead in that case).
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration GetNextEpochConfig();
        
        /// <summary>
        /// >> SkippedEpochs
        ///  A list of the last 100 skipped epochs and the corresponding session index
        ///  when the epoch was skipped.
        /// 
        ///  This is only used for validating equivocation proofs. An equivocation proof
        ///  must contains a key-ownership proof for a given session, therefore we need a
        ///  way to tie together sessions and epoch indices, i.e. we need to validate that
        ///  a validator was the owner of a given key on a given session, and what the
        ///  active epoch index was during that session.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetSkippedEpochs();
    }
    
    /// <summary>
    /// BabeStorage class definition.
    /// </summary>
    public sealed class BabeStorage : IBabeStorage
    {
        
        /// <summary>
        /// _epochIndexTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> _epochIndexTypedStorage;
        
        /// <summary>
        /// _authoritiesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2> _authoritiesTypedStorage;
        
        /// <summary>
        /// _genesisSlotTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot> _genesisSlotTypedStorage;
        
        /// <summary>
        /// _currentSlotTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot> _currentSlotTypedStorage;
        
        /// <summary>
        /// _randomnessTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8> _randomnessTypedStorage;
        
        /// <summary>
        /// _pendingEpochConfigChangeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumNextConfigDescriptor> _pendingEpochConfigChangeTypedStorage;
        
        /// <summary>
        /// _nextRandomnessTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8> _nextRandomnessTypedStorage;
        
        /// <summary>
        /// _nextAuthoritiesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2> _nextAuthoritiesTypedStorage;
        
        /// <summary>
        /// _segmentIndexTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _segmentIndexTypedStorage;
        
        /// <summary>
        /// _underConstructionTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3> _underConstructionTypedStorage;
        
        /// <summary>
        /// _initializedTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumPreDigest>> _initializedTypedStorage;
        
        /// <summary>
        /// _authorVrfRandomnessTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8>> _authorVrfRandomnessTypedStorage;
        
        /// <summary>
        /// _epochStartTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> _epochStartTypedStorage;
        
        /// <summary>
        /// _latenessTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _latenessTypedStorage;
        
        /// <summary>
        /// _epochConfigTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration> _epochConfigTypedStorage;
        
        /// <summary>
        /// _nextEpochConfigTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration> _nextEpochConfigTypedStorage;
        
        /// <summary>
        /// _skippedEpochsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> _skippedEpochsTypedStorage;
        
        /// <summary>
        /// BabeStorage constructor.
        /// </summary>
        public BabeStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.EpochIndexTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64>("Babe.EpochIndex", storageDataProvider, storageChangeDelegates);
            this.AuthoritiesTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2>("Babe.Authorities", storageDataProvider, storageChangeDelegates);
            this.GenesisSlotTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot>("Babe.GenesisSlot", storageDataProvider, storageChangeDelegates);
            this.CurrentSlotTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot>("Babe.CurrentSlot", storageDataProvider, storageChangeDelegates);
            this.RandomnessTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8>("Babe.Randomness", storageDataProvider, storageChangeDelegates);
            this.PendingEpochConfigChangeTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumNextConfigDescriptor>("Babe.PendingEpochConfigChange", storageDataProvider, storageChangeDelegates);
            this.NextRandomnessTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8>("Babe.NextRandomness", storageDataProvider, storageChangeDelegates);
            this.NextAuthoritiesTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2>("Babe.NextAuthorities", storageDataProvider, storageChangeDelegates);
            this.SegmentIndexTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Babe.SegmentIndex", storageDataProvider, storageChangeDelegates);
            this.UnderConstructionTypedStorage = new TypedMapStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3>("Babe.UnderConstruction", storageDataProvider, storageChangeDelegates);
            this.InitializedTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumPreDigest>>("Babe.Initialized", storageDataProvider, storageChangeDelegates);
            this.AuthorVrfRandomnessTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8>>("Babe.AuthorVrfRandomness", storageDataProvider, storageChangeDelegates);
            this.EpochStartTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>("Babe.EpochStart", storageDataProvider, storageChangeDelegates);
            this.LatenessTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Babe.Lateness", storageDataProvider, storageChangeDelegates);
            this.EpochConfigTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration>("Babe.EpochConfig", storageDataProvider, storageChangeDelegates);
            this.NextEpochConfigTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration>("Babe.NextEpochConfig", storageDataProvider, storageChangeDelegates);
            this.SkippedEpochsTypedStorage = new TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4>("Babe.SkippedEpochs", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _epochIndexTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U64> EpochIndexTypedStorage
        {
            get
            {
                return _epochIndexTypedStorage;
            }
            set
            {
                _epochIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _authoritiesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2> AuthoritiesTypedStorage
        {
            get
            {
                return _authoritiesTypedStorage;
            }
            set
            {
                _authoritiesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _genesisSlotTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot> GenesisSlotTypedStorage
        {
            get
            {
                return _genesisSlotTypedStorage;
            }
            set
            {
                _genesisSlotTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _currentSlotTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot> CurrentSlotTypedStorage
        {
            get
            {
                return _currentSlotTypedStorage;
            }
            set
            {
                _currentSlotTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _randomnessTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8> RandomnessTypedStorage
        {
            get
            {
                return _randomnessTypedStorage;
            }
            set
            {
                _randomnessTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _pendingEpochConfigChangeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumNextConfigDescriptor> PendingEpochConfigChangeTypedStorage
        {
            get
            {
                return _pendingEpochConfigChangeTypedStorage;
            }
            set
            {
                _pendingEpochConfigChangeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextRandomnessTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8> NextRandomnessTypedStorage
        {
            get
            {
                return _nextRandomnessTypedStorage;
            }
            set
            {
                _nextRandomnessTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextAuthoritiesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2> NextAuthoritiesTypedStorage
        {
            get
            {
                return _nextAuthoritiesTypedStorage;
            }
            set
            {
                _nextAuthoritiesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _segmentIndexTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> SegmentIndexTypedStorage
        {
            get
            {
                return _segmentIndexTypedStorage;
            }
            set
            {
                _segmentIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _underConstructionTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3> UnderConstructionTypedStorage
        {
            get
            {
                return _underConstructionTypedStorage;
            }
            set
            {
                _underConstructionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _initializedTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumPreDigest>> InitializedTypedStorage
        {
            get
            {
                return _initializedTypedStorage;
            }
            set
            {
                _initializedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _authorVrfRandomnessTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8>> AuthorVrfRandomnessTypedStorage
        {
            get
            {
                return _authorVrfRandomnessTypedStorage;
            }
            set
            {
                _authorVrfRandomnessTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _epochStartTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> EpochStartTypedStorage
        {
            get
            {
                return _epochStartTypedStorage;
            }
            set
            {
                _epochStartTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _latenessTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> LatenessTypedStorage
        {
            get
            {
                return _latenessTypedStorage;
            }
            set
            {
                _latenessTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _epochConfigTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration> EpochConfigTypedStorage
        {
            get
            {
                return _epochConfigTypedStorage;
            }
            set
            {
                _epochConfigTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextEpochConfigTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration> NextEpochConfigTypedStorage
        {
            get
            {
                return _nextEpochConfigTypedStorage;
            }
            set
            {
                _nextEpochConfigTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _skippedEpochsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4> SkippedEpochsTypedStorage
        {
            get
            {
                return _skippedEpochsTypedStorage;
            }
            set
            {
                _skippedEpochsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await EpochIndexTypedStorage.InitializeAsync("Babe", "EpochIndex");
            await AuthoritiesTypedStorage.InitializeAsync("Babe", "Authorities");
            await GenesisSlotTypedStorage.InitializeAsync("Babe", "GenesisSlot");
            await CurrentSlotTypedStorage.InitializeAsync("Babe", "CurrentSlot");
            await RandomnessTypedStorage.InitializeAsync("Babe", "Randomness");
            await PendingEpochConfigChangeTypedStorage.InitializeAsync("Babe", "PendingEpochConfigChange");
            await NextRandomnessTypedStorage.InitializeAsync("Babe", "NextRandomness");
            await NextAuthoritiesTypedStorage.InitializeAsync("Babe", "NextAuthorities");
            await SegmentIndexTypedStorage.InitializeAsync("Babe", "SegmentIndex");
            await UnderConstructionTypedStorage.InitializeAsync("Babe", "UnderConstruction");
            await InitializedTypedStorage.InitializeAsync("Babe", "Initialized");
            await AuthorVrfRandomnessTypedStorage.InitializeAsync("Babe", "AuthorVrfRandomness");
            await EpochStartTypedStorage.InitializeAsync("Babe", "EpochStart");
            await LatenessTypedStorage.InitializeAsync("Babe", "Lateness");
            await EpochConfigTypedStorage.InitializeAsync("Babe", "EpochConfig");
            await NextEpochConfigTypedStorage.InitializeAsync("Babe", "NextEpochConfig");
            await SkippedEpochsTypedStorage.InitializeAsync("Babe", "SkippedEpochs");
        }
        
        /// <summary>
        /// Implements any storage change for Babe.EpochIndex
        /// </summary>
        [StorageChange("Babe", "EpochIndex")]
        public void OnUpdateEpochIndex(string data)
        {
            EpochIndexTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EpochIndex
        ///  Current epoch index.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetEpochIndex()
        {
            return EpochIndexTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.Authorities
        /// </summary>
        [StorageChange("Babe", "Authorities")]
        public void OnUpdateAuthorities(string data)
        {
            AuthoritiesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Authorities
        ///  Current epoch authorities.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2 GetAuthorities()
        {
            return AuthoritiesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.GenesisSlot
        /// </summary>
        [StorageChange("Babe", "GenesisSlot")]
        public void OnUpdateGenesisSlot(string data)
        {
            GenesisSlotTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> GenesisSlot
        ///  The slot at which the first epoch actually started. This is 0
        ///  until the first block of the chain.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot GetGenesisSlot()
        {
            return GenesisSlotTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.CurrentSlot
        /// </summary>
        [StorageChange("Babe", "CurrentSlot")]
        public void OnUpdateCurrentSlot(string data)
        {
            CurrentSlotTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentSlot
        ///  Current slot number.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_slots.Slot GetCurrentSlot()
        {
            return CurrentSlotTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.Randomness
        /// </summary>
        [StorageChange("Babe", "Randomness")]
        public void OnUpdateRandomness(string data)
        {
            RandomnessTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Randomness
        ///  The epoch randomness for the *current* epoch.
        /// 
        ///  # Security
        /// 
        ///  This MUST NOT be used for gambling, as it can be influenced by a
        ///  malicious validator in the short term. It MAY be used in many
        ///  cryptographic protocols, however, so long as one remembers that this
        ///  (like everything else on-chain) it is public. For example, it can be
        ///  used where a number is needed that cannot have been chosen by an
        ///  adversary, for purposes such as public-coin zero-knowledge proofs.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetRandomness()
        {
            return RandomnessTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.PendingEpochConfigChange
        /// </summary>
        [StorageChange("Babe", "PendingEpochConfigChange")]
        public void OnUpdatePendingEpochConfigChange(string data)
        {
            PendingEpochConfigChangeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PendingEpochConfigChange
        ///  Pending epoch configuration change that will be applied when the next epoch is enacted.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumNextConfigDescriptor GetPendingEpochConfigChange()
        {
            return PendingEpochConfigChangeTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.NextRandomness
        /// </summary>
        [StorageChange("Babe", "NextRandomness")]
        public void OnUpdateNextRandomness(string data)
        {
            NextRandomnessTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextRandomness
        ///  Next epoch randomness.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8 GetNextRandomness()
        {
            return NextRandomnessTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.NextAuthorities
        /// </summary>
        [StorageChange("Babe", "NextAuthorities")]
        public void OnUpdateNextAuthorities(string data)
        {
            NextAuthoritiesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextAuthorities
        ///  Next epoch authorities.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.weak_bounded_vec.WeakBoundedVecT2 GetNextAuthorities()
        {
            return NextAuthoritiesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.SegmentIndex
        /// </summary>
        [StorageChange("Babe", "SegmentIndex")]
        public void OnUpdateSegmentIndex(string data)
        {
            SegmentIndexTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SegmentIndex
        ///  Randomness under construction.
        /// 
        ///  We make a trade-off between storage accesses and list length.
        ///  We store the under-construction randomness in segments of up to
        ///  `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
        /// 
        ///  Once a segment reaches this length, we begin the next one.
        ///  We reset all segments and return to `0` at the beginning of every
        ///  epoch.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetSegmentIndex()
        {
            return SegmentIndexTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.UnderConstruction
        /// </summary>
        [StorageChange("Babe", "UnderConstruction")]
        public void OnUpdateUnderConstruction(string key, string data)
        {
            UnderConstructionTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> UnderConstruction
        ///  TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3 GetUnderConstruction(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (UnderConstructionTypedStorage.Dictionary.TryGetValue(key, out Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Babe.Initialized
        /// </summary>
        [StorageChange("Babe", "Initialized")]
        public void OnUpdateInitialized(string data)
        {
            InitializedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Initialized
        ///  Temporary value (cleared at block finalization) which is `Some`
        ///  if per-block initialization has already been called for current block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.digests.EnumPreDigest> GetInitialized()
        {
            return InitializedTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.AuthorVrfRandomness
        /// </summary>
        [StorageChange("Babe", "AuthorVrfRandomness")]
        public void OnUpdateAuthorVrfRandomness(string data)
        {
            AuthorVrfRandomnessTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> AuthorVrfRandomness
        ///  This field should always be populated during block processing unless
        ///  secondary plain slots are enabled (which don't contain a VRF output).
        /// 
        ///  It is set in `on_finalize`, before it will contain the value from the last block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Types.Base.Arr32U8> GetAuthorVrfRandomness()
        {
            return AuthorVrfRandomnessTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.EpochStart
        /// </summary>
        [StorageChange("Babe", "EpochStart")]
        public void OnUpdateEpochStart(string data)
        {
            EpochStartTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EpochStart
        ///  The block numbers when the last and current epoch have started, respectively `N-1` and
        ///  `N`.
        ///  NOTE: We track this is in order to annotate the block number when a given pool of
        ///  entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
        ///  slots, which may be skipped, the block numbers may not line up with the slot numbers.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetEpochStart()
        {
            return EpochStartTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.Lateness
        /// </summary>
        [StorageChange("Babe", "Lateness")]
        public void OnUpdateLateness(string data)
        {
            LatenessTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Lateness
        ///  How late the current block is compared to its parent.
        /// 
        ///  This entry is populated as part of block execution and is cleaned up
        ///  on block finalization. Querying this storage entry outside of block
        ///  execution context should always yield zero.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetLateness()
        {
            return LatenessTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.EpochConfig
        /// </summary>
        [StorageChange("Babe", "EpochConfig")]
        public void OnUpdateEpochConfig(string data)
        {
            EpochConfigTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> EpochConfig
        ///  The configuration for the current epoch. Should never be `None` as it is initialized in
        ///  genesis.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration GetEpochConfig()
        {
            return EpochConfigTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.NextEpochConfig
        /// </summary>
        [StorageChange("Babe", "NextEpochConfig")]
        public void OnUpdateNextEpochConfig(string data)
        {
            NextEpochConfigTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextEpochConfig
        ///  The configuration for the next epoch, `None` if the config will not change
        ///  (you can fallback to `EpochConfig` instead in that case).
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_consensus_babe.BabeEpochConfiguration GetNextEpochConfig()
        {
            return NextEpochConfigTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Babe.SkippedEpochs
        /// </summary>
        [StorageChange("Babe", "SkippedEpochs")]
        public void OnUpdateSkippedEpochs(string data)
        {
            SkippedEpochsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SkippedEpochs
        ///  A list of the last 100 skipped epochs and the corresponding session index
        ///  when the epoch was skipped.
        /// 
        ///  This is only used for validating equivocation proofs. An equivocation proof
        ///  must contains a key-ownership proof for a given session, therefore we need a
        ///  way to tie together sessions and epoch indices, i.e. we need to validate that
        ///  a validator was the owner of a given key on a given session, and what the
        ///  active epoch index was during that session.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT4 GetSkippedEpochs()
        {
            return SkippedEpochsTypedStorage.Get();
        }
    }
}
