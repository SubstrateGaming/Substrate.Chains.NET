//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Vara.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IOffencesStorage interface definition.
    /// </summary>
    public interface IOffencesStorage : IStorage
    {
        
        /// <summary>
        /// >> Reports
        ///  The primary structure that holds all offence records keyed by report identifiers.
        /// </summary>
        Substrate.Vara.NET.NetApiExt.Generated.Model.sp_staking.offence.OffenceDetails GetReports(string key);
        
        /// <summary>
        /// >> ConcurrentReportsIndex
        ///  A vector of reports of the same kind that happened at the same time slot.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Vara.NET.NetApiExt.Generated.Model.primitive_types.H256> GetConcurrentReportsIndex(string key);
    }
    
    /// <summary>
    /// OffencesStorage class definition.
    /// </summary>
    public sealed class OffencesStorage : IOffencesStorage
    {
        
        /// <summary>
        /// _reportsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_staking.offence.OffenceDetails> _reportsTypedStorage;
        
        /// <summary>
        /// _concurrentReportsIndexTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Vara.NET.NetApiExt.Generated.Model.primitive_types.H256>> _concurrentReportsIndexTypedStorage;
        
        /// <summary>
        /// OffencesStorage constructor.
        /// </summary>
        public OffencesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ReportsTypedStorage = new TypedMapStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_staking.offence.OffenceDetails>("Offences.Reports", storageDataProvider, storageChangeDelegates);
            this.ConcurrentReportsIndexTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Vara.NET.NetApiExt.Generated.Model.primitive_types.H256>>("Offences.ConcurrentReportsIndex", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _reportsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Vara.NET.NetApiExt.Generated.Model.sp_staking.offence.OffenceDetails> ReportsTypedStorage
        {
            get
            {
                return _reportsTypedStorage;
            }
            set
            {
                _reportsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _concurrentReportsIndexTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Vara.NET.NetApiExt.Generated.Model.primitive_types.H256>> ConcurrentReportsIndexTypedStorage
        {
            get
            {
                return _concurrentReportsIndexTypedStorage;
            }
            set
            {
                _concurrentReportsIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ReportsTypedStorage.InitializeAsync("Offences", "Reports");
            await ConcurrentReportsIndexTypedStorage.InitializeAsync("Offences", "ConcurrentReportsIndex");
        }
        
        /// <summary>
        /// Implements any storage change for Offences.Reports
        /// </summary>
        [StorageChange("Offences", "Reports")]
        public void OnUpdateReports(string key, string data)
        {
            ReportsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Reports
        ///  The primary structure that holds all offence records keyed by report identifiers.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.sp_staking.offence.OffenceDetails GetReports(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReportsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Vara.NET.NetApiExt.Generated.Model.sp_staking.offence.OffenceDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Offences.ConcurrentReportsIndex
        /// </summary>
        [StorageChange("Offences", "ConcurrentReportsIndex")]
        public void OnUpdateConcurrentReportsIndex(string key, string data)
        {
            ConcurrentReportsIndexTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ConcurrentReportsIndex
        ///  A vector of reports of the same kind that happened at the same time slot.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Vara.NET.NetApiExt.Generated.Model.primitive_types.H256> GetConcurrentReportsIndex(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ConcurrentReportsIndexTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Vara.NET.NetApiExt.Generated.Model.primitive_types.H256> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
