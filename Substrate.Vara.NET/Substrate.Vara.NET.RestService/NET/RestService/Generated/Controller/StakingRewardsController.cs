//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.Vara.NET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Vara.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// StakingRewardsController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class StakingRewardsController : ControllerBase
    {
        
        private IStakingRewardsStorage _stakingRewardsStorage;
        
        /// <summary>
        /// StakingRewardsController constructor.
        /// </summary>
        public StakingRewardsController(IStakingRewardsStorage stakingRewardsStorage)
        {
            _stakingRewardsStorage = stakingRewardsStorage;
        }
        
        /// <summary>
        /// >> TargetInflation
        ///  Target inflation (at ideal stake)
        /// </summary>
        [HttpGet("TargetInflation")]
        [ProducesResponseType(typeof(Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill), 200)]
        [StorageKeyBuilder(typeof(Substrate.Vara.NET.NetApiExt.Generated.Storage.StakingRewardsStorage), "TargetInflationParams")]
        public IActionResult GetTargetInflation()
        {
            return this.Ok(_stakingRewardsStorage.GetTargetInflation());
        }
        
        /// <summary>
        /// >> IdealStakingRatio
        ///  Ideal staking ratio
        /// </summary>
        [HttpGet("IdealStakingRatio")]
        [ProducesResponseType(typeof(Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill), 200)]
        [StorageKeyBuilder(typeof(Substrate.Vara.NET.NetApiExt.Generated.Storage.StakingRewardsStorage), "IdealStakingRatioParams")]
        public IActionResult GetIdealStakingRatio()
        {
            return this.Ok(_stakingRewardsStorage.GetIdealStakingRatio());
        }
        
        /// <summary>
        /// >> NonStakeableShare
        ///  The current share of issued tokens that cannot be staked (e.g. being vested)
        ///  This value is guaranteed to remain unchanged for the first year until vesting kicks in.
        ///  Subsequently, the non-stakeable share should be calculated based on the vesting balances.
        /// </summary>
        [HttpGet("NonStakeableShare")]
        [ProducesResponseType(typeof(Substrate.Vara.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill), 200)]
        [StorageKeyBuilder(typeof(Substrate.Vara.NET.NetApiExt.Generated.Storage.StakingRewardsStorage), "NonStakeableShareParams")]
        public IActionResult GetNonStakeableShare()
        {
            return this.Ok(_stakingRewardsStorage.GetNonStakeableShare());
        }
        
        /// <summary>
        /// >> FilteredAccounts
        ///  List of accounts whose locked balance (due to incomplete vesting) should be excluded from
        ///  the total stakeable quantity.
        ///  During the 1st year the non-stakeable amount is accounted for as a fixed fraction of TTS.
        /// </summary>
        [HttpGet("FilteredAccounts")]
        [ProducesResponseType(typeof(Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT6), 200)]
        [StorageKeyBuilder(typeof(Substrate.Vara.NET.NetApiExt.Generated.Storage.StakingRewardsStorage), "FilteredAccountsParams")]
        public IActionResult GetFilteredAccounts()
        {
            return this.Ok(_stakingRewardsStorage.GetFilteredAccounts());
        }
    }
}
