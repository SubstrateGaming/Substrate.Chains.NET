//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.Base;
using System.Collections.Generic;


namespace Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_nfts.types
{
    
    
    /// <summary>
    /// >> 405 - Composite[pallet_nfts.types.CollectionDetails]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class CollectionDetails : BaseType
    {
        
        /// <summary>
        /// >> owner
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 Owner { get; set; }
        /// <summary>
        /// >> owner_deposit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 OwnerDeposit { get; set; }
        /// <summary>
        /// >> items
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Items { get; set; }
        /// <summary>
        /// >> minted_items
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MintedItems { get; set; }
        /// <summary>
        /// >> highest_item_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> HighestItemId { get; set; }
        /// <summary>
        /// >> item_metadatas
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ItemMetadatas { get; set; }
        /// <summary>
        /// >> item_configs
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ItemConfigs { get; set; }
        /// <summary>
        /// >> attributes
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 Attributes { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "CollectionDetails";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Owner.Encode());
            result.AddRange(OwnerDeposit.Encode());
            result.AddRange(Items.Encode());
            result.AddRange(MintedItems.Encode());
            result.AddRange(HighestItemId.Encode());
            result.AddRange(ItemMetadatas.Encode());
            result.AddRange(ItemConfigs.Encode());
            result.AddRange(Attributes.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Owner = new Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20();
            Owner.Decode(byteArray, ref p);
            OwnerDeposit = new Substrate.NetApi.Model.Types.Primitive.U128();
            OwnerDeposit.Decode(byteArray, ref p);
            Items = new Substrate.NetApi.Model.Types.Primitive.U128();
            Items.Decode(byteArray, ref p);
            MintedItems = new Substrate.NetApi.Model.Types.Primitive.U128();
            MintedItems.Decode(byteArray, ref p);
            HighestItemId = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            HighestItemId.Decode(byteArray, ref p);
            ItemMetadatas = new Substrate.NetApi.Model.Types.Primitive.U128();
            ItemMetadatas.Decode(byteArray, ref p);
            ItemConfigs = new Substrate.NetApi.Model.Types.Primitive.U128();
            ItemConfigs.Decode(byteArray, ref p);
            Attributes = new Substrate.NetApi.Model.Types.Primitive.U32();
            Attributes.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
