//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> force_set_collection
        /// Sets the Dmarket collection.
        /// 
        /// Only the root origin can execute this function.
        /// 
        /// Precondition:
        /// - The collection must already exist, otherwise the extrinsic will fail.
        /// 
        /// Parameters:
        /// - `collection_id`: The collectionID of the NFT collection to be set as the Dmarket Collection.
        /// 
        /// 
        /// Emits CollectionUpdated when successful.
        /// 
        /// Weight: `WeightInfo::force_set_collection` (defined in the `Config` trait).
        /// </summary>
        force_set_collection = 0,
        
        /// <summary>
        /// >> execute_trade
        /// Execute a trade between a seller and a buyer for a specific NFT (item) in the configured DmarketCollection.
        /// 
        /// Preconditions:
        /// - The seller and buyer must be different accounts.
        /// - The seller must be the current owner of the NFT item.
        /// - The trade must not be expired, and signatures provided must be valid.
        /// 
        /// Parameters:
        /// - `origin`: The origin of the call, which must be part of the signed message of both seller and buyer.
        /// - `seller`: The account ID of the seller who owns the NFT item.
        /// - `buyer`: The account ID of the buyer who will purchase the NFT item.
        /// - `trade`: The parameters of the trade, including item details, prices, and expiration times.
        /// - `signatures`: The signatures from both the seller and buyer authorizing the trade.
        /// - `fee_address`: The account ID where the transaction fee will be transferred.
        /// 
        /// Signed message schema:
        /// - Ask: (domain, sender, fee_address, item, price, expiration).
        /// - Bid: (domain, sender, fee_address, item, price, fee, expiration).
        /// 
        /// Only callable if origin matches `sender` in both Ask and Bid signed messages.
        /// 
        /// Emits `Trade` event upon successful execution.
        /// 
        /// Weight: `WeightInfo::execute_trade` (defined in the `Config` trait).
        /// </summary>
        execute_trade = 1,
    }
    
    /// <summary>
    /// >> 353 - Variant[pallet_dmarket.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256>(Call.force_set_collection);
				AddTypeDecoder<BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.TradeParams, Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.TradeSignatures, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>>(Call.execute_trade);
        }
    }
}
