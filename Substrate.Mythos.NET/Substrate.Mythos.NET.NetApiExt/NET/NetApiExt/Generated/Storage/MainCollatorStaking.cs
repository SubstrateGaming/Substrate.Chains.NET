//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> CollatorStakingStorage
    /// </summary>
    public sealed class CollatorStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CollatorStakingStorage Constructor
        /// </summary>
        public CollatorStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "Invulnerables"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "Candidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "CounterForCandidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "SessionRemovedCandidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "LastAuthoredBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "DesiredCandidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "MinCandidacyBond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "MinStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "CandidateStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "UserStake"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "ReleaseQueues"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "CollatorRewardPercentage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "ExtraReward"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "TotalBlocks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "ProducedBlocks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "CurrentSession"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "ClaimableRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "PerSessionRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "CounterForPerSessionRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "AutoCompound"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CollatorStaking", "CandidacyBondReleases"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease)));
        }
        
        /// <summary>
        /// >> InvulnerablesParams
        ///  The invulnerable, permissioned collators. This list must be sorted.
        /// </summary>
        public static string InvulnerablesParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "Invulnerables", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> InvulnerablesDefault
        /// Default value as hex string
        /// </summary>
        public static string InvulnerablesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Invulnerables
        ///  The invulnerable, permissioned collators. This list must be sorted.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27> Invulnerables(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.InvulnerablesParams();
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidatesParams
        ///  The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be
        ///  mutually exclusive.
        /// 
        ///  This list is sorted in ascending order by total stake and when the stake amounts are equal, the least
        ///  recently updated is considered greater.
        /// </summary>
        public static string CandidatesParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "Candidates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Candidates
        ///  The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be
        ///  mutually exclusive.
        /// 
        ///  This list is sorted in ascending order by total stake and when the stake amounts are equal, the least
        ///  recently updated is considered greater.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo> Candidates(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.CandidatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForCandidatesParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForCandidatesParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "CounterForCandidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForCandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForCandidatesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForCandidates
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForCandidates(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.CounterForCandidatesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SessionRemovedCandidatesParams
        ///  Map of Candidates that have been removed in the current session.
        /// </summary>
        public static string SessionRemovedCandidatesParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "SessionRemovedCandidates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SessionRemovedCandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string SessionRemovedCandidatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SessionRemovedCandidates
        ///  Map of Candidates that have been removed in the current session.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo> SessionRemovedCandidates(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.SessionRemovedCandidatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastAuthoredBlockParams
        ///  Last block authored by a collator.
        /// </summary>
        public static string LastAuthoredBlockParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "LastAuthoredBlock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LastAuthoredBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string LastAuthoredBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> LastAuthoredBlock
        ///  Last block authored by a collator.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastAuthoredBlock(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.LastAuthoredBlockParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DesiredCandidatesParams
        ///  Desired number of candidates.
        /// 
        ///  This should always be less than [`Config::MaxCandidates`] for weights to be correct.
        /// </summary>
        public static string DesiredCandidatesParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "DesiredCandidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DesiredCandidatesDefault
        /// Default value as hex string
        /// </summary>
        public static string DesiredCandidatesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> DesiredCandidates
        ///  Desired number of candidates.
        /// 
        ///  This should always be less than [`Config::MaxCandidates`] for weights to be correct.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> DesiredCandidates(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.DesiredCandidatesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinCandidacyBondParams
        ///  Minimum amount to become a collator.
        /// </summary>
        public static string MinCandidacyBondParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "MinCandidacyBond", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinCandidacyBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MinCandidacyBondDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinCandidacyBond
        ///  Minimum amount to become a collator.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinCandidacyBond(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.MinCandidacyBondParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinStakeParams
        ///  Minimum amount a user can stake.
        /// </summary>
        public static string MinStakeParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "MinStake", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string MinStakeDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinStake
        ///  Minimum amount a user can stake.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinStake(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.MinStakeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidateStakeParams
        ///  Amount staked by users per candidate.
        /// 
        ///  First key is the candidate, and second one is the staker.
        /// </summary>
        public static string CandidateStakeParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "CandidateStake", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> CandidateStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidateStakeDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> CandidateStake
        ///  Amount staked by users per candidate.
        /// 
        ///  First key is the candidate, and second one is the staker.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo> CandidateStake(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.CandidateStakeParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UserStakeParams
        ///  Number of candidates staked on by a user.
        /// 
        ///  Cannot be higher than `MaxStakedCandidates`.
        /// </summary>
        public static string UserStakeParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "UserStake", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UserStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string UserStakeDefault()
        {
            return "0x00000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> UserStake
        ///  Number of candidates staked on by a user.
        /// 
        ///  Cannot be higher than `MaxStakedCandidates`.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo> UserStake(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.UserStakeParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReleaseQueuesParams
        ///  Release requests for an account.
        /// 
        ///  They can be actually released by calling the [`release`] extrinsic, after the relevant delay.
        /// </summary>
        public static string ReleaseQueuesParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "ReleaseQueues", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReleaseQueuesDefault
        /// Default value as hex string
        /// </summary>
        public static string ReleaseQueuesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReleaseQueues
        ///  Release requests for an account.
        /// 
        ///  They can be actually released by calling the [`release`] extrinsic, after the relevant delay.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28> ReleaseQueues(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.ReleaseQueuesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollatorRewardPercentageParams
        ///  Percentage of rewards that would go for collators.
        /// </summary>
        public static string CollatorRewardPercentageParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "CollatorRewardPercentage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CollatorRewardPercentageDefault
        /// Default value as hex string
        /// </summary>
        public static string CollatorRewardPercentageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CollatorRewardPercentage
        ///  Percentage of rewards that would go for collators.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> CollatorRewardPercentage(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.CollatorRewardPercentageParams();
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExtraRewardParams
        ///  Per-block extra reward.
        /// </summary>
        public static string ExtraRewardParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "ExtraReward", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ExtraRewardDefault
        /// Default value as hex string
        /// </summary>
        public static string ExtraRewardDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ExtraReward
        ///  Per-block extra reward.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ExtraReward(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.ExtraRewardParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TotalBlocksParams
        ///  Blocks produced in the current session. First value is the total,
        ///  and second is blocks produced by candidates only (not invulnerables).
        /// </summary>
        public static string TotalBlocksParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "TotalBlocks", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalBlocksDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalBlocksDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> TotalBlocks
        ///  Blocks produced in the current session. First value is the total,
        ///  and second is blocks produced by candidates only (not invulnerables).
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> TotalBlocks(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.TotalBlocksParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProducedBlocksParams
        ///  Mapping of blocks and their authors.
        /// </summary>
        public static string ProducedBlocksParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "ProducedBlocks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProducedBlocksDefault
        /// Default value as hex string
        /// </summary>
        public static string ProducedBlocksDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ProducedBlocks
        ///  Mapping of blocks and their authors.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ProducedBlocks(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.ProducedBlocksParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentSessionParams
        ///  Current session index.
        /// </summary>
        public static string CurrentSessionParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "CurrentSession", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentSessionDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentSessionDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentSession
        ///  Current session index.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentSession(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.CurrentSessionParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClaimableRewardsParams
        ///  Claimable rewards.
        /// </summary>
        public static string ClaimableRewardsParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "ClaimableRewards", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ClaimableRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string ClaimableRewardsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ClaimableRewards
        ///  Claimable rewards.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ClaimableRewards(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.ClaimableRewardsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PerSessionRewardsParams
        ///  Per-session rewards.
        /// </summary>
        public static string PerSessionRewardsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "PerSessionRewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PerSessionRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string PerSessionRewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PerSessionRewards
        ///  Per-session rewards.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo> PerSessionRewards(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.PerSessionRewardsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForPerSessionRewardsParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForPerSessionRewardsParams()
        {
            return RequestGenerator.GetStorage("CollatorStaking", "CounterForPerSessionRewards", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForPerSessionRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForPerSessionRewardsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForPerSessionRewards
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForPerSessionRewards(string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.CounterForPerSessionRewardsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AutoCompoundParams
        ///  Percentage of reward to be re-invested in collators.
        /// </summary>
        public static string AutoCompoundParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "AutoCompound", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AutoCompoundDefault
        /// Default value as hex string
        /// </summary>
        public static string AutoCompoundDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AutoCompound
        ///  Percentage of reward to be re-invested in collators.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> AutoCompound(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.AutoCompoundParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CandidacyBondReleasesParams
        ///  Time (in blocks) to release an ex-candidate's locked candidacy bond.
        ///  If a candidate leaves the candidacy before its bond is released, the waiting period
        ///  will restart.
        /// </summary>
        public static string CandidacyBondReleasesParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key)
        {
            return RequestGenerator.GetStorage("CollatorStaking", "CandidacyBondReleases", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CandidacyBondReleasesDefault
        /// Default value as hex string
        /// </summary>
        public static string CandidacyBondReleasesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CandidacyBondReleases
        ///  Time (in blocks) to release an ex-candidate's locked candidacy bond.
        ///  If a candidate leaves the candidacy before its bond is released, the waiting period
        ///  will restart.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease> CandidacyBondReleases(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 key, string blockhash, CancellationToken token)
        {
            string parameters = CollatorStakingStorage.CandidacyBondReleasesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CollatorStakingCalls
    /// </summary>
    public sealed class CollatorStakingCalls
    {
        
        /// <summary>
        /// >> set_invulnerables
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetInvulnerables(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> @new)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@new.Encode());
            return new Method(21, "CollatorStaking", 0, "set_invulnerables", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_desired_candidates
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetDesiredCandidates(Substrate.NetApi.Model.Types.Primitive.U32 max)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(max.Encode());
            return new Method(21, "CollatorStaking", 1, "set_desired_candidates", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_min_candidacy_bond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinCandidacyBond(Substrate.NetApi.Model.Types.Primitive.U128 bond)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bond.Encode());
            return new Method(21, "CollatorStaking", 2, "set_min_candidacy_bond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_as_candidate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterAsCandidate(Substrate.NetApi.Model.Types.Primitive.U128 bond)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bond.Encode());
            return new Method(21, "CollatorStaking", 3, "register_as_candidate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> leave_intent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method LeaveIntent()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "CollatorStaking", 4, "leave_intent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_invulnerable
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddInvulnerable(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            return new Method(21, "CollatorStaking", 5, "add_invulnerable", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_invulnerable
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveInvulnerable(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            return new Method(21, "CollatorStaking", 6, "remove_invulnerable", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> stake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Stake(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 targets)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(targets.Encode());
            return new Method(21, "CollatorStaking", 7, "stake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unstake_from
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnstakeFrom(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(21, "CollatorStaking", 8, "unstake_from", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unstake_all
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnstakeAll()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "CollatorStaking", 9, "unstake_all", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> release
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Release()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "CollatorStaking", 10, "release", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_autocompound_percentage
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetAutocompoundPercentage(Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent percent)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(percent.Encode());
            return new Method(21, "CollatorStaking", 11, "set_autocompound_percentage", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collator_reward_percentage
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCollatorRewardPercentage(Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent percent)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(percent.Encode());
            return new Method(21, "CollatorStaking", 12, "set_collator_reward_percentage", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_extra_reward
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExtraReward(Substrate.NetApi.Model.Types.Primitive.U128 extra_reward)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(extra_reward.Encode());
            return new Method(21, "CollatorStaking", 13, "set_extra_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimum_stake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMinimumStake(Substrate.NetApi.Model.Types.Primitive.U128 new_min_stake)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_min_stake.Encode());
            return new Method(21, "CollatorStaking", 14, "set_minimum_stake", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> stop_extra_reward
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StopExtraReward()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "CollatorStaking", 15, "stop_extra_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> top_up_extra_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TopUpExtraRewards(Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            return new Method(21, "CollatorStaking", 16, "top_up_extra_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> lock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Lock(Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            return new Method(21, "CollatorStaking", 17, "lock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unlock(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> maybe_amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_amount.Encode());
            return new Method(21, "CollatorStaking", 18, "unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_candidacy_bond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateCandidacyBond(Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            return new Method(21, "CollatorStaking", 19, "update_candidacy_bond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "CollatorStaking", 20, "claim_rewards", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CollatorStakingConstants
    /// </summary>
    public sealed class CollatorStakingConstants
    {
        
        /// <summary>
        /// >> PotId
        ///  Account Identifier from which the internal pot is generated.
        /// 
        ///  To initiate rewards, an ED needs to be transferred to the pot address.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.frame_support.PalletId PotId()
        {
            var result = new Substrate.Mythos.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x506F745374616B65");
            return result;
        }
        
        /// <summary>
        /// >> ExtraRewardPotId
        ///  Account Identifier from which the extra reward pot is generated.
        /// 
        ///  To initiate extra rewards the [`set_extra_reward`] extrinsic must be called;
        ///  and this pot should be funded using [`top_up_extra_rewards`] extrinsic.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.frame_support.PalletId ExtraRewardPotId()
        {
            var result = new Substrate.Mythos.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x4578747261506F74");
            return result;
        }
        
        /// <summary>
        /// >> ExtraRewardReceiver
        ///  Determines what to do with funds in the extra rewards pot when stopping these rewards.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> ExtraRewardReceiver()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>();
            result.Create("0x016D6F646C70792F74727372790000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxCandidates
        ///  Maximum number of candidates that we should have.
        /// 
        ///  This does not take into account the invulnerables.
        ///  This must be more than or equal to `DesiredCandidates`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxCandidates()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0F000000");
            return result;
        }
        
        /// <summary>
        /// >> MinEligibleCollators
        ///  Minimum number eligible collators including Invulnerables.
        ///  Should always be greater than zero. This ensures that there will always be
        ///  one collator who can produce blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinEligibleCollators()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxInvulnerables
        ///  Maximum number of invulnerables.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxInvulnerables()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x04000000");
            return result;
        }
        
        /// <summary>
        /// >> KickThreshold
        ///  Candidates will be  removed from active collator set, if block is not produced within this threshold.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 KickThreshold()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80700000");
            return result;
        }
        
        /// <summary>
        /// >> MaxStakedCandidates
        ///  Maximum candidates a staker can stake on.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxStakedCandidates()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x03000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxStakers
        ///  Maximum stakers per candidate.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxStakers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x400D0300");
            return result;
        }
        
        /// <summary>
        /// >> BondUnlockDelay
        ///  Number of blocks to wait before returning the bond by a candidate.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BondUnlockDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> StakeUnlockDelay
        ///  Number of blocks to wait before returning the locked funds by a user.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StakeUnlockDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> RestakeUnlockDelay
        ///  Number of blocks to wait before reusing funds previously assigned to a collator.
        ///  It should be set to at least one session.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 RestakeUnlockDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40380000");
            return result;
        }
        
        /// <summary>
        /// >> MaxRewardSessions
        ///  Maximum number of rewards to keep in storage. Non-claimed rewards will not be claimable
        ///  after they have been removed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxRewardSessions()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x6D010000");
            return result;
        }
        
        /// <summary>
        /// >> AutoCompoundingThreshold
        ///  Minimum stake needed to enable autocompounding.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 AutoCompoundingThreshold()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x000090AC6E3278868700000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> CollatorStakingErrors
    /// </summary>
    public enum CollatorStakingErrors
    {
        
        /// <summary>
        /// >> TooManyCandidates
        /// The pallet has too many candidates.
        /// </summary>
        TooManyCandidates,
        
        /// <summary>
        /// >> TooFewEligibleCollators
        /// Leaving would result in too few candidates.
        /// </summary>
        TooFewEligibleCollators,
        
        /// <summary>
        /// >> AlreadyCandidate
        /// Account is already a candidate.
        /// </summary>
        AlreadyCandidate,
        
        /// <summary>
        /// >> NotCandidate
        /// Account is not a candidate.
        /// </summary>
        NotCandidate,
        
        /// <summary>
        /// >> TooManyInvulnerables
        /// There are too many Invulnerables.
        /// </summary>
        TooManyInvulnerables,
        
        /// <summary>
        /// >> DuplicatedInvulnerables
        /// At least one of the invulnerables is duplicated
        /// </summary>
        DuplicatedInvulnerables,
        
        /// <summary>
        /// >> AlreadyInvulnerable
        /// Account is already an Invulnerable.
        /// </summary>
        AlreadyInvulnerable,
        
        /// <summary>
        /// >> NotInvulnerable
        /// Account is not an Invulnerable.
        /// </summary>
        NotInvulnerable,
        
        /// <summary>
        /// >> NoAssociatedCollatorId
        /// Account has no associated validator ID.
        /// </summary>
        NoAssociatedCollatorId,
        
        /// <summary>
        /// >> CollatorNotRegistered
        /// Collator ID is not yet registered.
        /// </summary>
        CollatorNotRegistered,
        
        /// <summary>
        /// >> InsufficientStake
        /// Amount not sufficient to be staked.
        /// </summary>
        InsufficientStake,
        
        /// <summary>
        /// >> TooManyDesiredCandidates
        /// DesiredCandidates is out of bounds.
        /// </summary>
        TooManyDesiredCandidates,
        
        /// <summary>
        /// >> TooManyReleaseRequests
        /// Too many unstaking requests. Claim some of them first.
        /// </summary>
        TooManyReleaseRequests,
        
        /// <summary>
        /// >> InvalidMinStake
        /// Invalid value for MinStake. It must be lower than or equal to `MinStake`.
        /// </summary>
        InvalidMinStake,
        
        /// <summary>
        /// >> InvalidCandidacyBond
        /// Invalid value for CandidacyBond. It must be higher than or equal to `MinCandidacyBond`.
        /// </summary>
        InvalidCandidacyBond,
        
        /// <summary>
        /// >> TooManyStakedCandidates
        /// Number of staked candidates is greater than `MaxStakedCandidates`.
        /// </summary>
        TooManyStakedCandidates,
        
        /// <summary>
        /// >> InvalidExtraReward
        /// Extra reward cannot be zero.
        /// </summary>
        InvalidExtraReward,
        
        /// <summary>
        /// >> ExtraRewardAlreadyDisabled
        /// Extra rewards are already zero.
        /// </summary>
        ExtraRewardAlreadyDisabled,
        
        /// <summary>
        /// >> InvalidFundingAmount
        /// The amount to fund the extra reward pot must be greater than zero.
        /// </summary>
        InvalidFundingAmount,
        
        /// <summary>
        /// >> TooManyStakers
        /// Cannot add more stakers to a given candidate.
        /// </summary>
        TooManyStakers,
        
        /// <summary>
        /// >> InsufficientFreeBalance
        /// The user does not have enough balance to be locked for staking.
        /// </summary>
        InsufficientFreeBalance,
        
        /// <summary>
        /// >> InsufficientLockedBalance
        /// The user does not have enough locked balance to stake.
        /// </summary>
        InsufficientLockedBalance,
        
        /// <summary>
        /// >> CannotUnlock
        /// Cannot unlock such amount.
        /// </summary>
        CannotUnlock,
        
        /// <summary>
        /// >> TooFewCandidates
        /// User must stake at least on one candidate.
        /// </summary>
        TooFewCandidates,
        
        /// <summary>
        /// >> PreviousRewardsNotClaimed
        /// Rewards from previous sessions have not yet been claimed.
        /// </summary>
        PreviousRewardsNotClaimed,
        
        /// <summary>
        /// >> NoStakeOnCandidate
        /// User has not Staked on the given Candidate.
        /// </summary>
        NoStakeOnCandidate,
        
        /// <summary>
        /// >> NoPendingClaim
        /// No rewards to claim as previous claim happened on the same session.
        /// </summary>
        NoPendingClaim,
        
        /// <summary>
        /// >> NotRemovedCandidate
        /// Candidate has not been removed in the current session.
        /// </summary>
        NotRemovedCandidate,
    }
}
