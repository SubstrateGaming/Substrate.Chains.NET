//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> EscrowStorage
    /// </summary>
    public sealed class EscrowStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EscrowStorage Constructor
        /// </summary>
        public EscrowStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Escrow", "Deposits"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> DepositsParams
        /// </summary>
        public static string DepositsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> key)
        {
            return RequestGenerator.GetStorage("Escrow", "Deposits", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DepositsDefault
        /// Default value as hex string
        /// </summary>
        public static string DepositsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Deposits
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Deposits(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> key, string blockhash, CancellationToken token)
        {
            string parameters = EscrowStorage.DepositsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EscrowCalls
    /// </summary>
    public sealed class EscrowCalls
    {
        
        /// <summary>
        /// >> deposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Deposit(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 address, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 authorised_agent)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(address.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(authorised_agent.Encode());
            return new Method(50, "Escrow", 0, "deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> release
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Release(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 address, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(address.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(50, "Escrow", 1, "release", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> revoke
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Revoke(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 address, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 destination, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> reason)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(address.Encode());
            byteArray.AddRange(destination.Encode());
            byteArray.AddRange(reason.Encode());
            return new Method(50, "Escrow", 2, "revoke", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_release
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceRelease(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 address, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 agent, Substrate.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(address.Encode());
            byteArray.AddRange(agent.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(50, "Escrow", 3, "force_release", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EscrowConstants
    /// </summary>
    public sealed class EscrowConstants
    {
        
        /// <summary>
        /// >> MinDeposit
        ///  The minimum deposit value allowed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000C16FF28623000000000000000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> EscrowErrors
    /// </summary>
    public enum EscrowErrors
    {
        
        /// <summary>
        /// >> InsufficientBalance
        /// When trying to release more funds than are on deposit.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> DepositTooLow
        /// When the deposit value is less then configured value.
        /// </summary>
        DepositTooLow,
        
        /// <summary>
        /// >> NoSuchDeposit
        /// When trying to release or revoke a deposit that does not exist.
        /// </summary>
        NoSuchDeposit,
        
        /// <summary>
        /// >> BalanceTooLow
        /// When the account balance is below the existential deposit before depositing.
        /// </summary>
        BalanceTooLow,
    }
}
