//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> MultibatchingStorage
    /// </summary>
    public sealed class MultibatchingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MultibatchingStorage Constructor
        /// </summary>
        public MultibatchingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Multibatching", "Applied"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> AppliedParams
        /// </summary>
        public static string AppliedParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Multibatching", "Applied", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AppliedDefault
        /// Default value as hex string
        /// </summary>
        public static string AppliedDefault()
        {
            return "0x";
        }
        
        /// <summary>
        /// >> Applied
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> Applied(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = MultibatchingStorage.AppliedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MultibatchingCalls
    /// </summary>
    public sealed class MultibatchingCalls
    {
        
        /// <summary>
        /// >> batch
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Batch(Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr8U8 domain, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 sender, Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr32U8 bias, Substrate.NetApi.Model.Types.Primitive.U64 expires_at, Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8 calls, Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 approvals)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(domain.Encode());
            byteArray.AddRange(sender.Encode());
            byteArray.AddRange(bias.Encode());
            byteArray.AddRange(expires_at.Encode());
            byteArray.AddRange(calls.Encode());
            byteArray.AddRange(approvals.Encode());
            return new Method(14, "Multibatching", 0, "batch", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> batch_v2
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BatchV2(Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr8U8 domain, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 sender, Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr32U8 bias, Substrate.NetApi.Model.Types.Primitive.U64 expires_at, Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT8 calls, Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT9 approvals)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(domain.Encode());
            byteArray.AddRange(sender.Encode());
            byteArray.AddRange(bias.Encode());
            byteArray.AddRange(expires_at.Encode());
            byteArray.AddRange(calls.Encode());
            byteArray.AddRange(approvals.Encode());
            return new Method(14, "Multibatching", 1, "batch_v2", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> MultibatchingConstants
    /// </summary>
    public sealed class MultibatchingConstants
    {
        
        /// <summary>
        /// >> MaxCalls
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxCalls()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80000000");
            return result;
        }
        
        /// <summary>
        /// >> Domain
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr8U8 Domain()
        {
            var result = new Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr8U8();
            result.Create("0x4D5954485F4E4554");
            return result;
        }
    }
    
    /// <summary>
    /// >> MultibatchingErrors
    /// </summary>
    public enum MultibatchingErrors
    {
        
        /// <summary>
        /// >> AlreadyApplied
        /// </summary>
        AlreadyApplied,
        
        /// <summary>
        /// >> BatchSenderIsNotOrigin
        /// </summary>
        BatchSenderIsNotOrigin,
        
        /// <summary>
        /// >> NoCalls
        /// </summary>
        NoCalls,
        
        /// <summary>
        /// >> NoApprovals
        /// </summary>
        NoApprovals,
        
        /// <summary>
        /// >> InvalidDomain
        /// </summary>
        InvalidDomain,
        
        /// <summary>
        /// >> InvalidCallOrigin
        /// </summary>
        InvalidCallOrigin,
        
        /// <summary>
        /// >> InvalidSignature
        /// </summary>
        InvalidSignature,
        
        /// <summary>
        /// >> Expired
        /// </summary>
        Expired,
        
        /// <summary>
        /// >> UnsortedApprovals
        /// </summary>
        UnsortedApprovals,
    }
}
