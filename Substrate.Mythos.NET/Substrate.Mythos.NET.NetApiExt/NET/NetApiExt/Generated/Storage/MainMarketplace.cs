//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> MarketplaceStorage
    /// </summary>
    public sealed class MarketplaceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MarketplaceStorage Constructor
        /// </summary>
        public MarketplaceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Marketplace", "Authority"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Marketplace", "FeeSigner"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Marketplace", "Nonces"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Marketplace", "PayoutAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Marketplace", "Asks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Marketplace", "Bids"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid)));
        }
        
        /// <summary>
        /// >> AuthorityParams
        ///  The current authority account for the pallet.
        /// </summary>
        public static string AuthorityParams()
        {
            return RequestGenerator.GetStorage("Marketplace", "Authority", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuthorityDefault
        /// Default value as hex string
        /// </summary>
        public static string AuthorityDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Authority
        ///  The current authority account for the pallet.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> Authority(string blockhash, CancellationToken token)
        {
            string parameters = MarketplaceStorage.AuthorityParams();
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FeeSignerParams
        ///  The account responsible for signing fee-related operations.
        /// 
        ///  This account is expected to provide valid signatures for operations
        ///  requiring authentication related to transaction fees.
        /// </summary>
        public static string FeeSignerParams()
        {
            return RequestGenerator.GetStorage("Marketplace", "FeeSigner", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FeeSignerDefault
        /// Default value as hex string
        /// </summary>
        public static string FeeSignerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> FeeSigner
        ///  The account responsible for signing fee-related operations.
        /// 
        ///  This account is expected to provide valid signatures for operations
        ///  requiring authentication related to transaction fees.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> FeeSigner(string blockhash, CancellationToken token)
        {
            string parameters = MarketplaceStorage.FeeSignerParams();
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NoncesParams
        ///  A mapping that stores the state of nonces used for preventing replay attacks.
        /// </summary>
        public static string NoncesParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 key)
        {
            return RequestGenerator.GetStorage("Marketplace", "Nonces", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NoncesDefault
        /// Default value as hex string
        /// </summary>
        public static string NoncesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Nonces
        ///  A mapping that stores the state of nonces used for preventing replay attacks.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> Nonces(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT22 key, string blockhash, CancellationToken token)
        {
            string parameters = MarketplaceStorage.NoncesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PayoutAddressParams
        ///  The account where marketplace payouts will be sent.
        /// </summary>
        public static string PayoutAddressParams()
        {
            return RequestGenerator.GetStorage("Marketplace", "PayoutAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PayoutAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string PayoutAddressDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PayoutAddress
        ///  The account where marketplace payouts will be sent.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> PayoutAddress(string blockhash, CancellationToken token)
        {
            string parameters = MarketplaceStorage.PayoutAddressParams();
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AsksParams
        ///  A mapping of active Ask orders in the marketplace.
        /// </summary>
        public static string AsksParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Marketplace", "Asks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AsksDefault
        /// Default value as hex string
        /// </summary>
        public static string AsksDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Asks
        ///  A mapping of active Ask orders in the marketplace.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask> Asks(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = MarketplaceStorage.AsksParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BidsParams
        ///  A mapping that stores active Bid orders in the marketplace.
        /// </summary>
        public static string BidsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key)
        {
            return RequestGenerator.GetStorage("Marketplace", "Bids", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> BidsDefault
        /// Default value as hex string
        /// </summary>
        public static string BidsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Bids
        ///  A mapping that stores active Bid orders in the marketplace.
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid> Bids(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128> key, string blockhash, CancellationToken token)
        {
            string parameters = MarketplaceStorage.BidsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MarketplaceCalls
    /// </summary>
    public sealed class MarketplaceCalls
    {
        
        /// <summary>
        /// >> force_set_authority
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSetAuthority(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 authority)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(authority.Encode());
            return new Method(13, "Marketplace", 0, "force_set_authority", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_fee_signer_address
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFeeSignerAddress(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 fee_signer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(fee_signer.Encode());
            return new Method(13, "Marketplace", 1, "set_fee_signer_address", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_payout_address
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetPayoutAddress(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 payout_address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(payout_address.Encode());
            return new Method(13, "Marketplace", 2, "set_payout_address", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateOrder(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Order order, Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.EnumExecution execution)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(order.Encode());
            byteArray.AddRange(execution.Encode());
            return new Method(13, "Marketplace", 3, "create_order", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_order
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelOrder(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.EnumOrderType order_type, Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256 collection, Substrate.NetApi.Model.Types.Primitive.U128 item, Substrate.NetApi.Model.Types.Primitive.U128 price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(order_type.Encode());
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(price.Encode());
            return new Method(13, "Marketplace", 4, "cancel_order", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> MarketplaceConstants
    /// </summary>
    public sealed class MarketplaceConstants
    {
        
        /// <summary>
        /// >> MinOrderDuration
        ///  The minimum amount of time for an ask duration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MinOrderDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x0A00000000000000");
            return result;
        }
        
        /// <summary>
        /// >> NonceStringLimit
        ///  Size of nonce StorageValue
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NonceStringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x32000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> MarketplaceErrors
    /// </summary>
    public enum MarketplaceErrors
    {
        
        /// <summary>
        /// >> NotAuthority
        /// The account is not the authority.
        /// </summary>
        NotAuthority,
        
        /// <summary>
        /// >> AccountAlreadySet
        /// Tried to store an account that is already set for this storage value.
        /// </summary>
        AccountAlreadySet,
        
        /// <summary>
        /// >> FeeSignerAddressNotSet
        /// The fee signer address doesn't exist.
        /// </summary>
        FeeSignerAddressNotSet,
        
        /// <summary>
        /// >> PayoutAddressNotSet
        /// The payout address doesn't exist.
        /// </summary>
        PayoutAddressNotSet,
        
        /// <summary>
        /// >> ItemNotFound
        /// The item was not found.
        /// </summary>
        ItemNotFound,
        
        /// <summary>
        /// >> InvalidPrice
        /// The provided price is too low.
        /// </summary>
        InvalidPrice,
        
        /// <summary>
        /// >> InvalidExpiration
        /// Expiration time provided is too low.
        /// </summary>
        InvalidExpiration,
        
        /// <summary>
        /// >> InvalidFeePercent
        /// Fee percent provided is too low.
        /// </summary>
        InvalidFeePercent,
        
        /// <summary>
        /// >> OrderAlreadyExists
        /// Ask or Bid with the same characteristics already exists.
        /// </summary>
        OrderAlreadyExists,
        
        /// <summary>
        /// >> ValidMatchMustExist
        /// A valid match must exist to execute the order.
        /// </summary>
        ValidMatchMustExist,
        
        /// <summary>
        /// >> NotItemOwner
        /// Item can only be operated by the Item owner.
        /// </summary>
        NotItemOwner,
        
        /// <summary>
        /// >> BadSignedMessage
        /// Invalid Signed message.
        /// </summary>
        BadSignedMessage,
        
        /// <summary>
        /// >> ItemAlreadyLocked
        /// The Item is already locked and can't be used.
        /// </summary>
        ItemAlreadyLocked,
        
        /// <summary>
        /// >> AlreadyUsedNonce
        /// Nonce has already been used.
        /// </summary>
        AlreadyUsedNonce,
        
        /// <summary>
        /// >> BidOnOwnedItem
        /// The item is already owned by the account trying to bid on it.
        /// </summary>
        BidOnOwnedItem,
        
        /// <summary>
        /// >> BuyerIsSeller
        /// Not allowed for the buyer of an item to be the same as the seller.
        /// </summary>
        BuyerIsSeller,
        
        /// <summary>
        /// >> OrderExpired
        /// The ask is already past its expiration time.
        /// </summary>
        OrderExpired,
        
        /// <summary>
        /// >> OrderNotFound
        /// The order was not found.
        /// </summary>
        OrderNotFound,
        
        /// <summary>
        /// >> InsufficientFunds
        /// User Balance is insufficient for the required action.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> NotOrderCreatorOrAdmin
        /// The caller is not the order creator or the admin account of the pallet.
        /// </summary>
        NotOrderCreatorOrAdmin,
        
        /// <summary>
        /// >> BadNonce
        /// The provided nonce had an invalid size.
        /// </summary>
        BadNonce,
        
        /// <summary>
        /// >> Overflow
        /// An overflow happened.
        /// </summary>
        Overflow,
    }
}
