//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> DmarketStorage
    /// </summary>
    public sealed class DmarketStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> DmarketStorage Constructor
        /// </summary>
        public DmarketStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Dmarket", "ClosedAsks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.OrderData)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Dmarket", "ClosedBids"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.OrderData)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Dmarket", "DmarketCollection"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256)));
        }
        
        /// <summary>
        /// >> ClosedAsksParams
        /// </summary>
        public static string ClosedAsksParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Dmarket", "ClosedAsks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClosedAsksDefault
        /// Default value as hex string
        /// </summary>
        public static string ClosedAsksDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ClosedAsks
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.OrderData> ClosedAsks(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = DmarketStorage.ClosedAsksParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.OrderData>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClosedBidsParams
        /// </summary>
        public static string ClosedBidsParams(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Dmarket", "ClosedBids", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClosedBidsDefault
        /// Default value as hex string
        /// </summary>
        public static string ClosedBidsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ClosedBids
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.OrderData> ClosedBids(Substrate.Mythos.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = DmarketStorage.ClosedBidsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.OrderData>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DmarketCollectionParams
        /// </summary>
        public static string DmarketCollectionParams()
        {
            return RequestGenerator.GetStorage("Dmarket", "DmarketCollection", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DmarketCollectionDefault
        /// Default value as hex string
        /// </summary>
        public static string DmarketCollectionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DmarketCollection
        /// </summary>
        public async Task<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256> DmarketCollection(string blockhash, CancellationToken token)
        {
            string parameters = DmarketStorage.DmarketCollectionParams();
            var result = await _client.GetStorageAsync<Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> DmarketCalls
    /// </summary>
    public sealed class DmarketCalls
    {
        
        /// <summary>
        /// >> force_set_collection
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSetCollection(Substrate.Mythos.NET.NetApiExt.Generated.Model.runtime_common.IncrementableU256 collection_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            return new Method(52, "Dmarket", 0, "force_set_collection", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute_trade
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ExecuteTrade(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 seller, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 buyer, Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.TradeParams trade, Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_dmarket.types.TradeSignatures signatures, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 fee_address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(seller.Encode());
            byteArray.AddRange(buyer.Encode());
            byteArray.AddRange(trade.Encode());
            byteArray.AddRange(signatures.Encode());
            byteArray.AddRange(fee_address.Encode());
            return new Method(52, "Dmarket", 1, "execute_trade", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> DmarketConstants
    /// </summary>
    public sealed class DmarketConstants
    {
        
        /// <summary>
        /// >> Domain
        /// Chain Domain
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr8U8 Domain()
        {
            var result = new Substrate.Mythos.NET.NetApiExt.Generated.Types.Base.Arr8U8();
            result.Create("0x4D5954485F4E4554");
            return result;
        }
    }
    
    /// <summary>
    /// >> DmarketErrors
    /// </summary>
    public enum DmarketErrors
    {
        
        /// <summary>
        /// >> ItemNotFound
        /// The item was not found.
        /// </summary>
        ItemNotFound,
        
        /// <summary>
        /// >> SellerNotItemOwner
        /// Item can only be operated by the Item owner.
        /// </summary>
        SellerNotItemOwner,
        
        /// <summary>
        /// >> BidAlreadyExecuted
        /// The bid with the provided parameters has already been executed.
        /// </summary>
        BidAlreadyExecuted,
        
        /// <summary>
        /// >> AskAlreadyExecuted
        /// The ask with the provided parameters has already been executed.
        /// </summary>
        AskAlreadyExecuted,
        
        /// <summary>
        /// >> BuyerBalanceTooLow
        /// Buyer balance is not enough to pay for trade costs.
        /// </summary>
        BuyerBalanceTooLow,
        
        /// <summary>
        /// >> BidExpired
        /// Bid expiration timestamp must be in the future.
        /// </summary>
        BidExpired,
        
        /// <summary>
        /// >> AskExpired
        /// Ask expiration timestamp must be in the future.
        /// </summary>
        AskExpired,
        
        /// <summary>
        /// >> InvalidBuyerSignature
        /// The signature provided by the buyer is invalid.
        /// </summary>
        InvalidBuyerSignature,
        
        /// <summary>
        /// >> InvalidSellerSignature
        /// The signature provided by the seller is invalid.
        /// </summary>
        InvalidSellerSignature,
        
        /// <summary>
        /// >> BuyerIsSeller
        /// Same buyer and seller not allowed.
        /// </summary>
        BuyerIsSeller,
        
        /// <summary>
        /// >> BadSignedMessage
        /// Invalid Signed message.
        /// </summary>
        BadSignedMessage,
        
        /// <summary>
        /// >> CollectionAlreadyInUse
        /// Dmarket collection already set to the provided value.
        /// </summary>
        CollectionAlreadyInUse,
        
        /// <summary>
        /// >> CollectionNotSet
        /// Dmarket collection has not been set.
        /// </summary>
        CollectionNotSet,
        
        /// <summary>
        /// >> CollectionNotFound
        /// The provided Dmarket collect was not found.
        /// </summary>
        CollectionNotFound,
    }
}
