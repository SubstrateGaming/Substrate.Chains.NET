//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Mythos.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// CollatorStakingController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class CollatorStakingController : ControllerBase
    {
        
        private ICollatorStakingStorage _collatorStakingStorage;
        
        /// <summary>
        /// CollatorStakingController constructor.
        /// </summary>
        public CollatorStakingController(ICollatorStakingStorage collatorStakingStorage)
        {
            _collatorStakingStorage = collatorStakingStorage;
        }
        
        /// <summary>
        /// >> Invulnerables
        ///  The invulnerable, permissioned collators. This list must be sorted.
        /// </summary>
        [HttpGet("Invulnerables")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "InvulnerablesParams")]
        public IActionResult GetInvulnerables()
        {
            return this.Ok(_collatorStakingStorage.GetInvulnerables());
        }
        
        /// <summary>
        /// >> Candidates
        ///  The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be
        ///  mutually exclusive.
        /// 
        ///  This list is sorted in ascending order by total stake and when the stake amounts are equal, the least
        ///  recently updated is considered greater.
        /// </summary>
        [HttpGet("Candidates")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "CandidatesParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetCandidates(string key)
        {
            return this.Ok(_collatorStakingStorage.GetCandidates(key));
        }
        
        /// <summary>
        /// >> CounterForCandidates
        /// Counter for the related counted storage map
        /// </summary>
        [HttpGet("CounterForCandidates")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "CounterForCandidatesParams")]
        public IActionResult GetCounterForCandidates()
        {
            return this.Ok(_collatorStakingStorage.GetCounterForCandidates());
        }
        
        /// <summary>
        /// >> SessionRemovedCandidates
        ///  Map of Candidates that have been removed in the current session.
        /// </summary>
        [HttpGet("SessionRemovedCandidates")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "SessionRemovedCandidatesParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetSessionRemovedCandidates(string key)
        {
            return this.Ok(_collatorStakingStorage.GetSessionRemovedCandidates(key));
        }
        
        /// <summary>
        /// >> LastAuthoredBlock
        ///  Last block authored by a collator.
        /// </summary>
        [HttpGet("LastAuthoredBlock")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "LastAuthoredBlockParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetLastAuthoredBlock(string key)
        {
            return this.Ok(_collatorStakingStorage.GetLastAuthoredBlock(key));
        }
        
        /// <summary>
        /// >> DesiredCandidates
        ///  Desired number of candidates.
        /// 
        ///  This should always be less than [`Config::MaxCandidates`] for weights to be correct.
        /// </summary>
        [HttpGet("DesiredCandidates")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "DesiredCandidatesParams")]
        public IActionResult GetDesiredCandidates()
        {
            return this.Ok(_collatorStakingStorage.GetDesiredCandidates());
        }
        
        /// <summary>
        /// >> MinCandidacyBond
        ///  Minimum amount to become a collator.
        /// </summary>
        [HttpGet("MinCandidacyBond")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "MinCandidacyBondParams")]
        public IActionResult GetMinCandidacyBond()
        {
            return this.Ok(_collatorStakingStorage.GetMinCandidacyBond());
        }
        
        /// <summary>
        /// >> MinStake
        ///  Minimum amount a user can stake.
        /// </summary>
        [HttpGet("MinStake")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "MinStakeParams")]
        public IActionResult GetMinStake()
        {
            return this.Ok(_collatorStakingStorage.GetMinStake());
        }
        
        /// <summary>
        /// >> CandidateStake
        ///  Amount staked by users per candidate.
        /// 
        ///  First key is the candidate, and second one is the staker.
        /// </summary>
        [HttpGet("CandidateStake")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "CandidateStakeParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20, Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>))]
        public IActionResult GetCandidateStake(string key)
        {
            return this.Ok(_collatorStakingStorage.GetCandidateStake(key));
        }
        
        /// <summary>
        /// >> UserStake
        ///  Number of candidates staked on by a user.
        /// 
        ///  Cannot be higher than `MaxStakedCandidates`.
        /// </summary>
        [HttpGet("UserStake")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "UserStakeParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetUserStake(string key)
        {
            return this.Ok(_collatorStakingStorage.GetUserStake(key));
        }
        
        /// <summary>
        /// >> ReleaseQueues
        ///  Release requests for an account.
        /// 
        ///  They can be actually released by calling the [`release`] extrinsic, after the relevant delay.
        /// </summary>
        [HttpGet("ReleaseQueues")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "ReleaseQueuesParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetReleaseQueues(string key)
        {
            return this.Ok(_collatorStakingStorage.GetReleaseQueues(key));
        }
        
        /// <summary>
        /// >> CollatorRewardPercentage
        ///  Percentage of rewards that would go for collators.
        /// </summary>
        [HttpGet("CollatorRewardPercentage")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "CollatorRewardPercentageParams")]
        public IActionResult GetCollatorRewardPercentage()
        {
            return this.Ok(_collatorStakingStorage.GetCollatorRewardPercentage());
        }
        
        /// <summary>
        /// >> ExtraReward
        ///  Per-block extra reward.
        /// </summary>
        [HttpGet("ExtraReward")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "ExtraRewardParams")]
        public IActionResult GetExtraReward()
        {
            return this.Ok(_collatorStakingStorage.GetExtraReward());
        }
        
        /// <summary>
        /// >> TotalBlocks
        ///  Blocks produced in the current session. First value is the total,
        ///  and second is blocks produced by candidates only (not invulnerables).
        /// </summary>
        [HttpGet("TotalBlocks")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "TotalBlocksParams")]
        public IActionResult GetTotalBlocks()
        {
            return this.Ok(_collatorStakingStorage.GetTotalBlocks());
        }
        
        /// <summary>
        /// >> ProducedBlocks
        ///  Mapping of blocks and their authors.
        /// </summary>
        [HttpGet("ProducedBlocks")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "ProducedBlocksParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetProducedBlocks(string key)
        {
            return this.Ok(_collatorStakingStorage.GetProducedBlocks(key));
        }
        
        /// <summary>
        /// >> CurrentSession
        ///  Current session index.
        /// </summary>
        [HttpGet("CurrentSession")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "CurrentSessionParams")]
        public IActionResult GetCurrentSession()
        {
            return this.Ok(_collatorStakingStorage.GetCurrentSession());
        }
        
        /// <summary>
        /// >> ClaimableRewards
        ///  Claimable rewards.
        /// </summary>
        [HttpGet("ClaimableRewards")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "ClaimableRewardsParams")]
        public IActionResult GetClaimableRewards()
        {
            return this.Ok(_collatorStakingStorage.GetClaimableRewards());
        }
        
        /// <summary>
        /// >> PerSessionRewards
        ///  Per-session rewards.
        /// </summary>
        [HttpGet("PerSessionRewards")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "PerSessionRewardsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetPerSessionRewards(string key)
        {
            return this.Ok(_collatorStakingStorage.GetPerSessionRewards(key));
        }
        
        /// <summary>
        /// >> CounterForPerSessionRewards
        /// Counter for the related counted storage map
        /// </summary>
        [HttpGet("CounterForPerSessionRewards")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "CounterForPerSessionRewardsParams")]
        public IActionResult GetCounterForPerSessionRewards()
        {
            return this.Ok(_collatorStakingStorage.GetCounterForPerSessionRewards());
        }
        
        /// <summary>
        /// >> AutoCompound
        ///  Percentage of reward to be re-invested in collators.
        /// </summary>
        [HttpGet("AutoCompound")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "AutoCompoundParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetAutoCompound(string key)
        {
            return this.Ok(_collatorStakingStorage.GetAutoCompound(key));
        }
        
        /// <summary>
        /// >> CandidacyBondReleases
        ///  Time (in blocks) to release an ex-candidate's locked candidacy bond.
        ///  If a candidate leaves the candidacy before its bond is released, the waiting period
        ///  will restart.
        /// </summary>
        [HttpGet("CandidacyBondReleases")]
        [ProducesResponseType(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease), 200)]
        [StorageKeyBuilder(typeof(Substrate.Mythos.NET.NetApiExt.Generated.Storage.CollatorStakingStorage), "CandidacyBondReleasesParams", typeof(Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20))]
        public IActionResult GetCandidacyBondReleases(string key)
        {
            return this.Ok(_collatorStakingStorage.GetCandidacyBondReleases(key));
        }
    }
}
