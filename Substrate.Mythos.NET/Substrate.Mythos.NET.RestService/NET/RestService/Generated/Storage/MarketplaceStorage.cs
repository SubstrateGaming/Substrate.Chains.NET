//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMarketplaceStorage interface definition.
    /// </summary>
    public interface IMarketplaceStorage : IStorage
    {
        
        /// <summary>
        /// >> Authority
        ///  The current authority account for the pallet.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetAuthority();
        
        /// <summary>
        /// >> FeeSigner
        ///  The account responsible for signing fee-related operations.
        /// 
        ///  This account is expected to provide valid signatures for operations
        ///  requiring authentication related to transaction fees.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetFeeSigner();
        
        /// <summary>
        /// >> Nonces
        ///  A mapping that stores the state of nonces used for preventing replay attacks.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetNonces(string key);
        
        /// <summary>
        /// >> PayoutAddress
        ///  The account where marketplace payouts will be sent.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetPayoutAddress();
        
        /// <summary>
        /// >> Asks
        ///  A mapping of active Ask orders in the marketplace.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask GetAsks(string key);
        
        /// <summary>
        /// >> Bids
        ///  A mapping that stores active Bid orders in the marketplace.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid GetBids(string key);
    }
    
    /// <summary>
    /// MarketplaceStorage class definition.
    /// </summary>
    public sealed class MarketplaceStorage : IMarketplaceStorage
    {
        
        /// <summary>
        /// _authorityTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> _authorityTypedStorage;
        
        /// <summary>
        /// _feeSignerTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> _feeSignerTypedStorage;
        
        /// <summary>
        /// _noncesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _noncesTypedStorage;
        
        /// <summary>
        /// _payoutAddressTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> _payoutAddressTypedStorage;
        
        /// <summary>
        /// _asksTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask> _asksTypedStorage;
        
        /// <summary>
        /// _bidsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid> _bidsTypedStorage;
        
        /// <summary>
        /// MarketplaceStorage constructor.
        /// </summary>
        public MarketplaceStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AuthorityTypedStorage = new TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>("Marketplace.Authority", storageDataProvider, storageChangeDelegates);
            this.FeeSignerTypedStorage = new TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>("Marketplace.FeeSigner", storageDataProvider, storageChangeDelegates);
            this.NoncesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("Marketplace.Nonces", storageDataProvider, storageChangeDelegates);
            this.PayoutAddressTypedStorage = new TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>("Marketplace.PayoutAddress", storageDataProvider, storageChangeDelegates);
            this.AsksTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask>("Marketplace.Asks", storageDataProvider, storageChangeDelegates);
            this.BidsTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid>("Marketplace.Bids", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _authorityTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> AuthorityTypedStorage
        {
            get
            {
                return _authorityTypedStorage;
            }
            set
            {
                _authorityTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _feeSignerTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> FeeSignerTypedStorage
        {
            get
            {
                return _feeSignerTypedStorage;
            }
            set
            {
                _feeSignerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _noncesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> NoncesTypedStorage
        {
            get
            {
                return _noncesTypedStorage;
            }
            set
            {
                _noncesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _payoutAddressTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> PayoutAddressTypedStorage
        {
            get
            {
                return _payoutAddressTypedStorage;
            }
            set
            {
                _payoutAddressTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _asksTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask> AsksTypedStorage
        {
            get
            {
                return _asksTypedStorage;
            }
            set
            {
                _asksTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bidsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid> BidsTypedStorage
        {
            get
            {
                return _bidsTypedStorage;
            }
            set
            {
                _bidsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AuthorityTypedStorage.InitializeAsync("Marketplace", "Authority");
            await FeeSignerTypedStorage.InitializeAsync("Marketplace", "FeeSigner");
            await NoncesTypedStorage.InitializeAsync("Marketplace", "Nonces");
            await PayoutAddressTypedStorage.InitializeAsync("Marketplace", "PayoutAddress");
            await AsksTypedStorage.InitializeAsync("Marketplace", "Asks");
            await BidsTypedStorage.InitializeAsync("Marketplace", "Bids");
        }
        
        /// <summary>
        /// Implements any storage change for Marketplace.Authority
        /// </summary>
        [StorageChange("Marketplace", "Authority")]
        public void OnUpdateAuthority(string data)
        {
            AuthorityTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Authority
        ///  The current authority account for the pallet.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetAuthority()
        {
            return AuthorityTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Marketplace.FeeSigner
        /// </summary>
        [StorageChange("Marketplace", "FeeSigner")]
        public void OnUpdateFeeSigner(string data)
        {
            FeeSignerTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> FeeSigner
        ///  The account responsible for signing fee-related operations.
        /// 
        ///  This account is expected to provide valid signatures for operations
        ///  requiring authentication related to transaction fees.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetFeeSigner()
        {
            return FeeSignerTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Marketplace.Nonces
        /// </summary>
        [StorageChange("Marketplace", "Nonces")]
        public void OnUpdateNonces(string key, string data)
        {
            NoncesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Nonces
        ///  A mapping that stores the state of nonces used for preventing replay attacks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetNonces(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NoncesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Marketplace.PayoutAddress
        /// </summary>
        [StorageChange("Marketplace", "PayoutAddress")]
        public void OnUpdatePayoutAddress(string data)
        {
            PayoutAddressTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PayoutAddress
        ///  The account where marketplace payouts will be sent.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetPayoutAddress()
        {
            return PayoutAddressTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Marketplace.Asks
        /// </summary>
        [StorageChange("Marketplace", "Asks")]
        public void OnUpdateAsks(string key, string data)
        {
            AsksTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Asks
        ///  A mapping of active Ask orders in the marketplace.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask GetAsks(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AsksTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Ask result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Marketplace.Bids
        /// </summary>
        [StorageChange("Marketplace", "Bids")]
        public void OnUpdateBids(string key, string data)
        {
            BidsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Bids
        ///  A mapping that stores active Bid orders in the marketplace.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid GetBids(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BidsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_marketplace.types.Bid result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
