//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMythProxyStorage interface definition.
    /// </summary>
    public interface IMythProxyStorage : IStorage
    {
        
        /// <summary>
        /// >> Proxies
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_myth_proxy.ProxyDefinition GetProxies(string key);
        
        /// <summary>
        /// >> SponsorAgents
        ///  A mapping from a sponsor agent to the sponsor.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetSponsorAgents(string key);
        
        /// <summary>
        /// >> SponsorshipApprovals
        ///  A mapping from a delegator and a sponsor to the sponsor agent.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetSponsorshipApprovals(string key);
        
        /// <summary>
        /// >> ApprovalsByAgent
        ///  A mapping from a sponsor agent to the approval.
        ///  This is used to clean up approvals after removing the agent.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetApprovalsByAgent(string key);
        
        /// <summary>
        /// >> InvalidatedAgents
        ///  Storage of agents that have been invalidated.
        ///  This is used to clean up approvals that are no longer valid.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetInvalidatedAgents(string key);
    }
    
    /// <summary>
    /// MythProxyStorage class definition.
    /// </summary>
    public sealed class MythProxyStorage : IMythProxyStorage
    {
        
        /// <summary>
        /// _proxiesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_myth_proxy.ProxyDefinition> _proxiesTypedStorage;
        
        /// <summary>
        /// _sponsorAgentsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> _sponsorAgentsTypedStorage;
        
        /// <summary>
        /// _sponsorshipApprovalsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> _sponsorshipApprovalsTypedStorage;
        
        /// <summary>
        /// _approvalsByAgentTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _approvalsByAgentTypedStorage;
        
        /// <summary>
        /// _invalidatedAgentsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _invalidatedAgentsTypedStorage;
        
        /// <summary>
        /// MythProxyStorage constructor.
        /// </summary>
        public MythProxyStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ProxiesTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_myth_proxy.ProxyDefinition>("MythProxy.Proxies", storageDataProvider, storageChangeDelegates);
            this.SponsorAgentsTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>("MythProxy.SponsorAgents", storageDataProvider, storageChangeDelegates);
            this.SponsorshipApprovalsTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20>("MythProxy.SponsorshipApprovals", storageDataProvider, storageChangeDelegates);
            this.ApprovalsByAgentTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("MythProxy.ApprovalsByAgent", storageDataProvider, storageChangeDelegates);
            this.InvalidatedAgentsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("MythProxy.InvalidatedAgents", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _proxiesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_myth_proxy.ProxyDefinition> ProxiesTypedStorage
        {
            get
            {
                return _proxiesTypedStorage;
            }
            set
            {
                _proxiesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sponsorAgentsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> SponsorAgentsTypedStorage
        {
            get
            {
                return _sponsorAgentsTypedStorage;
            }
            set
            {
                _sponsorAgentsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sponsorshipApprovalsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20> SponsorshipApprovalsTypedStorage
        {
            get
            {
                return _sponsorshipApprovalsTypedStorage;
            }
            set
            {
                _sponsorshipApprovalsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _approvalsByAgentTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> ApprovalsByAgentTypedStorage
        {
            get
            {
                return _approvalsByAgentTypedStorage;
            }
            set
            {
                _approvalsByAgentTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _invalidatedAgentsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> InvalidatedAgentsTypedStorage
        {
            get
            {
                return _invalidatedAgentsTypedStorage;
            }
            set
            {
                _invalidatedAgentsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ProxiesTypedStorage.InitializeAsync("MythProxy", "Proxies");
            await SponsorAgentsTypedStorage.InitializeAsync("MythProxy", "SponsorAgents");
            await SponsorshipApprovalsTypedStorage.InitializeAsync("MythProxy", "SponsorshipApprovals");
            await ApprovalsByAgentTypedStorage.InitializeAsync("MythProxy", "ApprovalsByAgent");
            await InvalidatedAgentsTypedStorage.InitializeAsync("MythProxy", "InvalidatedAgents");
        }
        
        /// <summary>
        /// Implements any storage change for MythProxy.Proxies
        /// </summary>
        [StorageChange("MythProxy", "Proxies")]
        public void OnUpdateProxies(string key, string data)
        {
            ProxiesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Proxies
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_myth_proxy.ProxyDefinition GetProxies(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProxiesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_myth_proxy.ProxyDefinition result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MythProxy.SponsorAgents
        /// </summary>
        [StorageChange("MythProxy", "SponsorAgents")]
        public void OnUpdateSponsorAgents(string key, string data)
        {
            SponsorAgentsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SponsorAgents
        ///  A mapping from a sponsor agent to the sponsor.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetSponsorAgents(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SponsorAgentsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MythProxy.SponsorshipApprovals
        /// </summary>
        [StorageChange("MythProxy", "SponsorshipApprovals")]
        public void OnUpdateSponsorshipApprovals(string key, string data)
        {
            SponsorshipApprovalsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SponsorshipApprovals
        ///  A mapping from a delegator and a sponsor to the sponsor agent.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 GetSponsorshipApprovals(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SponsorshipApprovalsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.account.AccountId20 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MythProxy.ApprovalsByAgent
        /// </summary>
        [StorageChange("MythProxy", "ApprovalsByAgent")]
        public void OnUpdateApprovalsByAgent(string key, string data)
        {
            ApprovalsByAgentTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ApprovalsByAgent
        ///  A mapping from a sponsor agent to the approval.
        ///  This is used to clean up approvals after removing the agent.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetApprovalsByAgent(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ApprovalsByAgentTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MythProxy.InvalidatedAgents
        /// </summary>
        [StorageChange("MythProxy", "InvalidatedAgents")]
        public void OnUpdateInvalidatedAgents(string key, string data)
        {
            InvalidatedAgentsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> InvalidatedAgents
        ///  Storage of agents that have been invalidated.
        ///  This is used to clean up approvals that are no longer valid.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetInvalidatedAgents(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (InvalidatedAgentsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
