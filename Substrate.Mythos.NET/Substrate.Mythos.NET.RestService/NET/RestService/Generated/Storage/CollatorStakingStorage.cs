//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Mythos.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ICollatorStakingStorage interface definition.
    /// </summary>
    public interface ICollatorStakingStorage : IStorage
    {
        
        /// <summary>
        /// >> Invulnerables
        ///  The invulnerable, permissioned collators. This list must be sorted.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27 GetInvulnerables();
        
        /// <summary>
        /// >> Candidates
        ///  The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be
        ///  mutually exclusive.
        /// 
        ///  This list is sorted in ascending order by total stake and when the stake amounts are equal, the least
        ///  recently updated is considered greater.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo GetCandidates(string key);
        
        /// <summary>
        /// >> CounterForCandidates
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForCandidates();
        
        /// <summary>
        /// >> SessionRemovedCandidates
        ///  Map of Candidates that have been removed in the current session.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo GetSessionRemovedCandidates(string key);
        
        /// <summary>
        /// >> LastAuthoredBlock
        ///  Last block authored by a collator.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetLastAuthoredBlock(string key);
        
        /// <summary>
        /// >> DesiredCandidates
        ///  Desired number of candidates.
        /// 
        ///  This should always be less than [`Config::MaxCandidates`] for weights to be correct.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetDesiredCandidates();
        
        /// <summary>
        /// >> MinCandidacyBond
        ///  Minimum amount to become a collator.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMinCandidacyBond();
        
        /// <summary>
        /// >> MinStake
        ///  Minimum amount a user can stake.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetMinStake();
        
        /// <summary>
        /// >> CandidateStake
        ///  Amount staked by users per candidate.
        /// 
        ///  First key is the candidate, and second one is the staker.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo GetCandidateStake(string key);
        
        /// <summary>
        /// >> UserStake
        ///  Number of candidates staked on by a user.
        /// 
        ///  Cannot be higher than `MaxStakedCandidates`.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo GetUserStake(string key);
        
        /// <summary>
        /// >> ReleaseQueues
        ///  Release requests for an account.
        /// 
        ///  They can be actually released by calling the [`release`] extrinsic, after the relevant delay.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28 GetReleaseQueues(string key);
        
        /// <summary>
        /// >> CollatorRewardPercentage
        ///  Percentage of rewards that would go for collators.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent GetCollatorRewardPercentage();
        
        /// <summary>
        /// >> ExtraReward
        ///  Per-block extra reward.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetExtraReward();
        
        /// <summary>
        /// >> TotalBlocks
        ///  Blocks produced in the current session. First value is the total,
        ///  and second is blocks produced by candidates only (not invulnerables).
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetTotalBlocks();
        
        /// <summary>
        /// >> ProducedBlocks
        ///  Mapping of blocks and their authors.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetProducedBlocks(string key);
        
        /// <summary>
        /// >> CurrentSession
        ///  Current session index.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCurrentSession();
        
        /// <summary>
        /// >> ClaimableRewards
        ///  Claimable rewards.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetClaimableRewards();
        
        /// <summary>
        /// >> PerSessionRewards
        ///  Per-session rewards.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo GetPerSessionRewards(string key);
        
        /// <summary>
        /// >> CounterForPerSessionRewards
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForPerSessionRewards();
        
        /// <summary>
        /// >> AutoCompound
        ///  Percentage of reward to be re-invested in collators.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent GetAutoCompound(string key);
        
        /// <summary>
        /// >> CandidacyBondReleases
        ///  Time (in blocks) to release an ex-candidate's locked candidacy bond.
        ///  If a candidate leaves the candidacy before its bond is released, the waiting period
        ///  will restart.
        /// </summary>
        Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease GetCandidacyBondReleases(string key);
    }
    
    /// <summary>
    /// CollatorStakingStorage class definition.
    /// </summary>
    public sealed class CollatorStakingStorage : ICollatorStakingStorage
    {
        
        /// <summary>
        /// _invulnerablesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27> _invulnerablesTypedStorage;
        
        /// <summary>
        /// _candidatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo> _candidatesTypedStorage;
        
        /// <summary>
        /// _counterForCandidatesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForCandidatesTypedStorage;
        
        /// <summary>
        /// _sessionRemovedCandidatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo> _sessionRemovedCandidatesTypedStorage;
        
        /// <summary>
        /// _lastAuthoredBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _lastAuthoredBlockTypedStorage;
        
        /// <summary>
        /// _desiredCandidatesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _desiredCandidatesTypedStorage;
        
        /// <summary>
        /// _minCandidacyBondTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _minCandidacyBondTypedStorage;
        
        /// <summary>
        /// _minStakeTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _minStakeTypedStorage;
        
        /// <summary>
        /// _candidateStakeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo> _candidateStakeTypedStorage;
        
        /// <summary>
        /// _userStakeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo> _userStakeTypedStorage;
        
        /// <summary>
        /// _releaseQueuesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28> _releaseQueuesTypedStorage;
        
        /// <summary>
        /// _collatorRewardPercentageTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> _collatorRewardPercentageTypedStorage;
        
        /// <summary>
        /// _extraRewardTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _extraRewardTypedStorage;
        
        /// <summary>
        /// _totalBlocksTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> _totalBlocksTypedStorage;
        
        /// <summary>
        /// _producedBlocksTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _producedBlocksTypedStorage;
        
        /// <summary>
        /// _currentSessionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _currentSessionTypedStorage;
        
        /// <summary>
        /// _claimableRewardsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _claimableRewardsTypedStorage;
        
        /// <summary>
        /// _perSessionRewardsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo> _perSessionRewardsTypedStorage;
        
        /// <summary>
        /// _counterForPerSessionRewardsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForPerSessionRewardsTypedStorage;
        
        /// <summary>
        /// _autoCompoundTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> _autoCompoundTypedStorage;
        
        /// <summary>
        /// _candidacyBondReleasesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease> _candidacyBondReleasesTypedStorage;
        
        /// <summary>
        /// CollatorStakingStorage constructor.
        /// </summary>
        public CollatorStakingStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.InvulnerablesTypedStorage = new TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27>("CollatorStaking.Invulnerables", storageDataProvider, storageChangeDelegates);
            this.CandidatesTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo>("CollatorStaking.Candidates", storageDataProvider, storageChangeDelegates);
            this.CounterForCandidatesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("CollatorStaking.CounterForCandidates", storageDataProvider, storageChangeDelegates);
            this.SessionRemovedCandidatesTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo>("CollatorStaking.SessionRemovedCandidates", storageDataProvider, storageChangeDelegates);
            this.LastAuthoredBlockTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("CollatorStaking.LastAuthoredBlock", storageDataProvider, storageChangeDelegates);
            this.DesiredCandidatesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("CollatorStaking.DesiredCandidates", storageDataProvider, storageChangeDelegates);
            this.MinCandidacyBondTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("CollatorStaking.MinCandidacyBond", storageDataProvider, storageChangeDelegates);
            this.MinStakeTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("CollatorStaking.MinStake", storageDataProvider, storageChangeDelegates);
            this.CandidateStakeTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo>("CollatorStaking.CandidateStake", storageDataProvider, storageChangeDelegates);
            this.UserStakeTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo>("CollatorStaking.UserStake", storageDataProvider, storageChangeDelegates);
            this.ReleaseQueuesTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28>("CollatorStaking.ReleaseQueues", storageDataProvider, storageChangeDelegates);
            this.CollatorRewardPercentageTypedStorage = new TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>("CollatorStaking.CollatorRewardPercentage", storageDataProvider, storageChangeDelegates);
            this.ExtraRewardTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("CollatorStaking.ExtraReward", storageDataProvider, storageChangeDelegates);
            this.TotalBlocksTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>("CollatorStaking.TotalBlocks", storageDataProvider, storageChangeDelegates);
            this.ProducedBlocksTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("CollatorStaking.ProducedBlocks", storageDataProvider, storageChangeDelegates);
            this.CurrentSessionTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("CollatorStaking.CurrentSession", storageDataProvider, storageChangeDelegates);
            this.ClaimableRewardsTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("CollatorStaking.ClaimableRewards", storageDataProvider, storageChangeDelegates);
            this.PerSessionRewardsTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo>("CollatorStaking.PerSessionRewards", storageDataProvider, storageChangeDelegates);
            this.CounterForPerSessionRewardsTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("CollatorStaking.CounterForPerSessionRewards", storageDataProvider, storageChangeDelegates);
            this.AutoCompoundTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>("CollatorStaking.AutoCompound", storageDataProvider, storageChangeDelegates);
            this.CandidacyBondReleasesTypedStorage = new TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease>("CollatorStaking.CandidacyBondReleases", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _invulnerablesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27> InvulnerablesTypedStorage
        {
            get
            {
                return _invulnerablesTypedStorage;
            }
            set
            {
                _invulnerablesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo> CandidatesTypedStorage
        {
            get
            {
                return _candidatesTypedStorage;
            }
            set
            {
                _candidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForCandidatesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForCandidatesTypedStorage
        {
            get
            {
                return _counterForCandidatesTypedStorage;
            }
            set
            {
                _counterForCandidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _sessionRemovedCandidatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo> SessionRemovedCandidatesTypedStorage
        {
            get
            {
                return _sessionRemovedCandidatesTypedStorage;
            }
            set
            {
                _sessionRemovedCandidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _lastAuthoredBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> LastAuthoredBlockTypedStorage
        {
            get
            {
                return _lastAuthoredBlockTypedStorage;
            }
            set
            {
                _lastAuthoredBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _desiredCandidatesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> DesiredCandidatesTypedStorage
        {
            get
            {
                return _desiredCandidatesTypedStorage;
            }
            set
            {
                _desiredCandidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minCandidacyBondTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> MinCandidacyBondTypedStorage
        {
            get
            {
                return _minCandidacyBondTypedStorage;
            }
            set
            {
                _minCandidacyBondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minStakeTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> MinStakeTypedStorage
        {
            get
            {
                return _minStakeTypedStorage;
            }
            set
            {
                _minStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidateStakeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo> CandidateStakeTypedStorage
        {
            get
            {
                return _candidateStakeTypedStorage;
            }
            set
            {
                _candidateStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _userStakeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo> UserStakeTypedStorage
        {
            get
            {
                return _userStakeTypedStorage;
            }
            set
            {
                _userStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _releaseQueuesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28> ReleaseQueuesTypedStorage
        {
            get
            {
                return _releaseQueuesTypedStorage;
            }
            set
            {
                _releaseQueuesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _collatorRewardPercentageTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> CollatorRewardPercentageTypedStorage
        {
            get
            {
                return _collatorRewardPercentageTypedStorage;
            }
            set
            {
                _collatorRewardPercentageTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _extraRewardTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> ExtraRewardTypedStorage
        {
            get
            {
                return _extraRewardTypedStorage;
            }
            set
            {
                _extraRewardTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _totalBlocksTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> TotalBlocksTypedStorage
        {
            get
            {
                return _totalBlocksTypedStorage;
            }
            set
            {
                _totalBlocksTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _producedBlocksTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> ProducedBlocksTypedStorage
        {
            get
            {
                return _producedBlocksTypedStorage;
            }
            set
            {
                _producedBlocksTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _currentSessionTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CurrentSessionTypedStorage
        {
            get
            {
                return _currentSessionTypedStorage;
            }
            set
            {
                _currentSessionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _claimableRewardsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> ClaimableRewardsTypedStorage
        {
            get
            {
                return _claimableRewardsTypedStorage;
            }
            set
            {
                _claimableRewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _perSessionRewardsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo> PerSessionRewardsTypedStorage
        {
            get
            {
                return _perSessionRewardsTypedStorage;
            }
            set
            {
                _perSessionRewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForPerSessionRewardsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForPerSessionRewardsTypedStorage
        {
            get
            {
                return _counterForPerSessionRewardsTypedStorage;
            }
            set
            {
                _counterForPerSessionRewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _autoCompoundTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> AutoCompoundTypedStorage
        {
            get
            {
                return _autoCompoundTypedStorage;
            }
            set
            {
                _autoCompoundTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidacyBondReleasesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease> CandidacyBondReleasesTypedStorage
        {
            get
            {
                return _candidacyBondReleasesTypedStorage;
            }
            set
            {
                _candidacyBondReleasesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await InvulnerablesTypedStorage.InitializeAsync("CollatorStaking", "Invulnerables");
            await CandidatesTypedStorage.InitializeAsync("CollatorStaking", "Candidates");
            await CounterForCandidatesTypedStorage.InitializeAsync("CollatorStaking", "CounterForCandidates");
            await SessionRemovedCandidatesTypedStorage.InitializeAsync("CollatorStaking", "SessionRemovedCandidates");
            await LastAuthoredBlockTypedStorage.InitializeAsync("CollatorStaking", "LastAuthoredBlock");
            await DesiredCandidatesTypedStorage.InitializeAsync("CollatorStaking", "DesiredCandidates");
            await MinCandidacyBondTypedStorage.InitializeAsync("CollatorStaking", "MinCandidacyBond");
            await MinStakeTypedStorage.InitializeAsync("CollatorStaking", "MinStake");
            await CandidateStakeTypedStorage.InitializeAsync("CollatorStaking", "CandidateStake");
            await UserStakeTypedStorage.InitializeAsync("CollatorStaking", "UserStake");
            await ReleaseQueuesTypedStorage.InitializeAsync("CollatorStaking", "ReleaseQueues");
            await CollatorRewardPercentageTypedStorage.InitializeAsync("CollatorStaking", "CollatorRewardPercentage");
            await ExtraRewardTypedStorage.InitializeAsync("CollatorStaking", "ExtraReward");
            await TotalBlocksTypedStorage.InitializeAsync("CollatorStaking", "TotalBlocks");
            await ProducedBlocksTypedStorage.InitializeAsync("CollatorStaking", "ProducedBlocks");
            await CurrentSessionTypedStorage.InitializeAsync("CollatorStaking", "CurrentSession");
            await ClaimableRewardsTypedStorage.InitializeAsync("CollatorStaking", "ClaimableRewards");
            await PerSessionRewardsTypedStorage.InitializeAsync("CollatorStaking", "PerSessionRewards");
            await CounterForPerSessionRewardsTypedStorage.InitializeAsync("CollatorStaking", "CounterForPerSessionRewards");
            await AutoCompoundTypedStorage.InitializeAsync("CollatorStaking", "AutoCompound");
            await CandidacyBondReleasesTypedStorage.InitializeAsync("CollatorStaking", "CandidacyBondReleases");
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.Invulnerables
        /// </summary>
        [StorageChange("CollatorStaking", "Invulnerables")]
        public void OnUpdateInvulnerables(string data)
        {
            InvulnerablesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Invulnerables
        ///  The invulnerable, permissioned collators. This list must be sorted.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT27 GetInvulnerables()
        {
            return InvulnerablesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.Candidates
        /// </summary>
        [StorageChange("CollatorStaking", "Candidates")]
        public void OnUpdateCandidates(string key, string data)
        {
            CandidatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Candidates
        ///  The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be
        ///  mutually exclusive.
        /// 
        ///  This list is sorted in ascending order by total stake and when the stake amounts are equal, the least
        ///  recently updated is considered greater.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo GetCandidates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CandidatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.CounterForCandidates
        /// </summary>
        [StorageChange("CollatorStaking", "CounterForCandidates")]
        public void OnUpdateCounterForCandidates(string data)
        {
            CounterForCandidatesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForCandidates
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForCandidates()
        {
            return CounterForCandidatesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.SessionRemovedCandidates
        /// </summary>
        [StorageChange("CollatorStaking", "SessionRemovedCandidates")]
        public void OnUpdateSessionRemovedCandidates(string key, string data)
        {
            SessionRemovedCandidatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SessionRemovedCandidates
        ///  Map of Candidates that have been removed in the current session.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo GetSessionRemovedCandidates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SessionRemovedCandidatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.LastAuthoredBlock
        /// </summary>
        [StorageChange("CollatorStaking", "LastAuthoredBlock")]
        public void OnUpdateLastAuthoredBlock(string key, string data)
        {
            LastAuthoredBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LastAuthoredBlock
        ///  Last block authored by a collator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetLastAuthoredBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LastAuthoredBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.DesiredCandidates
        /// </summary>
        [StorageChange("CollatorStaking", "DesiredCandidates")]
        public void OnUpdateDesiredCandidates(string data)
        {
            DesiredCandidatesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> DesiredCandidates
        ///  Desired number of candidates.
        /// 
        ///  This should always be less than [`Config::MaxCandidates`] for weights to be correct.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetDesiredCandidates()
        {
            return DesiredCandidatesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.MinCandidacyBond
        /// </summary>
        [StorageChange("CollatorStaking", "MinCandidacyBond")]
        public void OnUpdateMinCandidacyBond(string data)
        {
            MinCandidacyBondTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinCandidacyBond
        ///  Minimum amount to become a collator.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMinCandidacyBond()
        {
            return MinCandidacyBondTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.MinStake
        /// </summary>
        [StorageChange("CollatorStaking", "MinStake")]
        public void OnUpdateMinStake(string data)
        {
            MinStakeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinStake
        ///  Minimum amount a user can stake.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetMinStake()
        {
            return MinStakeTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.CandidateStake
        /// </summary>
        [StorageChange("CollatorStaking", "CandidateStake")]
        public void OnUpdateCandidateStake(string key, string data)
        {
            CandidateStakeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CandidateStake
        ///  Amount staked by users per candidate.
        /// 
        ///  First key is the candidate, and second one is the staker.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo GetCandidateStake(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CandidateStakeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidateStakeInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.UserStake
        /// </summary>
        [StorageChange("CollatorStaking", "UserStake")]
        public void OnUpdateUserStake(string key, string data)
        {
            UserStakeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> UserStake
        ///  Number of candidates staked on by a user.
        /// 
        ///  Cannot be higher than `MaxStakedCandidates`.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo GetUserStake(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (UserStakeTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.UserStakeInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.ReleaseQueues
        /// </summary>
        [StorageChange("CollatorStaking", "ReleaseQueues")]
        public void OnUpdateReleaseQueues(string key, string data)
        {
            ReleaseQueuesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReleaseQueues
        ///  Release requests for an account.
        /// 
        ///  They can be actually released by calling the [`release`] extrinsic, after the relevant delay.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28 GetReleaseQueues(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReleaseQueuesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT28 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.CollatorRewardPercentage
        /// </summary>
        [StorageChange("CollatorStaking", "CollatorRewardPercentage")]
        public void OnUpdateCollatorRewardPercentage(string data)
        {
            CollatorRewardPercentageTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CollatorRewardPercentage
        ///  Percentage of rewards that would go for collators.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent GetCollatorRewardPercentage()
        {
            return CollatorRewardPercentageTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.ExtraReward
        /// </summary>
        [StorageChange("CollatorStaking", "ExtraReward")]
        public void OnUpdateExtraReward(string data)
        {
            ExtraRewardTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ExtraReward
        ///  Per-block extra reward.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetExtraReward()
        {
            return ExtraRewardTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.TotalBlocks
        /// </summary>
        [StorageChange("CollatorStaking", "TotalBlocks")]
        public void OnUpdateTotalBlocks(string data)
        {
            TotalBlocksTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TotalBlocks
        ///  Blocks produced in the current session. First value is the total,
        ///  and second is blocks produced by candidates only (not invulnerables).
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetTotalBlocks()
        {
            return TotalBlocksTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.ProducedBlocks
        /// </summary>
        [StorageChange("CollatorStaking", "ProducedBlocks")]
        public void OnUpdateProducedBlocks(string key, string data)
        {
            ProducedBlocksTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ProducedBlocks
        ///  Mapping of blocks and their authors.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetProducedBlocks(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProducedBlocksTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.CurrentSession
        /// </summary>
        [StorageChange("CollatorStaking", "CurrentSession")]
        public void OnUpdateCurrentSession(string data)
        {
            CurrentSessionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentSession
        ///  Current session index.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCurrentSession()
        {
            return CurrentSessionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.ClaimableRewards
        /// </summary>
        [StorageChange("CollatorStaking", "ClaimableRewards")]
        public void OnUpdateClaimableRewards(string data)
        {
            ClaimableRewardsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ClaimableRewards
        ///  Claimable rewards.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetClaimableRewards()
        {
            return ClaimableRewardsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.PerSessionRewards
        /// </summary>
        [StorageChange("CollatorStaking", "PerSessionRewards")]
        public void OnUpdatePerSessionRewards(string key, string data)
        {
            PerSessionRewardsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PerSessionRewards
        ///  Per-session rewards.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo GetPerSessionRewards(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PerSessionRewardsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.SessionInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.CounterForPerSessionRewards
        /// </summary>
        [StorageChange("CollatorStaking", "CounterForPerSessionRewards")]
        public void OnUpdateCounterForPerSessionRewards(string data)
        {
            CounterForPerSessionRewardsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForPerSessionRewards
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForPerSessionRewards()
        {
            return CounterForPerSessionRewardsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.AutoCompound
        /// </summary>
        [StorageChange("CollatorStaking", "AutoCompound")]
        public void OnUpdateAutoCompound(string key, string data)
        {
            AutoCompoundTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AutoCompound
        ///  Percentage of reward to be re-invested in collators.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent GetAutoCompound(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AutoCompoundTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CollatorStaking.CandidacyBondReleases
        /// </summary>
        [StorageChange("CollatorStaking", "CandidacyBondReleases")]
        public void OnUpdateCandidacyBondReleases(string key, string data)
        {
            CandidacyBondReleasesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CandidacyBondReleases
        ///  Time (in blocks) to release an ex-candidate's locked candidacy bond.
        ///  If a candidate leaves the candidacy before its bond is released, the waiting period
        ///  will restart.
        /// </summary>
        public Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease GetCandidacyBondReleases(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CandidacyBondReleasesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Mythos.NET.NetApiExt.Generated.Model.pallet_collator_staking.pallet.CandidacyBondRelease result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
