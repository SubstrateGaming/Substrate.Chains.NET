{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 1
          }
        ],
        "Path": [
          "account",
          "AccountId20"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 10
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "11": {
        "TypeId": 12,
        "TypeDef": "Compact"
      },
      "12": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "13": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 14
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "15": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "16": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "17": {
        "TypeId": 18,
        "TypeDef": "Sequence"
      },
      "18": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 19
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 19
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 19
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "19": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "20": {
        "TypeId": 21,
        "TypeDef": "Sequence"
      },
      "21": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 178
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 22
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 179
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 22
          },
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "22": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 23
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 33
              }
            ],
            "Index": 1
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 35
              }
            ],
            "Index": 4
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 38
              }
            ],
            "Index": 5
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 40
              }
            ],
            "Index": 6
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 41
              }
            ],
            "Index": 7
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 43
              }
            ],
            "Index": 10
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 45
              }
            ],
            "Index": 11
          },
          {
            "Name": "Nfts",
            "TypeFields": [
              {
                "TypeName": "pallet_nfts::Event<Runtime>",
                "TypeId": 46
              }
            ],
            "Index": 12
          },
          {
            "Name": "Marketplace",
            "TypeFields": [
              {
                "TypeName": "pallet_marketplace::Event<Runtime>",
                "TypeId": 62
              }
            ],
            "Index": 13
          },
          {
            "Name": "Multibatching",
            "TypeFields": [
              {
                "TypeName": "pallet_multibatching::Event<Runtime>",
                "TypeId": 64
              }
            ],
            "Index": 14
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 65
              }
            ],
            "Index": 15
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 66
              }
            ],
            "Index": 16
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 67
              }
            ],
            "Index": 17
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 72
              }
            ],
            "Index": 18
          },
          {
            "Name": "CollatorStaking",
            "TypeFields": [
              {
                "TypeName": "pallet_collator_staking::Event<Runtime>",
                "TypeId": 73
              }
            ],
            "Index": 21
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 76
              }
            ],
            "Index": 22
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 77
              }
            ],
            "Index": 30
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 78
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 166
              }
            ],
            "Index": 32
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "pallet_message_queue::Event<Runtime>",
                "TypeId": 167
              }
            ],
            "Index": 33
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 171
              }
            ],
            "Index": 40
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "pallet_vesting::Event<Runtime>",
                "TypeId": 174
              }
            ],
            "Index": 41
          },
          {
            "Name": "Escrow",
            "TypeFields": [
              {
                "TypeName": "pallet_escrow::Event<Runtime>",
                "TypeId": 175
              }
            ],
            "Index": 50
          },
          {
            "Name": "MythProxy",
            "TypeFields": [
              {
                "TypeName": "pallet_myth_proxy::Event<Runtime>",
                "TypeId": 176
              }
            ],
            "Index": 51
          },
          {
            "Name": "Dmarket",
            "TypeFields": [
              {
                "TypeName": "pallet_dmarket::Event<Runtime>",
                "TypeId": 177
              }
            ],
            "Index": 52
          }
        ],
        "Path": [
          "mainnet_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "23": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchEventInfo",
                "TypeId": 24
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 27
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchEventInfo",
                "TypeId": 24
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "An upgrade was authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "24": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 25
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 26
          }
        ],
        "Path": [
          "frame_system",
          "DispatchEventInfo"
        ],
        "TypeDef": "Composite"
      },
      "25": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 28
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 29
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 30
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 31
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Trie",
            "TypeFields": [
              {
                "TypeName": "TrieError",
                "TypeId": 32
              }
            ],
            "Index": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 19
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "29": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "31": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "32": {
        "Variants": [
          {
            "Name": "InvalidStateRoot",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "IncompleteDatabase",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ValueAtIncompleteKey",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "DecoderError",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "DuplicateKey",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "ExtraneousNode",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "ExtraneousValue",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "ExtraneousHashReference",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "InvalidChildReference",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "ValueMismatch",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "IncompleteProof",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "RootMismatch",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DecodeError",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "proving_trie",
          "TrieError"
        ],
        "TypeDef": "Variant"
      },
      "33": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 13
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 34
              }
            ],
            "Index": 5,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "34": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 14
          }
        ],
        "TypeDef": "Variant"
      },
      "35": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 27
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 27
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "36": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 37
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 27
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 37
          },
          {
            "Name": "E",
            "TypeId": 27
          }
        ],
        "TypeDef": "Variant"
      },
      "37": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "38": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 39
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 14
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 39
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 14
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 39
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 14
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "39": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "40": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "41": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 34
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "RetrySet",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 34
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 3,
            "Docs": [
              "Set a retry configuration for some task."
            ]
          },
          {
            "Name": "RetryCancelled",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 34
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel a retry configuration for some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 34
              }
            ],
            "Index": 5,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 34
              }
            ],
            "Index": 6,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "RetryFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 34
              }
            ],
            "Index": 7,
            "Docs": [
              "The given task was unable to be retried since the agenda is full at that block or there",
              "was not enough weight to reschedule it."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 34
              }
            ],
            "Index": 8,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "42": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "43": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 44
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          },
          {
            "Name": "TotalIssuanceForced",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "new",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The `TotalIssuance` was forcefully changed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "44": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "45": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "46": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A `collection` was created."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A `collection` was force-created."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 2,
            "Docs": [
              "A `collection` was destroyed."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "An `item` was issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An `item` was transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "An `item` was destroyed."
            ]
          },
          {
            "Name": "ItemTransferLocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "An `item` became non-transferable."
            ]
          },
          {
            "Name": "ItemTransferUnlocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "An `item` became transferable."
            ]
          },
          {
            "Name": "ItemPropertiesLocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "lock_metadata",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "lock_attributes",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 8,
            "Docs": [
              "`item` metadata or attributes were locked."
            ]
          },
          {
            "Name": "CollectionLocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 9,
            "Docs": [
              "Some `collection` was locked."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "new_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "issuer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              },
              {
                "Name": "admin",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              },
              {
                "Name": "freezer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              }
            ],
            "Index": 11,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "TransferApproved",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deadline",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 51
              }
            ],
            "Index": 12,
            "Docs": [
              "An `item` of a `collection` has been approved by the `owner` for transfer by",
              "a `delegate`."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "An approval for a `delegate` account to transfer the `item` of an item",
              "`collection` was cancelled by its `owner`."
            ]
          },
          {
            "Name": "AllApprovalsCancelled",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "All approvals of an item got cancelled."
            ]
          },
          {
            "Name": "CollectionConfigChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 15,
            "Docs": [
              "A `collection` has had its config changed by the `Force` origin."
            ]
          },
          {
            "Name": "CollectionMetadataSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 52
              }
            ],
            "Index": 16,
            "Docs": [
              "New metadata has been set for a `collection`."
            ]
          },
          {
            "Name": "CollectionMetadataCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 17,
            "Docs": [
              "Metadata has been cleared for a `collection`."
            ]
          },
          {
            "Name": "ItemMetadataSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 52
              }
            ],
            "Index": 18,
            "Docs": [
              "New metadata has been set for an item."
            ]
          },
          {
            "Name": "ItemMetadataCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Metadata has been cleared for an item."
            ]
          },
          {
            "Name": "Redeposited",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "successful_items",
                "TypeName": "Vec<ItemId>",
                "TypeId": 53
              }
            ],
            "Index": 20,
            "Docs": [
              "The deposit for a set of `item`s within a `collection` has been updated."
            ]
          },
          {
            "Name": "AttributeSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 55
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 52
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 56
              }
            ],
            "Index": 21,
            "Docs": [
              "New attribute metadata has been set for a `collection` or `item`."
            ]
          },
          {
            "Name": "AttributeCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 55
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 56
              }
            ],
            "Index": 22,
            "Docs": [
              "Attribute metadata has been cleared for a `collection` or `item`."
            ]
          },
          {
            "Name": "ItemAttributesApprovalAdded",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "A new approval to modify item attributes was added."
            ]
          },
          {
            "Name": "ItemAttributesApprovalRemoved",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 24,
            "Docs": [
              "A new approval to modify item attributes was removed."
            ]
          },
          {
            "Name": "OwnershipAcceptanceChanged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "maybe_collection",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 57
              }
            ],
            "Index": 25,
            "Docs": [
              "Ownership acceptance has changed for an account."
            ]
          },
          {
            "Name": "CollectionMaxSupplySet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "max_supply",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 26,
            "Docs": [
              "Max supply has been set for a collection."
            ]
          },
          {
            "Name": "CollectionMintSettingsUpdated",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 27,
            "Docs": [
              "Mint settings for a collection had changed."
            ]
          },
          {
            "Name": "NextCollectionIdIncremented",
            "TypeFields": [
              {
                "Name": "next_id",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 57
              }
            ],
            "Index": 28,
            "Docs": [
              "Event gets emitted when the `NextCollectionId` gets incremented."
            ]
          },
          {
            "Name": "ItemPriceSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              },
              {
                "Name": "whitelisted_buyer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              }
            ],
            "Index": 29,
            "Docs": [
              "The price was set for the item."
            ]
          },
          {
            "Name": "ItemPriceRemoved",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 30,
            "Docs": [
              "The price for the item was removed."
            ]
          },
          {
            "Name": "ItemBought",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              },
              {
                "Name": "seller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "buyer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 31,
            "Docs": [
              "An item was bought."
            ]
          },
          {
            "Name": "TipSent",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "receiver",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "DepositBalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 32,
            "Docs": [
              "A tip was sent."
            ]
          },
          {
            "Name": "SwapCreated",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "offered_item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "desired_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "desired_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 58
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 33,
            "Docs": [
              "An `item` swap intent was created."
            ]
          },
          {
            "Name": "SwapCancelled",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "offered_item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "desired_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "desired_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 58
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 34,
            "Docs": [
              "The swap was cancelled."
            ]
          },
          {
            "Name": "SwapClaimed",
            "TypeFields": [
              {
                "Name": "sent_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "sent_item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "sent_item_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "received_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "received_item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "received_item_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 58
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 35,
            "Docs": [
              "The swap has been claimed."
            ]
          },
          {
            "Name": "PreSignedAttributesSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 56
              }
            ],
            "Index": 36,
            "Docs": [
              "New attributes have been set for an `item` of the `collection`."
            ]
          },
          {
            "Name": "PalletAttributeSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "attribute",
                "TypeName": "PalletAttributes<T::CollectionId>",
                "TypeId": 61
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 52
              }
            ],
            "Index": 37,
            "Docs": [
              "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
              "within that `collection`."
            ]
          }
        ],
        "Path": [
          "pallet_nfts",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "47": {
        "TypeFields": [
          {
            "TypeName": "U256",
            "TypeId": 48
          }
        ],
        "Path": [
          "runtime_common",
          "IncrementableU256"
        ],
        "TypeDef": "Composite"
      },
      "48": {
        "TypeFields": [
          {
            "TypeName": "[u64; 4]",
            "TypeId": 49
          }
        ],
        "Path": [
          "primitive_types",
          "U256"
        ],
        "TypeDef": "Composite"
      },
      "49": {
        "Length": 4,
        "TypeId": 12,
        "TypeDef": "Array"
      },
      "50": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "51": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "52": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "53": {
        "TypeId": 6,
        "TypeDef": "Sequence"
      },
      "54": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "55": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "56": {
        "Variants": [
          {
            "Name": "Pallet",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CollectionOwner",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ItemOwner",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Account",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "AttributeNamespace"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "57": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 47
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 47
          }
        ],
        "TypeDef": "Variant"
      },
      "58": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 59
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 59
          }
        ],
        "TypeDef": "Variant"
      },
      "59": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "direction",
            "TypeName": "PriceDirection",
            "TypeId": 60
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PriceWithDirection"
        ],
        "TypeParams": [
          {
            "Name": "Amount",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "60": {
        "Variants": [
          {
            "Name": "Send",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Receive",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PriceDirection"
        ],
        "TypeDef": "Variant"
      },
      "61": {
        "Variants": [
          {
            "Name": "UsedToClaim",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 0
          },
          {
            "Name": "TransferDisabled",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PalletAttributes"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 47
          }
        ],
        "TypeDef": "Variant"
      },
      "62": {
        "Variants": [
          {
            "Name": "AuthorityUpdated",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "The pallet's authority was updated."
            ]
          },
          {
            "Name": "FeeSignerAddressUpdate",
            "TypeFields": [
              {
                "Name": "fee_signer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "The fee signer account was updated."
            ]
          },
          {
            "Name": "PayoutAddressUpdated",
            "TypeFields": [
              {
                "Name": "payout_address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "The payout address account was updated."
            ]
          },
          {
            "Name": "OrderCreated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "order_type",
                "TypeName": "OrderType",
                "TypeId": 63
              },
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "expires_at",
                "TypeName": "T::Moment",
                "TypeId": 12
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "An Ask/Bid order was created."
            ]
          },
          {
            "Name": "OrderExecuted",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "seller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "buyer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "seller_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "buyer_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A trade of Ask and Bid was executed."
            ]
          },
          {
            "Name": "OrderCanceled",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "The order was canceled by the order creator or the pallet's authority."
            ]
          }
        ],
        "Path": [
          "pallet_marketplace",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "63": {
        "Variants": [
          {
            "Name": "Ask",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Bid",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_marketplace",
          "types",
          "OrderType"
        ],
        "TypeDef": "Variant"
      },
      "64": {
        "Variants": [
          {
            "Name": "BatchApplied",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_multibatching",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "65": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 36,
                "Docs": [
                  "The result of the call made by the sudo user."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo call just took place."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50,
                "Docs": [
                  "The old sudo key (if one was previously set)."
                ]
              },
              {
                "Name": "new",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The new sudo key (if one was set)."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The sudo key has been updated."
            ]
          },
          {
            "Name": "KeyRemoved",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The key was permanently removed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 36,
                "Docs": [
                  "The result of the call made by the sudo user."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A [sudo_as](Pallet::sudo_as) call just took place."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "66": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "A proposal was killed."
            ]
          },
          {
            "Name": "ProposalCostBurned",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "Some cost for storing a proposal was burned."
            ]
          },
          {
            "Name": "ProposalCostReleased",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "Some cost for storing a proposal was released."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "67": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 68
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "until",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 69
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has seconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 71,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a proposal or a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 71,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ]
          },
          {
            "Name": "MetadataTransferred",
            "TypeFields": [
              {
                "Name": "prev_owner",
                "TypeName": "MetadataOwner",
                "TypeId": 71,
                "Docs": [
                  "Previous metadata owner."
                ]
              },
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 71,
                "Docs": [
                  "New metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been transferred to new owner."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "68": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "69": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 70
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "70": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "71": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Proposal",
            "TypeFields": [
              {
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Referendum",
            "TypeFields": [
              {
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "MetadataOwner"
        ],
        "TypeDef": "Variant"
      },
      "72": {
        "Variants": [
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          },
          {
            "Name": "AssetSpendApproved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "asset_kind",
                "TypeName": "T::AssetKind",
                "TypeId": 37
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::Beneficiary",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "expire_at",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "A new asset spend proposal has been approved."
            ]
          },
          {
            "Name": "AssetSpendVoided",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "An approved spend was voided."
            ]
          },
          {
            "Name": "Paid",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 37
              }
            ],
            "Index": 9,
            "Docs": [
              "A payment happened."
            ]
          },
          {
            "Name": "PaymentFailed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 37
              }
            ],
            "Index": 10,
            "Docs": [
              "A payment failed and can be retried."
            ]
          },
          {
            "Name": "SpendProcessed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "A spend was processed and removed from the storage. It might have been successfully",
              "paid or it may have expired."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "73": {
        "Variants": [
          {
            "Name": "NewInvulnerables",
            "TypeFields": [
              {
                "Name": "invulnerables",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              }
            ],
            "Index": 0,
            "Docs": [
              "New Invulnerables were set."
            ]
          },
          {
            "Name": "InvulnerableAdded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A new Invulnerable was added."
            ]
          },
          {
            "Name": "InvulnerableRemoved",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "An Invulnerable was removed."
            ]
          },
          {
            "Name": "NewDesiredCandidates",
            "TypeFields": [
              {
                "Name": "desired_candidates",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "The number of desired candidates was set."
            ]
          },
          {
            "Name": "NewMinCandidacyBond",
            "TypeFields": [
              {
                "Name": "bond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "The minimum candidacy bond was set."
            ]
          },
          {
            "Name": "CandidateAdded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "A new candidate joined."
            ]
          },
          {
            "Name": "CandidateRemoved",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "A candidate was removed."
            ]
          },
          {
            "Name": "InvalidInvulnerableSkipped",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account was unable to be added to the Invulnerables because they did not have keys",
              "registered. Other Invulnerables may have been set."
            ]
          },
          {
            "Name": "StakeAdded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A staker added stake to a candidate."
            ]
          },
          {
            "Name": "StakeReleased",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Stake was claimed after a penalty period."
            ]
          },
          {
            "Name": "ReleaseRequestCreated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "An unstake request was created."
            ]
          },
          {
            "Name": "StakeRemoved",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "A staker removed stake from a candidate"
            ]
          },
          {
            "Name": "StakingRewardReceived",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "A staking reward was delivered."
            ]
          },
          {
            "Name": "AutoCompoundPercentageSet",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "percentage",
                "TypeName": "Percent",
                "TypeId": 75
              }
            ],
            "Index": 13,
            "Docs": [
              "Autocompound percentage was set."
            ]
          },
          {
            "Name": "AutoCompoundDisabled",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "Autocompounding was disabled."
            ]
          },
          {
            "Name": "CollatorRewardPercentageSet",
            "TypeFields": [
              {
                "Name": "percentage",
                "TypeName": "Percent",
                "TypeId": 75
              }
            ],
            "Index": 15,
            "Docs": [
              "Collator reward percentage was set."
            ]
          },
          {
            "Name": "ExtraRewardSet",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "The extra reward was set."
            ]
          },
          {
            "Name": "ExtraRewardRemoved",
            "TypeFields": [
              {
                "Name": "amount_left",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "receiver",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              }
            ],
            "Index": 17,
            "Docs": [
              "The extra reward was removed."
            ]
          },
          {
            "Name": "NewMinStake",
            "TypeFields": [
              {
                "Name": "min_stake",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "The minimum amount to stake was changed."
            ]
          },
          {
            "Name": "SessionEnded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              },
              {
                "Name": "rewards",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "A session just ended."
            ]
          },
          {
            "Name": "ExtraRewardPotFunded",
            "TypeFields": [
              {
                "Name": "pot",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "The extra reward pot account was funded."
            ]
          },
          {
            "Name": "LockExtended",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The staking locked amount got extended."
            ]
          },
          {
            "Name": "CandidacyBondUpdated",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new_bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 22,
            "Docs": [
              "A candidate's candidacy bond got updated."
            ]
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "74": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "75": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "76": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "77": {
        "Variants": [
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "78": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "outcome",
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 79
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted."
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "message",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 14
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent."
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out."
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 109
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call."
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully."
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "actual_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "max_budgeted_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification",
              "could not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result."
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call."
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`."
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "expected_location",
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed."
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "assets",
                "TypeName": "VersionedAssets",
                "TypeId": 134
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap."
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "result",
                "TypeName": "XcmVersion",
                "TypeId": 4
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 14
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included."
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention."
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 80
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it."
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "VersionedLocation",
                "TypeId": 165
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format."
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "expected_querier",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "maybe_actual_querier",
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 14
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included."
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 14
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain send us XCM version change notifications."
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 14
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change",
              "notifications."
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "Name": "paying",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "fees",
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`)."
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "assets",
                "TypeName": "VersionedAssets",
                "TypeId": 134
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap"
            ]
          },
          {
            "Name": "VersionMigrationFinished",
            "TypeFields": [
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 23,
            "Docs": [
              "A XCM version migration finished."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "79": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "error",
                "TypeName": "Error",
                "TypeId": 80
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "Error",
                "TypeId": 80
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "80": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 37
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 39
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 40
          }
        ],
        "Path": [
          "xcm",
          "v5",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "81": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 82
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "location",
          "Location"
        ],
        "TypeDef": "Composite"
      },
      "82": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 1]>",
                "TypeId": 83
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 2]>",
                "TypeId": 91
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 3]>",
                "TypeId": 92
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 4]>",
                "TypeId": 93
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 5]>",
                "TypeId": 94
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 6]>",
                "TypeId": 95
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 7]>",
                "TypeId": 96
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 8]>",
                "TypeId": 97
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "83": {
        "Length": 1,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "84": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 86
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 86
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 86
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 89
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 90
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 87
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "85": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "86": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 87
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 87
          }
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 4
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "PolkadotBulletin",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "88": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "89": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 19
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "90": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "91": {
        "Length": 2,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "92": {
        "Length": 3,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "93": {
        "Length": 4,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "94": {
        "Length": 5,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "95": {
        "Length": 6,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "96": {
        "Length": 7,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "97": {
        "Length": 8,
        "TypeId": 84,
        "TypeDef": "Array"
      },
      "98": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 99
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "TypeId": 100,
        "TypeDef": "Sequence"
      },
      "100": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 109
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 119
              },
              {
                "Name": "fallback_max_weight",
                "TypeName": "Option<Weight>",
                "TypeId": 120
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 121
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 82
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 98
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 98
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 110
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 84
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 87
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 82
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 47
          },
          {
            "Name": "PayFees",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              }
            ],
            "Index": 48
          },
          {
            "Name": "InitiateTransfer",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "remote_fees",
                "TypeName": "Option<AssetTransferFilter>",
                "TypeId": 127
              },
              {
                "Name": "preserve_origin",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "assets",
                "TypeName": "Vec<AssetTransferFilter>",
                "TypeId": 129
              },
              {
                "Name": "remote_xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 49
          },
          {
            "Name": "ExecuteWithOrigin",
            "TypeFields": [
              {
                "Name": "descendant_origin",
                "TypeName": "Option<InteriorLocation>",
                "TypeId": 130
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<Call>",
                "TypeId": 98
              }
            ],
            "Index": 50
          },
          {
            "Name": "SetHints",
            "TypeFields": [
              {
                "Name": "hints",
                "TypeName": "BoundedVec<Hint, HintNumVariants>",
                "TypeId": 131
              }
            ],
            "Index": 51
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "101": {
        "TypeFields": [
          {
            "TypeName": "Vec<Asset>",
            "TypeId": 102
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "Assets"
        ],
        "TypeDef": "Composite"
      },
      "102": {
        "TypeId": 103,
        "TypeDef": "Sequence"
      },
      "103": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 104
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 105
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "Asset"
        ],
        "TypeDef": "Composite"
      },
      "104": {
        "TypeFields": [
          {
            "TypeName": "Location",
            "TypeId": 81
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "AssetId"
        ],
        "TypeDef": "Composite"
      },
      "105": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 106
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "106": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 19
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 107
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 108
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "107": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "108": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "109": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 110
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 112
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "110": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 111
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 111
          }
        ],
        "TypeDef": "Variant"
      },
      "111": {
        "TypeIds": [
          4,
          80
        ],
        "TypeDef": "Tuple"
      },
      "112": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 115
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 113
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "113": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 114
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 114
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 85
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "114": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "115": {
        "TypeId": 113,
        "TypeDef": "Sequence"
      },
      "116": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 117
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 117
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "117": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "118": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 81
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 81
          }
        ],
        "TypeDef": "Variant"
      },
      "119": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "120": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "121": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 15
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "122": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "Location",
            "TypeId": 81
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 11
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 10
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "123": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildAsset",
                "TypeId": 124
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "AssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "124": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 104
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 125
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 104
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 125
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "WildAsset"
        ],
        "TypeDef": "Variant"
      },
      "125": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "126": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "127": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 128
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 128
          }
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "Variants": [
          {
            "Name": "Teleport",
            "TypeFields": [
              {
                "TypeName": "AssetFilter",
                "TypeId": 123
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveDeposit",
            "TypeFields": [
              {
                "TypeName": "AssetFilter",
                "TypeId": 123
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReserveWithdraw",
            "TypeFields": [
              {
                "TypeName": "AssetFilter",
                "TypeId": 123
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "asset",
          "AssetTransferFilter"
        ],
        "TypeDef": "Variant"
      },
      "129": {
        "TypeId": 128,
        "TypeDef": "Sequence"
      },
      "130": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 82
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 82
          }
        ],
        "TypeDef": "Variant"
      },
      "131": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 133
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 132
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "132": {
        "Variants": [
          {
            "Name": "AssetClaimer",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "Hint"
        ],
        "TypeDef": "Variant"
      },
      "133": {
        "TypeId": 132,
        "TypeDef": "Sequence"
      },
      "134": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Assets",
                "TypeId": 146
              }
            ],
            "Index": 4
          },
          {
            "Name": "V5",
            "TypeFields": [
              {
                "TypeName": "v5::Assets",
                "TypeId": 101
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssets"
        ],
        "TypeDef": "Variant"
      },
      "135": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 136
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "136": {
        "TypeId": 137,
        "TypeDef": "Sequence"
      },
      "137": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 138
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 144
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "138": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "139": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 140
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "140": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              },
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "141": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 142
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 142
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 142
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 89
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 90
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 143
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "142": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 143
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 143
          }
        ],
        "TypeDef": "Variant"
      },
      "143": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "PolkadotBulletin",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "144": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 145
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "145": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 19
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 107
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 108
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "146": {
        "TypeFields": [
          {
            "TypeName": "Vec<Asset>",
            "TypeId": 147
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Assets"
        ],
        "TypeDef": "Composite"
      },
      "147": {
        "TypeId": 148,
        "TypeDef": "Sequence"
      },
      "148": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 149
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 163
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Asset"
        ],
        "TypeDef": "Composite"
      },
      "149": {
        "TypeFields": [
          {
            "TypeName": "Location",
            "TypeId": 150
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetId"
        ],
        "TypeDef": "Composite"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 151
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "location",
          "Location"
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 1]>",
                "TypeId": 152
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 2]>",
                "TypeId": 156
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 3]>",
                "TypeId": 157
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 4]>",
                "TypeId": 158
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 5]>",
                "TypeId": 159
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 6]>",
                "TypeId": 160
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 7]>",
                "TypeId": 161
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 8]>",
                "TypeId": 162
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "152": {
        "Length": 1,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "153": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 154
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 154
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 154
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 89
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 90
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 155
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "154": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 155
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 155
          }
        ],
        "TypeDef": "Variant"
      },
      "155": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "PolkadotBulletin",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "156": {
        "Length": 2,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "157": {
        "Length": 3,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "158": {
        "Length": 4,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "159": {
        "Length": 5,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "160": {
        "Length": 6,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "161": {
        "Length": 7,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "162": {
        "Length": 8,
        "TypeId": 153,
        "TypeDef": "Array"
      },
      "163": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 164
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "164": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 88
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 19
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 107
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 108
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "165": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Location",
                "TypeId": 150
              }
            ],
            "Index": 4
          },
          {
            "Name": "V5",
            "TypeFields": [
              {
                "TypeName": "v5::Location",
                "TypeId": 81
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "VersionedLocation"
        ],
        "TypeDef": "Variant"
      },
      "166": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              },
              {
                "TypeName": "Outcome",
                "TypeId": 79
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "167": {
        "Variants": [
          {
            "Name": "ProcessingFailed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 168,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "error",
                "TypeName": "ProcessMessageError",
                "TypeId": 170,
                "Docs": [
                  "The error that occurred.",
                  "",
                  "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                  "by the `MessageProcessor`."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
            ]
          },
          {
            "Name": "Processed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 168,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 10,
                "Docs": [
                  "How much weight was used to process the message."
                ]
              },
              {
                "Name": "success",
                "TypeName": "bool",
                "TypeId": 8,
                "Docs": [
                  "Whether the message was processed.",
                  "",
                  "Note that this does not mean that the underlying `MessageProcessor` was internally",
                  "successful. It *solely* means that the MQ pallet will treat this as a success",
                  "condition and discard the message. Any internal error needs to be emitted as events",
                  "by the `MessageProcessor`."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Message is processed."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 14,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 168,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4,
                "Docs": [
                  "The page of the message."
                ]
              },
              {
                "Name": "message_index",
                "TypeName": "T::Size",
                "TypeId": 4,
                "Docs": [
                  "The index of the message within the page."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Message placed in overweight queue."
            ]
          },
          {
            "Name": "PageReaped",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 168,
                "Docs": [
                  "The queue of the page."
                ]
              },
              {
                "Name": "index",
                "TypeName": "PageIndex",
                "TypeId": 4,
                "Docs": [
                  "The index of the page."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "This page was reaped."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "168": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Parent",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Sibling",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 169
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "cumulus_primitives_core",
          "AggregateMessageOrigin"
        ],
        "TypeDef": "Variant"
      },
      "169": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "170": {
        "Variants": [
          {
            "Name": "BadFormat",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Corrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Overweight",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "Yield",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "StackLimitReached",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "messages",
          "ProcessMessageError"
        ],
        "TypeDef": "Variant"
      },
      "171": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 36
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 173
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "172": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Balances",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "RestrictProxyManagement",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Staking",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "mainnet_runtime",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "173": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "174": {
        "Variants": [
          {
            "Name": "VestingUpdated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unvested",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ]
          },
          {
            "Name": "VestingCompleted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has become fully vested."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "175": {
        "Variants": [
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A deposit was made."
            ]
          },
          {
            "Name": "Released",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Funds were released from a deposit."
            ]
          },
          {
            "Name": "Revoked",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "reason",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 2,
            "Docs": [
              "A deposit was revoked and all deposited funds were transfered to the destination wallet."
            ]
          }
        ],
        "Path": [
          "pallet_escrow",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "176": {
        "Variants": [
          {
            "Name": "ProxyCreated",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "sponsor",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              }
            ],
            "Index": 0,
            "Docs": [
              "A new proxy permission was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "removed_by_sponsor",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50,
                "Docs": [
                  "The account that removed the proxy. If `None`, then it was the delegator."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "A proxy permission was removed."
            ]
          },
          {
            "Name": "ProxySponsorshipApproved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "sponsor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "approver",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Proxy funding was approved."
            ]
          },
          {
            "Name": "SponsorAgentRegistered",
            "TypeFields": [
              {
                "Name": "sponsor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A sponsor agent was registered."
            ]
          },
          {
            "Name": "SponsorAgentRevoked",
            "TypeFields": [
              {
                "Name": "sponsor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "A sponsor agent was revoked."
            ]
          },
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "Proxy call was executed.",
              "This event is emitted only when the proxy call is successful."
            ]
          }
        ],
        "Path": [
          "pallet_myth_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "177": {
        "Variants": [
          {
            "Name": "CollectionUpdated",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 0,
            "Docs": [
              "The fee signer account was updated."
            ]
          },
          {
            "Name": "Trade",
            "TypeFields": [
              {
                "Name": "buyer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "seller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "item",
                "TypeName": "Item",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A successful trade is executed."
            ]
          }
        ],
        "Path": [
          "pallet_dmarket",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "178": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "179": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "180": {
        "TypeId": 42,
        "TypeDef": "Sequence"
      },
      "181": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 85
          },
          {
            "Name": "spec_name",
            "TypeName": "Cow<'static, str>",
            "TypeId": 182
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "182": {
        "TypeFields": [
          {
            "TypeId": 183
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 183
          }
        ],
        "TypeDef": "Composite"
      },
      "183": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "184": {
        "TypeFields": [
          {
            "Name": "code_hash",
            "TypeName": "T::Hash",
            "TypeId": 13
          },
          {
            "Name": "check_version",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_system",
          "CodeUpgradeAuthorization"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "185": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "Can be executed by every `origin`."
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "Note that runtime upgrades will not run if this is called with a not-increasing spec",
              "version!"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 186
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 188
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 15
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 9,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "authorize_upgrade_without_checks",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
              "example that the spec name remains the same and that the version number increases. Not",
              "recommended for normal use. Use `authorize_upgrade` instead.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "apply_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 11,
            "Docs": [
              "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
              "",
              "If the authorization required a version check, this call will ensure the spec name",
              "remains unchanged and that the spec version has increased.",
              "",
              "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
              "the new `code` in the same block or attempt to schedule the upgrade.",
              "",
              "All origins are allowed."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "186": {
        "TypeId": 187,
        "TypeDef": "Sequence"
      },
      "187": {
        "TypeIds": [
          15,
          15
        ],
        "TypeDef": "Tuple"
      },
      "188": {
        "TypeId": 15,
        "TypeDef": "Sequence"
      },
      "189": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 190
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "190": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 191
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 191
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 191
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 191
          }
        ],
        "TypeDef": "Composite"
      },
      "191": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 120
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 120
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 120
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "192": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 193
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "193": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "194": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "195": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "Cow<'static, str>",
            "TypeId": 182
          },
          {
            "Name": "impl_name",
            "TypeName": "Cow<'static, str>",
            "TypeId": 182
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 196
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "system_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "196": {
        "TypeFields": [
          {
            "TypeId": 197
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 197
          }
        ],
        "TypeDef": "Composite"
      },
      "197": {
        "TypeId": 198,
        "TypeDef": "Sequence"
      },
      "198": {
        "TypeIds": [
          107,
          4
        ],
        "TypeDef": "Tuple"
      },
      "199": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          },
          {
            "Name": "MultiBlockMigrationsOngoing",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A multi-block migration is ongoing and prevents the current code from being replaced."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No upgrade authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The submitted code is not authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "200": {
        "TypeId": 201,
        "TypeDef": "Sequence"
      },
      "201": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 202
          },
          {
            "Name": "para_head_hash",
            "TypeName": "Option<H>",
            "TypeId": 207
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 208
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "Ancestor"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "202": {
        "TypeFields": [
          {
            "Name": "ump_msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "ump_total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_outgoing",
            "TypeName": "BTreeMap<ParaId, HrmpChannelUpdate>",
            "TypeId": 203
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "UsedBandwidth"
        ],
        "TypeDef": "Composite"
      },
      "203": {
        "TypeFields": [
          {
            "TypeId": 205
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 169
          },
          {
            "Name": "V",
            "TypeId": 204
          }
        ],
        "TypeDef": "Composite"
      },
      "204": {
        "TypeFields": [
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "HrmpChannelUpdate"
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "TypeId": 206,
        "TypeDef": "Sequence"
      },
      "206": {
        "TypeIds": [
          169,
          204
        ],
        "TypeDef": "Tuple"
      },
      "207": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Variant"
      },
      "208": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 209
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 209
          }
        ],
        "TypeDef": "Variant"
      },
      "209": {
        "Variants": [
          {
            "Name": "Abort",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "GoAhead",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "UpgradeGoAhead"
        ],
        "TypeDef": "Variant"
      },
      "210": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 202
          },
          {
            "Name": "hrmp_watermark",
            "TypeName": "Option<relay_chain::BlockNumber>",
            "TypeId": 51
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 208
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "SegmentTracker"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "211": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 212
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 13
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "212": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 15
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "213": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 214
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 214
          }
        ],
        "TypeDef": "Variant"
      },
      "214": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "215": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 216
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "216": {
        "TypeFields": [
          {
            "TypeId": 188
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 15
          }
        ],
        "TypeDef": "Composite"
      },
      "217": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 13
          },
          {
            "Name": "relay_dispatch_queue_remaining_capacity",
            "TypeName": "RelayDispatchQueueRemainingCapacity",
            "TypeId": 218
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 219
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 219
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "TypeFields": [
          {
            "Name": "remaining_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "RelayDispatchQueueRemainingCapacity"
        ],
        "TypeDef": "Composite"
      },
      "219": {
        "TypeId": 220,
        "TypeDef": "Sequence"
      },
      "220": {
        "TypeIds": [
          169,
          221
        ],
        "TypeDef": "Tuple"
      },
      "221": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 207
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "222": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "async_backing_params",
            "TypeName": "AsyncBackingParams",
            "TypeId": 223
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "223": {
        "TypeFields": [
          {
            "Name": "max_candidate_depth",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "allowed_ancestry_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v8",
          "async_backing",
          "AsyncBackingParams"
        ],
        "TypeDef": "Composite"
      },
      "224": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 13
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "225": {
        "TypeFields": [
          {
            "TypeId": 226
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 169
          },
          {
            "Name": "V",
            "TypeId": 224
          }
        ],
        "TypeDef": "Composite"
      },
      "226": {
        "TypeId": 227,
        "TypeDef": "Sequence"
      },
      "227": {
        "TypeIds": [
          169,
          224
        ],
        "TypeDef": "Tuple"
      },
      "228": {
        "TypeId": 229,
        "TypeDef": "Sequence"
      },
      "229": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 169
          },
          {
            "Name": "data",
            "TypeName": "alloc::vec::Vec<u8>",
            "TypeId": 15
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 169
          }
        ],
        "TypeDef": "Composite"
      },
      "230": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "231": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 232
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 15
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "232": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 211
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 215
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 233
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 235
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "233": {
        "TypeId": 234,
        "TypeDef": "Sequence"
      },
      "234": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 15
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "235": {
        "TypeFields": [
          {
            "TypeId": 238
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 169
          },
          {
            "Name": "V",
            "TypeId": 236
          }
        ],
        "TypeDef": "Composite"
      },
      "236": {
        "TypeId": 237,
        "TypeDef": "Sequence"
      },
      "237": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "alloc::vec::Vec<u8>",
            "TypeId": 15
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "238": {
        "TypeId": 239,
        "TypeDef": "Sequence"
      },
      "239": {
        "TypeIds": [
          169,
          236
        ],
        "TypeDef": "Tuple"
      },
      "240": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending."
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run."
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block."
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block."
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "241": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "[`Config::MinimumPeriod`].",
              "",
              "The dispatch origin for this call must be _None_.",
              "",
              "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
              "that changing the complexity of this call could result exhausting the resources in a",
              "block to execute any other calls.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "242": {
        "Variants": null,
        "Path": [
          "staging_parachain_info",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "243": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 244
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 173
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 244
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 356
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 244
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "244": {
        "TypeId": 245,
        "TypeDef": "Sequence"
      },
      "245": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 185
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 231
              }
            ],
            "Index": 1
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 241
              }
            ],
            "Index": 2
          },
          {
            "Name": "ParachainInfo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                "TypeId": 242
              }
            ],
            "Index": 3
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 243
              }
            ],
            "Index": 4
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 246
              }
            ],
            "Index": 5
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 248
              }
            ],
            "Index": 6
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 249
              }
            ],
            "Index": 7
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 251
              }
            ],
            "Index": 10
          },
          {
            "Name": "Nfts",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nfts, Runtime>",
                "TypeId": 253
              }
            ],
            "Index": 12
          },
          {
            "Name": "Marketplace",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Marketplace, Runtime>",
                "TypeId": 273
              }
            ],
            "Index": 13
          },
          {
            "Name": "Multibatching",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multibatching, Runtime>",
                "TypeId": 277
              }
            ],
            "Index": 14
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 285
              }
            ],
            "Index": 15
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 286
              }
            ],
            "Index": 16
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 287
              }
            ],
            "Index": 17
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 292
              }
            ],
            "Index": 18
          },
          {
            "Name": "CollatorStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorStaking, Runtime>",
                "TypeId": 293
              }
            ],
            "Index": 21
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 297
              }
            ],
            "Index": 22
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 300
              }
            ],
            "Index": 30
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 301
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                "TypeId": 345
              }
            ],
            "Index": 32
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                "TypeId": 346
              }
            ],
            "Index": 33
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 347
              }
            ],
            "Index": 40
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 349
              }
            ],
            "Index": 41
          },
          {
            "Name": "Escrow",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Escrow, Runtime>",
                "TypeId": 351
              }
            ],
            "Index": 50
          },
          {
            "Name": "MythProxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MythProxy, Runtime>",
                "TypeId": 352
              }
            ],
            "Index": 51
          },
          {
            "Name": "Dmarket",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Dmarket, Runtime>",
                "TypeId": 353
              }
            ],
            "Index": 52
          }
        ],
        "Path": [
          "mainnet_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "246": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 173
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 247
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 173
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 247
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 173
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 39
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "247": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 39
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 39
          }
        ],
        "TypeDef": "Variant"
      },
      "248": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          },
          {
            "Name": "ensure_updated",
            "TypeFields": [
              {
                "Name": "hashes",
                "TypeName": "Vec<T::Hash>",
                "TypeId": 179
              }
            ],
            "Index": 4,
            "Docs": [
              "Ensure that the a bulk of pre-images is upgraded.",
              "",
              "The caller pays no fee if at least 90% of pre-images were successfully updated."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "249": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 250
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 14
              },
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 250
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 14
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 250
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 14
              },
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 250
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay."
            ]
          },
          {
            "Name": "set_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
              "be retried after `period` blocks, for a total amount of `retries` retries or until it",
              "succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "set_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 14
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
              "will be retried after `period` blocks, for a total amount of `retries` retries or until",
              "it succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "cancel_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 42
              }
            ],
            "Index": 8,
            "Docs": [
              "Removes the retry configuration of a task."
            ]
          },
          {
            "Name": "cancel_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 14
              }
            ],
            "Index": 9,
            "Docs": [
              "Cancel the retry configuration of a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "250": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 42
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 42
          }
        ],
        "TypeDef": "Variant"
      },
      "251": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 88
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 88
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
              "may be specified."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 88
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
              "kill the origin account.",
              "",
              "99% of the time you want [`transfer_allow_death`] instead.",
              "",
              "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              }
            ],
            "Index": 6,
            "Docs": [
              "Upgrade a specified account.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `who`: The account to be upgraded.",
              "",
              "This will waive the transaction fee if at least all but 10% of the accounts needed to",
              "be upgraded. (We let some not have to be upgraded just in order to allow for the",
              "possibility of churn)."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 88
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the regular balance of a given account.",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_adjust_total_issuance",
            "TypeFields": [
              {
                "Name": "direction",
                "TypeName": "AdjustmentDirection",
                "TypeId": 252
              },
              {
                "Name": "delta",
                "TypeName": "T::Balance",
                "TypeId": 88
              }
            ],
            "Index": 9,
            "Docs": [
              "Adjust the total issuance in a saturating way.",
              "",
              "Can only be called by root and always needs a positive `delta`.",
              "",
              "# Example"
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 88
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Burn the specified liquid free balance from the origin account.",
              "",
              "If the origin's account ends up below the existential deposit as a result",
              "of the burn and `keep_alive` is false, the account will be reaped.",
              "",
              "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
              "this `burn` operation will reduce total issuance by the amount _burned_."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "252": {
        "Variants": [
          {
            "Name": "Increase",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AdjustmentDirection"
        ],
        "TypeDef": "Variant"
      },
      "253": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "config",
                "TypeName": "CollectionConfigFor<T, I>",
                "TypeId": 254
              }
            ],
            "Index": 0,
            "Docs": [
              "Issue a new collection of non-fungible items from a public origin.",
              "",
              "This new collection has no items initially and its owner is the origin.",
              "",
              "The origin must be Signed and the sender must have sufficient funds free.",
              "",
              "`CollectionDeposit` funds of sender are reserved.",
              "",
              "Parameters:",
              "- `admin`: The admin of this collection. The admin is the initial address of each",
              "member of the collection's admin team.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "config",
                "TypeName": "CollectionConfigFor<T, I>",
                "TypeId": 254
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue a new collection of non-fungible items from a privileged origin.",
              "",
              "This new collection has no items initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `owner`: The owner of this collection of items. The owner has full superuser",
              "  permissions over this item, but may later change and configure the permissions using",
              "  `transfer_ownership` and `set_team`.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "destroy",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "witness",
                "TypeName": "DestroyWitness",
                "TypeId": 261
              }
            ],
            "Index": 2,
            "Docs": [
              "Destroy a collection of fungible items.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
              "owner of the `collection`.",
              "",
              "NOTE: The collection must have 0 items to be destroyed.",
              "",
              "- `collection`: The identifier of the collection to be destroyed.",
              "- `witness`: Information on the items minted in the collection. This must be",
              "correct.",
              "",
              "Emits `Destroyed` event when successful.",
              "",
              "Weight: `O(m + c + a)` where:",
              "- `m = witness.item_metadatas`",
              "- `c = witness.item_configs`",
              "- `a = witness.attributes`"
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "mint_to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "witness_data",
                "TypeName": "Option<MintWitness<ItemId, DepositBalanceOf<T, I>>>",
                "TypeId": 262
              }
            ],
            "Index": 3,
            "Docs": [
              "Mint an item of a particular collection.",
              "",
              "The origin must be Signed and the sender must comply with the `mint_settings` rules.",
              "",
              "- `collection`: The collection of the item to be minted.",
              "- `maybe_item`: An identifier of the new item. If the collection mints serially, this should be `None`.",
              "- `mint_to`: Account into which the item will be minted.",
              "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned",
              "  item_id from that collection needs to be provided within the witness data object. If",
              "  the mint price is set, then it should be additionally confirmed in the `witness_data`.",
              "",
              "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_mint",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "mint_to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "item_config",
                "TypeName": "ItemConfig",
                "TypeId": 264
              }
            ],
            "Index": 4,
            "Docs": [
              "Mint an item of a particular collection from a privileged origin.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
              "Issuer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be minted.",
              "- `maybe_item`: An identifier of the new item.",
              "- `mint_to`: Account into which the item will be minted.",
              "- `item_config`: A config of the new item.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Destroy a single item.",
              "",
              "The origin must conform to `ForceOrigin` or must be Signed and the signing account must",
              "be the owner of the `item`.",
              "",
              "- `collection`: The collection of the item to be burned.",
              "- `item`: The item to be burned.",
              "",
              "Emits `Burned`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Move an item from the sender account to another.",
              "",
              "Origin must be Signed and the signing account must be either:",
              "- the Owner of the `item`;",
              "- the approved delegate for the `item` (in this case, the approval is reset).",
              "",
              "Arguments:",
              "- `collection`: The collection of the item to be transferred.",
              "- `item`: The item to be transferred.",
              "- `dest`: The account to receive ownership of the item.",
              "",
              "Emits `Transferred`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "redeposit",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "items",
                "TypeName": "Vec<ItemId>",
                "TypeId": 53
              }
            ],
            "Index": 7,
            "Docs": [
              "Re-evaluate the deposits on some items.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection of the items to be reevaluated.",
              "- `items`: The items of the collection whose deposits will be reevaluated.",
              "",
              "NOTE: This exists as a best-effort function. Any items which are unknown or",
              "in the case that the owner account does not have reservable funds to pay for a",
              "deposit increase are ignored. Generally the owner isn't going to call this on items",
              "whose existing deposit is less than the refreshed deposit as it would only cost them,",
              "so it's of little consequence.",
              "",
              "It will still return an error in the case that the collection is unknown or the signer",
              "is not permitted to call it.",
              "",
              "Weight: `O(items.len())`"
            ]
          },
          {
            "Name": "lock_item_transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Disallow further unprivileged transfer of an item.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be changed.",
              "- `item`: The item to become non-transferable.",
              "",
              "Emits `ItemTransferLocked`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "unlock_item_transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Re-allow unprivileged transfer of an item.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be changed.",
              "- `item`: The item to become transferable.",
              "",
              "Emits `ItemTransferUnlocked`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "lock_collection",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "lock_settings",
                "TypeName": "CollectionSettings",
                "TypeId": 255
              }
            ],
            "Index": 10,
            "Docs": [
              "Disallows specified settings for the whole collection.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection to be locked.",
              "- `lock_settings`: The settings to be locked.",
              "",
              "Note: it's possible to only lock(set) the setting, but not to unset it.",
              "",
              "Emits `CollectionLocked`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "new_owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "Change the Owner of a collection.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection whose owner should be changed.",
              "- `owner`: The new Owner of this collection. They must have called",
              "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "issuer",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 50
              },
              {
                "Name": "admin",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 50
              },
              {
                "Name": "freezer",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 50
              }
            ],
            "Index": 12,
            "Docs": [
              "Change the Issuer, Admin and Freezer of a collection.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`collection`.",
              "",
              "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it",
              "after to `Some(account)`.",
              "",
              "- `collection`: The collection whose team should be changed.",
              "- `issuer`: The new Issuer of this collection.",
              "- `admin`: The new Admin of this collection.",
              "- `freezer`: The new Freezer of this collection.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_collection_owner",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "Change the Owner of a collection.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `collection`: The identifier of the collection.",
              "- `owner`: The new Owner of this collection.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_collection_config",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "config",
                "TypeName": "CollectionConfigFor<T, I>",
                "TypeId": 254
              }
            ],
            "Index": 14,
            "Docs": [
              "Change the config of a collection.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `collection`: The identifier of the collection.",
              "- `config`: The new config of this collection.",
              "",
              "Emits `CollectionConfigChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "maybe_deadline",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 51
              }
            ],
            "Index": 15,
            "Docs": [
              "Approve an item to be transferred by a delegated third-party account.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`item`.",
              "",
              "- `collection`: The collection of the item to be approved for delegated transfer.",
              "- `item`: The item to be approved for delegated transfer.",
              "- `delegate`: The account to delegate permission to transfer the item.",
              "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the",
              "\tnumber of blocks after which the approval will expire",
              "",
              "Emits `TransferApproved` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 16,
            "Docs": [
              "Cancel one of the transfer approvals for a specific item.",
              "",
              "Origin must be either:",
              "- the `Force` origin;",
              "- `Signed` with the signer being the Owner of the `item`;",
              "",
              "Arguments:",
              "- `collection`: The collection of the item of whose approval will be cancelled.",
              "- `item`: The item of the collection of whose approval will be cancelled.",
              "- `delegate`: The account that is going to loose their approval.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_all_transfer_approvals",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Cancel all the approvals of a specific item.",
              "",
              "Origin must be either:",
              "- the `Force` origin;",
              "- `Signed` with the signer being the Owner of the `item`;",
              "",
              "Arguments:",
              "- `collection`: The collection of the item of whose approvals will be cleared.",
              "- `item`: The item of the collection of whose approvals will be cleared.",
              "",
              "Emits `AllApprovalsCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "lock_item_properties",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "lock_metadata",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "lock_attributes",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 18,
            "Docs": [
              "Disallows changing the metadata or attributes of the item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin",
              "of the `collection`.",
              "",
              "- `collection`: The collection if the `item`.",
              "- `item`: An item to be locked.",
              "- `lock_metadata`: Specifies whether the metadata should be locked.",
              "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace",
              "  should be locked.",
              "",
              "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.",
              "When the metadata or attributes are locked, it won't be possible the unlock them.",
              "",
              "Emits `ItemPropertiesLocked`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_attribute",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 55
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 52
              }
            ],
            "Index": 19,
            "Docs": [
              "Set an attribute for a collection or item.",
              "",
              "Origin must be Signed and must conform to the namespace ruleset:",
              "- `CollectionOwner` namespace could be modified by the `collection` Admin only;",
              "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`",
              "  should be set in that case;",
              "- `Account(AccountId)` namespace could be modified only when the `origin` was given a",
              "  permission to do so;",
              "",
              "The funds of `origin` are reserved according to the formula:",
              "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `maybe_item`: The identifier of the item whose metadata to set.",
              "- `namespace`: Attribute's namespace.",
              "- `key`: The key of the attribute.",
              "- `value`: The value to which to set the attribute.",
              "",
              "Emits `AttributeSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_set_attribute",
            "TypeFields": [
              {
                "Name": "set_as",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              },
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 55
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 52
              }
            ],
            "Index": 20,
            "Docs": [
              "Force-set an attribute for a collection or item.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "If the attribute already exists and it was set by another account, the deposit",
              "will be returned to the previous owner.",
              "",
              "- `set_as`: An optional owner of the attribute.",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `maybe_item`: The identifier of the item whose metadata to set.",
              "- `namespace`: Attribute's namespace.",
              "- `key`: The key of the attribute.",
              "- `value`: The value to which to set the attribute.",
              "",
              "Emits `AttributeSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_attribute",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 55
              }
            ],
            "Index": 21,
            "Docs": [
              "Clear an attribute for a collection or item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "attribute.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to clear.",
              "- `maybe_item`: The identifier of the item whose metadata to clear.",
              "- `namespace`: Attribute's namespace.",
              "- `key`: The key of the attribute.",
              "",
              "Emits `AttributeCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "approve_item_attributes",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 22,
            "Docs": [
              "Approve item's attributes to be changed by a delegated third-party account.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `collection`: A collection of the item.",
              "- `item`: The item that holds attributes.",
              "- `delegate`: The account to delegate permission to change attributes of the item.",
              "",
              "Emits `ItemAttributesApprovalAdded` on success."
            ]
          },
          {
            "Name": "cancel_item_attributes_approval",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "witness",
                "TypeName": "CancelAttributesApprovalWitness",
                "TypeId": 265
              }
            ],
            "Index": 23,
            "Docs": [
              "Cancel the previously provided approval to change item's attributes.",
              "All the previously set attributes by the `delegate` will be removed.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `collection`: Collection that the item is contained within.",
              "- `item`: The item that holds attributes.",
              "- `delegate`: The previously approved account to remove.",
              "",
              "Emits `ItemAttributesApprovalRemoved` on success."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 52
              }
            ],
            "Index": 24,
            "Docs": [
              "Set the metadata for an item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
              "`collection`.",
              "",
              "If the origin is Signed, then funds of signer are reserved according to the formula:",
              "`MetadataDepositBase + DepositPerByte * data.len` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `item`: The identifier of the item whose metadata to set.",
              "- `data`: The general information of this item. Limited in length by `StringLimit`.",
              "",
              "Emits `ItemMetadataSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "Clear the metadata for an item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
              "`collection`.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to clear.",
              "- `item`: The identifier of the item whose metadata to clear.",
              "",
              "Emits `ItemMetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_collection_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 52
              }
            ],
            "Index": 26,
            "Docs": [
              "Set the metadata for a collection.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
              "the `collection`.",
              "",
              "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
              "`MetadataDepositBase + DepositPerByte * data.len` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the item whose metadata to update.",
              "- `data`: The general information of this item. Limited in length by `StringLimit`.",
              "",
              "Emits `CollectionMetadataSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_collection_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 27,
            "Docs": [
              "Clear the metadata for a collection.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
              "the `collection`.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose metadata to clear.",
              "",
              "Emits `CollectionMetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_accept_ownership",
            "TypeFields": [
              {
                "Name": "maybe_collection",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 57
              }
            ],
            "Index": 28,
            "Docs": [
              "Set (or reset) the acceptance of ownership for a particular account.",
              "",
              "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
              "provider reference.",
              "",
              "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
              "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
              "  ownership transferal.",
              "",
              "Emits `OwnershipAcceptanceChanged`."
            ]
          },
          {
            "Name": "set_collection_max_supply",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "max_supply",
                "TypeName": "u128",
                "TypeId": 6
              }
            ],
            "Index": 29,
            "Docs": [
              "Set the maximum number of items a collection could have.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
              "the `collection`.",
              "",
              "- `collection`: The identifier of the collection to change.",
              "- `max_supply`: The maximum number of items a collection could have.",
              "",
              "Emits `CollectionMaxSupplySet` event when successful."
            ]
          },
          {
            "Name": "update_mint_settings",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "mint_settings",
                "TypeName": "MintSettings<BalanceOf<T, I>, BlockNumberFor<T>, T::CollectionId>",
                "TypeId": 257
              }
            ],
            "Index": 30,
            "Docs": [
              "Update mint settings.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer",
              "of the `collection`.",
              "",
              "- `collection`: The identifier of the collection to change.",
              "- `mint_settings`: The new mint settings.",
              "",
              "Emits `CollectionMintSettingsUpdated` event when successful."
            ]
          },
          {
            "Name": "set_price",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "Option<ItemPrice<T, I>>",
                "TypeId": 54
              },
              {
                "Name": "whitelisted_buyer",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 50
              }
            ],
            "Index": 31,
            "Docs": [
              "Set (or reset) the price for an item.",
              "",
              "Origin must be Signed and must be the owner of the `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item to set the price for.",
              "- `price`: The price for the item. Pass `None`, to reset the price.",
              "- `buyer`: Restricts the buy operation to a specific account.",
              "",
              "Emits `ItemPriceSet` on success if the price is not `None`.",
              "Emits `ItemPriceRemoved` on success if the price is `None`."
            ]
          },
          {
            "Name": "buy_item",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "bid_price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 32,
            "Docs": [
              "Allows to buy an item if it's up for sale.",
              "",
              "Origin must be Signed and must not be the owner of the `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item the sender wants to buy.",
              "- `bid_price`: The price the sender is willing to pay.",
              "",
              "Emits `ItemBought` on success."
            ]
          },
          {
            "Name": "pay_tips",
            "TypeFields": [
              {
                "Name": "tips",
                "TypeName": "BoundedVec<ItemTipOf<T, I>, T::MaxTips>",
                "TypeId": 266
              }
            ],
            "Index": 33,
            "Docs": [
              "Allows to pay the tips.",
              "",
              "Origin must be Signed.",
              "",
              "- `tips`: Tips array.",
              "",
              "Emits `TipSent` on every tip transfer."
            ]
          },
          {
            "Name": "create_swap",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "offered_item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "desired_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "maybe_desired_item",
                "TypeName": "Option<ItemId>",
                "TypeId": 54
              },
              {
                "Name": "maybe_price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 58
              },
              {
                "Name": "duration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 34,
            "Docs": [
              "Register a new atomic swap, declaring an intention to send an `item` in exchange for",
              "`desired_item` from origin to target on the current blockchain.",
              "The target can execute the swap during the specified `duration` of blocks (if set).",
              "Additionally, the price could be set for the desired `item`.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item an owner wants to give.",
              "- `desired_collection`: The collection of the desired item.",
              "- `desired_item`: The desired item an owner wants to receive.",
              "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.",
              "- `duration`: A deadline for the swap. Specified by providing the number of blocks",
              "\tafter which the swap will expire.",
              "",
              "Emits `SwapCreated` on success."
            ]
          },
          {
            "Name": "cancel_swap",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "offered_item",
                "TypeName": "ItemId",
                "TypeId": 6
              }
            ],
            "Index": 35,
            "Docs": [
              "Cancel an atomic swap.",
              "",
              "Origin must be Signed.",
              "Origin must be an owner of the `item` if the deadline hasn't expired.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item an owner wants to give.",
              "",
              "Emits `SwapCancelled` on success."
            ]
          },
          {
            "Name": "claim_swap",
            "TypeFields": [
              {
                "Name": "send_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "send_item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "receive_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "receive_item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "witness_price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 58
              }
            ],
            "Index": 36,
            "Docs": [
              "Claim an atomic swap.",
              "This method executes a pending swap, that was created by a counterpart before.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `send_collection`: The collection of the item to be sent.",
              "- `send_item`: The item to be sent.",
              "- `receive_collection`: The collection of the item to be received.",
              "- `receive_item`: The item to be received.",
              "- `witness_price`: A price that was previously agreed on.",
              "",
              "Emits `SwapClaimed` on success."
            ]
          },
          {
            "Name": "mint_pre_signed",
            "TypeFields": [
              {
                "Name": "mint_data",
                "TypeName": "Box<PreSignedMintOf<T, I>>",
                "TypeId": 269
              },
              {
                "Name": "signature",
                "TypeName": "T::OffchainSignature",
                "TypeId": 270
              },
              {
                "Name": "signer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 37,
            "Docs": [
              "Mint an item by providing the pre-signed approval.",
              "",
              "Origin must be Signed.",
              "",
              "- `mint_data`: The pre-signed approval that consists of the information about the item,",
              "  its metadata, attributes, who can mint it (`None` for anyone) and until what block",
              "  number.",
              "- `signature`: The signature of the `data` object.",
              "- `signer`: The `data` object's signer. Should be an Issuer of the collection.",
              "",
              "Emits `Issued` on success.",
              "Emits `AttributeSet` if the attributes were provided.",
              "Emits `ItemMetadataSet` if the metadata was not empty."
            ]
          },
          {
            "Name": "set_attributes_pre_signed",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "PreSignedAttributesOf<T, I>",
                "TypeId": 272
              },
              {
                "Name": "signature",
                "TypeName": "T::OffchainSignature",
                "TypeId": 270
              },
              {
                "Name": "signer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 38,
            "Docs": [
              "Set attributes for an item by providing the pre-signed approval.",
              "",
              "Origin must be Signed and must be an owner of the `data.item`.",
              "",
              "- `data`: The pre-signed approval that consists of the information about the item,",
              "  attributes to update and until what block number.",
              "- `signature`: The signature of the `data` object.",
              "- `signer`: The `data` object's signer. Should be an Admin of the collection for the",
              "  `CollectionOwner` namespace.",
              "",
              "Emits `AttributeSet` for each provided attribute.",
              "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.",
              "Emits `PreSignedAttributesSet` on success."
            ]
          }
        ],
        "Path": [
          "pallet_nfts",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "254": {
        "TypeFields": [
          {
            "Name": "settings",
            "TypeName": "CollectionSettings",
            "TypeId": 255
          },
          {
            "Name": "max_supply",
            "TypeName": "Option<u128>",
            "TypeId": 54
          },
          {
            "Name": "mint_settings",
            "TypeName": "MintSettings<Price, BlockNumber, CollectionId>",
            "TypeId": 257
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionConfig"
        ],
        "TypeParams": [
          {
            "Name": "Price",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "CollectionId",
            "TypeId": 47
          }
        ],
        "TypeDef": "Composite"
      },
      "255": {
        "TypeFields": [
          {
            "TypeName": "CollectionSetting",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 256
          }
        ],
        "TypeDef": "Composite"
      },
      "256": {
        "Variants": [
          {
            "Name": "TransferableItems",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UnlockedMetadata",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UnlockedAttributes",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "UnlockedMaxSupply",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "DepositRequired",
            "TypeFields": null,
            "Index": 16
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionSetting"
        ],
        "TypeDef": "Variant"
      },
      "257": {
        "TypeFields": [
          {
            "Name": "mint_type",
            "TypeName": "MintType<CollectionId>",
            "TypeId": 258
          },
          {
            "Name": "price",
            "TypeName": "Option<Price>",
            "TypeId": 54
          },
          {
            "Name": "start_block",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 51
          },
          {
            "Name": "end_block",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 51
          },
          {
            "Name": "default_item_settings",
            "TypeName": "ItemSettings",
            "TypeId": 259
          },
          {
            "Name": "serial_mint",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "MintSettings"
        ],
        "TypeParams": [
          {
            "Name": "Price",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "CollectionId",
            "TypeId": 47
          }
        ],
        "TypeDef": "Composite"
      },
      "258": {
        "Variants": [
          {
            "Name": "Issuer",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Public",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "HolderOf",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "MintType"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 47
          }
        ],
        "TypeDef": "Variant"
      },
      "259": {
        "TypeFields": [
          {
            "TypeName": "ItemSetting",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 260
          }
        ],
        "TypeDef": "Composite"
      },
      "260": {
        "Variants": [
          {
            "Name": "Transferable",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UnlockedMetadata",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UnlockedAttributes",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemSetting"
        ],
        "TypeDef": "Variant"
      },
      "261": {
        "TypeFields": [
          {
            "Name": "item_metadatas",
            "TypeName": "u128",
            "TypeId": 88
          },
          {
            "Name": "item_configs",
            "TypeName": "u128",
            "TypeId": 88
          },
          {
            "Name": "attributes",
            "TypeName": "u32",
            "TypeId": 85
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "DestroyWitness"
        ],
        "TypeDef": "Composite"
      },
      "262": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 263
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 263
          }
        ],
        "TypeDef": "Variant"
      },
      "263": {
        "TypeFields": [
          {
            "Name": "owned_item",
            "TypeName": "Option<ItemId>",
            "TypeId": 54
          },
          {
            "Name": "mint_price",
            "TypeName": "Option<Balance>",
            "TypeId": 54
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "MintWitness"
        ],
        "TypeParams": [
          {
            "Name": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "264": {
        "TypeFields": [
          {
            "Name": "settings",
            "TypeName": "ItemSettings",
            "TypeId": 259
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemConfig"
        ],
        "TypeDef": "Composite"
      },
      "265": {
        "TypeFields": [
          {
            "Name": "account_attributes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CancelAttributesApprovalWitness"
        ],
        "TypeDef": "Composite"
      },
      "266": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 268
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 267
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "267": {
        "TypeFields": [
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "item",
            "TypeName": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "receiver",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Amount",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemTip"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Amount",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "268": {
        "TypeId": 267,
        "TypeDef": "Sequence"
      },
      "269": {
        "TypeFields": [
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "maybe_item",
            "TypeName": "Option<ItemId>",
            "TypeId": 54
          },
          {
            "Name": "attributes",
            "TypeName": "Vec<(Vec<u8>, Vec<u8>)>",
            "TypeId": 186
          },
          {
            "Name": "metadata",
            "TypeName": "Vec<u8>",
            "TypeId": 15
          },
          {
            "Name": "only_account",
            "TypeName": "Option<AccountId>",
            "TypeId": 50
          },
          {
            "Name": "deadline",
            "TypeName": "Deadline",
            "TypeId": 4
          },
          {
            "Name": "mint_price",
            "TypeName": "Option<Balance>",
            "TypeId": 54
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PreSignedMint"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Deadline",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "270": {
        "TypeFields": [
          {
            "TypeName": "ecdsa::Signature",
            "TypeId": 271
          }
        ],
        "Path": [
          "account",
          "EthereumSignature"
        ],
        "TypeDef": "Composite"
      },
      "271": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "272": {
        "TypeFields": [
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "item",
            "TypeName": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "attributes",
            "TypeName": "Vec<(Vec<u8>, Vec<u8>)>",
            "TypeId": 186
          },
          {
            "Name": "namespace",
            "TypeName": "AttributeNamespace<AccountId>",
            "TypeId": 56
          },
          {
            "Name": "deadline",
            "TypeName": "Deadline",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PreSignedAttributes"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Deadline",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "273": {
        "Variants": [
          {
            "Name": "force_set_authority",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the authority role, granting owner rights.",
              "",
              "Only the root origin can execute this function.",
              "",
              "Parameters:",
              "- `authority`: The account ID of the administrator to be set as the pallet's authority.",
              "",
              "Emits AuthorityUpdated when successful.",
              "",
              "Weight: `WeightInfo::force_set_authority` (defined in the `Config` trait)."
            ]
          },
          {
            "Name": "set_fee_signer_address",
            "TypeFields": [
              {
                "Name": "fee_signer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Sets the fee signer address, allowing the designated account that signs fees.",
              "",
              "Only an account with the authority role can execute this function.",
              "",
              "Parameters:",
              "- `fee_signer`: The account ID of the fee signer to be set.",
              "",
              "Emits `FeeSignerAddressUpdate` event upon successful execution.",
              "",
              "Weight: `WeightInfo::set_fee_signer_address` (defined in the `Config` trait)."
            ]
          },
          {
            "Name": "set_payout_address",
            "TypeFields": [
              {
                "Name": "payout_address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Allows the authority account to set the payout address, which receives fee payments from trades.",
              "",
              "Only an account with the authority role can execute this function.",
              "",
              "Parameters:",
              "- `payout_address`: The account ID of the address to be set as the payout address.",
              "",
              "Emits `PayoutAddressUpdated` event upon successful execution.",
              "",
              "Weight: `WeightInfo::set_payout_address` (defined in the `Config` trait)."
            ]
          },
          {
            "Name": "create_order",
            "TypeFields": [
              {
                "Name": "order",
                "TypeName": "OrderOf<T>",
                "TypeId": 274
              },
              {
                "Name": "execution",
                "TypeName": "Execution",
                "TypeId": 276
              }
            ],
            "Index": 3,
            "Docs": [
              "Create an Ask or Bid Order for a specific NFT (collection ID, Item ID).",
              "",
              "Asks:",
              "- An owner of an NFT can create an ask on the item with a price, expiration, and signature.",
              "- The signature must come from the feeSigner account.",
              "- The expiration must be above `MinOrderDuration`.",
              "- After the ask is created, the NFT is locked so it can't be transferred.",
              "",
              "Bids:",
              "- A bid can be created on an existing item, with a price to pay, a fee, and expiration.",
              "- The signature must come from the feeSigner account.",
              "- The amount the bidder is willing to pay is locked from the user's Balance.",
              "",
              "Match Exists:",
              "- If a match between an Ask and Bid exists, the trade is triggered.",
              "- The seller receives the funds, and the bidder receives the unlocked item.",
              "- Fees go to payoutAddress.",
              "",
              "Parameters:",
              "- `order`: The details of the order to be created (including type, collection, item, price, expiration, fee, and signature).",
              "- `execution`: Execution mode to indicate whether order creation should proceed if a valid match exists.",
              "",
              "Emits `OrderCreated` event upon successful execution.",
              "",
              "Weight: `WeightInfo::create_order` (defined in the `Config` trait)."
            ]
          },
          {
            "Name": "cancel_order",
            "TypeFields": [
              {
                "Name": "order_type",
                "TypeName": "OrderType",
                "TypeId": 63
              },
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              },
              {
                "Name": "item",
                "TypeName": "ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancellation of an Ask or Bid order.",
              "",
              "Callable by either the authority or the order creator.",
              "",
              "If the order is an Ask, the item is unlocked.",
              "If the order is a Bid, the bidder's balance is unlocked.",
              "",
              "Parameters:",
              "- `order_type`: The type of the order to be canceled (Ask or Bid).",
              "- `collection`: The collection ID of the NFT associated with the order.",
              "- `item`: The item ID of the NFT associated with the order.",
              "- `price`: The price associated with the order (used for Bid orders).",
              "",
              "Emits `OrderCanceled` event upon successful execution.",
              "",
              "Weight: `WeightInfo::cancel_order` (defined in the `Config` trait)."
            ]
          }
        ],
        "Path": [
          "pallet_marketplace",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "274": {
        "TypeFields": [
          {
            "Name": "order_type",
            "TypeName": "OrderType",
            "TypeId": 63
          },
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "item",
            "TypeName": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "price",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "expires_at",
            "TypeName": "Expiration",
            "TypeId": 12
          },
          {
            "Name": "fee",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "escrow_agent",
            "TypeName": "Option<Agent>",
            "TypeId": 50
          },
          {
            "Name": "signature_data",
            "TypeName": "SignatureData<OffchainSignature, BoundedString>",
            "TypeId": 275
          }
        ],
        "Path": [
          "pallet_marketplace",
          "types",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "Amount",
            "TypeId": 6
          },
          {
            "Name": "Expiration",
            "TypeId": 12
          },
          {
            "Name": "OffchainSignature",
            "TypeId": 270
          },
          {
            "Name": "Agent",
            "TypeId": 0
          },
          {
            "Name": "BoundedString",
            "TypeId": 15
          }
        ],
        "TypeDef": "Composite"
      },
      "275": {
        "TypeFields": [
          {
            "Name": "signature",
            "TypeName": "OffchainSignature",
            "TypeId": 270
          },
          {
            "Name": "nonce",
            "TypeName": "BoundedString",
            "TypeId": 15
          }
        ],
        "Path": [
          "pallet_marketplace",
          "types",
          "SignatureData"
        ],
        "TypeParams": [
          {
            "Name": "OffchainSignature",
            "TypeId": 270
          },
          {
            "Name": "BoundedString",
            "TypeId": 15
          }
        ],
        "TypeDef": "Composite"
      },
      "276": {
        "Variants": [
          {
            "Name": "Force",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllowCreation",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_marketplace",
          "types",
          "Execution"
        ],
        "TypeDef": "Variant"
      },
      "277": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "domain",
                "TypeName": "[u8; 8]",
                "TypeId": 107
              },
              {
                "Name": "sender",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "bias",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              },
              {
                "Name": "expires_at",
                "TypeName": "<T as pallet_timestamp::Config>::Moment",
                "TypeId": 12
              },
              {
                "Name": "calls",
                "TypeName": "BoundedVec<BatchedCall<T>,<T as Config>::MaxCalls>",
                "TypeId": 278
              },
              {
                "Name": "approvals",
                "TypeName": "BoundedVec<Approval<T>,<T as Config>::MaxCalls>",
                "TypeId": 282
              }
            ],
            "Index": 0,
            "Docs": [
              "Execute multiple calls from multiple callers in a single batch.",
              "",
              "If one of the calls fails, the whole batch reverts.",
              "",
              "This utility is primarily intended to support cases where the calls",
              "are interdependent - think a trade operation where Alice intends",
              "to transfer an nft item X to Bob if and only if Bob sends an nft",
              "item Y to Alice. For that reason it is designed in such a way",
              "that every caller must sign the batch as a whole instead of only",
              "their own calls. This has a pleasant side effect of reducing the",
              "execution cost compared to signing each call separately, as only",
              "one signature is required per each unique caller.",
              "",
              "As the data signed by callers is a well-formed call, this allows",
              "users to validate what they're signing by just decoding the data",
              "using a third-party tool before signing them, e.g. by just going",
              "to the decode tab on the official Parachain Explorer",
              "<https://polkadot.js.org/apps/#/extrinsics/decode>.",
              "",
              "# Arguments",
              "",
              "- `domain` - the domain of this operation that must be unique per",
              "pallet instance across networks.",
              "- `sender` - must be the same as the sender of the transaction",
              "- `bias` - an arbitrary 32 byte array that can be used to avoid",
              "hash collisions.",
              "- `calls` - a sequence of calls to execute on behalf of their",
              "respective callers.",
              "- `approvals` - a set of signatures, one signature per a unique",
              "caller.",
              "",
              "# Usage",
              "",
              "- Prepare a complete `batch()` call with empty vec for `approvals`",
              "parameter.",
              "- Encode the call into scale-encoded bytes.",
              "- Form the `approvals` array by having every caller that has",
              "calls in the batch sign these bytes, one signature per caller.",
              "- Send the `batch()` call with the same data and the collected",
              "approvals.",
              ""
            ]
          },
          {
            "Name": "batch_v2",
            "TypeFields": [
              {
                "Name": "domain",
                "TypeName": "[u8; 8]",
                "TypeId": 107
              },
              {
                "Name": "sender",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "bias",
                "TypeName": "[u8; 32]",
                "TypeId": 14
              },
              {
                "Name": "expires_at",
                "TypeName": "<T as pallet_timestamp::Config>::Moment",
                "TypeId": 12
              },
              {
                "Name": "calls",
                "TypeName": "BoundedVec<BatchedCall<T>,<T as Config>::MaxCalls>",
                "TypeId": 278
              },
              {
                "Name": "approvals",
                "TypeName": "BoundedVec<Approval<T>,<T as Config>::MaxCalls>",
                "TypeId": 282
              }
            ],
            "Index": 1,
            "Docs": [
              "Execute multiple calls from multiple callers in a single batch.",
              "",
              "If one of the calls fails, the whole batch reverts.",
              "",
              "This function works the same as [Pallet::batch], but the bytes signed by",
              "approvers must be wrapped in between <Bytes> ... </Bytes>.",
              "This is how the rawSign is currently implemented in modern substrate clients.",
              ""
            ]
          }
        ],
        "Path": [
          "pallet_multibatching",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "278": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 281
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 279
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "279": {
        "TypeFields": [
          {
            "Name": "from",
            "TypeName": "T::Signer",
            "TypeId": 280
          },
          {
            "Name": "call",
            "TypeName": "<T as Config>::RuntimeCall",
            "TypeId": 245
          }
        ],
        "Path": [
          "pallet_multibatching",
          "pallet",
          "BatchedCall"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "280": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 1
          }
        ],
        "Path": [
          "account",
          "EthereumSigner"
        ],
        "TypeDef": "Composite"
      },
      "281": {
        "TypeId": 279,
        "TypeDef": "Sequence"
      },
      "282": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 284
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 283
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "283": {
        "TypeFields": [
          {
            "Name": "from",
            "TypeName": "T::Signer",
            "TypeId": 280
          },
          {
            "Name": "signature",
            "TypeName": "T::Signature",
            "TypeId": 270
          }
        ],
        "Path": [
          "pallet_multibatching",
          "pallet",
          "Approval"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "284": {
        "TypeId": 283,
        "TypeDef": "Sequence"
      },
      "285": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 0,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin."
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key."
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 3,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "remove_key",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Permanently removes the sudo key.",
              "",
              "**This cannot be un-done.**"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "286": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 245
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 85
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 245
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 85
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 85
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          },
          {
            "Name": "kill",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "Disapprove the proposal and burn the cost held for storing this proposal.",
              "",
              "Parameters:",
              "- `origin`: must be the `KillOrigin`.",
              "- `proposal_hash`: The hash of the proposal that should be killed.",
              "",
              "Emits `Killed` and `ProposalCostBurned` if any cost was held for a given proposal."
            ]
          },
          {
            "Name": "release_proposal_cost",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Release the cost held for storing a proposal once the given proposal is completed.",
              "",
              "If there is no associated cost for the given proposal, this call will have no effect.",
              "",
              "Parameters:",
              "- `origin`: must be `Signed` or `Root`.",
              "- `proposal_hash`: The hash of the proposal.",
              "",
              "Emits `ProposalCostReleased` if any cost held for a given proposal."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "287": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 288
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 88
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a sensitive action to be taken.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender must",
              "have funds to cover the deposit.",
              "",
              "- `proposal_hash`: The hash of the proposal preimage.",
              "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
              "",
              "Emits `Proposed`."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 85
              }
            ],
            "Index": 1,
            "Docs": [
              "Signals agreement with a particular proposal.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender",
              "must have funds to cover the deposit, equal to the original deposit.",
              "",
              "- `proposal`: The index of the proposal to second."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 85
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 69
              }
            ],
            "Index": 2,
            "Docs": [
              "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `ref_index`: The index of the referendum to vote for.",
              "- `vote`: The vote configuration."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
              "referendum.",
              "",
              "The dispatch origin of this call must be `CancellationOrigin`.",
              "",
              "-`ref_index`: The index of the referendum to cancel.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 288
              }
            ],
            "Index": 4,
            "Docs": [
              "Schedule a referendum to be tabled once it is legal to schedule an external",
              "referendum.",
              "",
              "The dispatch origin of this call must be `ExternalOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 288
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
              "an external referendum.",
              "",
              "The dispatch of this call must be `ExternalMajorityOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 288
              }
            ],
            "Index": 6,
            "Docs": [
              "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
              "schedule an external referendum.",
              "",
              "The dispatch of this call must be `ExternalDefaultOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voting_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Schedule the currently externally-proposed majority-carries referendum to be tabled",
              "immediately. If there is no externally-proposed referendum currently, or if there is one",
              "but it is not a majority-carries referendum then it fails.",
              "",
              "The dispatch of this call must be `FastTrackOrigin`.",
              "",
              "- `proposal_hash`: The hash of the current external proposal.",
              "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
              "\tMust be always greater than zero.",
              "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
              "- `delay`: The number of block after voting has ended in approval and this should be",
              "  enacted. This doesn't have a minimum amount.",
              "",
              "Emits `Started`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Veto and blacklist the external proposal hash.",
              "",
              "The dispatch origin of this call must be `VetoOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
              "",
              "Emits `Vetoed`.",
              "",
              "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 85
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove a referendum.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "- `ref_index`: The index of the referendum to cancel.",
              "",
              "# Weight: `O(1)`."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 291
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Undelegate the voting power of the sending account.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Clears all public proposals.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "Unlock tokens that have an expired lock.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If:",
              "- the referendum was cancelled, or",
              "- the referendum is ongoing, or",
              "- the referendum has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the referendum has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for referendum `index`.",
              "",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the referendum was cancelled, because the voter lost the referendum or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for",
              "  referendum `index`.",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 51
              }
            ],
            "Index": 16,
            "Docs": [
              "Permanently place a proposal into the blacklist. This prevents it from ever being",
              "proposed again.",
              "",
              "If called on a queued public or external proposal, then this will result in it being",
              "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
              "then it will be cancelled.",
              "",
              "The dispatch origin of this call must be `BlacklistOrigin`.",
              "",
              "- `proposal_hash`: The proposal hash to blacklist permanently.",
              "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
              "cancelled.",
              "",
              "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
              "  reasonable value)."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 85
              }
            ],
            "Index": 17,
            "Docs": [
              "Remove a proposal.",
              "",
              "The dispatch origin of this call must be `CancelProposalOrigin`.",
              "",
              "- `prop_index`: The index of the proposal to cancel.",
              "",
              "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 71
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 207
              }
            ],
            "Index": 18,
            "Docs": [
              "Set or clear a metadata of a proposal or a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must correspond to the `MetadataOwner`.",
              "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
              "      threshold.",
              "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
              "      threshold.",
              "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
              "      threshold.",
              "    - `Signed` by a creator for a public proposal.",
              "    - `Signed` to clear a metadata for a finished referendum.",
              "    - `Root` to set a metadata for an ongoing referendum.",
              "- `owner`: an identifier of a metadata owner.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "288": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 290
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 245
          },
          {
            "Name": "H",
            "TypeId": 289
          }
        ],
        "TypeDef": "Variant"
      },
      "289": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "290": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "291": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "292": {
        "Variants": [
          {
            "Name": "spend_local",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 88
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
              "",
              "### Details",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary.",
              "",
              "### Parameters",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "## Events",
              "",
              "Emits [`Event::SpendApproved`] if successful."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 85
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "The original deposit will no longer be returned.",
              "",
              "### Parameters",
              "- `proposal_id`: The index of a proposal",
              "",
              "### Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "### Errors",
              "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
              "  approval queue, i.e., the proposal has not been approved. This could also mean the",
              "  proposal does not exist altogether, thus there is no way it would have been approved",
              "  in the first place."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "asset_kind",
                "TypeName": "Box<T::AssetKind>",
                "TypeId": 37
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 88
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<BeneficiaryLookupOf<T, I>>",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 51
              }
            ],
            "Index": 5,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
              "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
              "for assertion using the [`Config::BalanceConverter`].",
              "",
              "## Details",
              "",
              "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
              "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
              "the [`Config::PayoutPeriod`].",
              "",
              "### Parameters",
              "- `asset_kind`: An indicator of the specific asset class to be spent.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The beneficiary of the spend.",
              "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
              "  the past if the resulting spend has not yet expired according to the",
              "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
              "  approval.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendApproved`] if successful."
            ]
          },
          {
            "Name": "payout",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Claim a spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed",
              "",
              "## Details",
              "",
              "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
              "[`Config::PayoutPeriod`] from the `valid_from` block.",
              "In case of a payout failure, the spend status must be updated with the `check_status`",
              "dispatchable before retrying with the current function.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::Paid`] if successful."
            ]
          },
          {
            "Name": "check_status",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Check the status of the spend and remove it from the storage if processed.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed.",
              "",
              "## Details",
              "",
              "The status check is a prerequisite for retrying a failed payout.",
              "If a spend has either succeeded or expired, it is removed from the storage by this",
              "function. In such instances, transaction fees are refunded.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
              "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
            ]
          },
          {
            "Name": "void_spend",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Void previously approved spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "A spend void is only possible if the payout has not been attempted yet.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendVoided`] if successful."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "293": {
        "Variants": [
          {
            "Name": "set_invulnerables",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 74
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the list of invulnerable (fixed) collators. These collators must:",
              "  - Have registered session keys.",
              "  - Not currently be collator candidates (the call will fail if an entry is already a candidate).",
              "",
              "If the provided list is empty, it also ensures that the total number of eligible collators",
              "does not fall below the configured minimum.",
              "",
              "This call does not inherently maintain mutual exclusivity with `Candidates`, but in practice,",
              "accounts that are already candidates will be rejected. If you need to convert a candidate",
              "to be invulnerable, remove them from the set of candidates first, then call this function.",
              "",
              "Must be called by the `UpdateOrigin`."
            ]
          },
          {
            "Name": "set_desired_candidates",
            "TypeFields": [
              {
                "Name": "max",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the ideal number of collators. If lowering this number, then the",
              "number of running collators could be higher than this figure. Aside from that edge case,",
              "there should be no other way to have more candidates than the desired number.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "set_min_candidacy_bond",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the candidacy bond amount, which represents the required amount to reserve for an",
              "account to become a candidate. The candidacy bond does not count as stake.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "register_as_candidate",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Register this account as a collator candidate. The account must (a) already have",
              "registered session keys and (b) be able to reserve the `CandidacyBond`.",
              "The `CandidacyBond` amount is automatically reserved from the balance of the caller.",
              "",
              "This call is not available to `Invulnerable` collators."
            ]
          },
          {
            "Name": "leave_intent",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Deregister `origin` as a collator candidate. No rewards will be delivered to this",
              "candidate and its stakers after this moment.",
              "",
              "This call will fail if the total number of candidates would drop below `MinEligibleCollators`."
            ]
          },
          {
            "Name": "add_invulnerable",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "Add a new account `who` to the list of `Invulnerables` collators. `who` must have",
              "registered session keys. If `who` is a candidate, the operation will be aborted.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "remove_invulnerable",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must",
              "be sorted.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "stake",
            "TypeFields": [
              {
                "Name": "targets",
                "TypeName": "BoundedVec<StakeTargetOf<T>, T::MaxStakedCandidates>",
                "TypeId": 294
              }
            ],
            "Index": 7,
            "Docs": [
              "Allows a user to stake on a set of collator candidates.",
              "",
              "The call will fail if:",
              "    - `origin` does not have the at least [`MinStake`] deposited in the candidate.",
              "    - one of the `targets` is not in the [`Candidates`] map.",
              "    - the user does not have sufficient locked balance to stake.",
              "    - zero targets are passed."
            ]
          },
          {
            "Name": "unstake_from",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "Removes stake from a collator candidate.",
              "",
              "The amount unstaked will remain locked if the stake was removed from a candidate."
            ]
          },
          {
            "Name": "unstake_all",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Removes all stake of a user from all candidates.",
              "",
              "The amount unstaked from candidates will remain locked."
            ]
          },
          {
            "Name": "release",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Releases all pending [`ReleaseRequest`] and candidacy bond for a given account.",
              "",
              "This will unlock all funds in [`ReleaseRequest`] that have already expired."
            ]
          },
          {
            "Name": "set_autocompound_percentage",
            "TypeFields": [
              {
                "Name": "percent",
                "TypeName": "Percent",
                "TypeId": 75
              }
            ],
            "Index": 11,
            "Docs": [
              "Sets the percentage of rewards that should be auto-compounded.",
              "",
              "This operation will also claim all pending rewards.",
              "Rewards will be autocompounded when calling the `claim_rewards` extrinsic."
            ]
          },
          {
            "Name": "set_collator_reward_percentage",
            "TypeFields": [
              {
                "Name": "percent",
                "TypeName": "Percent",
                "TypeId": 75
              }
            ],
            "Index": 12,
            "Docs": [
              "Sets the percentage of rewards that collators will take for producing blocks.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "set_extra_reward",
            "TypeFields": [
              {
                "Name": "extra_reward",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Sets the extra rewards for producing blocks. Once the session finishes, the provided amount times",
              "the total number of blocks produced during the session will be transferred from the given account",
              "to the pallet's pot account to be distributed as rewards.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "set_minimum_stake",
            "TypeFields": [
              {
                "Name": "new_min_stake",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Sets minimum amount that can be staked on a candidate.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "stop_extra_reward",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Stops the extra rewards.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "top_up_extra_rewards",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Transfers funds to the extra reward pot account for distribution.",
              "",
              "**Parameters**:",
              "- `origin`: Signed account initiating the transfer.",
              "- `amount`: Amount to transfer.",
              "",
              "**Errors**:",
              "- `Error::<T>::InvalidFundingAmount`: Amount is zero."
            ]
          },
          {
            "Name": "lock",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Locks free balance from the caller to be used for staking.",
              "",
              "**Parameters**:",
              "- `origin`: Signed account initiating the lock.",
              "- `amount`: Amount to lock.",
              "",
              "**Errors**:",
              "- `Error::<T>::InvalidFundingAmount`: Amount is zero."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "maybe_amount",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 54
              }
            ],
            "Index": 18,
            "Docs": [
              "Adds staked funds to the [`ReleaseRequest`] queue.",
              "",
              "Funds will actually be released after [`StakeUnlockDelay`]."
            ]
          },
          {
            "Name": "update_candidacy_bond",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Updates the candidacy bond for this candidate.",
              "",
              "For this operation to succeed, the caller must:",
              "  - Be a candidate.",
              "  - Have sufficient free balance to be locked."
            ]
          },
          {
            "Name": "claim_rewards",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Claims all pending rewards for stakers and candidates.",
              "",
              "Distributes rewards accumulated over previous sessions",
              "and ensures that rewards are only claimable for sessions where the",
              "caller has participated. Rewards for the current session cannot be claimed.",
              "",
              "**Errors**:",
              "- `Error::<T>::NoPendingClaim`: Caller has no rewards to claim."
            ]
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "294": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 296
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 295
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "295": {
        "TypeFields": [
          {
            "Name": "candidate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "StakeTarget"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "296": {
        "TypeId": 295,
        "TypeDef": "Sequence"
      },
      "297": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 298
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "298": {
        "TypeFields": [
          {
            "Name": "aura",
            "TypeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 299
          }
        ],
        "Path": [
          "mainnet_runtime",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "299": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "300": {
        "Variants": [
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages which must be in the queue for the other side to be",
              "told to suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages which must be in the queue after which we drop any",
              "further messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages which the queue must be reduced to before it signals",
              "that message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "301": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 302
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 134
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "**This function is deprecated: Use `limited_teleport_assets` instead.**",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` chain.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 134
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve.",
              "",
              "`assets` must have same reserve location and may not be teleportable to `dest`.",
              " - `assets` have local reserve: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `assets` have destination reserve: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
              "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
              "   to mint and deposit reserve-based assets to `beneficiary`.",
              "",
              "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>",
                "TypeId": 332
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than",
              "the maximum amount of weight that the message could take to be executed, then no",
              "execution attempt will be made."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<Location>",
                "TypeId": 81
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 51
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 134
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve.",
              "",
              "`assets` must have same reserve location and may not be teleportable to `dest`.",
              " - `assets` have local reserve: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `assets` have destination reserve: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
              "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
              "   to mint and deposit reserve-based assets to `beneficiary`.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 134
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` chain.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "force_suspension",
            "TypeFields": [
              {
                "Name": "suspended",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Set or unset the global suspension state of the XCM executor.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `suspended`: `true` to suspend, `false` to resume."
            ]
          },
          {
            "Name": "transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 134
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 11,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve, or through teleports.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
              "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
              "operation will fail and the sent assets may be at risk.",
              "",
              "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
              "to `dest`, no limitations imposed on `fees`.",
              " - for local reserve: transfer assets to sovereign account of destination chain and",
              "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
              "   `beneficiary`.",
              " - for destination reserve: burn local assets and forward a notification to `dest` chain",
              "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
              "   to `beneficiary`.",
              " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
              "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
              "   and deposit reserve-based assets to `beneficiary`.",
              " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
              "   assets and deposit them to `beneficiary`.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
              "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
              "  from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "claim_assets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 134
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              }
            ],
            "Index": 12,
            "Docs": [
              "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
              "",
              "- `origin`: Anyone can call this extrinsic.",
              "- `assets`: The exact assets that were trapped. Use the version to specify what version",
              "was the latest when they were trapped.",
              "- `beneficiary`: The location/account where the claimed assets will be deposited."
            ]
          },
          {
            "Name": "transfer_assets_using_type_and_then",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 165
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 134
              },
              {
                "Name": "assets_transfer_type",
                "TypeName": "Box<TransferType>",
                "TypeId": 343
              },
              {
                "Name": "remote_fees_id",
                "TypeName": "Box<VersionedAssetId>",
                "TypeId": 344
              },
              {
                "Name": "fees_transfer_type",
                "TypeName": "Box<TransferType>",
                "TypeId": 343
              },
              {
                "Name": "custom_xcm_on_dest",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 302
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 13,
            "Docs": [
              "Transfer assets from the local chain to the destination chain using explicit transfer",
              "types for assets and fees.",
              "",
              "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
              "provide the `assets_transfer_type` to be used for `assets`:",
              " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
              "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
              "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
              "   the remote `reserve` is Asset Hub.",
              " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
              "   mint/teleport assets and deposit them to `beneficiary`.",
              "",
              "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
              "buy execution using transferred `assets` identified by `remote_fees_id`.",
              "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
              "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
              "specified through `fees_transfer_type`.",
              "",
              "The caller needs to specify what should happen to the transferred assets once they reach",
              "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
              "contains the instructions to execute on `dest` as a final step.",
              "  This is usually as simple as:",
              "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
              "  but could be something more exotic like sending the `assets` even further.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
              "  parachain across a bridge to another ecosystem destination.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
              "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
              "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
              "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
              "  transfer, which also determines what happens to the assets on the destination chain.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "302": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 303
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Xcm<RuntimeCall>",
                "TypeId": 319
              }
            ],
            "Index": 4
          },
          {
            "Name": "V5",
            "TypeFields": [
              {
                "TypeName": "v5::Xcm<RuntimeCall>",
                "TypeId": 98
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "303": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 304
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "304": {
        "TypeId": 305,
        "TypeDef": "Sequence"
      },
      "305": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 306
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 314
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 119
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 121
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 303
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 303
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 314
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 307
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 143
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 314
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "306": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 307
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 310
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "307": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 308
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 308
          }
        ],
        "TypeDef": "Variant"
      },
      "308": {
        "TypeIds": [
          4,
          309
        ],
        "TypeDef": "Tuple"
      },
      "309": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "310": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 313
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 311
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "311": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 312
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 312
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 85
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "312": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "313": {
        "TypeId": 311,
        "TypeDef": "Sequence"
      },
      "314": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 139
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 139
          }
        ],
        "TypeDef": "Variant"
      },
      "315": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 139
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 11
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 10
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "316": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 317
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "317": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 138
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 318
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 138
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 318
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "318": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "319": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 320
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "TypeId": 321,
        "TypeDef": "Sequence"
      },
      "321": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 322
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 327
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 119
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 121
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 151
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 319
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 319
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 327
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 307
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 153
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 155
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 151
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 327
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "322": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 307
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 323
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "323": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 326
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 324
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "324": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 325
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 325
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 85
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 85
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "325": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "326": {
        "TypeId": 324,
        "TypeDef": "Sequence"
      },
      "327": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 150
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 150
          }
        ],
        "TypeDef": "Variant"
      },
      "328": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "Location",
            "TypeId": 150
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 11
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 10
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "329": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildAsset",
                "TypeId": 330
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "330": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 149
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 331
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 149
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 331
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "WildAsset"
        ],
        "TypeDef": "Variant"
      },
      "331": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "332": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 333
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Xcm<RuntimeCall>",
                "TypeId": 337
              }
            ],
            "Index": 4
          },
          {
            "Name": "V5",
            "TypeFields": [
              {
                "TypeName": "v5::Xcm<RuntimeCall>",
                "TypeId": 340
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "333": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 334
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "334": {
        "TypeId": 335,
        "TypeDef": "Sequence"
      },
      "335": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 306
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 314
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 119
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 336
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 139
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 316
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 333
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 333
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 135
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 135
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 314
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 307
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 315
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 141
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 143
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 140
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 303
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 137
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 139
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 314
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "336": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 15
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "337": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 338
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "338": {
        "TypeId": 339,
        "TypeDef": "Sequence"
      },
      "339": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 322
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 327
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 119
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 336
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 151
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 150
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 329
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 337
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 337
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 146
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 146
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 327
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 307
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 328
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 153
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 155
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 151
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 319
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 148
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 150
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 327
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "340": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 341
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "341": {
        "TypeId": 342,
        "TypeDef": "Sequence"
      },
      "342": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 109
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 119
              },
              {
                "Name": "fallback_max_weight",
                "TypeName": "Option<Weight>",
                "TypeId": 120
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 336
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 82
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 123
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 340
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 340
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 101
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 101
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 110
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 116
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 85
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 122
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 84
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 87
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 82
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 14
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 126
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 118
              }
            ],
            "Index": 47
          },
          {
            "Name": "PayFees",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 103
              }
            ],
            "Index": 48
          },
          {
            "Name": "InitiateTransfer",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 81
              },
              {
                "Name": "remote_fees",
                "TypeName": "Option<AssetTransferFilter>",
                "TypeId": 127
              },
              {
                "Name": "preserve_origin",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "assets",
                "TypeName": "Vec<AssetTransferFilter>",
                "TypeId": 129
              },
              {
                "Name": "remote_xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 98
              }
            ],
            "Index": 49
          },
          {
            "Name": "ExecuteWithOrigin",
            "TypeFields": [
              {
                "Name": "descendant_origin",
                "TypeName": "Option<InteriorLocation>",
                "TypeId": 130
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<Call>",
                "TypeId": 340
              }
            ],
            "Index": 50
          },
          {
            "Name": "SetHints",
            "TypeFields": [
              {
                "Name": "hints",
                "TypeName": "BoundedVec<Hint, HintNumVariants>",
                "TypeId": 131
              }
            ],
            "Index": 51
          }
        ],
        "Path": [
          "staging_xcm",
          "v5",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "343": {
        "Variants": [
          {
            "Name": "Teleport",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "LocalReserve",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DestinationReserve",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "RemoteReserve",
            "TypeFields": [
              {
                "TypeName": "VersionedLocation",
                "TypeId": 165
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm_executor",
          "traits",
          "asset_transfer",
          "TransferType"
        ],
        "TypeDef": "Variant"
      },
      "344": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 138
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::AssetId",
                "TypeId": 149
              }
            ],
            "Index": 4
          },
          {
            "Name": "V5",
            "TypeFields": [
              {
                "TypeName": "v5::AssetId",
                "TypeId": 104
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "345": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "346": {
        "Variants": [
          {
            "Name": "reap_page",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 168
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Remove a page which has no more messages remaining to be processed or is stale."
            ]
          },
          {
            "Name": "execute_overweight",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 168
              },
              {
                "Name": "page",
                "TypeName": "PageIndex",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "T::Size",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Execute an overweight message.",
              "",
              "Temporary processing errors will be propagated whereas permanent errors are treated",
              "as success condition.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `message_origin`: The origin from which the message to be executed arrived.",
              "- `page`: The page in the queue in which the message to be executed is sitting.",
              "- `index`: The index into the queue of the message to be executed.",
              "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
              "  of the message.",
              "",
              "Benchmark complexity considerations: O(index + weight_limit)."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "347": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 348
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 173
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 173
              },
              {
                "Name": "height",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 85
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 85
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 348
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "348": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 172
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 172
          }
        ],
        "TypeDef": "Variant"
      },
      "349": {
        "Variants": [
          {
            "Name": "vest",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unlock any vested funds of the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vest_other",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Unlock any vested funds of a `target` account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account whose vested funds should be unlocked. Must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 350
              }
            ],
            "Index": 2,
            "Docs": [
              "Create a vested transfer.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account receiving the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "force_vested_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 350
              }
            ],
            "Index": 3,
            "Docs": [
              "Force a vested transfer.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The account whose funds should be transferred.",
              "- `target`: The account that should be transferred the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ]
          },
          {
            "Name": "merge_schedules",
            "TypeFields": [
              {
                "Name": "schedule1_index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "schedule2_index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
              "the highest possible start and end blocks. If both schedules have already started the",
              "current block will be used as the schedule start; with the caveat that if one schedule",
              "is finished by the current block, the other will be treated as the new merged schedule,",
              "unmodified.",
              "",
              "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
              "NOTE: This will unlock all schedules through the current block prior to merging.",
              "NOTE: If both schedules have ended by the current block, no new schedule will be created",
              "and both will be removed.",
              "",
              "Merged schedule attributes:",
              "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
              "  current_block)`.",
              "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
              "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `schedule1_index`: index of the first schedule to merge.",
              "- `schedule2_index`: index of the second schedule to merge."
            ]
          },
          {
            "Name": "force_remove_vesting_schedule",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "schedule_index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Force remove a vesting schedule",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `target`: An account that has a vesting schedule",
              "- `schedule_index`: The vesting schedule index that should be removed"
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "350": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "per_block",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "starting_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_vesting",
          "vesting_info",
          "VestingInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "351": {
        "Variants": [
          {
            "Name": "deposit",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "authorised_agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Deposits a specified amount of funds directly into the balance of a target account by transferring from the balance of the origin.",
              "The deposited amount is reserved in the target account. The reserved funds can later be released partially or in full",
              "by an authorized escrow agent. This function ensures that the deposit meets or exceeds the minimum required balance.",
              "",
              "# Arguments",
              "* `origin` - The origin of the transaction, whose balance the funds are transferred from.",
              "* `address` - The target account that will receive and hold the reserved funds.",
              "* `value` - The amount to be deposited and reserved.",
              "* `authorised_agent` - The agent authorized to manage and release the reserved funds.",
              "",
              "# Errors",
              "* `Error::<T>::DepositTooLow` if the deposit amount is below the minimum threshold.",
              "* `Error::<T>::BalanceTooLow` if the target account balance is below the existential deposit."
            ]
          },
          {
            "Name": "release",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Releases a specified amount from the reserved balance of an account to its available balance.",
              "This action can only be initiated by an authorized escrow agent and ensures that the release does not exceed",
              "the reserved amount. This method is used primarily to reduce or clear the reservations made previously by the deposit action.",
              "",
              "# Arguments",
              "* `origin` - The origin of the transaction, should be an authorized escrow agent.",
              "* `address` - The account holder of the deposited funds.",
              "* `value` - The amount to be released from the reserved balance.",
              "",
              "# Errors",
              "* `Error::<T>::InsufficientBalance` if the reserved balance in the account is less than the amount requested to be released.",
              "* `Error::<T>::NoSuchDeposit` if there is no deposit record for the given accounts, indicating that no such reserved amount exists."
            ]
          },
          {
            "Name": "revoke",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "reason",
                "TypeName": "Vec<u8>",
                "TypeId": 15
              }
            ],
            "Index": 2,
            "Docs": [
              "Revokes a reserved deposit, transferring the remaining reserved funds to a specified destination account for a specified reason.",
              "This function is typically used when a transaction or agreement fails to complete as planned, and the funds need to be returned or redirected.",
              "Only authorized agents can initiate a revocation to ensure control and security over the process.",
              "",
              "# Arguments",
              "* `origin` - The origin of the transaction, should be an authorized escrow agent.",
              "* `address` - The account from which the reserved funds will be withdrawn.",
              "* `destination` - The account to which the funds will be transferred.",
              "* `reason` - A byte vector detailing the reason for the revocation, providing transparency and traceability.",
              "",
              "# Errors",
              "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account and agent combination,",
              "   indicating that no funds are available to be revoked."
            ]
          },
          {
            "Name": "force_release",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Forcefully revokes a deposit under special conditions, overriding typical checks.",
              "This function is intended for emergency or administrative use where standard revocation processes are insufficient or inappropriate.",
              "It requires root privileges, underscoring its use in exceptional circumstances only.",
              "",
              "# Arguments",
              "* `origin` - The origin of the transaction, which must be a root call to ensure administrative authority.",
              "* `address` - The account from which reserved funds will be moved.",
              "* `agent` - The agent initially authorized to manage the deposit, involved for traceability and records.",
              "* `destination` - The account to which the funds will be transferred, potentially different from the original depositor.",
              "* `reason` - A byte vector detailing the reason for the forced revocation, providing necessary context for this exceptional action.",
              "",
              "# Errors",
              "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account, indicating that no funds are available to be forcibly revoked."
            ]
          }
        ],
        "Path": [
          "pallet_escrow",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "352": {
        "Variants": [
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 172
              },
              {
                "Name": "sponsor",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 50
              }
            ],
            "Index": 0,
            "Docs": [
              "Adds a new proxy.",
              "",
              "This extrinsic allows a delegator to grant permission to a delegate account to act on their behalf",
              "for a specific subset of calls defined by `proxy_type`. Optionally, a sponsor can be specified who will",
              "reserve the deposit required for the proxy. The reserved deposit is returned when the proxy is removed.",
              "",
              "Emits `ProxyCreated` event.",
              "",
              "# Parameters",
              "- `origin`: The delegator's account.",
              "- `delegate`: The account that is granted the proxy permission.",
              "- `proxy_type`: The type of proxy, which defines the subset of calls that the delegate can make on behalf of the delegator.",
              "- `sponsor`: (Optional) The account that will reserve the deposit for the proxy. If not provided, the delegator's balance will be reserved.",
              "",
              "# Errors",
              "- `SponsorshipUnauthorized`: If the sponsor did not approve the delegator to use their funds."
            ]
          },
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 245
              }
            ],
            "Index": 1,
            "Docs": [
              "Executes a call on behalf of the delegator.",
              "",
              "This extrinsic allows a delegate account to execute a call on behalf of the delegator,",
              "provided the delegate has the appropriate proxy permission. The call must be within the",
              "subset of allowed calls defined by the proxy type.",
              "",
              "Emits `ProxyExecuted` event on success. If the call fails, the error is returned.",
              "",
              "# Parameters",
              "- `origin`: The delegate's account.",
              "- `address`: The delegator's account on whose behalf the call is made.",
              "- `call`: The call to be executed.",
              "",
              "# Errors",
              "- `NotProxy`: If the delegate does not have proxy permission from the delegator.",
              "- `frame_system::Error::<T>::CallFiltered`: If the call is not within the allowed subset of calls for the proxy."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Removes an existing proxy.",
              "",
              "This extrinsic allows a delegator to remove a proxy permission previously granted to a delegate.",
              "If a sponsor was specified during the proxy creation, the reserved deposit is returned to the sponsor.",
              "",
              "Emits `ProxyRemoved` event.",
              "",
              "# Parameters",
              "- `origin`: The delegator's account.",
              "- `delegate`: The account whose proxy permission is to be removed.",
              "",
              "# Errors",
              "- `NoSuchProxy`: If the proxy does not exist."
            ]
          },
          {
            "Name": "approve_proxy_funding",
            "TypeFields": [
              {
                "Name": "sponsor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "Approves funding for a proxy.",
              "",
              "This extrinsic allows a sponsor agent to approve the reservation of funds for a proxy on behalf",
              "of the sponsor. The approval must be given before the proxy can be created using the sponsor's funds.",
              "",
              "Emits `ProxySponsorshipApproved` event.",
              "",
              "# Parameters",
              "- `origin`: The sponsor agent's account.",
              "- `sponsor`: The sponsor's account that will reserve the funds.",
              "- `delegator`: The delegator's account that will use the sponsor's funds.",
              "",
              "# Errors",
              "- `SponsorAgentUnauthorized`: If the caller is not an authorized agent of the sponsor."
            ]
          },
          {
            "Name": "register_sponsor_agent",
            "TypeFields": [
              {
                "Name": "sponsor_agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "Registers a sponsor agent.",
              "",
              "This extrinsic allows a sponsor to register an agent who is authorized to approve the reservation",
              "of funds for proxies on behalf of the sponsor. This helps in delegating the responsibility of",
              "managing proxy fund reservations while keeping the sponsor's credentials secure.",
              "",
              "Emits `SponsorAgentRegistered` event.",
              "",
              "# Parameters",
              "- `origin`: The sponsor's account.",
              "- `sponsor_agent`: The account to be registered as the sponsor's agent."
            ]
          },
          {
            "Name": "revoke_sponsor_agent",
            "TypeFields": [
              {
                "Name": "sponsor_agent",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "Revokes a sponsor agent.",
              "",
              "Revokes the authorization of a sponsor agent. Once revoked, the agent will no longer be able",
              "to approve the reservation of funds for proxies on behalf of the sponsor.",
              "All previously approved fund reservations by this agent that have not yet been used to create proxies will also be invalidated.",
              "Existing proxies created with the agent's approval will remain unaffected.",
              "",
              "Emits `SponsorAgentRevoked` event.",
              "",
              "# Parameters",
              "- `origin`: The sponsor's account.",
              "- `sponsor_agent`: The account to be revoked as the sponsor's agent.",
              "",
              "# Errors",
              "- `SponsorAgentUnauthorized`: If the specified agent is not currently authorized by the sponsor."
            ]
          },
          {
            "Name": "remove_sponsored_proxy",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Removes a proxy sponsored by the caller.",
              "",
              "This extrinsic allows a sponsor to remove a proxy that they have sponsored. The reserved deposit",
              "is returned to the sponsor upon removal of the proxy.",
              "",
              "Emits `ProxyRemoved` event.",
              "",
              "# Parameters",
              "- `origin`: The sponsor's account.",
              "- `delegator`: The account that delegated its authority.",
              "- `delegate`: The account that received the delegation.",
              "",
              "# Errors",
              "- `NoSuchProxy`: If the proxy does not exist.",
              "- `Unauthorized`: If the caller is not the sponsor of the specified proxy."
            ]
          }
        ],
        "Path": [
          "pallet_myth_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "353": {
        "Variants": [
          {
            "Name": "force_set_collection",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 47
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the Dmarket collection.",
              "",
              "Only the root origin can execute this function.",
              "",
              "Precondition:",
              "- The collection must already exist, otherwise the extrinsic will fail.",
              "",
              "Parameters:",
              "- `collection_id`: The collectionID of the NFT collection to be set as the Dmarket Collection.",
              "",
              "",
              "Emits CollectionUpdated when successful.",
              "",
              "Weight: `WeightInfo::force_set_collection` (defined in the `Config` trait)."
            ]
          },
          {
            "Name": "execute_trade",
            "TypeFields": [
              {
                "Name": "seller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "buyer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "trade",
                "TypeName": "TradeParamsOf<T>",
                "TypeId": 354
              },
              {
                "Name": "signatures",
                "TypeName": "TradeSignatures<<T as Config>::Signature>",
                "TypeId": 355
              },
              {
                "Name": "fee_address",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Execute a trade between a seller and a buyer for a specific NFT (item) in the configured DmarketCollection.",
              "",
              "Preconditions:",
              "- The seller and buyer must be different accounts.",
              "- The seller must be the current owner of the NFT item.",
              "- The trade must not be expired, and signatures provided must be valid.",
              "",
              "Parameters:",
              "- `origin`: The origin of the call, which must be part of the signed message of both seller and buyer.",
              "- `seller`: The account ID of the seller who owns the NFT item.",
              "- `buyer`: The account ID of the buyer who will purchase the NFT item.",
              "- `trade`: The parameters of the trade, including item details, prices, and expiration times.",
              "- `signatures`: The signatures from both the seller and buyer authorizing the trade.",
              "- `fee_address`: The account ID where the transaction fee will be transferred.",
              "",
              "Signed message schema:",
              "- Ask: (domain, sender, fee_address, item, price, expiration).",
              "- Bid: (domain, sender, fee_address, item, price, fee, expiration).",
              "",
              "Only callable if origin matches `sender` in both Ask and Bid signed messages.",
              "",
              "Emits `Trade` event upon successful execution.",
              "",
              "Weight: `WeightInfo::execute_trade` (defined in the `Config` trait)."
            ]
          }
        ],
        "Path": [
          "pallet_dmarket",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "354": {
        "TypeFields": [
          {
            "Name": "price",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "fee",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "item",
            "TypeName": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "ask_expiration",
            "TypeName": "Expiration",
            "TypeId": 12
          },
          {
            "Name": "bid_expiration",
            "TypeName": "Expiration",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_dmarket",
          "types",
          "TradeParams"
        ],
        "TypeParams": [
          {
            "Name": "Amount",
            "TypeId": 6
          },
          {
            "Name": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "Expiration",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "355": {
        "TypeFields": [
          {
            "Name": "ask_signature",
            "TypeName": "OffchainSignature",
            "TypeId": 270
          },
          {
            "Name": "bid_signature",
            "TypeName": "OffchainSignature",
            "TypeId": 270
          }
        ],
        "Path": [
          "pallet_dmarket",
          "types",
          "TradeSignatures"
        ],
        "TypeParams": [
          {
            "Name": "OffchainSignature",
            "TypeId": 270
          }
        ],
        "TypeDef": "Composite"
      },
      "356": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 357
              }
            ],
            "Index": 0
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 358
              }
            ],
            "Index": 16
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 359
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 360
              }
            ],
            "Index": 32
          }
        ],
        "Path": [
          "mainnet_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "357": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "358": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "359": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 81
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "360": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 169
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "361": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "362": {
        "TypeIds": [
          0,
          14
        ],
        "TypeDef": "Tuple"
      },
      "363": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 39
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 364
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 74
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "365": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "366": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 367
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 368
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 51
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "OldRequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "367": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "368": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 367
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 367
          }
        ],
        "TypeDef": "Variant"
      },
      "369": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "ticket",
                "TypeName": "(AccountId, Ticket)",
                "TypeId": 371
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "maybe_ticket",
                "TypeName": "Option<(AccountId, Ticket)>",
                "TypeId": 372
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "maybe_len",
                "TypeName": "Option<u32>",
                "TypeId": 51
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Ticket",
            "TypeId": 370
          }
        ],
        "TypeDef": "Variant"
      },
      "370": {
        "TypeFields": [
          {
            "TypeName": "F::Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "fungible",
          "HoldConsideration"
        ],
        "TypeParams": [
          {
            "Name": "A"
          },
          {
            "Name": "F"
          },
          {
            "Name": "R"
          },
          {
            "Name": "D"
          },
          {
            "Name": "Fp"
          }
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "TypeIds": [
          0,
          370
        ],
        "TypeDef": "Tuple"
      },
      "372": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 371
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 371
          }
        ],
        "TypeDef": "Variant"
      },
      "373": {
        "TypeIds": [
          13,
          4
        ],
        "TypeDef": "Tuple"
      },
      "374": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "375": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
            ]
          },
          {
            "Name": "TooFew",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too few hashes were requested to be upgraded (i.e. zero)."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "376": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 379
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 377
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 378
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 378
          }
        ],
        "TypeDef": "Variant"
      },
      "378": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 34
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 288
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 250
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 356
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 14
          },
          {
            "Name": "Call",
            "TypeId": 288
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 356
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "379": {
        "TypeId": 377,
        "TypeDef": "Sequence"
      },
      "380": {
        "TypeFields": [
          {
            "Name": "total_retries",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "remaining",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "period",
            "TypeName": "Period",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_scheduler",
          "RetryConfig"
        ],
        "TypeParams": [
          {
            "Name": "Period",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "381": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "382": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 385
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 383
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "383": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 107
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 384
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "384": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "385": {
        "TypeId": 383,
        "TypeDef": "Sequence"
      },
      "386": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 388
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 387
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "387": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 107
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 107
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "388": {
        "TypeId": 387,
        "TypeDef": "Sequence"
      },
      "389": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 397
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 390
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "390": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 391
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 391
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::HoldReason",
                "TypeId": 392
              }
            ],
            "Index": 6
          },
          {
            "Name": "Marketplace",
            "TypeFields": [
              {
                "TypeName": "pallet_marketplace::HoldReason",
                "TypeId": 393
              }
            ],
            "Index": 13
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::HoldReason<pallet_collective::Instance1>",
                "TypeId": 394
              }
            ],
            "Index": 16
          },
          {
            "Name": "Escrow",
            "TypeFields": [
              {
                "TypeName": "pallet_escrow::HoldReason",
                "TypeId": 395
              }
            ],
            "Index": 50
          },
          {
            "Name": "MythProxy",
            "TypeFields": [
              {
                "TypeName": "pallet_myth_proxy::HoldReason",
                "TypeId": 396
              }
            ],
            "Index": 51
          }
        ],
        "Path": [
          "mainnet_runtime",
          "RuntimeHoldReason"
        ],
        "TypeDef": "Variant"
      },
      "392": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "HoldReason"
        ],
        "TypeDef": "Variant"
      },
      "393": {
        "Variants": [
          {
            "Name": "MarketplaceBid",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_marketplace",
          "pallet",
          "HoldReason"
        ],
        "TypeDef": "Variant"
      },
      "394": {
        "Variants": [
          {
            "Name": "ProposalSubmission",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "HoldReason"
        ],
        "TypeParams": [
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "395": {
        "Variants": [
          {
            "Name": "Escrow",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_escrow",
          "pallet",
          "HoldReason"
        ],
        "TypeDef": "Variant"
      },
      "396": {
        "Variants": [
          {
            "Name": "ProxyDeposit",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_myth_proxy",
          "pallet",
          "HoldReason"
        ],
        "TypeDef": "Variant"
      },
      "397": {
        "TypeId": 390,
        "TypeDef": "Sequence"
      },
      "398": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 402
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 399
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "399": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 400
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 400
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "400": {
        "Variants": [
          {
            "Name": "CollatorStaking",
            "TypeFields": [
              {
                "TypeName": "pallet_collator_staking::FreezeReason",
                "TypeId": 401
              }
            ],
            "Index": 21
          }
        ],
        "Path": [
          "mainnet_runtime",
          "RuntimeFreezeReason"
        ],
        "TypeDef": "Variant"
      },
      "401": {
        "Variants": [
          {
            "Name": "Staking",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CandidacyBond",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Releasing",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "FreezeReason"
        ],
        "TypeDef": "Variant"
      },
      "402": {
        "TypeId": 399,
        "TypeDef": "Sequence"
      },
      "403": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          },
          {
            "Name": "IssuanceDeactivated",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The issuance cannot be modified since it is already deactivated."
            ]
          },
          {
            "Name": "DeltaZero",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The delta cannot be zero."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "404": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "405": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "owner_deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "items",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "minted_items",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "highest_item_id",
            "TypeName": "Option<u128>",
            "TypeId": 54
          },
          {
            "Name": "item_metadatas",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "item_configs",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "attributes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionDetails"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "406": {
        "TypeIds": [
          47,
          6
        ],
        "TypeDef": "Tuple"
      },
      "407": {
        "TypeIds": [
          0,
          47,
          6
        ],
        "TypeDef": "Tuple"
      },
      "408": {
        "TypeIds": [
          0,
          47
        ],
        "TypeDef": "Tuple"
      },
      "409": {
        "TypeIds": [
          47,
          0
        ],
        "TypeDef": "Tuple"
      },
      "410": {
        "TypeFields": [
          {
            "TypeName": "CollectionRole",
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 411
          }
        ],
        "TypeDef": "Composite"
      },
      "411": {
        "Variants": [
          {
            "Name": "Issuer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Freezer",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Admin",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionRole"
        ],
        "TypeDef": "Variant"
      },
      "412": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "Approvals",
            "TypeId": 414
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit",
            "TypeId": 413
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemDetails"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Deposit",
            "TypeId": 413
          },
          {
            "Name": "Approvals",
            "TypeId": 414
          }
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemDeposit"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "414": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 415
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 51
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "415": {
        "TypeFields": [
          {
            "TypeId": 416
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 51
          }
        ],
        "TypeDef": "Composite"
      },
      "416": {
        "TypeId": 417,
        "TypeDef": "Sequence"
      },
      "417": {
        "TypeIds": [
          0,
          51
        ],
        "TypeDef": "Tuple"
      },
      "418": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "Deposit",
            "TypeId": 6
          },
          {
            "Name": "data",
            "TypeName": "BoundedVec<u8, StringLimit>",
            "TypeId": 52
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Deposit",
            "TypeId": 6
          },
          {
            "Name": "StringLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "419": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "Deposit",
            "TypeId": 420
          },
          {
            "Name": "data",
            "TypeName": "BoundedVec<u8, StringLimit>",
            "TypeId": 52
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Deposit",
            "TypeId": 420
          },
          {
            "Name": "StringLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "420": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "Option<AccountId>",
            "TypeId": 50
          },
          {
            "Name": "amount",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemMetadataDeposit"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "421": {
        "TypeIds": [
          47,
          54,
          56,
          55
        ],
        "TypeDef": "Tuple"
      },
      "422": {
        "TypeIds": [
          52,
          423
        ],
        "TypeDef": "Tuple"
      },
      "423": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "Option<AccountId>",
            "TypeId": 50
          },
          {
            "Name": "amount",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "AttributeDeposit"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "424": {
        "TypeIds": [
          6,
          50
        ],
        "TypeDef": "Tuple"
      },
      "425": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 426
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "426": {
        "TypeFields": [
          {
            "TypeId": 74
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "427": {
        "TypeFields": [
          {
            "Name": "desired_collection",
            "TypeName": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "desired_item",
            "TypeName": "Option<ItemId>",
            "TypeId": 54
          },
          {
            "Name": "price",
            "TypeName": "Option<ItemPriceWithDirection>",
            "TypeId": 58
          },
          {
            "Name": "deadline",
            "TypeName": "Deadline",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PendingSwap"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 47
          },
          {
            "Name": "ItemId",
            "TypeId": 6
          },
          {
            "Name": "ItemPriceWithDirection",
            "TypeId": 59
          },
          {
            "Name": "Deadline",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "428": {
        "TypeFields": [
          {
            "TypeName": "PalletFeature",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 429
          }
        ],
        "TypeDef": "Composite"
      },
      "429": {
        "Variants": [
          {
            "Name": "Trading",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Attributes",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Approvals",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Swaps",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PalletFeature"
        ],
        "TypeDef": "Variant"
      },
      "430": {
        "Variants": [
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "UnknownCollection",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given item ID is unknown."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The item ID has already been used for an item."
            ]
          },
          {
            "Name": "ApprovalExpired",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The approval had a deadline that expired, so the approval isn't valid anymore."
            ]
          },
          {
            "Name": "WrongOwner",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The owner turned out to be different to what was expected."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The witness data given does not match the current state of the chain."
            ]
          },
          {
            "Name": "CollectionIdInUse",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Collection ID is already taken."
            ]
          },
          {
            "Name": "ItemsNonTransferable",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Items within that collection are non-transferable."
            ]
          },
          {
            "Name": "NotDelegate",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The provided account is not a delegate."
            ]
          },
          {
            "Name": "WrongDelegate",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The delegate turned out to be different to what was expected."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "Unaccepted",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The named owner has not signed ownership acceptance of the collection."
            ]
          },
          {
            "Name": "ItemLocked",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The item is locked (non-transferable)."
            ]
          },
          {
            "Name": "LockedItemAttributes",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Item's attributes are locked."
            ]
          },
          {
            "Name": "LockedCollectionAttributes",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Collection's attributes are locked."
            ]
          },
          {
            "Name": "LockedItemMetadata",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Item's metadata is locked."
            ]
          },
          {
            "Name": "LockedCollectionMetadata",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Collection's metadata is locked."
            ]
          },
          {
            "Name": "MaxSupplyReached",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "All items have been minted."
            ]
          },
          {
            "Name": "MaxSupplyLocked",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The max supply is locked and can't be changed."
            ]
          },
          {
            "Name": "MaxSupplyTooSmall",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The provided max supply is less than the number of items a collection already has."
            ]
          },
          {
            "Name": "UnknownItem",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The given item ID is unknown."
            ]
          },
          {
            "Name": "UnknownSwap",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Swap doesn't exist."
            ]
          },
          {
            "Name": "MetadataNotFound",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The given item has no metadata set."
            ]
          },
          {
            "Name": "AttributeNotFound",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The provided attribute can't be found."
            ]
          },
          {
            "Name": "NotForSale",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Item is not for sale."
            ]
          },
          {
            "Name": "BidTooLow",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The provided bid is too low."
            ]
          },
          {
            "Name": "ReachedApprovalLimit",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The item has reached its approval limit."
            ]
          },
          {
            "Name": "DeadlineExpired",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The deadline has already expired."
            ]
          },
          {
            "Name": "WrongDuration",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "The duration provided should be less than or equal to `MaxDeadlineDuration`."
            ]
          },
          {
            "Name": "MethodDisabled",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "The method is disabled by system settings."
            ]
          },
          {
            "Name": "WrongSetting",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "The provided setting can't be set."
            ]
          },
          {
            "Name": "InconsistentItemConfig",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Item's config already exists and should be equal to the provided one."
            ]
          },
          {
            "Name": "NoConfig",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "Config for a collection or an item can't be found."
            ]
          },
          {
            "Name": "RolesNotCleared",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "Some roles were not cleared."
            ]
          },
          {
            "Name": "MintNotStarted",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "Mint has not started yet."
            ]
          },
          {
            "Name": "MintEnded",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "Mint has already ended."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "The provided Item was already used for claiming."
            ]
          },
          {
            "Name": "IncorrectData",
            "TypeFields": null,
            "Index": 37,
            "Docs": [
              "The provided data is incorrect."
            ]
          },
          {
            "Name": "WrongOrigin",
            "TypeFields": null,
            "Index": 38,
            "Docs": [
              "The extrinsic was sent by the wrong origin."
            ]
          },
          {
            "Name": "WrongSignature",
            "TypeFields": null,
            "Index": 39,
            "Docs": [
              "The provided signature is incorrect."
            ]
          },
          {
            "Name": "IncorrectMetadata",
            "TypeFields": null,
            "Index": 40,
            "Docs": [
              "The provided metadata might be too long."
            ]
          },
          {
            "Name": "MaxAttributesLimitReached",
            "TypeFields": null,
            "Index": 41,
            "Docs": [
              "Can't set more attributes per one call."
            ]
          },
          {
            "Name": "WrongNamespace",
            "TypeFields": null,
            "Index": 42,
            "Docs": [
              "The provided namespace isn't supported in this call."
            ]
          },
          {
            "Name": "CollectionNotEmpty",
            "TypeFields": null,
            "Index": 43,
            "Docs": [
              "Can't delete non-empty collections."
            ]
          },
          {
            "Name": "WitnessRequired",
            "TypeFields": null,
            "Index": 44,
            "Docs": [
              "The witness data should be provided."
            ]
          },
          {
            "Name": "MaxSupplyRequired",
            "TypeFields": null,
            "Index": 45,
            "Docs": [
              "It is required to specify the collection's maximum supply."
            ]
          },
          {
            "Name": "InvalidItemId",
            "TypeFields": null,
            "Index": 46,
            "Docs": [
              "ItemId must be under the collection's maximum supply."
            ]
          },
          {
            "Name": "ItemIdNotSerial",
            "TypeFields": null,
            "Index": 47,
            "Docs": [
              "When serial minting is enabled items must be consecutive."
            ]
          },
          {
            "Name": "SerialMintEnabled",
            "TypeFields": null,
            "Index": 48,
            "Docs": [
              "The collection must be configured for serial minting."
            ]
          },
          {
            "Name": "AlreadyBurned",
            "TypeFields": null,
            "Index": 49,
            "Docs": [
              "The item as already burned."
            ]
          }
        ],
        "Path": [
          "pallet_nfts",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "431": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "432": {
        "TypeFields": [
          {
            "Name": "seller",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "price",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "expiration",
            "TypeName": "Expiration",
            "TypeId": 12
          },
          {
            "Name": "fee",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "escrow_agent",
            "TypeName": "Option<Agent>",
            "TypeId": 50
          }
        ],
        "Path": [
          "pallet_marketplace",
          "types",
          "Ask"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Amount",
            "TypeId": 6
          },
          {
            "Name": "Expiration",
            "TypeId": 12
          },
          {
            "Name": "Agent",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "433": {
        "TypeIds": [
          47,
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "434": {
        "TypeFields": [
          {
            "Name": "buyer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "expiration",
            "TypeName": "Expiration",
            "TypeId": 12
          },
          {
            "Name": "fee",
            "TypeName": "Amount",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_marketplace",
          "types",
          "Bid"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Amount",
            "TypeId": 6
          },
          {
            "Name": "Expiration",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "435": {
        "Variants": [
          {
            "Name": "NotAuthority",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account is not the authority."
            ]
          },
          {
            "Name": "AccountAlreadySet",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Tried to store an account that is already set for this storage value."
            ]
          },
          {
            "Name": "FeeSignerAddressNotSet",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The fee signer address doesn't exist."
            ]
          },
          {
            "Name": "PayoutAddressNotSet",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The payout address doesn't exist."
            ]
          },
          {
            "Name": "ItemNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The item was not found."
            ]
          },
          {
            "Name": "InvalidPrice",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The provided price is too low."
            ]
          },
          {
            "Name": "InvalidExpiration",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Expiration time provided is too low."
            ]
          },
          {
            "Name": "InvalidFeePercent",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Fee percent provided is too low."
            ]
          },
          {
            "Name": "OrderAlreadyExists",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Ask or Bid with the same characteristics already exists."
            ]
          },
          {
            "Name": "ValidMatchMustExist",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "A valid match must exist to execute the order."
            ]
          },
          {
            "Name": "NotItemOwner",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Item can only be operated by the Item owner."
            ]
          },
          {
            "Name": "BadSignedMessage",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Invalid Signed message."
            ]
          },
          {
            "Name": "ItemAlreadyLocked",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The Item is already locked and can't be used."
            ]
          },
          {
            "Name": "AlreadyUsedNonce",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Nonce has already been used."
            ]
          },
          {
            "Name": "BidOnOwnedItem",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The item is already owned by the account trying to bid on it."
            ]
          },
          {
            "Name": "BuyerIsSeller",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Not allowed for the buyer of an item to be the same as the seller."
            ]
          },
          {
            "Name": "OrderExpired",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The ask is already past its expiration time."
            ]
          },
          {
            "Name": "OrderNotFound",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The order was not found."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "User Balance is insufficient for the required action."
            ]
          },
          {
            "Name": "NotOrderCreatorOrAdmin",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The caller is not the order creator or the admin account of the pallet."
            ]
          },
          {
            "Name": "BadNonce",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The provided nonce had an invalid size."
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "An overflow happened."
            ]
          }
        ],
        "Path": [
          "pallet_marketplace",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "436": {
        "Variants": [
          {
            "Name": "AlreadyApplied",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "BatchSenderIsNotOrigin",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NoCalls",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NoApprovals",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "InvalidDomain",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "InvalidCallOrigin",
            "TypeFields": [
              {
                "TypeName": "u16",
                "TypeId": 173
              }
            ],
            "Index": 5
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": [
              {
                "TypeName": "u16",
                "TypeId": 173
              }
            ],
            "Index": 6
          },
          {
            "Name": "Expired",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "UnsortedApprovals",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "pallet_multibatching",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "437": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet."
        ]
      },
      "438": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 179
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "439": {
        "TypeIds": [
          0,
          37
        ],
        "TypeDef": "Tuple"
      },
      "440": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 4
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 74
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 74
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "441": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          },
          {
            "Name": "ProposalActive",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Proposal is still active."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "442": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 444
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 443
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "443": {
        "TypeIds": [
          4,
          288,
          0
        ],
        "TypeDef": "Tuple"
      },
      "444": {
        "TypeId": 443,
        "TypeDef": "Sequence"
      },
      "445": {
        "TypeIds": [
          364,
          6
        ],
        "TypeDef": "Tuple"
      },
      "446": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 447
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 288
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "447": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 288
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 68
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 448
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 288
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "448": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "449": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 450
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 453
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 454
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 291
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 453
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 454
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "450": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 452
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 451
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "451": {
        "TypeIds": [
          4,
          69
        ],
        "TypeDef": "Tuple"
      },
      "452": {
        "TypeId": 451,
        "TypeDef": "Sequence"
      },
      "453": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "454": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "455": {
        "TypeIds": [
          288,
          68
        ],
        "TypeDef": "Tuple"
      },
      "456": {
        "TypeIds": [
          4,
          364
        ],
        "TypeDef": "Tuple"
      },
      "457": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "458": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "459": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 460
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "460": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "461": {
        "TypeFields": [
          {
            "Name": "asset_kind",
            "TypeName": "AssetKind",
            "TypeId": 37
          },
          {
            "Name": "amount",
            "TypeName": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "valid_from",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "expire_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "PaymentState<PaymentId>",
            "TypeId": 462
          }
        ],
        "Path": [
          "pallet_treasury",
          "SpendStatus"
        ],
        "TypeParams": [
          {
            "Name": "AssetKind",
            "TypeId": 37
          },
          {
            "Name": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PaymentId",
            "TypeId": 37
          }
        ],
        "TypeDef": "Composite"
      },
      "462": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "Id",
                "TypeId": 37
              }
            ],
            "Index": 1
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_treasury",
          "PaymentState"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 37
          }
        ],
        "TypeDef": "Variant"
      },
      "463": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 107
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "465": {
        "Variants": [
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "No proposal, bounty or spend at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal has not been approved."
            ]
          },
          {
            "Name": "FailedToConvertBalance",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The balance of the asset kind is not convertible to the balance of the native asset."
            ]
          },
          {
            "Name": "SpendExpired",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The spend has expired and cannot be claimed."
            ]
          },
          {
            "Name": "EarlyPayout",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The spend is not yet eligible for payout."
            ]
          },
          {
            "Name": "AlreadyAttempted",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The payment has already been attempted."
            ]
          },
          {
            "Name": "PayoutError",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "There was some issue with the mechanism of payment."
            ]
          },
          {
            "Name": "NotAttempted",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The payout was not yet attempted/claimed."
            ]
          },
          {
            "Name": "Inconclusive",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The payment has neither failed nor succeeded yet."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "466": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 74
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "467": {
        "TypeFields": [
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "stakers",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "CandidateInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "468": {
        "TypeIds": [
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "469": {
        "TypeFields": [
          {
            "Name": "session",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "CandidateStakeInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "470": {
        "TypeFields": [
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "maybe_last_unstake",
            "TypeName": "Option<(Balance, BlockNumber)>",
            "TypeId": 472
          },
          {
            "Name": "candidates",
            "TypeName": "AccountIdSet",
            "TypeId": 471
          },
          {
            "Name": "maybe_last_reward_session",
            "TypeName": "Option<SessionIndex>",
            "TypeId": 51
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "UserStakeInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountIdSet",
            "TypeId": 471
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "471": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 426
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "472": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 473
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 473
          }
        ],
        "TypeDef": "Variant"
      },
      "473": {
        "TypeIds": [
          6,
          4
        ],
        "TypeDef": "Tuple"
      },
      "474": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 476
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 475
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "475": {
        "TypeFields": [
          {
            "Name": "block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "ReleaseRequest"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "476": {
        "TypeId": 475,
        "TypeDef": "Sequence"
      },
      "477": {
        "TypeFields": [
          {
            "Name": "rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "claimed_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "candidates",
            "TypeName": "AccountIdMap",
            "TypeId": 478
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "SessionInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountIdMap",
            "TypeId": 478
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "478": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 480
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 479
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "479": {
        "TypeIds": [
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "480": {
        "TypeFields": [
          {
            "TypeId": 481
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 479
          }
        ],
        "TypeDef": "Composite"
      },
      "481": {
        "TypeId": 482,
        "TypeDef": "Sequence"
      },
      "482": {
        "TypeIds": [
          0,
          479
        ],
        "TypeDef": "Tuple"
      },
      "483": {
        "TypeFields": [
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "reason",
            "TypeName": "CandidacyBondReleaseReason",
            "TypeId": 484
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "CandidacyBondRelease"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "484": {
        "Variants": [
          {
            "Name": "Idle",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Left",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Replaced",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "CandidacyBondReleaseReason"
        ],
        "TypeDef": "Variant"
      },
      "485": {
        "Variants": [
          {
            "Name": "TooManyCandidates",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The pallet has too many candidates."
            ]
          },
          {
            "Name": "TooFewEligibleCollators",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Leaving would result in too few candidates."
            ]
          },
          {
            "Name": "AlreadyCandidate",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account is already a candidate."
            ]
          },
          {
            "Name": "NotCandidate",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Account is not a candidate."
            ]
          },
          {
            "Name": "TooManyInvulnerables",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many Invulnerables."
            ]
          },
          {
            "Name": "DuplicatedInvulnerables",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "At least one of the invulnerables is duplicated"
            ]
          },
          {
            "Name": "AlreadyInvulnerable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Account is already an Invulnerable."
            ]
          },
          {
            "Name": "NotInvulnerable",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Account is not an Invulnerable."
            ]
          },
          {
            "Name": "NoAssociatedCollatorId",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Account has no associated validator ID."
            ]
          },
          {
            "Name": "CollatorNotRegistered",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Collator ID is not yet registered."
            ]
          },
          {
            "Name": "InsufficientStake",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Amount not sufficient to be staked."
            ]
          },
          {
            "Name": "TooManyDesiredCandidates",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "DesiredCandidates is out of bounds."
            ]
          },
          {
            "Name": "TooManyReleaseRequests",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Too many unstaking requests. Claim some of them first."
            ]
          },
          {
            "Name": "InvalidMinStake",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Invalid value for MinStake. It must be lower than or equal to `MinStake`."
            ]
          },
          {
            "Name": "InvalidCandidacyBond",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Invalid value for CandidacyBond. It must be higher than or equal to `MinCandidacyBond`."
            ]
          },
          {
            "Name": "TooManyStakedCandidates",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Number of staked candidates is greater than `MaxStakedCandidates`."
            ]
          },
          {
            "Name": "InvalidExtraReward",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Extra reward cannot be zero."
            ]
          },
          {
            "Name": "ExtraRewardAlreadyDisabled",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Extra rewards are already zero."
            ]
          },
          {
            "Name": "InvalidFundingAmount",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The amount to fund the extra reward pot must be greater than zero."
            ]
          },
          {
            "Name": "TooManyStakers",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Cannot add more stakers to a given candidate."
            ]
          },
          {
            "Name": "InsufficientFreeBalance",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The user does not have enough balance to be locked for staking."
            ]
          },
          {
            "Name": "InsufficientLockedBalance",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The user does not have enough locked balance to stake."
            ]
          },
          {
            "Name": "CannotUnlock",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Cannot unlock such amount."
            ]
          },
          {
            "Name": "TooFewCandidates",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "User must stake at least on one candidate."
            ]
          },
          {
            "Name": "PreviousRewardsNotClaimed",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Rewards from previous sessions have not yet been claimed."
            ]
          },
          {
            "Name": "NoStakeOnCandidate",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "User has not Staked on the given Candidate."
            ]
          },
          {
            "Name": "NoPendingClaim",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "No rewards to claim as previous claim happened on the same session."
            ]
          },
          {
            "Name": "NotRemovedCandidate",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Candidate has not been removed in the current session."
            ]
          }
        ],
        "Path": [
          "pallet_collator_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "486": {
        "TypeId": 487,
        "TypeDef": "Sequence"
      },
      "487": {
        "TypeIds": [
          0,
          298
        ],
        "TypeDef": "Tuple"
      },
      "488": {
        "TypeIds": [
          489,
          15
        ],
        "TypeDef": "Tuple"
      },
      "489": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 19
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "490": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "491": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 492
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 299
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "492": {
        "TypeId": 299,
        "TypeDef": "Sequence"
      },
      "493": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "494": {
        "TypeIds": [
          493,
          4
        ],
        "TypeDef": "Tuple"
      },
      "495": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 496
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 169
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "496": {
        "TypeFields": [
          {
            "TypeId": 497
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 169
          }
        ],
        "TypeDef": "Composite"
      },
      "497": {
        "TypeId": 169,
        "TypeDef": "Sequence"
      },
      "498": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 501
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 499
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "499": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 169
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 500
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 173
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 173
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "500": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "501": {
        "TypeId": 499,
        "TypeDef": "Sequence"
      },
      "502": {
        "TypeIds": [
          169,
          173
        ],
        "TypeDef": "Tuple"
      },
      "503": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "504": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "505": {
        "Variants": [
          {
            "Name": "BadQueueConfig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Setting the queue config failed since one of its values was invalid."
            ]
          },
          {
            "Name": "AlreadySuspended",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The execution is already suspended."
            ]
          },
          {
            "Name": "AlreadyResumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The execution is already resumed."
            ]
          },
          {
            "Name": "TooManyActiveOutboundChannels",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too many active outbound channels."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message is too big."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "506": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedLocation",
                "TypeId": 165
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedLocation>",
                "TypeId": 507
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 508
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedLocation",
                "TypeId": 165
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 510
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "507": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 165
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 165
          }
        ],
        "TypeDef": "Variant"
      },
      "508": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 509
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 509
          }
        ],
        "TypeDef": "Variant"
      },
      "509": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "510": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 306
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Response",
                "TypeId": 322
              }
            ],
            "Index": 4
          },
          {
            "Name": "V5",
            "TypeFields": [
              {
                "TypeName": "v5::Response",
                "TypeId": 109
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "511": {
        "TypeIds": [
          4,
          165
        ],
        "TypeDef": "Tuple"
      },
      "512": {
        "TypeIds": [
          12,
          10,
          4
        ],
        "TypeDef": "Tuple"
      },
      "513": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 515
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 514
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "514": {
        "TypeIds": [
          165,
          4
        ],
        "TypeDef": "Tuple"
      },
      "515": {
        "TypeId": 514,
        "TypeDef": "Sequence"
      },
      "516": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 517
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "517": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 15
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 15
          }
        ],
        "TypeDef": "Variant"
      },
      "518": {
        "TypeIds": [
          4,
          0,
          344
        ],
        "TypeDef": "Tuple"
      },
      "519": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedLocation",
            "TypeId": 165
          },
          {
            "Name": "locker",
            "TypeName": "VersionedLocation",
            "TypeId": 165
          },
          {
            "Name": "consumers",
            "TypeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
            "TypeId": 520
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeParams": [
          {
            "Name": "ConsumerIdentifier",
            "TypeId": 37
          },
          {
            "Name": "MaxConsumers"
          }
        ],
        "TypeDef": "Composite"
      },
      "520": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 522
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 521
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "521": {
        "TypeIds": [
          37,
          6
        ],
        "TypeDef": "Tuple"
      },
      "522": {
        "TypeId": 521,
        "TypeDef": "Sequence"
      },
      "523": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 525
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 524
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "524": {
        "TypeIds": [
          6,
          165
        ],
        "TypeDef": "Tuple"
      },
      "525": {
        "TypeId": 524,
        "TypeDef": "Sequence"
      },
      "526": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message.",
              "Perhaps a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `Location` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "CannotCheckOutTeleport",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Could not check-out the assets for teleportation to the destination chain."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still consumers of the lock."
            ]
          },
          {
            "Name": "InvalidAssetUnknownReserve",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Invalid asset, reserve chain could not be determined for it."
            ]
          },
          {
            "Name": "InvalidAssetUnsupportedReserve",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Invalid asset, do not support remote asset reserves with different fees reserves."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Too many assets with different reserve locations have been attempted for transfer."
            ]
          },
          {
            "Name": "LocalExecutionIncomplete",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Local XCM execution incomplete."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "527": {
        "TypeFields": [
          {
            "Name": "begin",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "end",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "count",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "ready_neighbours",
            "TypeName": "Option<Neighbours<MessageOrigin>>",
            "TypeId": 528
          },
          {
            "Name": "message_count",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "size",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_message_queue",
          "BookState"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 168
          }
        ],
        "TypeDef": "Composite"
      },
      "528": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 529
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 529
          }
        ],
        "TypeDef": "Variant"
      },
      "529": {
        "TypeFields": [
          {
            "Name": "prev",
            "TypeName": "MessageOrigin",
            "TypeId": 168
          },
          {
            "Name": "next",
            "TypeName": "MessageOrigin",
            "TypeId": 168
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Neighbours"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 168
          }
        ],
        "TypeDef": "Composite"
      },
      "530": {
        "TypeIds": [
          168,
          4
        ],
        "TypeDef": "Tuple"
      },
      "531": {
        "TypeFields": [
          {
            "Name": "remaining",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first_index",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "last",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "heap",
            "TypeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
            "TypeId": 532
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Page"
        ],
        "TypeParams": [
          {
            "Name": "Size",
            "TypeId": 4
          },
          {
            "Name": "HeapSize"
          }
        ],
        "TypeDef": "Composite"
      },
      "532": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 15
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "533": {
        "Variants": [
          {
            "Name": "NotReapable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Page is not reapable because it has items remaining to be processed and is not old",
              "enough."
            ]
          },
          {
            "Name": "NoPage",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Page to be reaped does not exist."
            ]
          },
          {
            "Name": "NoMessage",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The referenced message could not be found."
            ]
          },
          {
            "Name": "AlreadyProcessed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message was already processed and cannot be processed again."
            ]
          },
          {
            "Name": "Queued",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message is queued for future execution."
            ]
          },
          {
            "Name": "InsufficientWeight",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "There is temporarily not enough weight to continue servicing messages."
            ]
          },
          {
            "Name": "TemporarilyUnprocessable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "This message is temporarily unprocessable.",
              "",
              "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
              "retrying."
            ]
          },
          {
            "Name": "QueuePaused",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The queue is paused and no message can be executed from it.",
              "",
              "This can change at any time and may resolve in the future by re-trying."
            ]
          },
          {
            "Name": "RecursiveDisallowed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Another call is in progress and needs to finish before this call can happen."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "534": {
        "TypeIds": [
          535,
          6
        ],
        "TypeDef": "Tuple"
      },
      "535": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 537
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 536
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "536": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 172
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 172
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "537": {
        "TypeId": 536,
        "TypeDef": "Sequence"
      },
      "538": {
        "TypeIds": [
          539,
          6
        ],
        "TypeDef": "Tuple"
      },
      "539": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 541
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 540
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "540": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 13
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 13
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "541": {
        "TypeId": 540,
        "TypeDef": "Sequence"
      },
      "542": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "543": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 544
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 350
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "544": {
        "TypeId": 350,
        "TypeDef": "Sequence"
      },
      "545": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_vesting",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "546": {
        "Variants": [
          {
            "Name": "NotVesting",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account given is not vesting."
            ]
          },
          {
            "Name": "AtMaxVestingSchedules",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "Name": "ScheduleIndexOutOfBounds",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "Name": "InvalidScheduleParams",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the vesting pallet."
        ]
      },
      "547": {
        "Variants": [
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "When trying to release more funds than are on deposit."
            ]
          },
          {
            "Name": "DepositTooLow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "When the deposit value is less then configured value."
            ]
          },
          {
            "Name": "NoSuchDeposit",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "When trying to release or revoke a deposit that does not exist."
            ]
          },
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "When the account balance is below the existential deposit before depositing."
            ]
          }
        ],
        "Path": [
          "pallet_escrow",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "548": {
        "TypeFields": [
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 172
          },
          {
            "Name": "sponsor",
            "TypeName": "Option<AccountId>",
            "TypeId": 50
          }
        ],
        "Path": [
          "pallet_myth_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 172
          }
        ],
        "TypeDef": "Composite"
      },
      "549": {
        "TypeIds": [
          0,
          468
        ],
        "TypeDef": "Tuple"
      },
      "550": {
        "Variants": [
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The caller does not have the necessary permissions."
            ]
          },
          {
            "Name": "NoSuchProxy",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specified proxy does not exist."
            ]
          },
          {
            "Name": "SponsorshipUnauthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The delegator is not authorized to use the sponsor's funds."
            ]
          },
          {
            "Name": "SponsorAgentUnauthorized",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The sponsor agent is not authorized to use the sponsor's funds."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The delegate doesn't have proxy permission from the delegator."
            ]
          },
          {
            "Name": "SponsorAgentAlreadyRegistered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The sponsor agent is already registered."
            ]
          }
        ],
        "Path": [
          "pallet_myth_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "551": {
        "TypeFields": [
          {
            "Name": "caller",
            "TypeName": "Account",
            "TypeId": 0
          },
          {
            "Name": "fee_address",
            "TypeName": "Account",
            "TypeId": 0
          }
        ],
        "Path": [
          "pallet_dmarket",
          "types",
          "OrderData"
        ],
        "TypeParams": [
          {
            "Name": "Account",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "552": {
        "Variants": [
          {
            "Name": "ItemNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The item was not found."
            ]
          },
          {
            "Name": "SellerNotItemOwner",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Item can only be operated by the Item owner."
            ]
          },
          {
            "Name": "BidAlreadyExecuted",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The bid with the provided parameters has already been executed."
            ]
          },
          {
            "Name": "AskAlreadyExecuted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The ask with the provided parameters has already been executed."
            ]
          },
          {
            "Name": "BuyerBalanceTooLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Buyer balance is not enough to pay for trade costs."
            ]
          },
          {
            "Name": "BidExpired",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Bid expiration timestamp must be in the future."
            ]
          },
          {
            "Name": "AskExpired",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Ask expiration timestamp must be in the future."
            ]
          },
          {
            "Name": "InvalidBuyerSignature",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The signature provided by the buyer is invalid."
            ]
          },
          {
            "Name": "InvalidSellerSignature",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The signature provided by the seller is invalid."
            ]
          },
          {
            "Name": "BuyerIsSeller",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Same buyer and seller not allowed."
            ]
          },
          {
            "Name": "BadSignedMessage",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Invalid Signed message."
            ]
          },
          {
            "Name": "CollectionAlreadyInUse",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Dmarket collection already set to the provided value."
            ]
          },
          {
            "Name": "CollectionNotSet",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Dmarket collection has not been set."
            ]
          },
          {
            "Name": "CollectionNotFound",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The provided Dmarket collect was not found."
            ]
          }
        ],
        "Path": [
          "pallet_dmarket",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "553": {
        "TypeFields": [
          {
            "TypeId": 15
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 0
          },
          {
            "Name": "Call",
            "TypeId": 245
          },
          {
            "Name": "Signature",
            "TypeId": 270
          },
          {
            "Name": "Extra",
            "TypeId": 554
          }
        ],
        "TypeDef": "Composite"
      },
      "554": {
        "TypeIds": [
          555,
          556,
          557,
          558,
          559,
          561,
          562,
          563,
          564,
          565
        ],
        "TypeDef": "Tuple"
      },
      "555": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "556": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "557": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "558": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "559": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 560
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "560": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "561": {
        "TypeFields": [
          {
            "TypeName": "T::Nonce",
            "TypeId": 85
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "562": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "563": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 88
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "564": {
        "Path": [
          "cumulus_primitives_storage_weight_reclaim",
          "StorageWeightReclaim"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "565": {
        "TypeFields": [
          {
            "Name": "mode",
            "TypeName": "Mode",
            "TypeId": 566
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "CheckMetadataHash"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "566": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Enabled",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "Mode"
        ],
        "TypeDef": "Variant"
      },
      "567": {
        "Path": [
          "mainnet_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "InherentsApplied",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether all inherents have been applied."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 15
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 16,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 20,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 13,
                  "Value": 180
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 181,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 178,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 184,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `Some` if a code upgrade has been authorized."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 185
        },
        "Events": {
          "TypeId": 23
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 189,
            "Value": "BwDyBSoBAAsAIEqp0QECAEABAmXNHQABC8BWDe9FAQIA4AABCwCY9z5dAQIA8AABAAACZc0dAAELwN5fWboBAgAwAQELACBKqdEBAgBAAQEHAIhSanQCAFAAAmXNHQAAAAA=",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 192,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "ABAAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 194,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 195,
            "Value": "GG15dGhvcxhteXRob3MBAAAA9wMAAAAAAABA3XGNXMUyYtQBAAAA32rLaJkHYJsFAAAA+8V3uddH79YBAAAAN+OX/HyR9eQCAAAAQP461AH4lZoGAAAA0ryYl+7QjxUDAAAA94sni+U/RUwCAAAAqzwFcikf64sBAAAAvJ2JkE9bkj8BAAAAN8i7E1CpoqgEAAAA8/8U1atScFkDAAAAMO4rX+DWr8IBAAAA173YonLKDWUBAAAA6pPj8W89aWICAAAAE6cI3+n5OWoBAAAAkbHIsWMo65IBAAAAAQAAAAE=",
            "Docs": [
              " Get the chain's in-code version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 173,
            "Value": "FHU=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 199
        },
        "Index": 0
      },
      "1": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "UnincludedSegment",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 200,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Latest included block descendants the runtime accepted. In other words, these are",
                " ancestors of the currently executing block which have not been included in the observed",
                " relay-chain state.",
                "",
                " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
                " in the pallet."
              ]
            },
            {
              "Name": "AggregatedUnincludedSegment",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 210,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
                " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
                " respect to relay chain constraints."
              ]
            },
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 15,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be",
                " applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
                " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
                " with the new validation code. This concludes the upgrade process."
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 15,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 211,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block.",
                "",
                " This is updated in `on_finalize`."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 213,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "UpgradeGoAhead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 208,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Optional upgrade go-ahead signal from the relay-chain.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 215,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 217,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 222,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 224,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 225,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 228,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 188,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 188,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "UpwardDeliveryFeeFactor",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 230,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": [
                " The factor to multiply the base delivery fee by for UMP."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 15,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See `Pallet::set_custom_validation_head_data` for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 231
        },
        "Events": {
          "TypeId": 33
        },
        "Constants": [
          {
            "Name": "SelfParaId",
            "TypeId": 169,
            "Value": "KQ0AAA==",
            "Docs": [
              " Returns the parachain ID we are running with."
            ]
          }
        ],
        "Errors": {
          "TypeId": 240
        },
        "Index": 1
      },
      "2": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the timestamp has been updated in this block.",
                "",
                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                " It is then checked at the end of each block execution in the `on_finalize` hook."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 241
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 12,
            "Value": "AAAAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks.",
              "",
              " Be aware that this is different to the *expected* period that the block production",
              " apparatus provides. Your chosen consensus system will generally work with this to",
              " determine a sensible block time. For example, in the Aura pallet it will be double this",
              " period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 169,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 242
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 3
      },
      "4": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 243
        },
        "Events": {
          "TypeId": 35
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 361
        },
        "Index": 4
      },
      "5": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 362,
                  "Value": 363
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 246
        },
        "Events": {
          "TypeId": 38
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "AIDR0/naxgIAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AACilBodAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 365
        },
        "Index": 5
      },
      "6": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 366
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "RequestStatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 369
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 373,
                  "Value": 374
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 248
        },
        "Events": {
          "TypeId": 40
        },
        "Constants": [],
        "Errors": {
          "TypeId": 375
        },
        "Index": 6
      },
      "7": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 376
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Retries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 42,
                  "Value": 380
                }
              },
              "Default": "AA==",
              "Docs": [
                " Retry configurations for items to be executed, indexed by task address."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 14,
                  "Value": 42
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 249
        },
        "Events": {
          "TypeId": 41
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 10,
            "Value": "CwCAbod0AQIAAAE=",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 381
        },
        "Index": 7
      },
      "10": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 382
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 386
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 389
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 398
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 251
        },
        "Events": {
          "TypeId": 43
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "AADBb/KGIwAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation.",
              "",
              " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account.",
              "",
              " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 403
        },
        "Index": 10
      },
      "11": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 230,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 404,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 45
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 11
      },
      "12": {
        "Name": "Nfts",
        "Storage": {
          "Prefix": "Nfts",
          "Entries": [
            {
              "Name": "Collection",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 47,
                  "Value": 405
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of a collection."
              ]
            },
            {
              "Name": "BurnedItems",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " Burned items in a collection."
              ]
            },
            {
              "Name": "OwnershipAcceptance",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 47
                }
              },
              "Default": "AA==",
              "Docs": [
                " The collection, if any, of which an account is willing to take ownership."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 407,
                  "Value": 37
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items held by any given account; set out this way so that items owned by a single",
                " account can be enumerated."
              ]
            },
            {
              "Name": "CollectionAccount",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 408,
                  "Value": 37
                }
              },
              "Default": "AA==",
              "Docs": [
                " The collections owned by any given account; set out this way so that collections owned by",
                " a single account can be enumerated."
              ]
            },
            {
              "Name": "CollectionRoleOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 409,
                  "Value": 410
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items in existence and their ownership details.",
                " Stores collection roles as per account."
              ]
            },
            {
              "Name": "Item",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 412
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items in existence and their ownership details."
              ]
            },
            {
              "Name": "CollectionMetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 47,
                  "Value": 418
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata of a collection."
              ]
            },
            {
              "Name": "ItemMetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 419
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata of an item."
              ]
            },
            {
              "Name": "Attribute",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 421,
                  "Value": 422
                }
              },
              "Default": "AA==",
              "Docs": [
                " Attributes of a collection."
              ]
            },
            {
              "Name": "ItemPriceOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 424
                }
              },
              "Default": "AA==",
              "Docs": [
                " A price of an item."
              ]
            },
            {
              "Name": "ItemAttributesApprovalsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 425
                }
              },
              "Default": "AA==",
              "Docs": [
                " Item attribute approvals."
              ]
            },
            {
              "Name": "NextCollectionId",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 47,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `CollectionId` that is going to be used for the next collection.",
                " This gets incremented whenever a new collection is created."
              ]
            },
            {
              "Name": "PendingSwapOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 427
                }
              },
              "Default": "AA==",
              "Docs": [
                " Handles all the pending swaps."
              ]
            },
            {
              "Name": "CollectionConfigOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 47,
                  "Value": 254
                }
              },
              "Default": "AA==",
              "Docs": [
                " Config of a collection."
              ]
            },
            {
              "Name": "ItemConfigOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 264
                }
              },
              "Default": "AA==",
              "Docs": [
                " Config of an item."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 253
        },
        "Events": {
          "TypeId": 46
        },
        "Constants": [
          {
            "Name": "CollectionDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for collection."
            ]
          },
          {
            "Name": "ItemDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for an item."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your item."
            ]
          },
          {
            "Name": "AttributeDepositBase",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding an attribute to an item."
            ]
          },
          {
            "Name": "DepositPerByte",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes store in metadata,",
              " either \"normal\" metadata or attribute metadata."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximum length of data stored on-chain."
            ]
          },
          {
            "Name": "KeyLimit",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "Name": "ValueLimit",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximum length of an attribute value."
            ]
          },
          {
            "Name": "ApprovalsLimit",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum approvals an item could have."
            ]
          },
          {
            "Name": "ItemAttributesApprovalsLimit",
            "TypeId": 4,
            "Value": "HgAAAA==",
            "Docs": [
              " The maximum attributes approvals an item could have."
            ]
          },
          {
            "Name": "MaxTips",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The max number of tips a user could send."
            ]
          },
          {
            "Name": "MaxDeadlineDuration",
            "TypeId": 4,
            "Value": "ABpPAA==",
            "Docs": [
              " The max duration in blocks for deadlines."
            ]
          },
          {
            "Name": "MaxAttributesPerCall",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The max number of attributes a user could set per call."
            ]
          },
          {
            "Name": "Features",
            "TypeId": 428,
            "Value": "AAAAAAAAAAA=",
            "Docs": [
              " Disables some of pallet's features."
            ]
          }
        ],
        "Errors": {
          "TypeId": 430
        },
        "Index": 12
      },
      "13": {
        "Name": "Marketplace",
        "Storage": {
          "Prefix": "Marketplace",
          "Entries": [
            {
              "Name": "Authority",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority account for the pallet."
              ]
            },
            {
              "Name": "FeeSigner",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The account responsible for signing fee-related operations.",
                "",
                " This account is expected to provide valid signatures for operations",
                " requiring authentication related to transaction fees."
              ]
            },
            {
              "Name": "Nonces",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 431,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping that stores the state of nonces used for preventing replay attacks."
              ]
            },
            {
              "Name": "PayoutAddress",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The account where marketplace payouts will be sent."
              ]
            },
            {
              "Name": "Asks",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 406,
                  "Value": 432
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping of active Ask orders in the marketplace."
              ]
            },
            {
              "Name": "Bids",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 433,
                  "Value": 434
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping that stores active Bid orders in the marketplace."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 273
        },
        "Events": {
          "TypeId": 62
        },
        "Constants": [
          {
            "Name": "MinOrderDuration",
            "TypeId": 12,
            "Value": "CgAAAAAAAAA=",
            "Docs": [
              " The minimum amount of time for an ask duration."
            ]
          },
          {
            "Name": "NonceStringLimit",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Size of nonce StorageValue"
            ]
          }
        ],
        "Errors": {
          "TypeId": 435
        },
        "Index": 13
      },
      "14": {
        "Name": "Multibatching",
        "Storage": {
          "Prefix": "Multibatching",
          "Entries": [
            {
              "Name": "Applied",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 37
                }
              },
              "Default": "",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 277
        },
        "Events": {
          "TypeId": 64
        },
        "Constants": [
          {
            "Name": "MaxCalls",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": []
          },
          {
            "Name": "Domain",
            "TypeId": 107,
            "Value": "TVlUSF9ORVQ=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 436
        },
        "Index": 14
      },
      "15": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 285
        },
        "Events": {
          "TypeId": 65
        },
        "Constants": [],
        "Errors": {
          "TypeId": 437
        },
        "Index": 15
      },
      "16": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 438,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 245
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "CostOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 439
                }
              },
              "Default": "AA==",
              "Docs": [
                " Consideration cost created for publishing and storing a proposal.",
                "",
                " Determined by [Config::Consideration] and may be not present for certain proposals (e.g. if",
                " the proposal count at the time of creation was below threshold N)."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 440
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 74,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of abstentions."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 286
        },
        "Events": {
          "TypeId": 66
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 10,
            "Value": "BwAQpdToAgCgAA==",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 441
        },
        "Index": 16
      },
      "17": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 442,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 445
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 446
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 449
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 455,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 456
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 71,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information concerning any proposal or referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 287
        },
        "Events": {
          "TypeId": 67
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "AMIBAA==",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "AMIBAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "AAAQYy1ex2sFAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 8,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 457
        },
        "Index": 17
      },
      "18": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
                " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
                "",
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 458
                }
              },
              "Default": "AA==",
              "Docs": [
                " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
                " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
                "",
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 459,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
                " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
                "",
                " Proposal indices that have been approved but not yet awarded."
              ]
            },
            {
              "Name": "SpendCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The count of spends that have been made."
              ]
            },
            {
              "Name": "Spends",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 461
                }
              },
              "Default": "AA==",
              "Docs": [
                " Spends that have been approved and being processed."
              ]
            },
            {
              "Name": "LastSpendPeriod",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The blocknumber for the last triggered spend period."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 292
        },
        "Events": {
          "TypeId": 72
        },
        "Constants": [
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 463,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 464,
            "Value": "cHkvdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
              " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
              "",
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          },
          {
            "Name": "PayoutPeriod",
            "TypeId": 4,
            "Value": "gJcGAA==",
            "Docs": [
              " The period during which an approved treasury spend has to be claimed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 465
        },
        "Index": 18
      },
      "20": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 20
      },
      "21": {
        "Name": "CollatorStaking",
        "Storage": {
          "Prefix": "CollatorStaking",
          "Entries": [
            {
              "Name": "Invulnerables",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 466,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The invulnerable, permissioned collators. This list must be sorted."
              ]
            },
            {
              "Name": "Candidates",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 467
                }
              },
              "Default": "AA==",
              "Docs": [
                " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
                " mutually exclusive.",
                "",
                " This list is sorted in ascending order by total stake and when the stake amounts are equal, the least",
                " recently updated is considered greater."
              ]
            },
            {
              "Name": "CounterForCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "SessionRemovedCandidates",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 467
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map of Candidates that have been removed in the current session."
              ]
            },
            {
              "Name": "LastAuthoredBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Last block authored by a collator."
              ]
            },
            {
              "Name": "DesiredCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Desired number of candidates.",
                "",
                " This should always be less than [`Config::MaxCandidates`] for weights to be correct."
              ]
            },
            {
              "Name": "MinCandidacyBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum amount to become a collator."
              ]
            },
            {
              "Name": "MinStake",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum amount a user can stake."
              ]
            },
            {
              "Name": "CandidateStake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 468,
                  "Value": 469
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Amount staked by users per candidate.",
                "",
                " First key is the candidate, and second one is the staker."
              ]
            },
            {
              "Name": "UserStake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 470
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Number of candidates staked on by a user.",
                "",
                " Cannot be higher than `MaxStakedCandidates`."
              ]
            },
            {
              "Name": "ReleaseQueues",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 474
                }
              },
              "Default": "AA==",
              "Docs": [
                " Release requests for an account.",
                "",
                " They can be actually released by calling the [`release`] extrinsic, after the relevant delay."
              ]
            },
            {
              "Name": "CollatorRewardPercentage",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 75,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Percentage of rewards that would go for collators."
              ]
            },
            {
              "Name": "ExtraReward",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Per-block extra reward."
              ]
            },
            {
              "Name": "TotalBlocks",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 42,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Blocks produced in the current session. First value is the total,",
                " and second is blocks produced by candidates only (not invulnerables)."
              ]
            },
            {
              "Name": "ProducedBlocks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Mapping of blocks and their authors."
              ]
            },
            {
              "Name": "CurrentSession",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current session index."
              ]
            },
            {
              "Name": "ClaimableRewards",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Claimable rewards."
              ]
            },
            {
              "Name": "PerSessionRewards",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 477
                }
              },
              "Default": "AA==",
              "Docs": [
                " Per-session rewards."
              ]
            },
            {
              "Name": "CounterForPerSessionRewards",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "AutoCompound",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 75
                }
              },
              "Default": "AA==",
              "Docs": [
                " Percentage of reward to be re-invested in collators."
              ]
            },
            {
              "Name": "CandidacyBondReleases",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 483
                }
              },
              "Default": "AA==",
              "Docs": [
                " Time (in blocks) to release an ex-candidate's locked candidacy bond.",
                " If a candidate leaves the candidacy before its bond is released, the waiting period",
                " will restart."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 293
        },
        "Events": {
          "TypeId": 73
        },
        "Constants": [
          {
            "Name": "PotId",
            "TypeId": 464,
            "Value": "UG90U3Rha2U=",
            "Docs": [
              " Account Identifier from which the internal pot is generated.",
              "",
              " To initiate rewards, an ED needs to be transferred to the pot address."
            ]
          },
          {
            "Name": "ExtraRewardPotId",
            "TypeId": 464,
            "Value": "RXh0cmFQb3Q=",
            "Docs": [
              " Account Identifier from which the extra reward pot is generated.",
              "",
              " To initiate extra rewards the [`set_extra_reward`] extrinsic must be called;",
              " and this pot should be funded using [`top_up_extra_rewards`] extrinsic."
            ]
          },
          {
            "Name": "ExtraRewardReceiver",
            "TypeId": 50,
            "Value": "AW1vZGxweS90cnNyeQAAAAAAAAAA",
            "Docs": [
              " Determines what to do with funds in the extra rewards pot when stopping these rewards."
            ]
          },
          {
            "Name": "MaxCandidates",
            "TypeId": 4,
            "Value": "DwAAAA==",
            "Docs": [
              " Maximum number of candidates that we should have.",
              "",
              " This does not take into account the invulnerables.",
              " This must be more than or equal to `DesiredCandidates`."
            ]
          },
          {
            "Name": "MinEligibleCollators",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " Minimum number eligible collators including Invulnerables.",
              " Should always be greater than zero. This ensures that there will always be",
              " one collator who can produce blocks."
            ]
          },
          {
            "Name": "MaxInvulnerables",
            "TypeId": 4,
            "Value": "BAAAAA==",
            "Docs": [
              " Maximum number of invulnerables."
            ]
          },
          {
            "Name": "KickThreshold",
            "TypeId": 4,
            "Value": "gHAAAA==",
            "Docs": [
              " Candidates will be  removed from active collator set, if block is not produced within this threshold."
            ]
          },
          {
            "Name": "MaxStakedCandidates",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " Maximum candidates a staker can stake on."
            ]
          },
          {
            "Name": "MaxStakers",
            "TypeId": 4,
            "Value": "QA0DAA==",
            "Docs": [
              " Maximum stakers per candidate."
            ]
          },
          {
            "Name": "BondUnlockDelay",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Number of blocks to wait before returning the bond by a candidate."
            ]
          },
          {
            "Name": "StakeUnlockDelay",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Number of blocks to wait before returning the locked funds by a user."
            ]
          },
          {
            "Name": "RestakeUnlockDelay",
            "TypeId": 4,
            "Value": "QDgAAA==",
            "Docs": [
              " Number of blocks to wait before reusing funds previously assigned to a collator.",
              " It should be set to at least one session."
            ]
          },
          {
            "Name": "MaxRewardSessions",
            "TypeId": 4,
            "Value": "bQEAAA==",
            "Docs": [
              " Maximum number of rewards to keep in storage. Non-claimed rewards will not be claimable",
              " after they have been removed."
            ]
          },
          {
            "Name": "AutoCompoundingThreshold",
            "TypeId": 6,
            "Value": "AACQrG4yeIaHAAAAAAAAAA==",
            "Docs": [
              " Minimum stake needed to enable autocompounding."
            ]
          }
        ],
        "Errors": {
          "TypeId": 485
        },
        "Index": 21
      },
      "22": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 74,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 486,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 460,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 298
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 488,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 297
        },
        "Events": {
          "TypeId": 76
        },
        "Constants": [],
        "Errors": {
          "TypeId": 490
        },
        "Index": 22
      },
      "23": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 491,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 493,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "SlotDuration",
            "TypeId": 12,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The slot duration Aura should run with, expressed in milliseconds.",
              " The effective value of this type should not change while the chain is running.",
              "",
              " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
            ]
          }
        ],
        "Errors": null,
        "Index": 23
      },
      "24": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 491,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will",
                " always be updated to the latest AuRa authorities in `on_finalize`."
              ]
            },
            {
              "Name": "SlotInfo",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 494,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current slot paired with a number of authored blocks.",
                "",
                " Updated on each block initialization."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 24
      },
      "30": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 495,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The suspended inbound XCMP channels. All others are not suspended.",
                "",
                " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
                " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
                " within the block and therefore only included once in the proof size.",
                "",
                " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
                " will be smaller."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 498,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 502,
                  "Value": 503
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 169,
                  "Value": 503
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 504,
                "Item2": null
              },
              "Default": "IAAAADAAAAAIAAAA",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            },
            {
              "Name": "DeliveryFeeFactor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 169,
                  "Value": 230
                }
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": [
                " The factor to multiply the base delivery fee by."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 300
        },
        "Events": {
          "TypeId": 77
        },
        "Constants": [
          {
            "Name": "MaxInboundSuspended",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
              "",
              " Any further channel suspensions will fail and messages may get dropped without further",
              " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
              " [`InboundXcmpSuspended`] still applies at that scale."
            ]
          },
          {
            "Name": "MaxActiveOutboundChannels",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": [
              " Maximal number of outbound XCMP channels that can have messages queued at the same time.",
              "",
              " If this is reached, then no further messages can be sent to channels that do not yet",
              " have a message queued. This should be set to the expected maximum of outbound channels",
              " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,",
              " since otherwise the congestion control protocol will not work as intended and messages",
              " may be dropped. This value increases the PoV and should therefore not be picked too",
              " high. Governance needs to pay attention to not open more channels than this value."
            ]
          },
          {
            "Name": "MaxPageSize",
            "TypeId": 4,
            "Value": "AJwBAA==",
            "Docs": [
              " The maximal page size for HRMP message pages.",
              "",
              " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case",
              " benchmarking. The limit for the size of a message is slightly below this, since some",
              " overhead is incurred for encoding the format."
            ]
          }
        ],
        "Errors": {
          "TypeId": 505
        },
        "Index": 30
      },
      "31": {
        "Name": "PolkadotXcm",
        "Storage": {
          "Prefix": "PolkadotXcm",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 506
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 511,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 511,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 511,
                  "Value": 512
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 513,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 516,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 518,
                  "Value": 519
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 523
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            },
            {
              "Name": "XcmExecutionSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Global suspension state of the XCM executor."
              ]
            },
            {
              "Name": "ShouldRecordXcm",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                " Only one XCM program will be recorded at a time.",
                " This is meant to be used in runtime APIs, and it's advised it stays false",
                " for all other use cases, so as to not degrade regular performance.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            },
            {
              "Name": "RecordedXcm",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 98,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                " will be stored here.",
                " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 301
        },
        "Events": {
          "TypeId": 78
        },
        "Constants": [],
        "Errors": {
          "TypeId": 526
        },
        "Index": 31
      },
      "32": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 345
        },
        "Events": {
          "TypeId": 166
        },
        "Constants": [],
        "Errors": null,
        "Index": 32
      },
      "33": {
        "Name": "MessageQueue",
        "Storage": {
          "Prefix": "MessageQueue",
          "Entries": [
            {
              "Name": "BookStateFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 168,
                  "Value": 527
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The index of the first and last (non-empty) pages."
              ]
            },
            {
              "Name": "ServiceHead",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 168,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The origin at which we should begin servicing."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 530,
                  "Value": 531
                }
              },
              "Default": "AA==",
              "Docs": [
                " The map of page indices to pages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 346
        },
        "Events": {
          "TypeId": 167
        },
        "Constants": [
          {
            "Name": "HeapSize",
            "TypeId": 4,
            "Value": "AAABAA==",
            "Docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "Name": "MaxStale",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "Name": "ServiceWeight",
            "TypeId": 120,
            "Value": "AQcAWED7ogIAcAA=",
            "Docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items `on_initialize`.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
              " it run in `on_idle`."
            ]
          },
          {
            "Name": "IdleMaxServiceWeight",
            "TypeId": 120,
            "Value": "AQcAWED7ogIAcAA=",
            "Docs": [
              " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
              " should be provided to the message queue for servicing enqueued items `on_idle`.",
              " Useful for parachains to process messages at the same block they are received.",
              "",
              " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 533
        },
        "Index": 33
      },
      "40": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 534
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 538
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 347
        },
        "Events": {
          "TypeId": 171
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "AIA8YDeSxgIAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "ABBHaQMeAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "AIA8YDeSxgIAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "ACCO0gY8AAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 542
        },
        "Index": 40
      },
      "41": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "Vesting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 543
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 545,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 349
        },
        "Events": {
          "TypeId": 174
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AACKXXhFYwEAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "Name": "MaxVestingSchedules",
            "TypeId": 4,
            "Value": "HAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 546
        },
        "Index": 41
      },
      "50": {
        "Name": "Escrow",
        "Storage": {
          "Prefix": "Escrow",
          "Entries": [
            {
              "Name": "Deposits",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 468,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 351
        },
        "Events": {
          "TypeId": 175
        },
        "Constants": [
          {
            "Name": "MinDeposit",
            "TypeId": 6,
            "Value": "AADBb/KGIwAAAAAAAAAAAA==",
            "Docs": [
              " The minimum deposit value allowed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 547
        },
        "Index": 50
      },
      "51": {
        "Name": "MythProxy",
        "Storage": {
          "Prefix": "MythProxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 468,
                  "Value": 548
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "SponsorAgents",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from a sponsor agent to the sponsor."
              ]
            },
            {
              "Name": "SponsorshipApprovals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 468,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from a delegator and a sponsor to the sponsor agent."
              ]
            },
            {
              "Name": "ApprovalsByAgent",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 549,
                  "Value": 37
                }
              },
              "Default": "",
              "Docs": [
                " A mapping from a sponsor agent to the approval.",
                " This is used to clean up approvals after removing the agent."
              ]
            },
            {
              "Name": "InvalidatedAgents",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 37
                }
              },
              "Default": "",
              "Docs": [
                " Storage of agents that have been invalidated.",
                " This is used to clean up approvals that are no longer valid."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 352
        },
        "Events": {
          "TypeId": 176
        },
        "Constants": [],
        "Errors": {
          "TypeId": 550
        },
        "Index": 51
      },
      "52": {
        "Name": "Dmarket",
        "Storage": {
          "Prefix": "Dmarket",
          "Entries": [
            {
              "Name": "ClosedAsks",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 13,
                  "Value": 551
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ClosedBids",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 13,
                  "Value": 551
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "DmarketCollection",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 47,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 353
        },
        "Events": {
          "TypeId": 177
        },
        "Constants": [
          {
            "Name": "Domain",
            "TypeId": 107,
            "Value": "TVlUSF9ORVQ=",
            "Docs": [
              "Chain Domain"
            ]
          }
        ],
        "Errors": {
          "TypeId": 552
        },
        "Index": 52
      }
    },
    "Extrinsic": {
      "TypeId": 553,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 555,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 556,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 557,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 558,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 559,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 561,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 562,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 563,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "StorageWeightReclaim",
          "SignedExtType": 564,
          "AddSignedExtType": 37
        },
        {
          "SignedIdentifier": "CheckMetadataHash",
          "SignedExtType": 565,
          "AddSignedExtType": 34
        }
      ]
    },
    "TypeId": 567
  }
}