//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dca.pallet
{
    
    
    /// <summary>
    /// >> Error
    /// The `Error` enum of this pallet.
    /// </summary>
    public enum Error
    {
        
        /// <summary>
        /// >> ScheduleNotFound
        /// Schedule not exist
        /// </summary>
        ScheduleNotFound = 0,
        
        /// <summary>
        /// >> MinTradeAmountNotReached
        /// The min trade amount is not reached
        /// </summary>
        MinTradeAmountNotReached = 1,
        
        /// <summary>
        /// >> Forbidden
        /// Forbidden as the user is not the owner of the schedule
        /// </summary>
        Forbidden = 2,
        
        /// <summary>
        /// >> BlockNumberIsNotInFuture
        /// The next execution block number is not in the future
        /// </summary>
        BlockNumberIsNotInFuture = 3,
        
        /// <summary>
        /// >> PriceUnstable
        /// Price is unstable as price change from oracle data is bigger than max allowed
        /// </summary>
        PriceUnstable = 4,
        
        /// <summary>
        /// >> Bumped
        /// Order was randomly rescheduled to next block
        /// </summary>
        Bumped = 5,
        
        /// <summary>
        /// >> CalculatingPriceError
        /// Error occurred when calculating price
        /// </summary>
        CalculatingPriceError = 6,
        
        /// <summary>
        /// >> TotalAmountIsSmallerThanMinBudget
        /// The total amount to be reserved is smaller than min budget
        /// </summary>
        TotalAmountIsSmallerThanMinBudget = 7,
        
        /// <summary>
        /// >> BudgetTooLow
        /// The budget is too low for executing at least two orders
        /// </summary>
        BudgetTooLow = 8,
        
        /// <summary>
        /// >> NoFreeBlockFound
        /// There is no free block found to plan DCA execution
        /// </summary>
        NoFreeBlockFound = 9,
        
        /// <summary>
        /// >> ManuallyTerminated
        /// The DCA schedule has been manually terminated
        /// </summary>
        ManuallyTerminated = 10,
        
        /// <summary>
        /// >> MaxRetryReached
        /// Max number of retries reached for schedule
        /// </summary>
        MaxRetryReached = 11,
        
        /// <summary>
        /// >> TradeLimitReached
        /// Absolutely trade limit reached, leading to retry
        /// </summary>
        TradeLimitReached = 12,
        
        /// <summary>
        /// >> SlippageLimitReached
        /// Slippage limit calculated from oracle is reached, leading to retry
        /// </summary>
        SlippageLimitReached = 13,
        
        /// <summary>
        /// >> NoParentHashFound
        /// No parent hash has been found from relay chain
        /// </summary>
        NoParentHashFound = 14,
        
        /// <summary>
        /// >> InvalidState
        /// Error that should not really happen only in case of invalid state of the schedule storage entries
        /// </summary>
        InvalidState = 15,
        
        /// <summary>
        /// >> PeriodTooShort
        /// Period should be longer than 5 blocks
        /// </summary>
        PeriodTooShort = 16,
        
        /// <summary>
        /// >> StabilityThresholdTooHigh
        /// Stability threshold cannot be higher than `MaxConfigurablePriceDifferenceBetweenBlock`
        /// </summary>
        StabilityThresholdTooHigh = 17,
    }
    
    /// <summary>
    /// >> 660 - Variant[pallet_dca.pallet.Error]
    /// The `Error` enum of this pallet.
    /// </summary>
    public sealed class EnumError : BaseEnum<Error>
    {
    }
}
