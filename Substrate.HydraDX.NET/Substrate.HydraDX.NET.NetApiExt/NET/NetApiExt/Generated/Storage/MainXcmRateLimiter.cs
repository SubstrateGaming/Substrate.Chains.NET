//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> XcmRateLimiterStorage
    /// </summary>
    public sealed class XcmRateLimiterStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> XcmRateLimiterStorage Constructor
        /// </summary>
        public XcmRateLimiterStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("XcmRateLimiter", "AccumulatedAmounts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.staging_xcm.v3.multilocation.MultiLocation), typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_xcm_rate_limiter.AccumulatedAmount)));
        }
        
        /// <summary>
        /// >> AccumulatedAmountsParams
        ///  Accumulated amounts for each asset
        /// </summary>
        public static string AccumulatedAmountsParams(Substrate.HydraDX.NET.NetApiExt.Generated.Model.staging_xcm.v3.multilocation.MultiLocation key)
        {
            return RequestGenerator.GetStorage("XcmRateLimiter", "AccumulatedAmounts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AccumulatedAmountsDefault
        /// Default value as hex string
        /// </summary>
        public static string AccumulatedAmountsDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> AccumulatedAmounts
        ///  Accumulated amounts for each asset
        /// </summary>
        public async Task<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_xcm_rate_limiter.AccumulatedAmount> AccumulatedAmounts(Substrate.HydraDX.NET.NetApiExt.Generated.Model.staging_xcm.v3.multilocation.MultiLocation key, string blockhash, CancellationToken token)
        {
            string parameters = XcmRateLimiterStorage.AccumulatedAmountsParams(key);
            var result = await _client.GetStorageAsync<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_xcm_rate_limiter.AccumulatedAmount>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> XcmRateLimiterCalls
    /// </summary>
    public sealed class XcmRateLimiterCalls
    {
    }
    
    /// <summary>
    /// >> XcmRateLimiterConstants
    /// </summary>
    public sealed class XcmRateLimiterConstants
    {
        
        /// <summary>
        /// >> DeferDuration
        ///  Defer duration base to be used for calculating the specific defer duration for any asset
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 DeferDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x60540000");
            return result;
        }
        
        /// <summary>
        /// >> MaxDeferDuration
        ///  The maximum number of blocks to defer XCMs by.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxDeferDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80320200");
            return result;
        }
    }
    
    /// <summary>
    /// >> XcmRateLimiterErrors
    /// </summary>
    public enum XcmRateLimiterErrors
    {
    }
}
