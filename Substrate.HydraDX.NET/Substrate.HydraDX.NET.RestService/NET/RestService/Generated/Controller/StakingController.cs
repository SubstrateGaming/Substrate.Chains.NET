//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.HydraDX.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// StakingController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class StakingController : ControllerBase
    {
        
        private IStakingStorage _stakingStorage;
        
        /// <summary>
        /// StakingController constructor.
        /// </summary>
        public StakingController(IStakingStorage stakingStorage)
        {
            _stakingStorage = stakingStorage;
        }
        
        /// <summary>
        /// >> Staking
        ///  Global staking state.
        /// </summary>
        [HttpGet("Staking")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.StakingData), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.StakingStorage), "StakingParams")]
        public IActionResult GetStaking()
        {
            return this.Ok(_stakingStorage.GetStaking());
        }
        
        /// <summary>
        /// >> Positions
        ///  User's position state.
        /// </summary>
        [HttpGet("Positions")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Position), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.StakingStorage), "PositionsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetPositions(string key)
        {
            return this.Ok(_stakingStorage.GetPositions(key));
        }
        
        /// <summary>
        /// >> NextPositionId
        ///  Position ids sequencer.
        /// </summary>
        [HttpGet("NextPositionId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.StakingStorage), "NextPositionIdParams")]
        public IActionResult GetNextPositionId()
        {
            return this.Ok(_stakingStorage.GetNextPositionId());
        }
        
        /// <summary>
        /// >> PositionVotes
        ///  List of position votes.
        /// </summary>
        [HttpGet("PositionVotes")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Voting), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.StakingStorage), "PositionVotesParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetPositionVotes(string key)
        {
            return this.Ok(_stakingStorage.GetPositionVotes(key));
        }
        
        /// <summary>
        /// >> ProcessedVotes
        ///  List of processed vote. Used to determine if the vote should be locked in case of voting not in favor.
        /// </summary>
        [HttpGet("ProcessedVotes")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Vote), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.StakingStorage), "ProcessedVotesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetProcessedVotes(string key)
        {
            return this.Ok(_stakingStorage.GetProcessedVotes(key));
        }
    }
}
