//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.HydraDX.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// OmnipoolController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class OmnipoolController : ControllerBase
    {
        
        private IOmnipoolStorage _omnipoolStorage;
        
        /// <summary>
        /// OmnipoolController constructor.
        /// </summary>
        public OmnipoolController(IOmnipoolStorage omnipoolStorage)
        {
            _omnipoolStorage = omnipoolStorage;
        }
        
        /// <summary>
        /// >> Assets
        ///  State of an asset in the omnipool
        /// </summary>
        [HttpGet("Assets")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_omnipool.types.AssetState), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.OmnipoolStorage), "AssetsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetAssets(string key)
        {
            return this.Ok(_omnipoolStorage.GetAssets(key));
        }
        
        /// <summary>
        /// >> HubAssetImbalance
        ///  Imbalance of hub asset
        /// </summary>
        [HttpGet("HubAssetImbalance")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_omnipool.types.SimpleImbalance), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.OmnipoolStorage), "HubAssetImbalanceParams")]
        public IActionResult GetHubAssetImbalance()
        {
            return this.Ok(_omnipoolStorage.GetHubAssetImbalance());
        }
        
        /// <summary>
        /// >> HubAssetTradability
        ///  Tradable state of hub asset.
        /// </summary>
        [HttpGet("HubAssetTradability")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Tradability), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.OmnipoolStorage), "HubAssetTradabilityParams")]
        public IActionResult GetHubAssetTradability()
        {
            return this.Ok(_omnipoolStorage.GetHubAssetTradability());
        }
        
        /// <summary>
        /// >> Positions
        ///  LP positions. Maps NFT instance id to corresponding position
        /// </summary>
        [HttpGet("Positions")]
        [ProducesResponseType(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Position), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.OmnipoolStorage), "PositionsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U128))]
        public IActionResult GetPositions(string key)
        {
            return this.Ok(_omnipoolStorage.GetPositions(key));
        }
        
        /// <summary>
        /// >> NextPositionId
        ///  Position ids sequencer
        /// </summary>
        [HttpGet("NextPositionId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.HydraDX.NET.NetApiExt.Generated.Storage.OmnipoolStorage), "NextPositionIdParams")]
        public IActionResult GetNextPositionId()
        {
            return this.Ok(_omnipoolStorage.GetNextPositionId());
        }
    }
}
