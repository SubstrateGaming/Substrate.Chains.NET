//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IDynamicFeesStorage interface definition.
    /// </summary>
    public interface IDynamicFeesStorage : IStorage
    {
        
        /// <summary>
        /// >> AssetFee
        ///  Stores last calculated fee of an asset and block number in which it was changed..
        ///  Stored as (Asset fee, Protocol fee, Block number)
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dynamic_fees.types.FeeEntry GetAssetFee(string key);
    }
    
    /// <summary>
    /// DynamicFeesStorage class definition.
    /// </summary>
    public sealed class DynamicFeesStorage : IDynamicFeesStorage
    {
        
        /// <summary>
        /// _assetFeeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dynamic_fees.types.FeeEntry> _assetFeeTypedStorage;
        
        /// <summary>
        /// DynamicFeesStorage constructor.
        /// </summary>
        public DynamicFeesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssetFeeTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dynamic_fees.types.FeeEntry>("DynamicFees.AssetFee", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assetFeeTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dynamic_fees.types.FeeEntry> AssetFeeTypedStorage
        {
            get
            {
                return _assetFeeTypedStorage;
            }
            set
            {
                _assetFeeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssetFeeTypedStorage.InitializeAsync("DynamicFees", "AssetFee");
        }
        
        /// <summary>
        /// Implements any storage change for DynamicFees.AssetFee
        /// </summary>
        [StorageChange("DynamicFees", "AssetFee")]
        public void OnUpdateAssetFee(string key, string data)
        {
            AssetFeeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetFee
        ///  Stores last calculated fee of an asset and block number in which it was changed..
        ///  Stored as (Asset fee, Protocol fee, Block number)
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dynamic_fees.types.FeeEntry GetAssetFee(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetFeeTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dynamic_fees.types.FeeEntry result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
