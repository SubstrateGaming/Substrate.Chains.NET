//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ICircuitBreakerStorage interface definition.
    /// </summary>
    public interface ICircuitBreakerStorage : IStorage
    {
        
        /// <summary>
        /// >> TradeVolumeLimitPerAsset
        ///  Trade volume limits of assets set by set_trade_volume_limit.
        ///  If not set, returns the default limit.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetTradeVolumeLimitPerAsset(string key);
        
        /// <summary>
        /// >> AllowedTradeVolumeLimitPerAsset
        ///  Trade volumes per asset
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.TradeVolumeLimit GetAllowedTradeVolumeLimitPerAsset(string key);
        
        /// <summary>
        /// >> LiquidityAddLimitPerAsset
        ///  Liquidity limits of assets for adding liquidity.
        ///  If not set, returns the default limit.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> GetLiquidityAddLimitPerAsset(string key);
        
        /// <summary>
        /// >> AllowedAddLiquidityAmountPerAsset
        ///  Add liquidity volumes per asset
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit GetAllowedAddLiquidityAmountPerAsset(string key);
        
        /// <summary>
        /// >> LiquidityRemoveLimitPerAsset
        ///  Liquidity limits of assets for removing liquidity.
        ///  If not set, returns the default limit.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> GetLiquidityRemoveLimitPerAsset(string key);
        
        /// <summary>
        /// >> AllowedRemoveLiquidityAmountPerAsset
        ///  Remove liquidity volumes per asset
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit GetAllowedRemoveLiquidityAmountPerAsset(string key);
    }
    
    /// <summary>
    /// CircuitBreakerStorage class definition.
    /// </summary>
    public sealed class CircuitBreakerStorage : ICircuitBreakerStorage
    {
        
        /// <summary>
        /// _tradeVolumeLimitPerAssetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> _tradeVolumeLimitPerAssetTypedStorage;
        
        /// <summary>
        /// _allowedTradeVolumeLimitPerAssetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.TradeVolumeLimit> _allowedTradeVolumeLimitPerAssetTypedStorage;
        
        /// <summary>
        /// _liquidityAddLimitPerAssetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>> _liquidityAddLimitPerAssetTypedStorage;
        
        /// <summary>
        /// _allowedAddLiquidityAmountPerAssetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit> _allowedAddLiquidityAmountPerAssetTypedStorage;
        
        /// <summary>
        /// _liquidityRemoveLimitPerAssetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>> _liquidityRemoveLimitPerAssetTypedStorage;
        
        /// <summary>
        /// _allowedRemoveLiquidityAmountPerAssetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit> _allowedRemoveLiquidityAmountPerAssetTypedStorage;
        
        /// <summary>
        /// CircuitBreakerStorage constructor.
        /// </summary>
        public CircuitBreakerStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.TradeVolumeLimitPerAssetTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>("CircuitBreaker.TradeVolumeLimitPerAsset", storageDataProvider, storageChangeDelegates);
            this.AllowedTradeVolumeLimitPerAssetTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.TradeVolumeLimit>("CircuitBreaker.AllowedTradeVolumeLimitPerAsset", storageDataProvider, storageChangeDelegates);
            this.LiquidityAddLimitPerAssetTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>>("CircuitBreaker.LiquidityAddLimitPerAsset", storageDataProvider, storageChangeDelegates);
            this.AllowedAddLiquidityAmountPerAssetTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit>("CircuitBreaker.AllowedAddLiquidityAmountPerAsset", storageDataProvider, storageChangeDelegates);
            this.LiquidityRemoveLimitPerAssetTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>>("CircuitBreaker.LiquidityRemoveLimitPerAsset", storageDataProvider, storageChangeDelegates);
            this.AllowedRemoveLiquidityAmountPerAssetTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit>("CircuitBreaker.AllowedRemoveLiquidityAmountPerAsset", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _tradeVolumeLimitPerAssetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> TradeVolumeLimitPerAssetTypedStorage
        {
            get
            {
                return _tradeVolumeLimitPerAssetTypedStorage;
            }
            set
            {
                _tradeVolumeLimitPerAssetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _allowedTradeVolumeLimitPerAssetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.TradeVolumeLimit> AllowedTradeVolumeLimitPerAssetTypedStorage
        {
            get
            {
                return _allowedTradeVolumeLimitPerAssetTypedStorage;
            }
            set
            {
                _allowedTradeVolumeLimitPerAssetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _liquidityAddLimitPerAssetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>> LiquidityAddLimitPerAssetTypedStorage
        {
            get
            {
                return _liquidityAddLimitPerAssetTypedStorage;
            }
            set
            {
                _liquidityAddLimitPerAssetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _allowedAddLiquidityAmountPerAssetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit> AllowedAddLiquidityAmountPerAssetTypedStorage
        {
            get
            {
                return _allowedAddLiquidityAmountPerAssetTypedStorage;
            }
            set
            {
                _allowedAddLiquidityAmountPerAssetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _liquidityRemoveLimitPerAssetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>> LiquidityRemoveLimitPerAssetTypedStorage
        {
            get
            {
                return _liquidityRemoveLimitPerAssetTypedStorage;
            }
            set
            {
                _liquidityRemoveLimitPerAssetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _allowedRemoveLiquidityAmountPerAssetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit> AllowedRemoveLiquidityAmountPerAssetTypedStorage
        {
            get
            {
                return _allowedRemoveLiquidityAmountPerAssetTypedStorage;
            }
            set
            {
                _allowedRemoveLiquidityAmountPerAssetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await TradeVolumeLimitPerAssetTypedStorage.InitializeAsync("CircuitBreaker", "TradeVolumeLimitPerAsset");
            await AllowedTradeVolumeLimitPerAssetTypedStorage.InitializeAsync("CircuitBreaker", "AllowedTradeVolumeLimitPerAsset");
            await LiquidityAddLimitPerAssetTypedStorage.InitializeAsync("CircuitBreaker", "LiquidityAddLimitPerAsset");
            await AllowedAddLiquidityAmountPerAssetTypedStorage.InitializeAsync("CircuitBreaker", "AllowedAddLiquidityAmountPerAsset");
            await LiquidityRemoveLimitPerAssetTypedStorage.InitializeAsync("CircuitBreaker", "LiquidityRemoveLimitPerAsset");
            await AllowedRemoveLiquidityAmountPerAssetTypedStorage.InitializeAsync("CircuitBreaker", "AllowedRemoveLiquidityAmountPerAsset");
        }
        
        /// <summary>
        /// Implements any storage change for CircuitBreaker.TradeVolumeLimitPerAsset
        /// </summary>
        [StorageChange("CircuitBreaker", "TradeVolumeLimitPerAsset")]
        public void OnUpdateTradeVolumeLimitPerAsset(string key, string data)
        {
            TradeVolumeLimitPerAssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TradeVolumeLimitPerAsset
        ///  Trade volume limits of assets set by set_trade_volume_limit.
        ///  If not set, returns the default limit.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetTradeVolumeLimitPerAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TradeVolumeLimitPerAssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CircuitBreaker.AllowedTradeVolumeLimitPerAsset
        /// </summary>
        [StorageChange("CircuitBreaker", "AllowedTradeVolumeLimitPerAsset")]
        public void OnUpdateAllowedTradeVolumeLimitPerAsset(string key, string data)
        {
            AllowedTradeVolumeLimitPerAssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AllowedTradeVolumeLimitPerAsset
        ///  Trade volumes per asset
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.TradeVolumeLimit GetAllowedTradeVolumeLimitPerAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AllowedTradeVolumeLimitPerAssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.TradeVolumeLimit result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CircuitBreaker.LiquidityAddLimitPerAsset
        /// </summary>
        [StorageChange("CircuitBreaker", "LiquidityAddLimitPerAsset")]
        public void OnUpdateLiquidityAddLimitPerAsset(string key, string data)
        {
            LiquidityAddLimitPerAssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LiquidityAddLimitPerAsset
        ///  Liquidity limits of assets for adding liquidity.
        ///  If not set, returns the default limit.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> GetLiquidityAddLimitPerAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LiquidityAddLimitPerAssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CircuitBreaker.AllowedAddLiquidityAmountPerAsset
        /// </summary>
        [StorageChange("CircuitBreaker", "AllowedAddLiquidityAmountPerAsset")]
        public void OnUpdateAllowedAddLiquidityAmountPerAsset(string key, string data)
        {
            AllowedAddLiquidityAmountPerAssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AllowedAddLiquidityAmountPerAsset
        ///  Add liquidity volumes per asset
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit GetAllowedAddLiquidityAmountPerAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AllowedAddLiquidityAmountPerAssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CircuitBreaker.LiquidityRemoveLimitPerAsset
        /// </summary>
        [StorageChange("CircuitBreaker", "LiquidityRemoveLimitPerAsset")]
        public void OnUpdateLiquidityRemoveLimitPerAsset(string key, string data)
        {
            LiquidityRemoveLimitPerAssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LiquidityRemoveLimitPerAsset
        ///  Liquidity limits of assets for removing liquidity.
        ///  If not set, returns the default limit.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> GetLiquidityRemoveLimitPerAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LiquidityRemoveLimitPerAssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CircuitBreaker.AllowedRemoveLiquidityAmountPerAsset
        /// </summary>
        [StorageChange("CircuitBreaker", "AllowedRemoveLiquidityAmountPerAsset")]
        public void OnUpdateAllowedRemoveLiquidityAmountPerAsset(string key, string data)
        {
            AllowedRemoveLiquidityAmountPerAssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AllowedRemoveLiquidityAmountPerAsset
        ///  Remove liquidity volumes per asset
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit GetAllowedRemoveLiquidityAmountPerAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AllowedRemoveLiquidityAmountPerAssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_circuit_breaker.LiquidityLimit result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
