//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IStakingStorage interface definition.
    /// </summary>
    public interface IStakingStorage : IStorage
    {
        
        /// <summary>
        /// >> Staking
        ///  Global staking state.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.StakingData GetStaking();
        
        /// <summary>
        /// >> Positions
        ///  User's position state.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Position GetPositions(string key);
        
        /// <summary>
        /// >> NextPositionId
        ///  Position ids sequencer.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextPositionId();
        
        /// <summary>
        /// >> PositionVotes
        ///  List of position votes.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Voting GetPositionVotes(string key);
        
        /// <summary>
        /// >> ProcessedVotes
        ///  List of processed vote. Used to determine if the vote should be locked in case of voting not in favor.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Vote GetProcessedVotes(string key);
    }
    
    /// <summary>
    /// StakingStorage class definition.
    /// </summary>
    public sealed class StakingStorage : IStakingStorage
    {
        
        /// <summary>
        /// _stakingTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.StakingData> _stakingTypedStorage;
        
        /// <summary>
        /// _positionsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Position> _positionsTypedStorage;
        
        /// <summary>
        /// _nextPositionIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextPositionIdTypedStorage;
        
        /// <summary>
        /// _positionVotesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Voting> _positionVotesTypedStorage;
        
        /// <summary>
        /// _processedVotesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Vote> _processedVotesTypedStorage;
        
        /// <summary>
        /// StakingStorage constructor.
        /// </summary>
        public StakingStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.StakingTypedStorage = new TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.StakingData>("Staking.Staking", storageDataProvider, storageChangeDelegates);
            this.PositionsTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Position>("Staking.Positions", storageDataProvider, storageChangeDelegates);
            this.NextPositionIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Staking.NextPositionId", storageDataProvider, storageChangeDelegates);
            this.PositionVotesTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Voting>("Staking.PositionVotes", storageDataProvider, storageChangeDelegates);
            this.ProcessedVotesTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Vote>("Staking.ProcessedVotes", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _stakingTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.StakingData> StakingTypedStorage
        {
            get
            {
                return _stakingTypedStorage;
            }
            set
            {
                _stakingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _positionsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Position> PositionsTypedStorage
        {
            get
            {
                return _positionsTypedStorage;
            }
            set
            {
                _positionsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextPositionIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextPositionIdTypedStorage
        {
            get
            {
                return _nextPositionIdTypedStorage;
            }
            set
            {
                _nextPositionIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _positionVotesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Voting> PositionVotesTypedStorage
        {
            get
            {
                return _positionVotesTypedStorage;
            }
            set
            {
                _positionVotesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _processedVotesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Vote> ProcessedVotesTypedStorage
        {
            get
            {
                return _processedVotesTypedStorage;
            }
            set
            {
                _processedVotesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await StakingTypedStorage.InitializeAsync("Staking", "Staking");
            await PositionsTypedStorage.InitializeAsync("Staking", "Positions");
            await NextPositionIdTypedStorage.InitializeAsync("Staking", "NextPositionId");
            await PositionVotesTypedStorage.InitializeAsync("Staking", "PositionVotes");
            await ProcessedVotesTypedStorage.InitializeAsync("Staking", "ProcessedVotes");
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Staking
        /// </summary>
        [StorageChange("Staking", "Staking")]
        public void OnUpdateStaking(string data)
        {
            StakingTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Staking
        ///  Global staking state.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.StakingData GetStaking()
        {
            return StakingTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Positions
        /// </summary>
        [StorageChange("Staking", "Positions")]
        public void OnUpdatePositions(string key, string data)
        {
            PositionsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Positions
        ///  User's position state.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Position GetPositions(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PositionsTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Position result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.NextPositionId
        /// </summary>
        [StorageChange("Staking", "NextPositionId")]
        public void OnUpdateNextPositionId(string data)
        {
            NextPositionIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextPositionId
        ///  Position ids sequencer.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextPositionId()
        {
            return NextPositionIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.PositionVotes
        /// </summary>
        [StorageChange("Staking", "PositionVotes")]
        public void OnUpdatePositionVotes(string key, string data)
        {
            PositionVotesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PositionVotes
        ///  List of position votes.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Voting GetPositionVotes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PositionVotesTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Voting result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ProcessedVotes
        /// </summary>
        [StorageChange("Staking", "ProcessedVotes")]
        public void OnUpdateProcessedVotes(string key, string data)
        {
            ProcessedVotesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ProcessedVotes
        ///  List of processed vote. Used to determine if the vote should be locked in case of voting not in favor.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Vote GetProcessedVotes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProcessedVotesTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_staking.types.Vote result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
