//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IDCAStorage interface definition.
    /// </summary>
    public interface IDCAStorage : IStorage
    {
        
        /// <summary>
        /// >> ScheduleIdSequencer
        ///  Id sequencer for schedules
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetScheduleIdSequencer();
        
        /// <summary>
        /// >> Schedules
        ///  Storing schedule details
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dca.types.Schedule GetSchedules(string key);
        
        /// <summary>
        /// >> ScheduleOwnership
        ///  Storing schedule ownership
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetScheduleOwnership(string key);
        
        /// <summary>
        /// >> RemainingAmounts
        ///  Keep tracking the remaining amounts to spend for DCA schedules
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetRemainingAmounts(string key);
        
        /// <summary>
        /// >> RetriesOnError
        ///  Keep tracking the retry on error flag for DCA schedules
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U8 GetRetriesOnError(string key);
        
        /// <summary>
        /// >> ScheduleIdsPerBlock
        ///  Keep tracking of the schedule ids to be executed in the block
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39 GetScheduleIdsPerBlock(string key);
    }
    
    /// <summary>
    /// DCAStorage class definition.
    /// </summary>
    public sealed class DCAStorage : IDCAStorage
    {
        
        /// <summary>
        /// _scheduleIdSequencerTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _scheduleIdSequencerTypedStorage;
        
        /// <summary>
        /// _schedulesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dca.types.Schedule> _schedulesTypedStorage;
        
        /// <summary>
        /// _scheduleOwnershipTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _scheduleOwnershipTypedStorage;
        
        /// <summary>
        /// _remainingAmountsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _remainingAmountsTypedStorage;
        
        /// <summary>
        /// _retriesOnErrorTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U8> _retriesOnErrorTypedStorage;
        
        /// <summary>
        /// _scheduleIdsPerBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39> _scheduleIdsPerBlockTypedStorage;
        
        /// <summary>
        /// DCAStorage constructor.
        /// </summary>
        public DCAStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ScheduleIdSequencerTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("DCA.ScheduleIdSequencer", storageDataProvider, storageChangeDelegates);
            this.SchedulesTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dca.types.Schedule>("DCA.Schedules", storageDataProvider, storageChangeDelegates);
            this.ScheduleOwnershipTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("DCA.ScheduleOwnership", storageDataProvider, storageChangeDelegates);
            this.RemainingAmountsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("DCA.RemainingAmounts", storageDataProvider, storageChangeDelegates);
            this.RetriesOnErrorTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U8>("DCA.RetriesOnError", storageDataProvider, storageChangeDelegates);
            this.ScheduleIdsPerBlockTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39>("DCA.ScheduleIdsPerBlock", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _scheduleIdSequencerTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> ScheduleIdSequencerTypedStorage
        {
            get
            {
                return _scheduleIdSequencerTypedStorage;
            }
            set
            {
                _scheduleIdSequencerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _schedulesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dca.types.Schedule> SchedulesTypedStorage
        {
            get
            {
                return _schedulesTypedStorage;
            }
            set
            {
                _schedulesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _scheduleOwnershipTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> ScheduleOwnershipTypedStorage
        {
            get
            {
                return _scheduleOwnershipTypedStorage;
            }
            set
            {
                _scheduleOwnershipTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _remainingAmountsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> RemainingAmountsTypedStorage
        {
            get
            {
                return _remainingAmountsTypedStorage;
            }
            set
            {
                _remainingAmountsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _retriesOnErrorTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U8> RetriesOnErrorTypedStorage
        {
            get
            {
                return _retriesOnErrorTypedStorage;
            }
            set
            {
                _retriesOnErrorTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _scheduleIdsPerBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39> ScheduleIdsPerBlockTypedStorage
        {
            get
            {
                return _scheduleIdsPerBlockTypedStorage;
            }
            set
            {
                _scheduleIdsPerBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ScheduleIdSequencerTypedStorage.InitializeAsync("DCA", "ScheduleIdSequencer");
            await SchedulesTypedStorage.InitializeAsync("DCA", "Schedules");
            await ScheduleOwnershipTypedStorage.InitializeAsync("DCA", "ScheduleOwnership");
            await RemainingAmountsTypedStorage.InitializeAsync("DCA", "RemainingAmounts");
            await RetriesOnErrorTypedStorage.InitializeAsync("DCA", "RetriesOnError");
            await ScheduleIdsPerBlockTypedStorage.InitializeAsync("DCA", "ScheduleIdsPerBlock");
        }
        
        /// <summary>
        /// Implements any storage change for DCA.ScheduleIdSequencer
        /// </summary>
        [StorageChange("DCA", "ScheduleIdSequencer")]
        public void OnUpdateScheduleIdSequencer(string data)
        {
            ScheduleIdSequencerTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ScheduleIdSequencer
        ///  Id sequencer for schedules
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetScheduleIdSequencer()
        {
            return ScheduleIdSequencerTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for DCA.Schedules
        /// </summary>
        [StorageChange("DCA", "Schedules")]
        public void OnUpdateSchedules(string key, string data)
        {
            SchedulesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Schedules
        ///  Storing schedule details
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dca.types.Schedule GetSchedules(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SchedulesTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_dca.types.Schedule result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DCA.ScheduleOwnership
        /// </summary>
        [StorageChange("DCA", "ScheduleOwnership")]
        public void OnUpdateScheduleOwnership(string key, string data)
        {
            ScheduleOwnershipTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ScheduleOwnership
        ///  Storing schedule ownership
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetScheduleOwnership(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ScheduleOwnershipTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DCA.RemainingAmounts
        /// </summary>
        [StorageChange("DCA", "RemainingAmounts")]
        public void OnUpdateRemainingAmounts(string key, string data)
        {
            RemainingAmountsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RemainingAmounts
        ///  Keep tracking the remaining amounts to spend for DCA schedules
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetRemainingAmounts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RemainingAmountsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DCA.RetriesOnError
        /// </summary>
        [StorageChange("DCA", "RetriesOnError")]
        public void OnUpdateRetriesOnError(string key, string data)
        {
            RetriesOnErrorTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RetriesOnError
        ///  Keep tracking the retry on error flag for DCA schedules
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 GetRetriesOnError(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RetriesOnErrorTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U8 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for DCA.ScheduleIdsPerBlock
        /// </summary>
        [StorageChange("DCA", "ScheduleIdsPerBlock")]
        public void OnUpdateScheduleIdsPerBlock(string key, string data)
        {
            ScheduleIdsPerBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ScheduleIdsPerBlock
        ///  Keep tracking of the schedule ids to be executed in the block
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39 GetScheduleIdsPerBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ScheduleIdsPerBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
