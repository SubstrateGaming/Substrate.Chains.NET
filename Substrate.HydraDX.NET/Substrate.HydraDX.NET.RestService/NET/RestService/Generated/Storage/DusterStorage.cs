//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IDusterStorage interface definition.
    /// </summary>
    public interface IDusterStorage : IStorage
    {
        
        /// <summary>
        /// >> AccountBlacklist
        ///  Accounts excluded from dusting.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetAccountBlacklist(string key);
        
        /// <summary>
        /// >> RewardAccount
        ///  Account to take reward from.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetRewardAccount();
        
        /// <summary>
        /// >> DustAccount
        ///  Account to send dust to.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetDustAccount();
    }
    
    /// <summary>
    /// DusterStorage class definition.
    /// </summary>
    public sealed class DusterStorage : IDusterStorage
    {
        
        /// <summary>
        /// _accountBlacklistTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _accountBlacklistTypedStorage;
        
        /// <summary>
        /// _rewardAccountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _rewardAccountTypedStorage;
        
        /// <summary>
        /// _dustAccountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _dustAccountTypedStorage;
        
        /// <summary>
        /// DusterStorage constructor.
        /// </summary>
        public DusterStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AccountBlacklistTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("Duster.AccountBlacklist", storageDataProvider, storageChangeDelegates);
            this.RewardAccountTypedStorage = new TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Duster.RewardAccount", storageDataProvider, storageChangeDelegates);
            this.DustAccountTypedStorage = new TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Duster.DustAccount", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _accountBlacklistTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> AccountBlacklistTypedStorage
        {
            get
            {
                return _accountBlacklistTypedStorage;
            }
            set
            {
                _accountBlacklistTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _rewardAccountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> RewardAccountTypedStorage
        {
            get
            {
                return _rewardAccountTypedStorage;
            }
            set
            {
                _rewardAccountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _dustAccountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> DustAccountTypedStorage
        {
            get
            {
                return _dustAccountTypedStorage;
            }
            set
            {
                _dustAccountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AccountBlacklistTypedStorage.InitializeAsync("Duster", "AccountBlacklist");
            await RewardAccountTypedStorage.InitializeAsync("Duster", "RewardAccount");
            await DustAccountTypedStorage.InitializeAsync("Duster", "DustAccount");
        }
        
        /// <summary>
        /// Implements any storage change for Duster.AccountBlacklist
        /// </summary>
        [StorageChange("Duster", "AccountBlacklist")]
        public void OnUpdateAccountBlacklist(string key, string data)
        {
            AccountBlacklistTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AccountBlacklist
        ///  Accounts excluded from dusting.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetAccountBlacklist(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountBlacklistTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Duster.RewardAccount
        /// </summary>
        [StorageChange("Duster", "RewardAccount")]
        public void OnUpdateRewardAccount(string data)
        {
            RewardAccountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> RewardAccount
        ///  Account to take reward from.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetRewardAccount()
        {
            return RewardAccountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Duster.DustAccount
        /// </summary>
        [StorageChange("Duster", "DustAccount")]
        public void OnUpdateDustAccount(string data)
        {
            DustAccountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> DustAccount
        ///  Account to send dust to.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetDustAccount()
        {
            return DustAccountTypedStorage.Get();
        }
    }
}
