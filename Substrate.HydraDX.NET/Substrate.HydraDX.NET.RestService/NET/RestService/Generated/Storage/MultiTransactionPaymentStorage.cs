//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMultiTransactionPaymentStorage interface definition.
    /// </summary>
    public interface IMultiTransactionPaymentStorage : IStorage
    {
        
        /// <summary>
        /// >> AccountCurrencyMap
        ///  Account currency map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetAccountCurrencyMap(string key);
        
        /// <summary>
        /// >> AcceptedCurrencies
        ///  Curated list of currencies which fees can be paid mapped to corresponding fallback price
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetAcceptedCurrencies(string key);
        
        /// <summary>
        /// >> AcceptedCurrencyPrice
        ///  Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetAcceptedCurrencyPrice(string key);
        
        /// <summary>
        /// >> TransactionCurrencyOverride
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetTransactionCurrencyOverride(string key);
    }
    
    /// <summary>
    /// MultiTransactionPaymentStorage class definition.
    /// </summary>
    public sealed class MultiTransactionPaymentStorage : IMultiTransactionPaymentStorage
    {
        
        /// <summary>
        /// _accountCurrencyMapTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _accountCurrencyMapTypedStorage;
        
        /// <summary>
        /// _acceptedCurrenciesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> _acceptedCurrenciesTypedStorage;
        
        /// <summary>
        /// _acceptedCurrencyPriceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> _acceptedCurrencyPriceTypedStorage;
        
        /// <summary>
        /// _transactionCurrencyOverrideTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _transactionCurrencyOverrideTypedStorage;
        
        /// <summary>
        /// MultiTransactionPaymentStorage constructor.
        /// </summary>
        public MultiTransactionPaymentStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AccountCurrencyMapTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("MultiTransactionPayment.AccountCurrencyMap", storageDataProvider, storageChangeDelegates);
            this.AcceptedCurrenciesTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>("MultiTransactionPayment.AcceptedCurrencies", storageDataProvider, storageChangeDelegates);
            this.AcceptedCurrencyPriceTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>("MultiTransactionPayment.AcceptedCurrencyPrice", storageDataProvider, storageChangeDelegates);
            this.TransactionCurrencyOverrideTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("MultiTransactionPayment.TransactionCurrencyOverride", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _accountCurrencyMapTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> AccountCurrencyMapTypedStorage
        {
            get
            {
                return _accountCurrencyMapTypedStorage;
            }
            set
            {
                _accountCurrencyMapTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _acceptedCurrenciesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> AcceptedCurrenciesTypedStorage
        {
            get
            {
                return _acceptedCurrenciesTypedStorage;
            }
            set
            {
                _acceptedCurrenciesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _acceptedCurrencyPriceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> AcceptedCurrencyPriceTypedStorage
        {
            get
            {
                return _acceptedCurrencyPriceTypedStorage;
            }
            set
            {
                _acceptedCurrencyPriceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _transactionCurrencyOverrideTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> TransactionCurrencyOverrideTypedStorage
        {
            get
            {
                return _transactionCurrencyOverrideTypedStorage;
            }
            set
            {
                _transactionCurrencyOverrideTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AccountCurrencyMapTypedStorage.InitializeAsync("MultiTransactionPayment", "AccountCurrencyMap");
            await AcceptedCurrenciesTypedStorage.InitializeAsync("MultiTransactionPayment", "AcceptedCurrencies");
            await AcceptedCurrencyPriceTypedStorage.InitializeAsync("MultiTransactionPayment", "AcceptedCurrencyPrice");
            await TransactionCurrencyOverrideTypedStorage.InitializeAsync("MultiTransactionPayment", "TransactionCurrencyOverride");
        }
        
        /// <summary>
        /// Implements any storage change for MultiTransactionPayment.AccountCurrencyMap
        /// </summary>
        [StorageChange("MultiTransactionPayment", "AccountCurrencyMap")]
        public void OnUpdateAccountCurrencyMap(string key, string data)
        {
            AccountCurrencyMapTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AccountCurrencyMap
        ///  Account currency map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetAccountCurrencyMap(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountCurrencyMapTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiTransactionPayment.AcceptedCurrencies
        /// </summary>
        [StorageChange("MultiTransactionPayment", "AcceptedCurrencies")]
        public void OnUpdateAcceptedCurrencies(string key, string data)
        {
            AcceptedCurrenciesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AcceptedCurrencies
        ///  Curated list of currencies which fees can be paid mapped to corresponding fallback price
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetAcceptedCurrencies(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AcceptedCurrenciesTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiTransactionPayment.AcceptedCurrencyPrice
        /// </summary>
        [StorageChange("MultiTransactionPayment", "AcceptedCurrencyPrice")]
        public void OnUpdateAcceptedCurrencyPrice(string key, string data)
        {
            AcceptedCurrencyPriceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AcceptedCurrencyPrice
        ///  Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 GetAcceptedCurrencyPrice(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AcceptedCurrencyPriceTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for MultiTransactionPayment.TransactionCurrencyOverride
        /// </summary>
        [StorageChange("MultiTransactionPayment", "TransactionCurrencyOverride")]
        public void OnUpdateTransactionCurrencyOverride(string key, string data)
        {
            TransactionCurrencyOverrideTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TransactionCurrencyOverride
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetTransactionCurrencyOverride(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TransactionCurrencyOverrideTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
