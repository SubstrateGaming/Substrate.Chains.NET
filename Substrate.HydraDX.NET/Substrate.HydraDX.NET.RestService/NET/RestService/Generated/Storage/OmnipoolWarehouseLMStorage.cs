//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IOmnipoolWarehouseLMStorage interface definition.
    /// </summary>
    public interface IOmnipoolWarehouseLMStorage : IStorage
    {
        
        /// <summary>
        /// >> FarmSequencer
        ///  Id sequencer for `GlobalFarm` and `YieldFarm`.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetFarmSequencer();
        
        /// <summary>
        /// >> DepositSequencer
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetDepositSequencer();
        
        /// <summary>
        /// >> GlobalFarm
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1 GetGlobalFarm(string key);
        
        /// <summary>
        /// >> YieldFarm
        ///  Yield farm details.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1 GetYieldFarm(string key);
        
        /// <summary>
        /// >> Deposit
        ///  Deposit details.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.DepositDataT1 GetDeposit(string key);
        
        /// <summary>
        /// >> ActiveYieldFarm
        ///  Active(farms able to receive LP shares deposits) yield farms.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetActiveYieldFarm(string key);
    }
    
    /// <summary>
    /// OmnipoolWarehouseLMStorage class definition.
    /// </summary>
    public sealed class OmnipoolWarehouseLMStorage : IOmnipoolWarehouseLMStorage
    {
        
        /// <summary>
        /// _farmSequencerTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _farmSequencerTypedStorage;
        
        /// <summary>
        /// _depositSequencerTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _depositSequencerTypedStorage;
        
        /// <summary>
        /// _globalFarmTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1> _globalFarmTypedStorage;
        
        /// <summary>
        /// _yieldFarmTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1> _yieldFarmTypedStorage;
        
        /// <summary>
        /// _depositTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.DepositDataT1> _depositTypedStorage;
        
        /// <summary>
        /// _activeYieldFarmTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _activeYieldFarmTypedStorage;
        
        /// <summary>
        /// OmnipoolWarehouseLMStorage constructor.
        /// </summary>
        public OmnipoolWarehouseLMStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.FarmSequencerTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("OmnipoolWarehouseLM.FarmSequencer", storageDataProvider, storageChangeDelegates);
            this.DepositSequencerTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("OmnipoolWarehouseLM.DepositSequencer", storageDataProvider, storageChangeDelegates);
            this.GlobalFarmTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1>("OmnipoolWarehouseLM.GlobalFarm", storageDataProvider, storageChangeDelegates);
            this.YieldFarmTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1>("OmnipoolWarehouseLM.YieldFarm", storageDataProvider, storageChangeDelegates);
            this.DepositTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.DepositDataT1>("OmnipoolWarehouseLM.Deposit", storageDataProvider, storageChangeDelegates);
            this.ActiveYieldFarmTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("OmnipoolWarehouseLM.ActiveYieldFarm", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _farmSequencerTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> FarmSequencerTypedStorage
        {
            get
            {
                return _farmSequencerTypedStorage;
            }
            set
            {
                _farmSequencerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _depositSequencerTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> DepositSequencerTypedStorage
        {
            get
            {
                return _depositSequencerTypedStorage;
            }
            set
            {
                _depositSequencerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _globalFarmTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1> GlobalFarmTypedStorage
        {
            get
            {
                return _globalFarmTypedStorage;
            }
            set
            {
                _globalFarmTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _yieldFarmTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1> YieldFarmTypedStorage
        {
            get
            {
                return _yieldFarmTypedStorage;
            }
            set
            {
                _yieldFarmTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _depositTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.DepositDataT1> DepositTypedStorage
        {
            get
            {
                return _depositTypedStorage;
            }
            set
            {
                _depositTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _activeYieldFarmTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> ActiveYieldFarmTypedStorage
        {
            get
            {
                return _activeYieldFarmTypedStorage;
            }
            set
            {
                _activeYieldFarmTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await FarmSequencerTypedStorage.InitializeAsync("OmnipoolWarehouseLM", "FarmSequencer");
            await DepositSequencerTypedStorage.InitializeAsync("OmnipoolWarehouseLM", "DepositSequencer");
            await GlobalFarmTypedStorage.InitializeAsync("OmnipoolWarehouseLM", "GlobalFarm");
            await YieldFarmTypedStorage.InitializeAsync("OmnipoolWarehouseLM", "YieldFarm");
            await DepositTypedStorage.InitializeAsync("OmnipoolWarehouseLM", "Deposit");
            await ActiveYieldFarmTypedStorage.InitializeAsync("OmnipoolWarehouseLM", "ActiveYieldFarm");
        }
        
        /// <summary>
        /// Implements any storage change for OmnipoolWarehouseLM.FarmSequencer
        /// </summary>
        [StorageChange("OmnipoolWarehouseLM", "FarmSequencer")]
        public void OnUpdateFarmSequencer(string data)
        {
            FarmSequencerTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> FarmSequencer
        ///  Id sequencer for `GlobalFarm` and `YieldFarm`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetFarmSequencer()
        {
            return FarmSequencerTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for OmnipoolWarehouseLM.DepositSequencer
        /// </summary>
        [StorageChange("OmnipoolWarehouseLM", "DepositSequencer")]
        public void OnUpdateDepositSequencer(string data)
        {
            DepositSequencerTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> DepositSequencer
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetDepositSequencer()
        {
            return DepositSequencerTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for OmnipoolWarehouseLM.GlobalFarm
        /// </summary>
        [StorageChange("OmnipoolWarehouseLM", "GlobalFarm")]
        public void OnUpdateGlobalFarm(string key, string data)
        {
            GlobalFarmTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> GlobalFarm
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1 GetGlobalFarm(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (GlobalFarmTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.GlobalFarmDataT1 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for OmnipoolWarehouseLM.YieldFarm
        /// </summary>
        [StorageChange("OmnipoolWarehouseLM", "YieldFarm")]
        public void OnUpdateYieldFarm(string key, string data)
        {
            YieldFarmTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> YieldFarm
        ///  Yield farm details.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1 GetYieldFarm(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (YieldFarmTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.YieldFarmDataT1 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for OmnipoolWarehouseLM.Deposit
        /// </summary>
        [StorageChange("OmnipoolWarehouseLM", "Deposit")]
        public void OnUpdateDeposit(string key, string data)
        {
            DepositTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Deposit
        ///  Deposit details.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.DepositDataT1 GetDeposit(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DepositTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.DepositDataT1 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for OmnipoolWarehouseLM.ActiveYieldFarm
        /// </summary>
        [StorageChange("OmnipoolWarehouseLM", "ActiveYieldFarm")]
        public void OnUpdateActiveYieldFarm(string key, string data)
        {
            ActiveYieldFarmTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ActiveYieldFarm
        ///  Active(farms able to receive LP shares deposits) yield farms.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetActiveYieldFarm(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ActiveYieldFarmTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
