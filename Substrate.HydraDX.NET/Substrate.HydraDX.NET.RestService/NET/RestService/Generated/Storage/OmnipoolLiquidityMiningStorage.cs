//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IOmnipoolLiquidityMiningStorage interface definition.
    /// </summary>
    public interface IOmnipoolLiquidityMiningStorage : IStorage
    {
        
        /// <summary>
        /// >> OmniPositionId
        ///  Map of omnipool position's ids to LM's deposit ids.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetOmniPositionId(string key);
    }
    
    /// <summary>
    /// OmnipoolLiquidityMiningStorage class definition.
    /// </summary>
    public sealed class OmnipoolLiquidityMiningStorage : IOmnipoolLiquidityMiningStorage
    {
        
        /// <summary>
        /// _omniPositionIdTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _omniPositionIdTypedStorage;
        
        /// <summary>
        /// OmnipoolLiquidityMiningStorage constructor.
        /// </summary>
        public OmnipoolLiquidityMiningStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.OmniPositionIdTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("OmnipoolLiquidityMining.OmniPositionId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _omniPositionIdTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> OmniPositionIdTypedStorage
        {
            get
            {
                return _omniPositionIdTypedStorage;
            }
            set
            {
                _omniPositionIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await OmniPositionIdTypedStorage.InitializeAsync("OmnipoolLiquidityMining", "OmniPositionId");
        }
        
        /// <summary>
        /// Implements any storage change for OmnipoolLiquidityMining.OmniPositionId
        /// </summary>
        [StorageChange("OmnipoolLiquidityMining", "OmniPositionId")]
        public void OnUpdateOmniPositionId(string key, string data)
        {
            OmniPositionIdTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OmniPositionId
        ///  Map of omnipool position's ids to LM's deposit ids.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetOmniPositionId(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OmniPositionIdTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
