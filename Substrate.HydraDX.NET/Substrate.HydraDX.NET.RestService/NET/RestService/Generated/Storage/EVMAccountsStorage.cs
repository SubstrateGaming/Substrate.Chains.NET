//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IEVMAccountsStorage interface definition.
    /// </summary>
    public interface IEVMAccountsStorage : IStorage
    {
        
        /// <summary>
        /// >> AccountExtension
        ///  Maps an EVM address to the last 12 bytes of a substrate account.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Types.Base.Arr12U8 GetAccountExtension(string key);
        
        /// <summary>
        /// >> ContractDeployer
        ///  Whitelisted addresses that are allowed to deploy smart contracts.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetContractDeployer(string key);
    }
    
    /// <summary>
    /// EVMAccountsStorage class definition.
    /// </summary>
    public sealed class EVMAccountsStorage : IEVMAccountsStorage
    {
        
        /// <summary>
        /// _accountExtensionTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Types.Base.Arr12U8> _accountExtensionTypedStorage;
        
        /// <summary>
        /// _contractDeployerTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _contractDeployerTypedStorage;
        
        /// <summary>
        /// EVMAccountsStorage constructor.
        /// </summary>
        public EVMAccountsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AccountExtensionTypedStorage = new TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Types.Base.Arr12U8>("EVMAccounts.AccountExtension", storageDataProvider, storageChangeDelegates);
            this.ContractDeployerTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("EVMAccounts.ContractDeployer", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _accountExtensionTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Types.Base.Arr12U8> AccountExtensionTypedStorage
        {
            get
            {
                return _accountExtensionTypedStorage;
            }
            set
            {
                _accountExtensionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _contractDeployerTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> ContractDeployerTypedStorage
        {
            get
            {
                return _contractDeployerTypedStorage;
            }
            set
            {
                _contractDeployerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AccountExtensionTypedStorage.InitializeAsync("EVMAccounts", "AccountExtension");
            await ContractDeployerTypedStorage.InitializeAsync("EVMAccounts", "ContractDeployer");
        }
        
        /// <summary>
        /// Implements any storage change for EVMAccounts.AccountExtension
        /// </summary>
        [StorageChange("EVMAccounts", "AccountExtension")]
        public void OnUpdateAccountExtension(string key, string data)
        {
            AccountExtensionTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AccountExtension
        ///  Maps an EVM address to the last 12 bytes of a substrate account.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Types.Base.Arr12U8 GetAccountExtension(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountExtensionTypedStorage.Dictionary.TryGetValue(key, out Substrate.HydraDX.NET.NetApiExt.Generated.Types.Base.Arr12U8 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EVMAccounts.ContractDeployer
        /// </summary>
        [StorageChange("EVMAccounts", "ContractDeployer")]
        public void OnUpdateContractDeployer(string key, string data)
        {
            ContractDeployerTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ContractDeployer
        ///  Whitelisted addresses that are allowed to deploy smart contracts.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetContractDeployer(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ContractDeployerTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
