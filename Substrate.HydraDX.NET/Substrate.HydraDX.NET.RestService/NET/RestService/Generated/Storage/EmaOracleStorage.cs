//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IEmaOracleStorage interface definition.
    /// </summary>
    public interface IEmaOracleStorage : IStorage
    {
        
        /// <summary>
        /// >> Accumulator
        ///  Accumulator for oracle data in current block that will be recorded at the end of the block.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap GetAccumulator();
        
        /// <summary>
        /// >> Oracles
        ///  Oracle storage keyed by data source, involved asset ids and the period length of the oracle.
        /// 
        ///  Stores the data entry as well as the block number when the oracle was first initialized.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32> GetOracles(string key);
        
        /// <summary>
        /// >> WhitelistedAssets
        ///  Assets that are whitelisted and tracked by the pallet.
        /// </summary>
        Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2 GetWhitelistedAssets();
    }
    
    /// <summary>
    /// EmaOracleStorage class definition.
    /// </summary>
    public sealed class EmaOracleStorage : IEmaOracleStorage
    {
        
        /// <summary>
        /// _accumulatorTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap> _accumulatorTypedStorage;
        
        /// <summary>
        /// _oraclesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32>> _oraclesTypedStorage;
        
        /// <summary>
        /// _whitelistedAssetsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2> _whitelistedAssetsTypedStorage;
        
        /// <summary>
        /// EmaOracleStorage constructor.
        /// </summary>
        public EmaOracleStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AccumulatorTypedStorage = new TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap>("EmaOracle.Accumulator", storageDataProvider, storageChangeDelegates);
            this.OraclesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32>>("EmaOracle.Oracles", storageDataProvider, storageChangeDelegates);
            this.WhitelistedAssetsTypedStorage = new TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2>("EmaOracle.WhitelistedAssets", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _accumulatorTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap> AccumulatorTypedStorage
        {
            get
            {
                return _accumulatorTypedStorage;
            }
            set
            {
                _accumulatorTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _oraclesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32>> OraclesTypedStorage
        {
            get
            {
                return _oraclesTypedStorage;
            }
            set
            {
                _oraclesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _whitelistedAssetsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2> WhitelistedAssetsTypedStorage
        {
            get
            {
                return _whitelistedAssetsTypedStorage;
            }
            set
            {
                _whitelistedAssetsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AccumulatorTypedStorage.InitializeAsync("EmaOracle", "Accumulator");
            await OraclesTypedStorage.InitializeAsync("EmaOracle", "Oracles");
            await WhitelistedAssetsTypedStorage.InitializeAsync("EmaOracle", "WhitelistedAssets");
        }
        
        /// <summary>
        /// Implements any storage change for EmaOracle.Accumulator
        /// </summary>
        [StorageChange("EmaOracle", "Accumulator")]
        public void OnUpdateAccumulator(string data)
        {
            AccumulatorTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Accumulator
        ///  Accumulator for oracle data in current block that will be recorded at the end of the block.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_map.BoundedBTreeMap GetAccumulator()
        {
            return AccumulatorTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for EmaOracle.Oracles
        /// </summary>
        [StorageChange("EmaOracle", "Oracles")]
        public void OnUpdateOracles(string key, string data)
        {
            OraclesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Oracles
        ///  Oracle storage keyed by data source, involved asset ids and the period length of the oracle.
        /// 
        ///  Stores the data entry as well as the block number when the oracle was first initialized.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32> GetOracles(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OraclesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.HydraDX.NET.NetApiExt.Generated.Model.pallet_ema_oracle.types.OracleEntry, Substrate.NetApi.Model.Types.Primitive.U32> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for EmaOracle.WhitelistedAssets
        /// </summary>
        [StorageChange("EmaOracle", "WhitelistedAssets")]
        public void OnUpdateWhitelistedAssets(string data)
        {
            WhitelistedAssetsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> WhitelistedAssets
        ///  Assets that are whitelisted and tracked by the pallet.
        /// </summary>
        public Substrate.HydraDX.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set.BoundedBTreeSetT2 GetWhitelistedAssets()
        {
            return WhitelistedAssetsTypedStorage.Get();
        }
    }
}
