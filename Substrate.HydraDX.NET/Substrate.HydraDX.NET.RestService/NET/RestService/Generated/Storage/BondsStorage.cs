//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.HydraDX.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBondsStorage interface definition.
    /// </summary>
    public interface IBondsStorage : IStorage
    {
        
        /// <summary>
        /// >> BondIds
        ///  Registered bond ids.
        ///  Maps (underlying asset ID, maturity) -> bond ID
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetBondIds(string key);
        
        /// <summary>
        /// >> Bonds
        ///  Registered bonds.
        ///  Maps bond ID -> (underlying asset ID, maturity)
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64> GetBonds(string key);
    }
    
    /// <summary>
    /// BondsStorage class definition.
    /// </summary>
    public sealed class BondsStorage : IBondsStorage
    {
        
        /// <summary>
        /// _bondIdsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _bondIdsTypedStorage;
        
        /// <summary>
        /// _bondsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64>> _bondsTypedStorage;
        
        /// <summary>
        /// BondsStorage constructor.
        /// </summary>
        public BondsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.BondIdsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Bonds.BondIds", storageDataProvider, storageChangeDelegates);
            this.BondsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64>>("Bonds.Bonds", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _bondIdsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> BondIdsTypedStorage
        {
            get
            {
                return _bondIdsTypedStorage;
            }
            set
            {
                _bondIdsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bondsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64>> BondsTypedStorage
        {
            get
            {
                return _bondsTypedStorage;
            }
            set
            {
                _bondsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await BondIdsTypedStorage.InitializeAsync("Bonds", "BondIds");
            await BondsTypedStorage.InitializeAsync("Bonds", "Bonds");
        }
        
        /// <summary>
        /// Implements any storage change for Bonds.BondIds
        /// </summary>
        [StorageChange("Bonds", "BondIds")]
        public void OnUpdateBondIds(string key, string data)
        {
            BondIdsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BondIds
        ///  Registered bond ids.
        ///  Maps (underlying asset ID, maturity) -> bond ID
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetBondIds(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BondIdsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Bonds.Bonds
        /// </summary>
        [StorageChange("Bonds", "Bonds")]
        public void OnUpdateBonds(string key, string data)
        {
            BondsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Bonds
        ///  Registered bonds.
        ///  Maps bond ID -> (underlying asset ID, maturity)
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64> GetBonds(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BondsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U64> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
